package org.apache.commons.collections4.map;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.lang.Throwable throwable8 = null;
        org.apache.commons.collections4.FunctorException functorException9 = new org.apache.commons.collections4.FunctorException("", throwable8);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("", throwable16);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean20 = exceptionMap18.containsValue((java.lang.Object) exceptionMap19);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection24 = exceptionMap23.values();
        int int25 = exceptionMap23.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection28 = exceptionMap27.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean38 = exceptionMap36.containsValue((java.lang.Object) exceptionMap37);
        int int39 = exceptionMap37.size();
        java.lang.Throwable throwable48 = null;
        org.apache.commons.collections4.FunctorException functorException49 = new org.apache.commons.collections4.FunctorException("", throwable48);
        org.apache.commons.collections4.FunctorException functorException50 = new org.apache.commons.collections4.FunctorException("", throwable48);
        java.io.Serializable[] serializableArray51 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable16, exceptionMap18, 0L, 0L, exceptionMap23, 0, exceptionMap27, exceptionMap29, (short) 1, ' ', "hi!", 100.0f, int39, false, 10.0f, '4', (-1), 1L, 1, throwable48 };
        java.util.ArrayList<java.io.Serializable> serializableList52 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList52, serializableArray51);
        boolean boolean54 = exceptionMap4.putAll((java.lang.Exception) functorException9, (java.util.Collection<java.io.Serializable>) serializableList52);
        boolean boolean56 = exceptionMap1.removeMapping((java.lang.Exception) functorException9, (java.io.Serializable) (-1.0f));
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor57 = exceptionMap1.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Exception exception58 = exceptionItor57.getKey();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(serializableArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(exceptionItor57);
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.collections4.FunctorException functorException2 = new org.apache.commons.collections4.FunctorException("", throwable1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean5 = exceptionMap3.containsValue((java.lang.Object) exceptionMap4);
        java.lang.Throwable throwable7 = null;
        org.apache.commons.collections4.FunctorException functorException8 = new org.apache.commons.collections4.FunctorException("", throwable7);
        java.lang.Throwable throwable15 = null;
        org.apache.commons.collections4.FunctorException functorException16 = new org.apache.commons.collections4.FunctorException("", throwable15);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean19 = exceptionMap17.containsValue((java.lang.Object) exceptionMap18);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap22 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection23 = exceptionMap22.values();
        int int24 = exceptionMap22.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap26 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection27 = exceptionMap26.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap28 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean30 = exceptionMap28.containsValue((java.lang.Object) exceptionMap29);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap35 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean37 = exceptionMap35.containsValue((java.lang.Object) exceptionMap36);
        int int38 = exceptionMap36.size();
        java.lang.Throwable throwable47 = null;
        org.apache.commons.collections4.FunctorException functorException48 = new org.apache.commons.collections4.FunctorException("", throwable47);
        org.apache.commons.collections4.FunctorException functorException49 = new org.apache.commons.collections4.FunctorException("", throwable47);
        java.io.Serializable[] serializableArray50 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable15, exceptionMap17, 0L, 0L, exceptionMap22, 0, exceptionMap26, exceptionMap28, (short) 1, ' ', "hi!", 100.0f, int38, false, 10.0f, '4', (-1), 1L, 1, throwable47 };
        java.util.ArrayList<java.io.Serializable> serializableList51 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList51, serializableArray50);
        boolean boolean53 = exceptionMap3.putAll((java.lang.Exception) functorException8, (java.util.Collection<java.io.Serializable>) serializableList51);
        functorException2.addSuppressed((java.lang.Throwable) functorException8);
        java.lang.Throwable throwable55 = null;
        // The following exception was thrown during execution in test generation
        try {
            functorException2.addSuppressed(throwable55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objCollection27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(serializableArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.lang.Throwable throwable8 = null;
        org.apache.commons.collections4.FunctorException functorException9 = new org.apache.commons.collections4.FunctorException("", throwable8);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("", throwable16);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean20 = exceptionMap18.containsValue((java.lang.Object) exceptionMap19);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection24 = exceptionMap23.values();
        int int25 = exceptionMap23.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection28 = exceptionMap27.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean38 = exceptionMap36.containsValue((java.lang.Object) exceptionMap37);
        int int39 = exceptionMap37.size();
        java.lang.Throwable throwable48 = null;
        org.apache.commons.collections4.FunctorException functorException49 = new org.apache.commons.collections4.FunctorException("", throwable48);
        org.apache.commons.collections4.FunctorException functorException50 = new org.apache.commons.collections4.FunctorException("", throwable48);
        java.io.Serializable[] serializableArray51 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable16, exceptionMap18, 0L, 0L, exceptionMap23, 0, exceptionMap27, exceptionMap29, (short) 1, ' ', "hi!", 100.0f, int39, false, 10.0f, '4', (-1), 1L, 1, throwable48 };
        java.util.ArrayList<java.io.Serializable> serializableList52 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList52, serializableArray51);
        boolean boolean54 = exceptionMap4.putAll((java.lang.Exception) functorException9, (java.util.Collection<java.io.Serializable>) serializableList52);
        boolean boolean56 = exceptionMap1.removeMapping((java.lang.Exception) functorException9, (java.io.Serializable) (-1.0f));
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor57 = exceptionMap1.mapIterator();
        boolean boolean58 = exceptionItor57.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Exception exception59 = exceptionItor57.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(serializableArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(exceptionItor57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection1 = exceptionMap0.values();
        boolean boolean2 = exceptionMap0.isEmpty();
        java.lang.Throwable throwable4 = null;
        org.apache.commons.collections4.FunctorException functorException5 = new org.apache.commons.collections4.FunctorException("", throwable4);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap7 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean8 = exceptionMap6.containsValue((java.lang.Object) exceptionMap7);
        java.lang.Throwable throwable10 = null;
        org.apache.commons.collections4.FunctorException functorException11 = new org.apache.commons.collections4.FunctorException("", throwable10);
        java.lang.Throwable throwable18 = null;
        org.apache.commons.collections4.FunctorException functorException19 = new org.apache.commons.collections4.FunctorException("", throwable18);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean22 = exceptionMap20.containsValue((java.lang.Object) exceptionMap21);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection26 = exceptionMap25.values();
        int int27 = exceptionMap25.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection30 = exceptionMap29.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean33 = exceptionMap31.containsValue((java.lang.Object) exceptionMap32);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap38 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap39 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean40 = exceptionMap38.containsValue((java.lang.Object) exceptionMap39);
        int int41 = exceptionMap39.size();
        java.lang.Throwable throwable50 = null;
        org.apache.commons.collections4.FunctorException functorException51 = new org.apache.commons.collections4.FunctorException("", throwable50);
        org.apache.commons.collections4.FunctorException functorException52 = new org.apache.commons.collections4.FunctorException("", throwable50);
        java.io.Serializable[] serializableArray53 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable18, exceptionMap20, 0L, 0L, exceptionMap25, 0, exceptionMap29, exceptionMap31, (short) 1, ' ', "hi!", 100.0f, int41, false, 10.0f, '4', (-1), 1L, 1, throwable50 };
        java.util.ArrayList<java.io.Serializable> serializableList54 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList54, serializableArray53);
        boolean boolean56 = exceptionMap6.putAll((java.lang.Exception) functorException11, (java.util.Collection<java.io.Serializable>) serializableList54);
        functorException5.addSuppressed((java.lang.Throwable) functorException11);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap58 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap59 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean60 = exceptionMap58.containsValue((java.lang.Object) exceptionMap59);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet61 = exceptionMap59.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap62 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap63 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean64 = exceptionMap62.containsValue((java.lang.Object) exceptionMap63);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet65 = exceptionMap63.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap66 = exceptionMap63.map;
        int int67 = exceptionMap66.size();
        java.lang.Object obj68 = exceptionMap59.remove((java.lang.Object) int67);
        java.lang.Throwable throwable71 = null;
        org.apache.commons.collections4.FunctorException functorException72 = new org.apache.commons.collections4.FunctorException("", throwable71);
        org.apache.commons.collections4.FunctorException functorException73 = new org.apache.commons.collections4.FunctorException("", throwable71);
        org.apache.commons.collections4.FunctorException functorException75 = new org.apache.commons.collections4.FunctorException("");
        functorException73.addSuppressed((java.lang.Throwable) functorException75);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap77 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap78 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean79 = exceptionMap77.containsValue((java.lang.Object) exceptionMap78);
        boolean boolean81 = exceptionMap78.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection83 = exceptionMap78.createCollection(10);
        boolean boolean84 = exceptionMap59.putAll((java.lang.Exception) functorException75, serializableCollection83);
        boolean boolean85 = exceptionMap0.putAll((java.lang.Exception) functorException11, serializableCollection83);
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objCollection26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(serializableArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet65);
        org.junit.Assert.assertNotNull(exceptionMap66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(serializableCollection83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.lang.Throwable throwable8 = null;
        org.apache.commons.collections4.FunctorException functorException9 = new org.apache.commons.collections4.FunctorException("", throwable8);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("", throwable16);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean20 = exceptionMap18.containsValue((java.lang.Object) exceptionMap19);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection24 = exceptionMap23.values();
        int int25 = exceptionMap23.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection28 = exceptionMap27.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean38 = exceptionMap36.containsValue((java.lang.Object) exceptionMap37);
        int int39 = exceptionMap37.size();
        java.lang.Throwable throwable48 = null;
        org.apache.commons.collections4.FunctorException functorException49 = new org.apache.commons.collections4.FunctorException("", throwable48);
        org.apache.commons.collections4.FunctorException functorException50 = new org.apache.commons.collections4.FunctorException("", throwable48);
        java.io.Serializable[] serializableArray51 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable16, exceptionMap18, 0L, 0L, exceptionMap23, 0, exceptionMap27, exceptionMap29, (short) 1, ' ', "hi!", 100.0f, int39, false, 10.0f, '4', (-1), 1L, 1, throwable48 };
        java.util.ArrayList<java.io.Serializable> serializableList52 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList52, serializableArray51);
        boolean boolean54 = exceptionMap4.putAll((java.lang.Exception) functorException9, (java.util.Collection<java.io.Serializable>) serializableList52);
        boolean boolean56 = exceptionMap1.removeMapping((java.lang.Exception) functorException9, (java.io.Serializable) (-1.0f));
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor57 = exceptionMap1.mapIterator();
        boolean boolean58 = exceptionItor57.hasNext();
        boolean boolean59 = exceptionItor57.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            exceptionItor57.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(serializableArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(exceptionItor57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.collections4.FunctorException functorException2 = new org.apache.commons.collections4.FunctorException("", throwable1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean5 = exceptionMap3.containsValue((java.lang.Object) exceptionMap4);
        java.lang.Throwable throwable7 = null;
        org.apache.commons.collections4.FunctorException functorException8 = new org.apache.commons.collections4.FunctorException("", throwable7);
        java.lang.Throwable throwable15 = null;
        org.apache.commons.collections4.FunctorException functorException16 = new org.apache.commons.collections4.FunctorException("", throwable15);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean19 = exceptionMap17.containsValue((java.lang.Object) exceptionMap18);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap22 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection23 = exceptionMap22.values();
        int int24 = exceptionMap22.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap26 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection27 = exceptionMap26.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap28 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean30 = exceptionMap28.containsValue((java.lang.Object) exceptionMap29);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap35 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean37 = exceptionMap35.containsValue((java.lang.Object) exceptionMap36);
        int int38 = exceptionMap36.size();
        java.lang.Throwable throwable47 = null;
        org.apache.commons.collections4.FunctorException functorException48 = new org.apache.commons.collections4.FunctorException("", throwable47);
        org.apache.commons.collections4.FunctorException functorException49 = new org.apache.commons.collections4.FunctorException("", throwable47);
        java.io.Serializable[] serializableArray50 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable15, exceptionMap17, 0L, 0L, exceptionMap22, 0, exceptionMap26, exceptionMap28, (short) 1, ' ', "hi!", 100.0f, int38, false, 10.0f, '4', (-1), 1L, 1, throwable47 };
        java.util.ArrayList<java.io.Serializable> serializableList51 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList51, serializableArray50);
        boolean boolean53 = exceptionMap3.putAll((java.lang.Exception) functorException8, (java.util.Collection<java.io.Serializable>) serializableList51);
        functorException2.addSuppressed((java.lang.Throwable) functorException8);
        org.apache.commons.collections4.FunctorException functorException55 = new org.apache.commons.collections4.FunctorException((java.lang.Throwable) functorException8);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objCollection27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(serializableArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        boolean boolean4 = exceptionMap1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        boolean boolean5 = exceptionMap1.containsKey((java.lang.Object) (byte) 1);
        java.lang.Throwable throwable8 = null;
        org.apache.commons.collections4.FunctorException functorException9 = new org.apache.commons.collections4.FunctorException("", throwable8);
        org.apache.commons.collections4.FunctorException functorException10 = new org.apache.commons.collections4.FunctorException("", throwable8);
        org.apache.commons.collections4.FunctorException functorException12 = new org.apache.commons.collections4.FunctorException("");
        functorException10.addSuppressed((java.lang.Throwable) functorException12);
        boolean boolean15 = exceptionMap1.removeMapping((java.lang.Exception) functorException12, (java.io.Serializable) 1);
        java.lang.Exception exception16 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean19 = exceptionMap17.containsValue((java.lang.Object) exceptionMap18);
        boolean boolean21 = exceptionMap18.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection23 = exceptionMap18.createCollection(10);
        boolean boolean24 = exceptionMap1.putAll(exception16, serializableCollection23);
        java.lang.Class<?> wildcardClass25 = exceptionMap1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(serializableCollection23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.lang.Throwable throwable8 = null;
        org.apache.commons.collections4.FunctorException functorException9 = new org.apache.commons.collections4.FunctorException("", throwable8);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("", throwable16);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean20 = exceptionMap18.containsValue((java.lang.Object) exceptionMap19);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection24 = exceptionMap23.values();
        int int25 = exceptionMap23.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection28 = exceptionMap27.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean38 = exceptionMap36.containsValue((java.lang.Object) exceptionMap37);
        int int39 = exceptionMap37.size();
        java.lang.Throwable throwable48 = null;
        org.apache.commons.collections4.FunctorException functorException49 = new org.apache.commons.collections4.FunctorException("", throwable48);
        org.apache.commons.collections4.FunctorException functorException50 = new org.apache.commons.collections4.FunctorException("", throwable48);
        java.io.Serializable[] serializableArray51 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable16, exceptionMap18, 0L, 0L, exceptionMap23, 0, exceptionMap27, exceptionMap29, (short) 1, ' ', "hi!", 100.0f, int39, false, 10.0f, '4', (-1), 1L, 1, throwable48 };
        java.util.ArrayList<java.io.Serializable> serializableList52 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList52, serializableArray51);
        boolean boolean54 = exceptionMap4.putAll((java.lang.Exception) functorException9, (java.util.Collection<java.io.Serializable>) serializableList52);
        boolean boolean56 = exceptionMap1.removeMapping((java.lang.Exception) functorException9, (java.io.Serializable) (-1.0f));
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor57 = exceptionMap1.mapIterator();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap58 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap59 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean60 = exceptionMap58.containsValue((java.lang.Object) exceptionMap59);
        int int61 = exceptionMap59.size();
        java.util.Collection<java.lang.Object> objCollection62 = exceptionMap59.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap63 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap64 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean65 = exceptionMap63.containsValue((java.lang.Object) exceptionMap64);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet66 = exceptionMap64.entrySet();
        exceptionMap59.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap64);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap68 = exceptionMap64.decorated();
        java.lang.Object obj69 = exceptionMap1.get((java.lang.Object) exceptionMap64);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(serializableArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(exceptionItor57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(objCollection62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet66);
        org.junit.Assert.assertNotNull(exceptionMap68);
        org.junit.Assert.assertNull(obj69);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Throwable throwable13 = null;
        org.apache.commons.collections4.FunctorException functorException14 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException15 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("");
        functorException15.addSuppressed((java.lang.Throwable) functorException17);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean21 = exceptionMap19.containsValue((java.lang.Object) exceptionMap20);
        boolean boolean23 = exceptionMap20.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection25 = exceptionMap20.createCollection(10);
        boolean boolean26 = exceptionMap1.putAll((java.lang.Exception) functorException17, serializableCollection25);
        java.lang.Object obj27 = null;
        boolean boolean28 = exceptionMap1.containsValue(obj27);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet32 = exceptionMap30.entrySet();
        exceptionMap30.clear();
        boolean boolean34 = exceptionMap30.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap35 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection36 = exceptionMap35.values();
        int int37 = exceptionMap35.size();
        boolean boolean39 = exceptionMap35.containsValue((java.lang.Object) true);
        boolean boolean40 = exceptionMap30.containsValue((java.lang.Object) boolean39);
        java.util.Set<java.lang.Exception> exceptionSet41 = exceptionMap30.keySet();
        boolean boolean42 = exceptionMap1.containsValue((java.lang.Object) exceptionSet41);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap43 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection44 = exceptionMap43.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet45 = exceptionMap43.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap46 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection47 = exceptionMap46.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet48 = exceptionMap46.entrySet();
        boolean boolean50 = exceptionMap43.remove((java.lang.Object) exceptionEntrySet48, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap51 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap52 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean53 = exceptionMap51.containsValue((java.lang.Object) exceptionMap52);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet54 = exceptionMap52.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap55 = exceptionMap52.map;
        int int56 = exceptionMap55.size();
        boolean boolean57 = exceptionMap43.containsKey((java.lang.Object) exceptionMap55);
        boolean boolean59 = exceptionMap43.equals((java.lang.Object) 0.0d);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap60 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap61 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean62 = exceptionMap60.containsValue((java.lang.Object) exceptionMap61);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet63 = exceptionMap61.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap64 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap65 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean66 = exceptionMap64.containsValue((java.lang.Object) exceptionMap65);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet67 = exceptionMap65.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap68 = exceptionMap65.map;
        int int69 = exceptionMap68.size();
        java.lang.Object obj70 = exceptionMap61.remove((java.lang.Object) int69);
        java.lang.Throwable throwable73 = null;
        org.apache.commons.collections4.FunctorException functorException74 = new org.apache.commons.collections4.FunctorException("", throwable73);
        org.apache.commons.collections4.FunctorException functorException75 = new org.apache.commons.collections4.FunctorException("", throwable73);
        org.apache.commons.collections4.FunctorException functorException77 = new org.apache.commons.collections4.FunctorException("");
        functorException75.addSuppressed((java.lang.Throwable) functorException77);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap79 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap80 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean81 = exceptionMap79.containsValue((java.lang.Object) exceptionMap80);
        boolean boolean83 = exceptionMap80.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection85 = exceptionMap80.createCollection(10);
        boolean boolean86 = exceptionMap61.putAll((java.lang.Exception) functorException77, serializableCollection85);
        boolean boolean87 = exceptionMap43.containsValue((java.lang.Object) serializableCollection85);
        java.util.Collection<java.io.Serializable> serializableCollection88 = exceptionMap1.getCollection((java.lang.Object) exceptionMap43);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap89 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap90 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean91 = exceptionMap89.containsValue((java.lang.Object) exceptionMap90);
        int int92 = exceptionMap90.size();
        java.util.Collection<java.lang.Object> objCollection93 = exceptionMap90.values();
        java.util.Collection<java.io.Serializable> serializableCollection94 = exceptionMap43.getCollection((java.lang.Object) objCollection93);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objCollection36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(exceptionSet41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertNotNull(exceptionEntrySet45);
        org.junit.Assert.assertNotNull(objCollection47);
        org.junit.Assert.assertNotNull(exceptionEntrySet48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet54);
        org.junit.Assert.assertNotNull(exceptionMap55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet67);
        org.junit.Assert.assertNotNull(exceptionMap68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(serializableCollection85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(serializableCollection88);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(objCollection93);
        org.junit.Assert.assertNull(serializableCollection94);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        boolean boolean5 = exceptionMap1.containsKey((java.lang.Object) (byte) 1);
        java.lang.Throwable throwable8 = null;
        org.apache.commons.collections4.FunctorException functorException9 = new org.apache.commons.collections4.FunctorException("", throwable8);
        org.apache.commons.collections4.FunctorException functorException10 = new org.apache.commons.collections4.FunctorException("", throwable8);
        org.apache.commons.collections4.FunctorException functorException12 = new org.apache.commons.collections4.FunctorException("");
        functorException10.addSuppressed((java.lang.Throwable) functorException12);
        boolean boolean15 = exceptionMap1.removeMapping((java.lang.Exception) functorException12, (java.io.Serializable) 1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet16 = exceptionMap1.entrySet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet16);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj7 = exceptionMap5.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable9 = null;
        org.apache.commons.collections4.FunctorException functorException10 = new org.apache.commons.collections4.FunctorException(throwable9);
        org.apache.commons.collections4.FunctorException functorException11 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException10);
        boolean boolean13 = exceptionMap5.removeMapping((java.lang.Exception) functorException10, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet14 = exceptionMap5.keySet();
        boolean boolean15 = exceptionMap1.equals((java.lang.Object) exceptionSet14);
        java.util.Iterator<java.util.Map.Entry<java.lang.Exception, java.io.Serializable>> exceptionEntryItor16 = exceptionMap1.iterator();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(exceptionSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(exceptionEntryItor16);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.lang.Throwable throwable8 = null;
        org.apache.commons.collections4.FunctorException functorException9 = new org.apache.commons.collections4.FunctorException("", throwable8);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("", throwable16);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean20 = exceptionMap18.containsValue((java.lang.Object) exceptionMap19);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection24 = exceptionMap23.values();
        int int25 = exceptionMap23.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection28 = exceptionMap27.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean38 = exceptionMap36.containsValue((java.lang.Object) exceptionMap37);
        int int39 = exceptionMap37.size();
        java.lang.Throwable throwable48 = null;
        org.apache.commons.collections4.FunctorException functorException49 = new org.apache.commons.collections4.FunctorException("", throwable48);
        org.apache.commons.collections4.FunctorException functorException50 = new org.apache.commons.collections4.FunctorException("", throwable48);
        java.io.Serializable[] serializableArray51 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable16, exceptionMap18, 0L, 0L, exceptionMap23, 0, exceptionMap27, exceptionMap29, (short) 1, ' ', "hi!", 100.0f, int39, false, 10.0f, '4', (-1), 1L, 1, throwable48 };
        java.util.ArrayList<java.io.Serializable> serializableList52 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList52, serializableArray51);
        boolean boolean54 = exceptionMap4.putAll((java.lang.Exception) functorException9, (java.util.Collection<java.io.Serializable>) serializableList52);
        boolean boolean56 = exceptionMap1.removeMapping((java.lang.Exception) functorException9, (java.io.Serializable) (-1.0f));
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap57 = exceptionMap1.map;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(serializableArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(exceptionMap57);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection1 = exceptionMap0.values();
        int int2 = exceptionMap0.size();
        int int4 = exceptionMap0.size((java.lang.Object) (byte) 0);
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        exceptionMap1.clear();
        boolean boolean5 = exceptionMap1.isEmpty();
        java.lang.Throwable throwable7 = null;
        org.apache.commons.collections4.FunctorException functorException8 = new org.apache.commons.collections4.FunctorException(throwable7);
        org.apache.commons.collections4.FunctorException functorException9 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException8);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap10 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap11 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean12 = exceptionMap10.containsValue((java.lang.Object) exceptionMap11);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean15 = exceptionMap13.containsValue((java.lang.Object) exceptionMap14);
        exceptionMap11.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap14);
        java.lang.Object obj17 = exceptionMap1.put((java.lang.Exception) functorException9, (java.lang.Object) exceptionMap14);
        java.lang.String str18 = functorException9.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "{}");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org.apache.commons.collections4.FunctorException: hi!" + "'", str18, "org.apache.commons.collections4.FunctorException: hi!");
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        exceptionMap0.clear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap6);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor10 = exceptionMap6.mapIterator();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap11 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj13 = exceptionMap11.get((java.lang.Object) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj14 = exceptionItor10.setValue((java.lang.Object) exceptionMap11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertNotNull(exceptionItor10);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        exceptionMap1.clear();
        java.lang.Throwable throwable7 = null;
        org.apache.commons.collections4.FunctorException functorException8 = new org.apache.commons.collections4.FunctorException("", throwable7);
        int int9 = exceptionMap1.size((java.lang.Object) functorException8);
        java.lang.String str10 = functorException8.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.apache.commons.collections4.FunctorException: " + "'", str10, "org.apache.commons.collections4.FunctorException: ");
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Throwable throwable13 = null;
        org.apache.commons.collections4.FunctorException functorException14 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException15 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("");
        functorException15.addSuppressed((java.lang.Throwable) functorException17);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean21 = exceptionMap19.containsValue((java.lang.Object) exceptionMap20);
        boolean boolean23 = exceptionMap20.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection25 = exceptionMap20.createCollection(10);
        boolean boolean26 = exceptionMap1.putAll((java.lang.Exception) functorException17, serializableCollection25);
        java.lang.Object obj27 = null;
        boolean boolean28 = exceptionMap1.containsValue(obj27);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet32 = exceptionMap30.entrySet();
        exceptionMap30.clear();
        boolean boolean34 = exceptionMap30.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap35 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection36 = exceptionMap35.values();
        int int37 = exceptionMap35.size();
        boolean boolean39 = exceptionMap35.containsValue((java.lang.Object) true);
        boolean boolean40 = exceptionMap30.containsValue((java.lang.Object) boolean39);
        java.util.Set<java.lang.Exception> exceptionSet41 = exceptionMap30.keySet();
        boolean boolean42 = exceptionMap1.containsValue((java.lang.Object) exceptionSet41);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap43 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection44 = exceptionMap43.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet45 = exceptionMap43.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap46 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection47 = exceptionMap46.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet48 = exceptionMap46.entrySet();
        boolean boolean50 = exceptionMap43.remove((java.lang.Object) exceptionEntrySet48, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap51 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap52 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean53 = exceptionMap51.containsValue((java.lang.Object) exceptionMap52);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet54 = exceptionMap52.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap55 = exceptionMap52.map;
        int int56 = exceptionMap55.size();
        boolean boolean57 = exceptionMap43.containsKey((java.lang.Object) exceptionMap55);
        boolean boolean59 = exceptionMap43.equals((java.lang.Object) 0.0d);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap60 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap61 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean62 = exceptionMap60.containsValue((java.lang.Object) exceptionMap61);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet63 = exceptionMap61.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap64 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap65 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean66 = exceptionMap64.containsValue((java.lang.Object) exceptionMap65);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet67 = exceptionMap65.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap68 = exceptionMap65.map;
        int int69 = exceptionMap68.size();
        java.lang.Object obj70 = exceptionMap61.remove((java.lang.Object) int69);
        java.lang.Throwable throwable73 = null;
        org.apache.commons.collections4.FunctorException functorException74 = new org.apache.commons.collections4.FunctorException("", throwable73);
        org.apache.commons.collections4.FunctorException functorException75 = new org.apache.commons.collections4.FunctorException("", throwable73);
        org.apache.commons.collections4.FunctorException functorException77 = new org.apache.commons.collections4.FunctorException("");
        functorException75.addSuppressed((java.lang.Throwable) functorException77);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap79 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap80 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean81 = exceptionMap79.containsValue((java.lang.Object) exceptionMap80);
        boolean boolean83 = exceptionMap80.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection85 = exceptionMap80.createCollection(10);
        boolean boolean86 = exceptionMap61.putAll((java.lang.Exception) functorException77, serializableCollection85);
        boolean boolean87 = exceptionMap43.containsValue((java.lang.Object) serializableCollection85);
        java.util.Collection<java.io.Serializable> serializableCollection88 = exceptionMap1.getCollection((java.lang.Object) exceptionMap43);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor89 = exceptionMap43.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Exception exception90 = exceptionItor89.getKey();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objCollection36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(exceptionSet41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertNotNull(exceptionEntrySet45);
        org.junit.Assert.assertNotNull(objCollection47);
        org.junit.Assert.assertNotNull(exceptionEntrySet48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet54);
        org.junit.Assert.assertNotNull(exceptionMap55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet67);
        org.junit.Assert.assertNotNull(exceptionMap68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(serializableCollection85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(serializableCollection88);
        org.junit.Assert.assertNotNull(exceptionItor89);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj2 = exceptionMap0.get((java.lang.Object) (-1L));
        java.lang.Object obj3 = null;
        boolean boolean4 = exceptionMap0.containsKey(obj3);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Throwable throwable13 = null;
        org.apache.commons.collections4.FunctorException functorException14 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException15 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("");
        functorException15.addSuppressed((java.lang.Throwable) functorException17);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean21 = exceptionMap19.containsValue((java.lang.Object) exceptionMap20);
        boolean boolean23 = exceptionMap20.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection25 = exceptionMap20.createCollection(10);
        boolean boolean26 = exceptionMap1.putAll((java.lang.Exception) functorException17, serializableCollection25);
        java.lang.Object obj27 = null;
        boolean boolean28 = exceptionMap1.containsValue(obj27);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet32 = exceptionMap30.entrySet();
        exceptionMap30.clear();
        boolean boolean34 = exceptionMap30.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap35 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection36 = exceptionMap35.values();
        int int37 = exceptionMap35.size();
        boolean boolean39 = exceptionMap35.containsValue((java.lang.Object) true);
        boolean boolean40 = exceptionMap30.containsValue((java.lang.Object) boolean39);
        java.util.Set<java.lang.Exception> exceptionSet41 = exceptionMap30.keySet();
        boolean boolean42 = exceptionMap1.containsValue((java.lang.Object) exceptionSet41);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap43 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection44 = exceptionMap43.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet45 = exceptionMap43.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap46 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection47 = exceptionMap46.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet48 = exceptionMap46.entrySet();
        boolean boolean50 = exceptionMap43.remove((java.lang.Object) exceptionEntrySet48, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap51 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap52 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean53 = exceptionMap51.containsValue((java.lang.Object) exceptionMap52);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet54 = exceptionMap52.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap55 = exceptionMap52.map;
        int int56 = exceptionMap55.size();
        boolean boolean57 = exceptionMap43.containsKey((java.lang.Object) exceptionMap55);
        boolean boolean59 = exceptionMap43.equals((java.lang.Object) 0.0d);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap60 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap61 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean62 = exceptionMap60.containsValue((java.lang.Object) exceptionMap61);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet63 = exceptionMap61.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap64 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap65 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean66 = exceptionMap64.containsValue((java.lang.Object) exceptionMap65);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet67 = exceptionMap65.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap68 = exceptionMap65.map;
        int int69 = exceptionMap68.size();
        java.lang.Object obj70 = exceptionMap61.remove((java.lang.Object) int69);
        java.lang.Throwable throwable73 = null;
        org.apache.commons.collections4.FunctorException functorException74 = new org.apache.commons.collections4.FunctorException("", throwable73);
        org.apache.commons.collections4.FunctorException functorException75 = new org.apache.commons.collections4.FunctorException("", throwable73);
        org.apache.commons.collections4.FunctorException functorException77 = new org.apache.commons.collections4.FunctorException("");
        functorException75.addSuppressed((java.lang.Throwable) functorException77);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap79 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap80 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean81 = exceptionMap79.containsValue((java.lang.Object) exceptionMap80);
        boolean boolean83 = exceptionMap80.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection85 = exceptionMap80.createCollection(10);
        boolean boolean86 = exceptionMap61.putAll((java.lang.Exception) functorException77, serializableCollection85);
        boolean boolean87 = exceptionMap43.containsValue((java.lang.Object) serializableCollection85);
        java.util.Collection<java.io.Serializable> serializableCollection88 = exceptionMap1.getCollection((java.lang.Object) exceptionMap43);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor89 = exceptionMap43.mapIterator();
        java.lang.Object obj90 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj91 = exceptionItor89.setValue(obj90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objCollection36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(exceptionSet41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertNotNull(exceptionEntrySet45);
        org.junit.Assert.assertNotNull(objCollection47);
        org.junit.Assert.assertNotNull(exceptionEntrySet48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet54);
        org.junit.Assert.assertNotNull(exceptionMap55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet67);
        org.junit.Assert.assertNotNull(exceptionMap68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(serializableCollection85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(serializableCollection88);
        org.junit.Assert.assertNotNull(exceptionItor89);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        int int7 = exceptionMap5.size();
        java.util.Collection<java.lang.Object> objCollection8 = exceptionMap5.values();
        exceptionMap5.clear();
        java.lang.Throwable throwable11 = null;
        org.apache.commons.collections4.FunctorException functorException12 = new org.apache.commons.collections4.FunctorException("", throwable11);
        int int13 = exceptionMap5.size((java.lang.Object) functorException12);
        java.lang.Object obj14 = null;
        boolean boolean15 = exceptionMap5.containsValue(obj14);
        java.lang.Object obj16 = exceptionMap1.get((java.lang.Object) boolean15);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(objCollection8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        boolean boolean4 = exceptionMap1.containsKey((java.lang.Object) (short) 10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap10 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean11 = exceptionMap9.containsValue((java.lang.Object) exceptionMap10);
        int int12 = exceptionMap10.size();
        java.util.Collection<java.lang.Object> objCollection13 = exceptionMap10.values();
        java.util.Collection<java.lang.Object> objCollection14 = exceptionMap10.values();
        java.lang.Object obj15 = exceptionMap8.remove((java.lang.Object) objCollection14);
        java.lang.Object obj16 = exceptionMap5.get((java.lang.Object) objCollection14);
        boolean boolean17 = exceptionMap5.isEmpty();
        boolean boolean19 = exceptionMap1.containsValue((java.lang.Object) exceptionMap5, (java.lang.Object) (byte) 10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean22 = exceptionMap20.containsValue((java.lang.Object) exceptionMap21);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet23 = exceptionMap21.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean26 = exceptionMap24.containsValue((java.lang.Object) exceptionMap25);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet27 = exceptionMap25.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap28 = exceptionMap25.map;
        int int29 = exceptionMap28.size();
        java.lang.Object obj30 = exceptionMap21.remove((java.lang.Object) int29);
        java.lang.Object obj31 = null;
        boolean boolean32 = exceptionMap21.containsKey(obj31);
        java.lang.Object obj33 = null;
        boolean boolean34 = exceptionMap21.containsKey(obj33);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap35 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection36 = exceptionMap35.values();
        int int37 = exceptionMap35.size();
        boolean boolean39 = exceptionMap35.containsValue((java.lang.Object) true);
        boolean boolean40 = exceptionMap1.removeMapping(obj33, (java.lang.Object) boolean39);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objCollection13);
        org.junit.Assert.assertNotNull(objCollection14);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet27);
        org.junit.Assert.assertNotNull(exceptionMap28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objCollection36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        java.util.Collection<java.lang.Object> objCollection5 = exceptionMap1.values();
        int int6 = exceptionMap1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(objCollection5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.lang.Throwable throwable8 = null;
        org.apache.commons.collections4.FunctorException functorException9 = new org.apache.commons.collections4.FunctorException("", throwable8);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("", throwable16);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean20 = exceptionMap18.containsValue((java.lang.Object) exceptionMap19);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection24 = exceptionMap23.values();
        int int25 = exceptionMap23.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection28 = exceptionMap27.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean38 = exceptionMap36.containsValue((java.lang.Object) exceptionMap37);
        int int39 = exceptionMap37.size();
        java.lang.Throwable throwable48 = null;
        org.apache.commons.collections4.FunctorException functorException49 = new org.apache.commons.collections4.FunctorException("", throwable48);
        org.apache.commons.collections4.FunctorException functorException50 = new org.apache.commons.collections4.FunctorException("", throwable48);
        java.io.Serializable[] serializableArray51 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable16, exceptionMap18, 0L, 0L, exceptionMap23, 0, exceptionMap27, exceptionMap29, (short) 1, ' ', "hi!", 100.0f, int39, false, 10.0f, '4', (-1), 1L, 1, throwable48 };
        java.util.ArrayList<java.io.Serializable> serializableList52 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList52, serializableArray51);
        boolean boolean54 = exceptionMap4.putAll((java.lang.Exception) functorException9, (java.util.Collection<java.io.Serializable>) serializableList52);
        boolean boolean56 = exceptionMap1.removeMapping((java.lang.Exception) functorException9, (java.io.Serializable) (-1.0f));
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor57 = exceptionMap1.mapIterator();
        boolean boolean58 = exceptionItor57.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj59 = exceptionItor57.getValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(serializableArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(exceptionItor57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap2 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean3 = exceptionMap1.containsValue((java.lang.Object) exceptionMap2);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet4 = exceptionMap2.entrySet();
        exceptionMap2.clear();
        boolean boolean6 = exceptionMap2.isEmpty();
        java.lang.Throwable throwable8 = null;
        org.apache.commons.collections4.FunctorException functorException9 = new org.apache.commons.collections4.FunctorException(throwable8);
        org.apache.commons.collections4.FunctorException functorException10 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException9);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap11 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean13 = exceptionMap11.containsValue((java.lang.Object) exceptionMap12);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap15 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean16 = exceptionMap14.containsValue((java.lang.Object) exceptionMap15);
        exceptionMap12.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap15);
        java.lang.Object obj18 = exceptionMap2.put((java.lang.Exception) functorException10, (java.lang.Object) exceptionMap15);
        org.apache.commons.collections4.FunctorException functorException19 = new org.apache.commons.collections4.FunctorException("org.apache.commons.collections4.FunctorException: ", (java.lang.Throwable) functorException10);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{}");
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap2 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean3 = exceptionMap1.containsValue((java.lang.Object) exceptionMap2);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet4 = exceptionMap2.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap9 = exceptionMap6.map;
        int int10 = exceptionMap9.size();
        java.lang.Object obj11 = exceptionMap2.remove((java.lang.Object) int10);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.collections4.FunctorException functorException15 = new org.apache.commons.collections4.FunctorException("", throwable14);
        org.apache.commons.collections4.FunctorException functorException16 = new org.apache.commons.collections4.FunctorException("", throwable14);
        org.apache.commons.collections4.FunctorException functorException18 = new org.apache.commons.collections4.FunctorException("");
        functorException16.addSuppressed((java.lang.Throwable) functorException18);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean22 = exceptionMap20.containsValue((java.lang.Object) exceptionMap21);
        boolean boolean24 = exceptionMap21.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection26 = exceptionMap21.createCollection(10);
        boolean boolean27 = exceptionMap2.putAll((java.lang.Exception) functorException18, serializableCollection26);
        org.apache.commons.collections4.FunctorException functorException28 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException18);
        java.lang.Class<?> wildcardClass29 = functorException28.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertNotNull(exceptionMap9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(serializableCollection26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj2 = exceptionMap0.get((java.lang.Object) (-1L));
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor3 = exceptionMap0.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj4 = exceptionItor3.getValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(exceptionItor3);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj7 = exceptionMap5.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable9 = null;
        org.apache.commons.collections4.FunctorException functorException10 = new org.apache.commons.collections4.FunctorException(throwable9);
        org.apache.commons.collections4.FunctorException functorException11 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException10);
        boolean boolean13 = exceptionMap5.removeMapping((java.lang.Exception) functorException10, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet14 = exceptionMap5.keySet();
        boolean boolean15 = exceptionMap1.equals((java.lang.Object) exceptionSet14);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap16 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean18 = exceptionMap16.containsValue((java.lang.Object) exceptionMap17);
        int int19 = exceptionMap17.size();
        java.util.Collection<java.lang.Object> objCollection20 = exceptionMap17.values();
        exceptionMap17.clear();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap22 = exceptionMap17.map;
        java.util.Collection<java.io.Serializable> serializableCollection23 = exceptionMap1.getCollection((java.lang.Object) exceptionMap17);
        int int24 = exceptionMap1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(exceptionSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertNotNull(exceptionMap22);
        org.junit.Assert.assertNull(serializableCollection23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        exceptionMap1.clear();
        boolean boolean5 = exceptionMap1.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap7 = exceptionMap6.decorated();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean10 = exceptionMap8.containsValue((java.lang.Object) exceptionMap9);
        boolean boolean11 = exceptionMap7.containsValue((java.lang.Object) exceptionMap9);
        java.lang.Object obj12 = exceptionMap1.get((java.lang.Object) exceptionMap9);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap14 = exceptionMap13.decorated();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap15 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap16 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean17 = exceptionMap15.containsValue((java.lang.Object) exceptionMap16);
        boolean boolean18 = exceptionMap14.containsValue((java.lang.Object) exceptionMap16);
        boolean boolean19 = exceptionMap1.equals((java.lang.Object) boolean18);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(exceptionMap7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(exceptionMap14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.lang.Throwable throwable8 = null;
        org.apache.commons.collections4.FunctorException functorException9 = new org.apache.commons.collections4.FunctorException("", throwable8);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("", throwable16);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean20 = exceptionMap18.containsValue((java.lang.Object) exceptionMap19);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection24 = exceptionMap23.values();
        int int25 = exceptionMap23.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection28 = exceptionMap27.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean38 = exceptionMap36.containsValue((java.lang.Object) exceptionMap37);
        int int39 = exceptionMap37.size();
        java.lang.Throwable throwable48 = null;
        org.apache.commons.collections4.FunctorException functorException49 = new org.apache.commons.collections4.FunctorException("", throwable48);
        org.apache.commons.collections4.FunctorException functorException50 = new org.apache.commons.collections4.FunctorException("", throwable48);
        java.io.Serializable[] serializableArray51 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable16, exceptionMap18, 0L, 0L, exceptionMap23, 0, exceptionMap27, exceptionMap29, (short) 1, ' ', "hi!", 100.0f, int39, false, 10.0f, '4', (-1), 1L, 1, throwable48 };
        java.util.ArrayList<java.io.Serializable> serializableList52 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList52, serializableArray51);
        boolean boolean54 = exceptionMap4.putAll((java.lang.Exception) functorException9, (java.util.Collection<java.io.Serializable>) serializableList52);
        boolean boolean56 = exceptionMap1.removeMapping((java.lang.Exception) functorException9, (java.io.Serializable) (-1.0f));
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor57 = exceptionMap1.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj58 = exceptionItor57.getValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(serializableArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(exceptionItor57);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection1 = exceptionMap0.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet2 = exceptionMap0.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap3.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet5 = exceptionMap3.entrySet();
        boolean boolean7 = exceptionMap0.remove((java.lang.Object) exceptionEntrySet5, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean10 = exceptionMap8.containsValue((java.lang.Object) exceptionMap9);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet11 = exceptionMap9.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap12 = exceptionMap9.map;
        int int13 = exceptionMap12.size();
        boolean boolean14 = exceptionMap0.containsKey((java.lang.Object) exceptionMap12);
        boolean boolean16 = exceptionMap0.equals((java.lang.Object) 0.0d);
        int int17 = exceptionMap0.size();
        exceptionMap0.clear();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean22 = exceptionMap20.containsValue((java.lang.Object) exceptionMap21);
        boolean boolean24 = exceptionMap21.containsKey((java.lang.Object) (short) 10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap26 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean27 = exceptionMap25.containsValue((java.lang.Object) exceptionMap26);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap28 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        int int32 = exceptionMap30.size();
        java.util.Collection<java.lang.Object> objCollection33 = exceptionMap30.values();
        java.util.Collection<java.lang.Object> objCollection34 = exceptionMap30.values();
        java.lang.Object obj35 = exceptionMap28.remove((java.lang.Object) objCollection34);
        java.lang.Object obj36 = exceptionMap25.get((java.lang.Object) objCollection34);
        boolean boolean37 = exceptionMap25.isEmpty();
        boolean boolean39 = exceptionMap21.containsValue((java.lang.Object) exceptionMap25, (java.lang.Object) (byte) 10);
        java.lang.Object obj40 = exceptionMap0.getOrDefault((java.lang.Object) 100.0d, (java.lang.Object) exceptionMap21);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet41 = exceptionMap21.entrySet();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(exceptionEntrySet2);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(exceptionEntrySet5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet11);
        org.junit.Assert.assertNotNull(exceptionMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{}");
        org.junit.Assert.assertNotNull(exceptionEntrySet41);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Collection<java.lang.Object> objCollection3 = exceptionMap0.values();
        int int4 = exceptionMap0.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objCollection3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        boolean boolean5 = exceptionMap1.containsKey((java.lang.Object) (byte) 1);
        java.lang.Throwable throwable8 = null;
        org.apache.commons.collections4.FunctorException functorException9 = new org.apache.commons.collections4.FunctorException("", throwable8);
        org.apache.commons.collections4.FunctorException functorException10 = new org.apache.commons.collections4.FunctorException("", throwable8);
        org.apache.commons.collections4.FunctorException functorException12 = new org.apache.commons.collections4.FunctorException("");
        functorException10.addSuppressed((java.lang.Throwable) functorException12);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap15 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean16 = exceptionMap14.containsValue((java.lang.Object) exceptionMap15);
        boolean boolean18 = exceptionMap15.containsKey((java.lang.Object) (short) 10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean21 = exceptionMap19.containsValue((java.lang.Object) exceptionMap20);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap22 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean25 = exceptionMap23.containsValue((java.lang.Object) exceptionMap24);
        int int26 = exceptionMap24.size();
        java.util.Collection<java.lang.Object> objCollection27 = exceptionMap24.values();
        java.util.Collection<java.lang.Object> objCollection28 = exceptionMap24.values();
        java.lang.Object obj29 = exceptionMap22.remove((java.lang.Object) objCollection28);
        java.lang.Object obj30 = exceptionMap19.get((java.lang.Object) objCollection28);
        boolean boolean31 = exceptionMap19.isEmpty();
        boolean boolean33 = exceptionMap15.containsValue((java.lang.Object) exceptionMap19, (java.lang.Object) (byte) 10);
        java.lang.Throwable throwable35 = null;
        org.apache.commons.collections4.FunctorException functorException36 = new org.apache.commons.collections4.FunctorException(throwable35);
        org.apache.commons.collections4.FunctorException functorException37 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException36);
        java.lang.Throwable throwable38 = null;
        org.apache.commons.collections4.FunctorException functorException39 = new org.apache.commons.collections4.FunctorException(throwable38);
        functorException37.addSuppressed((java.lang.Throwable) functorException39);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap41 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap42 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean43 = exceptionMap41.containsValue((java.lang.Object) exceptionMap42);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet44 = exceptionMap42.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap45 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap46 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean47 = exceptionMap45.containsValue((java.lang.Object) exceptionMap46);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet48 = exceptionMap46.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap49 = exceptionMap46.map;
        int int50 = exceptionMap49.size();
        java.lang.Object obj51 = exceptionMap42.remove((java.lang.Object) int50);
        java.lang.Exception exception52 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap53 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection54 = exceptionMap53.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet55 = exceptionMap53.entrySet();
        java.lang.Object obj56 = exceptionMap42.put(exception52, (java.lang.Object) exceptionEntrySet55);
        java.lang.Object obj57 = exceptionMap15.put((java.lang.Exception) functorException39, (java.lang.Object) exception52);
        boolean boolean58 = exceptionMap1.removeMapping((java.lang.Exception) functorException10, (java.io.Serializable) functorException39);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objCollection27);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet48);
        org.junit.Assert.assertNotNull(exceptionMap49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(objCollection54);
        org.junit.Assert.assertNotNull(exceptionEntrySet55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "[]");
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap6);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap10 = exceptionMap6.decorated();
        java.util.Set<java.lang.Exception> exceptionSet11 = exceptionMap6.keySet();
        java.util.Collection<java.io.Serializable> serializableCollection13 = exceptionMap6.createCollection(0);
        boolean boolean14 = exceptionMap6.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertNotNull(exceptionMap10);
        org.junit.Assert.assertNotNull(exceptionSet11);
        org.junit.Assert.assertNotNull(serializableCollection13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj2 = exceptionMap0.get((java.lang.Object) (-1L));
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor3 = exceptionMap0.mapIterator();
        int int4 = exceptionMap0.size();
        java.util.Iterator<java.util.Map.Entry<java.lang.Exception, java.io.Serializable>> exceptionEntryItor5 = exceptionMap0.iterator();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(exceptionItor3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(exceptionEntryItor5);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        boolean boolean4 = exceptionMap1.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection6 = exceptionMap1.createCollection(10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap7 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj9 = exceptionMap7.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable11 = null;
        org.apache.commons.collections4.FunctorException functorException12 = new org.apache.commons.collections4.FunctorException(throwable11);
        org.apache.commons.collections4.FunctorException functorException13 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException12);
        boolean boolean15 = exceptionMap7.removeMapping((java.lang.Exception) functorException12, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet16 = exceptionMap7.keySet();
        java.util.Collection<java.lang.Object> objCollection17 = exceptionMap7.values();
        boolean boolean18 = exceptionMap1.containsValue((java.lang.Object) exceptionMap7);
        boolean boolean19 = exceptionMap7.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(serializableCollection6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(exceptionSet16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.lang.Throwable throwable8 = null;
        org.apache.commons.collections4.FunctorException functorException9 = new org.apache.commons.collections4.FunctorException("", throwable8);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("", throwable16);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean20 = exceptionMap18.containsValue((java.lang.Object) exceptionMap19);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection24 = exceptionMap23.values();
        int int25 = exceptionMap23.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection28 = exceptionMap27.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean38 = exceptionMap36.containsValue((java.lang.Object) exceptionMap37);
        int int39 = exceptionMap37.size();
        java.lang.Throwable throwable48 = null;
        org.apache.commons.collections4.FunctorException functorException49 = new org.apache.commons.collections4.FunctorException("", throwable48);
        org.apache.commons.collections4.FunctorException functorException50 = new org.apache.commons.collections4.FunctorException("", throwable48);
        java.io.Serializable[] serializableArray51 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable16, exceptionMap18, 0L, 0L, exceptionMap23, 0, exceptionMap27, exceptionMap29, (short) 1, ' ', "hi!", 100.0f, int39, false, 10.0f, '4', (-1), 1L, 1, throwable48 };
        java.util.ArrayList<java.io.Serializable> serializableList52 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList52, serializableArray51);
        boolean boolean54 = exceptionMap4.putAll((java.lang.Exception) functorException9, (java.util.Collection<java.io.Serializable>) serializableList52);
        boolean boolean56 = exceptionMap1.removeMapping((java.lang.Exception) functorException9, (java.io.Serializable) (-1.0f));
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor57 = exceptionMap1.mapIterator();
        boolean boolean58 = exceptionItor57.hasNext();
        boolean boolean59 = exceptionItor57.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Exception exception60 = exceptionItor57.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(serializableArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(exceptionItor57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection1 = exceptionMap0.values();
        int int2 = exceptionMap0.size();
        boolean boolean4 = exceptionMap0.containsValue((java.lang.Object) true);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap5 = exceptionMap0.map;
        java.lang.Throwable throwable7 = null;
        org.apache.commons.collections4.FunctorException functorException8 = new org.apache.commons.collections4.FunctorException("", throwable7);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap10 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean11 = exceptionMap9.containsValue((java.lang.Object) exceptionMap10);
        java.lang.Throwable throwable13 = null;
        org.apache.commons.collections4.FunctorException functorException14 = new org.apache.commons.collections4.FunctorException("", throwable13);
        java.lang.Throwable throwable21 = null;
        org.apache.commons.collections4.FunctorException functorException22 = new org.apache.commons.collections4.FunctorException("", throwable21);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean25 = exceptionMap23.containsValue((java.lang.Object) exceptionMap24);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap28 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection29 = exceptionMap28.values();
        int int30 = exceptionMap28.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection33 = exceptionMap32.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap34 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap35 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean36 = exceptionMap34.containsValue((java.lang.Object) exceptionMap35);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap41 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap42 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean43 = exceptionMap41.containsValue((java.lang.Object) exceptionMap42);
        int int44 = exceptionMap42.size();
        java.lang.Throwable throwable53 = null;
        org.apache.commons.collections4.FunctorException functorException54 = new org.apache.commons.collections4.FunctorException("", throwable53);
        org.apache.commons.collections4.FunctorException functorException55 = new org.apache.commons.collections4.FunctorException("", throwable53);
        java.io.Serializable[] serializableArray56 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable21, exceptionMap23, 0L, 0L, exceptionMap28, 0, exceptionMap32, exceptionMap34, (short) 1, ' ', "hi!", 100.0f, int44, false, 10.0f, '4', (-1), 1L, 1, throwable53 };
        java.util.ArrayList<java.io.Serializable> serializableList57 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList57, serializableArray56);
        boolean boolean59 = exceptionMap9.putAll((java.lang.Exception) functorException14, (java.util.Collection<java.io.Serializable>) serializableList57);
        functorException8.addSuppressed((java.lang.Throwable) functorException14);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap61 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap62 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean63 = exceptionMap61.containsValue((java.lang.Object) exceptionMap62);
        int int64 = exceptionMap62.size();
        java.util.Collection<java.lang.Object> objCollection65 = exceptionMap62.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap66 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap67 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean68 = exceptionMap66.containsValue((java.lang.Object) exceptionMap67);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet69 = exceptionMap67.entrySet();
        exceptionMap62.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap67);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor71 = exceptionMap67.mapIterator();
        exceptionMap67.clear();
        java.lang.Object obj73 = exceptionMap0.put((java.lang.Exception) functorException14, (java.lang.Object) exceptionMap67);
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(exceptionMap5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objCollection29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(serializableArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(objCollection65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet69);
        org.junit.Assert.assertNotNull(exceptionItor71);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "{}");
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj2 = exceptionMap0.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable4 = null;
        org.apache.commons.collections4.FunctorException functorException5 = new org.apache.commons.collections4.FunctorException(throwable4);
        org.apache.commons.collections4.FunctorException functorException6 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException5);
        boolean boolean8 = exceptionMap0.removeMapping((java.lang.Exception) functorException5, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet9 = exceptionMap0.keySet();
        java.util.Set<java.lang.Exception> exceptionSet10 = exceptionMap0.keySet();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(exceptionSet9);
        org.junit.Assert.assertNotNull(exceptionSet10);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean5 = exceptionMap3.containsValue((java.lang.Object) exceptionMap4);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet6 = exceptionMap4.entrySet();
        exceptionMap4.clear();
        java.lang.Object obj8 = exceptionMap0.remove((java.lang.Object) exceptionMap4);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet6);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Object obj11 = null;
        boolean boolean12 = exceptionMap1.containsKey(obj11);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj15 = exceptionMap13.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable17 = null;
        org.apache.commons.collections4.FunctorException functorException18 = new org.apache.commons.collections4.FunctorException(throwable17);
        org.apache.commons.collections4.FunctorException functorException19 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException18);
        boolean boolean21 = exceptionMap13.removeMapping((java.lang.Exception) functorException18, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet22 = exceptionMap13.keySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean25 = exceptionMap23.containsValue((java.lang.Object) exceptionMap24);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet26 = exceptionMap24.entrySet();
        boolean boolean28 = exceptionMap24.containsKey((java.lang.Object) (byte) 1);
        int int29 = exceptionMap24.size();
        exceptionMap13.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap24);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap32 = exceptionMap31.decorated();
        boolean boolean33 = exceptionMap1.removeMapping((java.lang.Object) exceptionMap24, (java.lang.Object) exceptionMap32);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor34 = exceptionMap1.mapIterator();
        java.lang.Object obj35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj36 = exceptionItor34.setValue(obj35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(exceptionSet22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(exceptionMap32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(exceptionItor34);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Exception exception11 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection13 = exceptionMap12.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet14 = exceptionMap12.entrySet();
        java.lang.Object obj15 = exceptionMap1.put(exception11, (java.lang.Object) exceptionEntrySet14);
        java.lang.Class<?> wildcardClass16 = exceptionMap1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(objCollection13);
        org.junit.Assert.assertNotNull(exceptionEntrySet14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "[]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.lang.String str3 = exceptionMap0.toString();
        exceptionMap0.clear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}");
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection1 = exceptionMap0.values();
        int int2 = exceptionMap0.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap3.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet5 = exceptionMap3.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection7 = exceptionMap6.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        boolean boolean10 = exceptionMap3.remove((java.lang.Object) exceptionEntrySet8, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap11 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean13 = exceptionMap11.containsValue((java.lang.Object) exceptionMap12);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet14 = exceptionMap12.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap15 = exceptionMap12.map;
        int int16 = exceptionMap15.size();
        boolean boolean17 = exceptionMap3.containsKey((java.lang.Object) exceptionMap15);
        boolean boolean19 = exceptionMap15.containsKey((java.lang.Object) '4');
        boolean boolean20 = exceptionMap0.containsValue((java.lang.Object) boolean19);
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(exceptionEntrySet5);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet14);
        org.junit.Assert.assertNotNull(exceptionMap15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.lang.Throwable throwable8 = null;
        org.apache.commons.collections4.FunctorException functorException9 = new org.apache.commons.collections4.FunctorException("", throwable8);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("", throwable16);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean20 = exceptionMap18.containsValue((java.lang.Object) exceptionMap19);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection24 = exceptionMap23.values();
        int int25 = exceptionMap23.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection28 = exceptionMap27.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean38 = exceptionMap36.containsValue((java.lang.Object) exceptionMap37);
        int int39 = exceptionMap37.size();
        java.lang.Throwable throwable48 = null;
        org.apache.commons.collections4.FunctorException functorException49 = new org.apache.commons.collections4.FunctorException("", throwable48);
        org.apache.commons.collections4.FunctorException functorException50 = new org.apache.commons.collections4.FunctorException("", throwable48);
        java.io.Serializable[] serializableArray51 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable16, exceptionMap18, 0L, 0L, exceptionMap23, 0, exceptionMap27, exceptionMap29, (short) 1, ' ', "hi!", 100.0f, int39, false, 10.0f, '4', (-1), 1L, 1, throwable48 };
        java.util.ArrayList<java.io.Serializable> serializableList52 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList52, serializableArray51);
        boolean boolean54 = exceptionMap4.putAll((java.lang.Exception) functorException9, (java.util.Collection<java.io.Serializable>) serializableList52);
        boolean boolean56 = exceptionMap1.removeMapping((java.lang.Exception) functorException9, (java.io.Serializable) (-1.0f));
        boolean boolean57 = exceptionMap1.isEmpty();
        java.util.Collection<java.lang.Object> objCollection58 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap59 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection60 = exceptionMap59.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet61 = exceptionMap59.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap62 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection63 = exceptionMap62.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet64 = exceptionMap62.entrySet();
        boolean boolean66 = exceptionMap59.remove((java.lang.Object) exceptionEntrySet64, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap67 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap68 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean69 = exceptionMap67.containsValue((java.lang.Object) exceptionMap68);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet70 = exceptionMap68.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap71 = exceptionMap68.map;
        int int72 = exceptionMap71.size();
        boolean boolean73 = exceptionMap59.containsKey((java.lang.Object) exceptionMap71);
        java.lang.Object obj74 = exceptionMap1.remove((java.lang.Object) exceptionMap59);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(serializableArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objCollection58);
        org.junit.Assert.assertNotNull(objCollection60);
        org.junit.Assert.assertNotNull(exceptionEntrySet61);
        org.junit.Assert.assertNotNull(objCollection63);
        org.junit.Assert.assertNotNull(exceptionEntrySet64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet70);
        org.junit.Assert.assertNotNull(exceptionMap71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(obj74);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap6);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap10 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap11 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean12 = exceptionMap10.containsValue((java.lang.Object) exceptionMap11);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.collections4.FunctorException functorException15 = new org.apache.commons.collections4.FunctorException("", throwable14);
        java.lang.Throwable throwable22 = null;
        org.apache.commons.collections4.FunctorException functorException23 = new org.apache.commons.collections4.FunctorException("", throwable22);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean26 = exceptionMap24.containsValue((java.lang.Object) exceptionMap25);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection30 = exceptionMap29.values();
        int int31 = exceptionMap29.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap33 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection34 = exceptionMap33.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap35 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean37 = exceptionMap35.containsValue((java.lang.Object) exceptionMap36);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap42 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap43 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean44 = exceptionMap42.containsValue((java.lang.Object) exceptionMap43);
        int int45 = exceptionMap43.size();
        java.lang.Throwable throwable54 = null;
        org.apache.commons.collections4.FunctorException functorException55 = new org.apache.commons.collections4.FunctorException("", throwable54);
        org.apache.commons.collections4.FunctorException functorException56 = new org.apache.commons.collections4.FunctorException("", throwable54);
        java.io.Serializable[] serializableArray57 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable22, exceptionMap24, 0L, 0L, exceptionMap29, 0, exceptionMap33, exceptionMap35, (short) 1, ' ', "hi!", 100.0f, int45, false, 10.0f, '4', (-1), 1L, 1, throwable54 };
        java.util.ArrayList<java.io.Serializable> serializableList58 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList58, serializableArray57);
        boolean boolean60 = exceptionMap10.putAll((java.lang.Exception) functorException15, (java.util.Collection<java.io.Serializable>) serializableList58);
        java.lang.Object obj62 = exceptionMap6.put((java.lang.Exception) functorException15, (java.lang.Object) (-1.0f));
        java.util.Collection<java.lang.Object> objCollection63 = exceptionMap6.values();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(serializableArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + obj62 + "' != '" + (-1.0f) + "'", obj62, (-1.0f));
        org.junit.Assert.assertNotNull(objCollection63);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap1 = exceptionMap0.decorated();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap2 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection3 = exceptionMap2.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet4 = exceptionMap2.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection6 = exceptionMap5.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        boolean boolean9 = exceptionMap2.remove((java.lang.Object) exceptionEntrySet7, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap10 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap11 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean12 = exceptionMap10.containsValue((java.lang.Object) exceptionMap11);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet13 = exceptionMap11.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap14 = exceptionMap11.map;
        int int15 = exceptionMap14.size();
        boolean boolean16 = exceptionMap2.containsKey((java.lang.Object) exceptionMap14);
        boolean boolean18 = exceptionMap2.equals((java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection19 = exceptionMap2.values();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap2);
        org.junit.Assert.assertNotNull(exceptionMap1);
        org.junit.Assert.assertNotNull(objCollection3);
        org.junit.Assert.assertNotNull(exceptionEntrySet4);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet13);
        org.junit.Assert.assertNotNull(exceptionMap14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objCollection19);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap6);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap10 = exceptionMap6.decorated();
        boolean boolean12 = exceptionMap6.equals((java.lang.Object) "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertNotNull(exceptionMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Throwable throwable13 = null;
        org.apache.commons.collections4.FunctorException functorException14 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException15 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("");
        functorException15.addSuppressed((java.lang.Throwable) functorException17);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean21 = exceptionMap19.containsValue((java.lang.Object) exceptionMap20);
        boolean boolean23 = exceptionMap20.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection25 = exceptionMap20.createCollection(10);
        boolean boolean26 = exceptionMap1.putAll((java.lang.Exception) functorException17, serializableCollection25);
        java.lang.Object obj27 = null;
        boolean boolean28 = exceptionMap1.containsValue(obj27);
        java.util.Set<java.lang.Exception> exceptionSet29 = exceptionMap1.keySet();
        int int30 = exceptionMap1.totalSize();
        java.lang.String str31 = exceptionMap1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(exceptionSet29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{}" + "'", str31, "{}");
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap6);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor10 = exceptionMap6.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Exception exception11 = exceptionItor10.getKey();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertNotNull(exceptionItor10);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        int int7 = exceptionMap5.size();
        java.util.Collection<java.lang.Object> objCollection8 = exceptionMap5.values();
        java.util.Collection<java.lang.Object> objCollection9 = exceptionMap5.values();
        java.lang.Object obj10 = exceptionMap3.remove((java.lang.Object) objCollection9);
        java.lang.Object obj11 = exceptionMap0.get((java.lang.Object) objCollection9);
        java.lang.Object obj13 = exceptionMap0.remove((java.lang.Object) (short) 0);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap15 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean16 = exceptionMap14.containsValue((java.lang.Object) exceptionMap15);
        int int17 = exceptionMap15.size();
        java.util.Collection<java.lang.Object> objCollection18 = exceptionMap15.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean21 = exceptionMap19.containsValue((java.lang.Object) exceptionMap20);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet22 = exceptionMap20.entrySet();
        exceptionMap15.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap20);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean26 = exceptionMap24.containsValue((java.lang.Object) exceptionMap25);
        java.lang.Throwable throwable28 = null;
        org.apache.commons.collections4.FunctorException functorException29 = new org.apache.commons.collections4.FunctorException("", throwable28);
        java.lang.Throwable throwable36 = null;
        org.apache.commons.collections4.FunctorException functorException37 = new org.apache.commons.collections4.FunctorException("", throwable36);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap38 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap39 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean40 = exceptionMap38.containsValue((java.lang.Object) exceptionMap39);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap43 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection44 = exceptionMap43.values();
        int int45 = exceptionMap43.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap47 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection48 = exceptionMap47.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap49 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap50 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean51 = exceptionMap49.containsValue((java.lang.Object) exceptionMap50);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap56 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap57 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean58 = exceptionMap56.containsValue((java.lang.Object) exceptionMap57);
        int int59 = exceptionMap57.size();
        java.lang.Throwable throwable68 = null;
        org.apache.commons.collections4.FunctorException functorException69 = new org.apache.commons.collections4.FunctorException("", throwable68);
        org.apache.commons.collections4.FunctorException functorException70 = new org.apache.commons.collections4.FunctorException("", throwable68);
        java.io.Serializable[] serializableArray71 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable36, exceptionMap38, 0L, 0L, exceptionMap43, 0, exceptionMap47, exceptionMap49, (short) 1, ' ', "hi!", 100.0f, int59, false, 10.0f, '4', (-1), 1L, 1, throwable68 };
        java.util.ArrayList<java.io.Serializable> serializableList72 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList72, serializableArray71);
        boolean boolean74 = exceptionMap24.putAll((java.lang.Exception) functorException29, (java.util.Collection<java.io.Serializable>) serializableList72);
        java.lang.Object obj76 = exceptionMap20.put((java.lang.Exception) functorException29, (java.lang.Object) (-1.0f));
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap77 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap78 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean79 = exceptionMap77.containsValue((java.lang.Object) exceptionMap78);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet80 = exceptionMap78.entrySet();
        java.lang.Object obj81 = exceptionMap0.put((java.lang.Exception) functorException29, (java.lang.Object) exceptionEntrySet80);
        boolean boolean82 = exceptionMap0.isEmpty();
        exceptionMap0.clear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(objCollection8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objCollection48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(serializableArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertEquals("'" + obj76 + "' != '" + (-1.0f) + "'", obj76, (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet80);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertEquals(obj81.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "[]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        exceptionMap1.clear();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap6 = exceptionMap1.map;
        int int7 = exceptionMap6.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(exceptionMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap6);
        java.util.Collection<java.io.Serializable> serializableCollection11 = exceptionMap6.createCollection(1);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap12 = null;
        // The following exception was thrown during execution in test generation
        try {
            exceptionMap6.putAll(exceptionMap12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertNotNull(serializableCollection11);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.lang.Throwable throwable8 = null;
        org.apache.commons.collections4.FunctorException functorException9 = new org.apache.commons.collections4.FunctorException("", throwable8);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("", throwable16);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean20 = exceptionMap18.containsValue((java.lang.Object) exceptionMap19);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection24 = exceptionMap23.values();
        int int25 = exceptionMap23.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection28 = exceptionMap27.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean38 = exceptionMap36.containsValue((java.lang.Object) exceptionMap37);
        int int39 = exceptionMap37.size();
        java.lang.Throwable throwable48 = null;
        org.apache.commons.collections4.FunctorException functorException49 = new org.apache.commons.collections4.FunctorException("", throwable48);
        org.apache.commons.collections4.FunctorException functorException50 = new org.apache.commons.collections4.FunctorException("", throwable48);
        java.io.Serializable[] serializableArray51 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable16, exceptionMap18, 0L, 0L, exceptionMap23, 0, exceptionMap27, exceptionMap29, (short) 1, ' ', "hi!", 100.0f, int39, false, 10.0f, '4', (-1), 1L, 1, throwable48 };
        java.util.ArrayList<java.io.Serializable> serializableList52 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList52, serializableArray51);
        boolean boolean54 = exceptionMap4.putAll((java.lang.Exception) functorException9, (java.util.Collection<java.io.Serializable>) serializableList52);
        boolean boolean56 = exceptionMap1.removeMapping((java.lang.Exception) functorException9, (java.io.Serializable) (-1.0f));
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor57 = exceptionMap1.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Exception exception58 = exceptionItor57.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(serializableArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(exceptionItor57);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection1 = exceptionMap0.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet2 = exceptionMap0.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap3.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet5 = exceptionMap3.entrySet();
        boolean boolean7 = exceptionMap0.remove((java.lang.Object) exceptionEntrySet5, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean10 = exceptionMap8.containsValue((java.lang.Object) exceptionMap9);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet11 = exceptionMap9.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap12 = exceptionMap9.map;
        int int13 = exceptionMap12.size();
        boolean boolean14 = exceptionMap0.containsKey((java.lang.Object) exceptionMap12);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap15 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap16 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean17 = exceptionMap15.containsValue((java.lang.Object) exceptionMap16);
        int int18 = exceptionMap16.size();
        java.util.Collection<java.lang.Object> objCollection19 = exceptionMap16.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean22 = exceptionMap20.containsValue((java.lang.Object) exceptionMap21);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet23 = exceptionMap21.entrySet();
        exceptionMap16.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap21);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap26 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean27 = exceptionMap25.containsValue((java.lang.Object) exceptionMap26);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet28 = exceptionMap26.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        java.lang.Throwable throwable33 = null;
        org.apache.commons.collections4.FunctorException functorException34 = new org.apache.commons.collections4.FunctorException("", throwable33);
        java.lang.Throwable throwable41 = null;
        org.apache.commons.collections4.FunctorException functorException42 = new org.apache.commons.collections4.FunctorException("", throwable41);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap43 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap44 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean45 = exceptionMap43.containsValue((java.lang.Object) exceptionMap44);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap48 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection49 = exceptionMap48.values();
        int int50 = exceptionMap48.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap52 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection53 = exceptionMap52.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap54 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap55 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean56 = exceptionMap54.containsValue((java.lang.Object) exceptionMap55);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap61 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap62 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean63 = exceptionMap61.containsValue((java.lang.Object) exceptionMap62);
        int int64 = exceptionMap62.size();
        java.lang.Throwable throwable73 = null;
        org.apache.commons.collections4.FunctorException functorException74 = new org.apache.commons.collections4.FunctorException("", throwable73);
        org.apache.commons.collections4.FunctorException functorException75 = new org.apache.commons.collections4.FunctorException("", throwable73);
        java.io.Serializable[] serializableArray76 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable41, exceptionMap43, 0L, 0L, exceptionMap48, 0, exceptionMap52, exceptionMap54, (short) 1, ' ', "hi!", 100.0f, int64, false, 10.0f, '4', (-1), 1L, 1, throwable73 };
        java.util.ArrayList<java.io.Serializable> serializableList77 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList77, serializableArray76);
        boolean boolean79 = exceptionMap29.putAll((java.lang.Exception) functorException34, (java.util.Collection<java.io.Serializable>) serializableList77);
        boolean boolean81 = exceptionMap26.removeMapping((java.lang.Exception) functorException34, (java.io.Serializable) (-1.0f));
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap83 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap84 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean85 = exceptionMap83.containsValue((java.lang.Object) exceptionMap84);
        boolean boolean86 = exceptionMap21.replace((java.lang.Exception) functorException34, (java.lang.Object) (short) 0, (java.lang.Object) exceptionMap83);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap87 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection88 = exceptionMap87.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet89 = exceptionMap87.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap90 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection91 = exceptionMap90.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet92 = exceptionMap90.entrySet();
        boolean boolean94 = exceptionMap87.remove((java.lang.Object) exceptionEntrySet92, (java.lang.Object) (byte) -1);
        boolean boolean95 = exceptionMap0.removeMapping((java.lang.Object) exceptionMap21, (java.lang.Object) boolean94);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap96 = exceptionMap0.map;
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(exceptionEntrySet2);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(exceptionEntrySet5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet11);
        org.junit.Assert.assertNotNull(exceptionMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objCollection49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(objCollection53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(serializableArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objCollection88);
        org.junit.Assert.assertNotNull(exceptionEntrySet89);
        org.junit.Assert.assertNotNull(objCollection91);
        org.junit.Assert.assertNotNull(exceptionEntrySet92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(exceptionMap96);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap6);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor10 = exceptionMap6.mapIterator();
        java.lang.Object obj11 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection13 = exceptionMap12.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet14 = exceptionMap12.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap15 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection16 = exceptionMap15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet17 = exceptionMap15.entrySet();
        boolean boolean19 = exceptionMap12.remove((java.lang.Object) exceptionEntrySet17, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean22 = exceptionMap20.containsValue((java.lang.Object) exceptionMap21);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet23 = exceptionMap21.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap24 = exceptionMap21.map;
        int int25 = exceptionMap24.size();
        boolean boolean26 = exceptionMap12.containsKey((java.lang.Object) exceptionMap24);
        boolean boolean28 = exceptionMap12.equals((java.lang.Object) 0.0d);
        boolean boolean29 = exceptionMap6.remove(obj11, (java.lang.Object) boolean28);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.collections4.FunctorException functorException32 = new org.apache.commons.collections4.FunctorException(throwable31);
        org.apache.commons.collections4.FunctorException functorException33 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException32);
        java.lang.Throwable throwable34 = null;
        org.apache.commons.collections4.FunctorException functorException35 = new org.apache.commons.collections4.FunctorException(throwable34);
        functorException33.addSuppressed((java.lang.Throwable) functorException35);
        java.util.Collection<java.io.Serializable> serializableCollection37 = null;
        boolean boolean38 = exceptionMap6.putAll((java.lang.Exception) functorException35, serializableCollection37);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap39 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap40 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean41 = exceptionMap39.containsValue((java.lang.Object) exceptionMap40);
        int int42 = exceptionMap40.size();
        java.util.Collection<java.lang.Object> objCollection43 = exceptionMap40.values();
        exceptionMap40.clear();
        java.lang.Throwable throwable46 = null;
        org.apache.commons.collections4.FunctorException functorException47 = new org.apache.commons.collections4.FunctorException("", throwable46);
        int int48 = exceptionMap40.size((java.lang.Object) functorException47);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap49 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap50 = exceptionMap49.decorated();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap51 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap52 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean53 = exceptionMap51.containsValue((java.lang.Object) exceptionMap52);
        boolean boolean54 = exceptionMap50.containsValue((java.lang.Object) exceptionMap52);
        java.lang.Object obj55 = exceptionMap6.putIfAbsent((java.lang.Exception) functorException47, (java.lang.Object) boolean54);
        java.lang.Exception exception56 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap57 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection58 = exceptionMap57.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet59 = exceptionMap57.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap60 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection61 = exceptionMap60.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet62 = exceptionMap60.entrySet();
        boolean boolean64 = exceptionMap57.remove((java.lang.Object) exceptionEntrySet62, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap65 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap66 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean67 = exceptionMap65.containsValue((java.lang.Object) exceptionMap66);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet68 = exceptionMap66.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap69 = exceptionMap66.map;
        int int70 = exceptionMap69.size();
        boolean boolean71 = exceptionMap57.containsKey((java.lang.Object) exceptionMap69);
        boolean boolean73 = exceptionMap57.equals((java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection74 = exceptionMap57.values();
        java.lang.Object obj75 = exceptionMap6.put(exception56, (java.lang.Object) objCollection74);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertNotNull(exceptionItor10);
        org.junit.Assert.assertNotNull(objCollection13);
        org.junit.Assert.assertNotNull(exceptionEntrySet14);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNotNull(exceptionEntrySet17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet23);
        org.junit.Assert.assertNotNull(exceptionMap24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(objCollection43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(exceptionMap50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + obj55 + "' != '" + false + "'", obj55, false);
        org.junit.Assert.assertNotNull(objCollection58);
        org.junit.Assert.assertNotNull(exceptionEntrySet59);
        org.junit.Assert.assertNotNull(objCollection61);
        org.junit.Assert.assertNotNull(exceptionEntrySet62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet68);
        org.junit.Assert.assertNotNull(exceptionMap69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objCollection74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "[]");
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection1 = exceptionMap0.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet2 = exceptionMap0.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap3.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet5 = exceptionMap3.entrySet();
        boolean boolean7 = exceptionMap0.remove((java.lang.Object) exceptionEntrySet5, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean10 = exceptionMap8.containsValue((java.lang.Object) exceptionMap9);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet11 = exceptionMap9.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap12 = exceptionMap9.map;
        int int13 = exceptionMap12.size();
        boolean boolean14 = exceptionMap0.containsKey((java.lang.Object) exceptionMap12);
        boolean boolean16 = exceptionMap0.equals((java.lang.Object) 0.0d);
        int int17 = exceptionMap0.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection19 = exceptionMap18.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet20 = exceptionMap18.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection22 = exceptionMap21.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet23 = exceptionMap21.entrySet();
        boolean boolean25 = exceptionMap18.remove((java.lang.Object) exceptionEntrySet23, (java.lang.Object) (byte) -1);
        java.lang.Object obj26 = exceptionMap0.get((java.lang.Object) boolean25);
        java.util.Collection<java.lang.Object> objCollection27 = exceptionMap0.values();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(exceptionEntrySet2);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(exceptionEntrySet5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet11);
        org.junit.Assert.assertNotNull(exceptionMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertNotNull(exceptionEntrySet20);
        org.junit.Assert.assertNotNull(objCollection22);
        org.junit.Assert.assertNotNull(exceptionEntrySet23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objCollection27);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        exceptionMap1.clear();
        boolean boolean5 = exceptionMap1.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap7 = exceptionMap6.decorated();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean10 = exceptionMap8.containsValue((java.lang.Object) exceptionMap9);
        boolean boolean11 = exceptionMap7.containsValue((java.lang.Object) exceptionMap9);
        java.lang.Object obj12 = exceptionMap1.get((java.lang.Object) exceptionMap9);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean15 = exceptionMap13.containsValue((java.lang.Object) exceptionMap14);
        int int16 = exceptionMap14.size();
        java.util.Collection<java.lang.Object> objCollection17 = exceptionMap14.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean20 = exceptionMap18.containsValue((java.lang.Object) exceptionMap19);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet21 = exceptionMap19.entrySet();
        exceptionMap14.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap19);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor23 = exceptionMap19.mapIterator();
        java.lang.Object obj24 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection26 = exceptionMap25.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet27 = exceptionMap25.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap28 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection29 = exceptionMap28.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet30 = exceptionMap28.entrySet();
        boolean boolean32 = exceptionMap25.remove((java.lang.Object) exceptionEntrySet30, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap33 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap34 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean35 = exceptionMap33.containsValue((java.lang.Object) exceptionMap34);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet36 = exceptionMap34.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap37 = exceptionMap34.map;
        int int38 = exceptionMap37.size();
        boolean boolean39 = exceptionMap25.containsKey((java.lang.Object) exceptionMap37);
        boolean boolean41 = exceptionMap25.equals((java.lang.Object) 0.0d);
        boolean boolean42 = exceptionMap19.remove(obj24, (java.lang.Object) boolean41);
        java.lang.Object obj43 = exceptionMap9.get(obj24);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap44 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap45 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean46 = exceptionMap44.containsValue((java.lang.Object) exceptionMap45);
        int int47 = exceptionMap45.size();
        java.util.Collection<java.lang.Object> objCollection48 = exceptionMap45.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap49 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap50 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean51 = exceptionMap49.containsValue((java.lang.Object) exceptionMap50);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet52 = exceptionMap50.entrySet();
        exceptionMap45.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap50);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap54 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap55 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean56 = exceptionMap54.containsValue((java.lang.Object) exceptionMap55);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap57 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap58 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean59 = exceptionMap57.containsValue((java.lang.Object) exceptionMap58);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet60 = exceptionMap58.entrySet();
        exceptionMap58.clear();
        boolean boolean62 = exceptionMap58.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.lang.Class<?>> exceptionMap63 = org.apache.commons.collections4.map.MultiValueMap.multiValueMap((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap58);
        boolean boolean64 = exceptionMap54.equals((java.lang.Object) exceptionMap58);
        java.lang.Throwable throwable66 = null;
        org.apache.commons.collections4.FunctorException functorException67 = new org.apache.commons.collections4.FunctorException(throwable66);
        org.apache.commons.collections4.FunctorException functorException68 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException67);
        java.lang.Throwable throwable69 = null;
        org.apache.commons.collections4.FunctorException functorException70 = new org.apache.commons.collections4.FunctorException(throwable69);
        functorException68.addSuppressed((java.lang.Throwable) functorException70);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap72 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection73 = exceptionMap72.values();
        java.lang.Object obj74 = null;
        java.lang.Object obj75 = exceptionMap72.remove(obj74);
        java.lang.Object obj76 = exceptionMap58.put((java.lang.Exception) functorException68, obj75);
        exceptionMap50.map = exceptionMap58;
        boolean boolean78 = exceptionMap9.containsKey((java.lang.Object) exceptionMap50);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(exceptionMap7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet21);
        org.junit.Assert.assertNotNull(exceptionItor23);
        org.junit.Assert.assertNotNull(objCollection26);
        org.junit.Assert.assertNotNull(exceptionEntrySet27);
        org.junit.Assert.assertNotNull(objCollection29);
        org.junit.Assert.assertNotNull(exceptionEntrySet30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet36);
        org.junit.Assert.assertNotNull(exceptionMap37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(objCollection48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(exceptionMap63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objCollection73);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap2 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean3 = exceptionMap1.containsValue((java.lang.Object) exceptionMap2);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        int int8 = exceptionMap6.size();
        java.util.Collection<java.lang.Object> objCollection9 = exceptionMap6.values();
        java.util.Collection<java.lang.Object> objCollection10 = exceptionMap6.values();
        java.lang.Object obj11 = exceptionMap4.remove((java.lang.Object) objCollection10);
        java.lang.Object obj12 = exceptionMap1.get((java.lang.Object) objCollection10);
        java.lang.Object obj14 = exceptionMap1.remove((java.lang.Object) (short) 0);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap15 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap16 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean17 = exceptionMap15.containsValue((java.lang.Object) exceptionMap16);
        int int18 = exceptionMap16.size();
        java.util.Collection<java.lang.Object> objCollection19 = exceptionMap16.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean22 = exceptionMap20.containsValue((java.lang.Object) exceptionMap21);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet23 = exceptionMap21.entrySet();
        exceptionMap16.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap21);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap26 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean27 = exceptionMap25.containsValue((java.lang.Object) exceptionMap26);
        java.lang.Throwable throwable29 = null;
        org.apache.commons.collections4.FunctorException functorException30 = new org.apache.commons.collections4.FunctorException("", throwable29);
        java.lang.Throwable throwable37 = null;
        org.apache.commons.collections4.FunctorException functorException38 = new org.apache.commons.collections4.FunctorException("", throwable37);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap39 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap40 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean41 = exceptionMap39.containsValue((java.lang.Object) exceptionMap40);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap44 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection45 = exceptionMap44.values();
        int int46 = exceptionMap44.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap48 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection49 = exceptionMap48.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap50 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap51 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean52 = exceptionMap50.containsValue((java.lang.Object) exceptionMap51);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap57 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap58 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean59 = exceptionMap57.containsValue((java.lang.Object) exceptionMap58);
        int int60 = exceptionMap58.size();
        java.lang.Throwable throwable69 = null;
        org.apache.commons.collections4.FunctorException functorException70 = new org.apache.commons.collections4.FunctorException("", throwable69);
        org.apache.commons.collections4.FunctorException functorException71 = new org.apache.commons.collections4.FunctorException("", throwable69);
        java.io.Serializable[] serializableArray72 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable37, exceptionMap39, 0L, 0L, exceptionMap44, 0, exceptionMap48, exceptionMap50, (short) 1, ' ', "hi!", 100.0f, int60, false, 10.0f, '4', (-1), 1L, 1, throwable69 };
        java.util.ArrayList<java.io.Serializable> serializableList73 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList73, serializableArray72);
        boolean boolean75 = exceptionMap25.putAll((java.lang.Exception) functorException30, (java.util.Collection<java.io.Serializable>) serializableList73);
        java.lang.Object obj77 = exceptionMap21.put((java.lang.Exception) functorException30, (java.lang.Object) (-1.0f));
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap78 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap79 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean80 = exceptionMap78.containsValue((java.lang.Object) exceptionMap79);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet81 = exceptionMap79.entrySet();
        java.lang.Object obj82 = exceptionMap1.put((java.lang.Exception) functorException30, (java.lang.Object) exceptionEntrySet81);
        org.apache.commons.collections4.FunctorException functorException83 = new org.apache.commons.collections4.FunctorException("org.apache.commons.collections4.FunctorException", (java.lang.Throwable) functorException30);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objCollection45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(objCollection49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(serializableArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertEquals("'" + obj77 + "' != '" + (-1.0f) + "'", obj77, (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet81);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertEquals(obj82.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj82), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj82), "[]");
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj2 = exceptionMap0.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable4 = null;
        org.apache.commons.collections4.FunctorException functorException5 = new org.apache.commons.collections4.FunctorException(throwable4);
        org.apache.commons.collections4.FunctorException functorException6 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException5);
        boolean boolean8 = exceptionMap0.removeMapping((java.lang.Exception) functorException5, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet9 = exceptionMap0.keySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap10 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap11 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean12 = exceptionMap10.containsValue((java.lang.Object) exceptionMap11);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet13 = exceptionMap11.entrySet();
        boolean boolean15 = exceptionMap11.containsKey((java.lang.Object) (byte) 1);
        int int16 = exceptionMap11.size();
        exceptionMap0.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap11);
        java.util.Set<java.lang.Exception> exceptionSet18 = exceptionMap0.keySet();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(exceptionSet9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(exceptionSet18);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap6);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor10 = exceptionMap6.mapIterator();
        java.lang.Object obj11 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection13 = exceptionMap12.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet14 = exceptionMap12.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap15 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection16 = exceptionMap15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet17 = exceptionMap15.entrySet();
        boolean boolean19 = exceptionMap12.remove((java.lang.Object) exceptionEntrySet17, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean22 = exceptionMap20.containsValue((java.lang.Object) exceptionMap21);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet23 = exceptionMap21.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap24 = exceptionMap21.map;
        int int25 = exceptionMap24.size();
        boolean boolean26 = exceptionMap12.containsKey((java.lang.Object) exceptionMap24);
        boolean boolean28 = exceptionMap12.equals((java.lang.Object) 0.0d);
        boolean boolean29 = exceptionMap6.remove(obj11, (java.lang.Object) boolean28);
        boolean boolean30 = exceptionMap6.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet31 = exceptionMap6.entrySet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertNotNull(exceptionItor10);
        org.junit.Assert.assertNotNull(objCollection13);
        org.junit.Assert.assertNotNull(exceptionEntrySet14);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNotNull(exceptionEntrySet17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet23);
        org.junit.Assert.assertNotNull(exceptionMap24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(exceptionEntrySet31);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Throwable throwable13 = null;
        org.apache.commons.collections4.FunctorException functorException14 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException15 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("");
        functorException15.addSuppressed((java.lang.Throwable) functorException17);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean21 = exceptionMap19.containsValue((java.lang.Object) exceptionMap20);
        boolean boolean23 = exceptionMap20.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection25 = exceptionMap20.createCollection(10);
        boolean boolean26 = exceptionMap1.putAll((java.lang.Exception) functorException17, serializableCollection25);
        java.lang.Object obj27 = null;
        boolean boolean28 = exceptionMap1.containsValue(obj27);
        boolean boolean30 = exceptionMap1.containsKey((java.lang.Object) (short) 100);
        java.util.Set<java.lang.Exception> exceptionSet31 = exceptionMap1.keySet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(exceptionSet31);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj7 = exceptionMap5.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable9 = null;
        org.apache.commons.collections4.FunctorException functorException10 = new org.apache.commons.collections4.FunctorException(throwable9);
        org.apache.commons.collections4.FunctorException functorException11 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException10);
        boolean boolean13 = exceptionMap5.removeMapping((java.lang.Exception) functorException10, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet14 = exceptionMap5.keySet();
        boolean boolean15 = exceptionMap1.equals((java.lang.Object) exceptionSet14);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap16 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean18 = exceptionMap16.containsValue((java.lang.Object) exceptionMap17);
        int int19 = exceptionMap17.size();
        java.util.Collection<java.lang.Object> objCollection20 = exceptionMap17.values();
        exceptionMap17.clear();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap22 = exceptionMap17.map;
        java.util.Collection<java.io.Serializable> serializableCollection23 = exceptionMap1.getCollection((java.lang.Object) exceptionMap17);
        java.lang.Object obj24 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap26 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean27 = exceptionMap25.containsValue((java.lang.Object) exceptionMap26);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet28 = exceptionMap26.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        java.lang.Throwable throwable33 = null;
        org.apache.commons.collections4.FunctorException functorException34 = new org.apache.commons.collections4.FunctorException("", throwable33);
        java.lang.Throwable throwable41 = null;
        org.apache.commons.collections4.FunctorException functorException42 = new org.apache.commons.collections4.FunctorException("", throwable41);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap43 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap44 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean45 = exceptionMap43.containsValue((java.lang.Object) exceptionMap44);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap48 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection49 = exceptionMap48.values();
        int int50 = exceptionMap48.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap52 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection53 = exceptionMap52.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap54 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap55 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean56 = exceptionMap54.containsValue((java.lang.Object) exceptionMap55);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap61 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap62 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean63 = exceptionMap61.containsValue((java.lang.Object) exceptionMap62);
        int int64 = exceptionMap62.size();
        java.lang.Throwable throwable73 = null;
        org.apache.commons.collections4.FunctorException functorException74 = new org.apache.commons.collections4.FunctorException("", throwable73);
        org.apache.commons.collections4.FunctorException functorException75 = new org.apache.commons.collections4.FunctorException("", throwable73);
        java.io.Serializable[] serializableArray76 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable41, exceptionMap43, 0L, 0L, exceptionMap48, 0, exceptionMap52, exceptionMap54, (short) 1, ' ', "hi!", 100.0f, int64, false, 10.0f, '4', (-1), 1L, 1, throwable73 };
        java.util.ArrayList<java.io.Serializable> serializableList77 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList77, serializableArray76);
        boolean boolean79 = exceptionMap29.putAll((java.lang.Exception) functorException34, (java.util.Collection<java.io.Serializable>) serializableList77);
        boolean boolean81 = exceptionMap26.removeMapping((java.lang.Exception) functorException34, (java.io.Serializable) (-1.0f));
        boolean boolean82 = exceptionMap26.isEmpty();
        java.util.Collection<java.lang.Object> objCollection83 = exceptionMap26.values();
        boolean boolean84 = exceptionMap17.remove(obj24, (java.lang.Object) objCollection83);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(exceptionSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertNotNull(exceptionMap22);
        org.junit.Assert.assertNull(serializableCollection23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objCollection49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(objCollection53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(serializableArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(objCollection83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        java.lang.String str4 = exceptionMap1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{}" + "'", str4, "{}");
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        exceptionMap1.clear();
        java.lang.Throwable throwable7 = null;
        org.apache.commons.collections4.FunctorException functorException8 = new org.apache.commons.collections4.FunctorException("", throwable7);
        int int9 = exceptionMap1.size((java.lang.Object) functorException8);
        java.lang.String str10 = exceptionMap1.toString();
        boolean boolean11 = exceptionMap1.isEmpty();
        int int12 = exceptionMap1.size();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap13 = exceptionMap1.decorated();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(exceptionMap13);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.lang.Throwable throwable8 = null;
        org.apache.commons.collections4.FunctorException functorException9 = new org.apache.commons.collections4.FunctorException("", throwable8);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("", throwable16);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean20 = exceptionMap18.containsValue((java.lang.Object) exceptionMap19);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection24 = exceptionMap23.values();
        int int25 = exceptionMap23.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection28 = exceptionMap27.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean38 = exceptionMap36.containsValue((java.lang.Object) exceptionMap37);
        int int39 = exceptionMap37.size();
        java.lang.Throwable throwable48 = null;
        org.apache.commons.collections4.FunctorException functorException49 = new org.apache.commons.collections4.FunctorException("", throwable48);
        org.apache.commons.collections4.FunctorException functorException50 = new org.apache.commons.collections4.FunctorException("", throwable48);
        java.io.Serializable[] serializableArray51 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable16, exceptionMap18, 0L, 0L, exceptionMap23, 0, exceptionMap27, exceptionMap29, (short) 1, ' ', "hi!", 100.0f, int39, false, 10.0f, '4', (-1), 1L, 1, throwable48 };
        java.util.ArrayList<java.io.Serializable> serializableList52 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList52, serializableArray51);
        boolean boolean54 = exceptionMap4.putAll((java.lang.Exception) functorException9, (java.util.Collection<java.io.Serializable>) serializableList52);
        boolean boolean56 = exceptionMap1.removeMapping((java.lang.Exception) functorException9, (java.io.Serializable) (-1.0f));
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor57 = exceptionMap1.mapIterator();
        java.lang.Object obj58 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj59 = exceptionItor57.setValue(obj58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(serializableArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(exceptionItor57);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection1 = exceptionMap0.values();
        int int2 = exceptionMap0.size();
        boolean boolean4 = exceptionMap0.containsValue((java.lang.Object) true);
        java.lang.Throwable throwable6 = null;
        org.apache.commons.collections4.FunctorException functorException7 = new org.apache.commons.collections4.FunctorException("", throwable6);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean10 = exceptionMap8.containsValue((java.lang.Object) exceptionMap9);
        java.lang.Throwable throwable12 = null;
        org.apache.commons.collections4.FunctorException functorException13 = new org.apache.commons.collections4.FunctorException("", throwable12);
        java.lang.Throwable throwable20 = null;
        org.apache.commons.collections4.FunctorException functorException21 = new org.apache.commons.collections4.FunctorException("", throwable20);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap22 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean24 = exceptionMap22.containsValue((java.lang.Object) exceptionMap23);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection28 = exceptionMap27.values();
        int int29 = exceptionMap27.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection32 = exceptionMap31.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap33 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap34 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean35 = exceptionMap33.containsValue((java.lang.Object) exceptionMap34);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap40 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap41 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean42 = exceptionMap40.containsValue((java.lang.Object) exceptionMap41);
        int int43 = exceptionMap41.size();
        java.lang.Throwable throwable52 = null;
        org.apache.commons.collections4.FunctorException functorException53 = new org.apache.commons.collections4.FunctorException("", throwable52);
        org.apache.commons.collections4.FunctorException functorException54 = new org.apache.commons.collections4.FunctorException("", throwable52);
        java.io.Serializable[] serializableArray55 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable20, exceptionMap22, 0L, 0L, exceptionMap27, 0, exceptionMap31, exceptionMap33, (short) 1, ' ', "hi!", 100.0f, int43, false, 10.0f, '4', (-1), 1L, 1, throwable52 };
        java.util.ArrayList<java.io.Serializable> serializableList56 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList56, serializableArray55);
        boolean boolean58 = exceptionMap8.putAll((java.lang.Exception) functorException13, (java.util.Collection<java.io.Serializable>) serializableList56);
        functorException7.addSuppressed((java.lang.Throwable) functorException13);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap60 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap61 = exceptionMap60.decorated();
        boolean boolean62 = exceptionMap0.removeMapping((java.lang.Exception) functorException7, (java.io.Serializable) exceptionMap60);
        org.apache.commons.collections4.map.MultiValueMap<org.apache.commons.collections4.FunctorException, java.lang.RuntimeException> functorExceptionMap63 = new org.apache.commons.collections4.map.MultiValueMap<org.apache.commons.collections4.FunctorException, java.lang.RuntimeException>();
        boolean boolean65 = exceptionMap0.containsValue((java.lang.Object) functorExceptionMap63, (java.lang.Object) (short) 1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap66 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection67 = exceptionMap66.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet68 = exceptionMap66.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap69 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection70 = exceptionMap69.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet71 = exceptionMap69.entrySet();
        boolean boolean73 = exceptionMap66.remove((java.lang.Object) exceptionEntrySet71, (java.lang.Object) (byte) -1);
        java.util.Set<java.lang.Exception> exceptionSet74 = exceptionMap66.keySet();
        boolean boolean75 = exceptionMap0.containsKey((java.lang.Object) exceptionMap66);
        java.lang.String str76 = exceptionMap0.toString();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap77 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap78 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean79 = exceptionMap77.containsValue((java.lang.Object) exceptionMap78);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet80 = exceptionMap78.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap81 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap82 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean83 = exceptionMap81.containsValue((java.lang.Object) exceptionMap82);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet84 = exceptionMap82.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap85 = exceptionMap82.map;
        int int86 = exceptionMap85.size();
        java.lang.Object obj87 = exceptionMap78.remove((java.lang.Object) int86);
        java.lang.Exception exception88 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap89 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection90 = exceptionMap89.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet91 = exceptionMap89.entrySet();
        java.lang.Object obj92 = exceptionMap78.put(exception88, (java.lang.Object) exceptionEntrySet91);
        java.util.Collection<java.lang.Object> objCollection93 = exceptionMap78.values();
        boolean boolean94 = exceptionMap0.containsKey((java.lang.Object) objCollection93);
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objCollection32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(serializableArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(exceptionMap61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objCollection67);
        org.junit.Assert.assertNotNull(exceptionEntrySet68);
        org.junit.Assert.assertNotNull(objCollection70);
        org.junit.Assert.assertNotNull(exceptionEntrySet71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(exceptionSet74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "{}" + "'", str76, "{}");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet84);
        org.junit.Assert.assertNotNull(exceptionMap85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertNotNull(objCollection90);
        org.junit.Assert.assertNotNull(exceptionEntrySet91);
        org.junit.Assert.assertNotNull(obj92);
        org.junit.Assert.assertEquals(obj92.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj92), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj92), "[]");
        org.junit.Assert.assertNotNull(objCollection93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj2 = exceptionMap0.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable4 = null;
        org.apache.commons.collections4.FunctorException functorException5 = new org.apache.commons.collections4.FunctorException(throwable4);
        org.apache.commons.collections4.FunctorException functorException6 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException5);
        boolean boolean8 = exceptionMap0.removeMapping((java.lang.Exception) functorException5, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet9 = exceptionMap0.keySet();
        int int10 = exceptionMap0.totalSize();
        java.lang.Class<?> wildcardClass11 = exceptionMap0.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(exceptionSet9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj2 = exceptionMap0.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable4 = null;
        org.apache.commons.collections4.FunctorException functorException5 = new org.apache.commons.collections4.FunctorException(throwable4);
        org.apache.commons.collections4.FunctorException functorException6 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException5);
        boolean boolean8 = exceptionMap0.removeMapping((java.lang.Exception) functorException5, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet9 = exceptionMap0.keySet();
        int int10 = exceptionMap0.size();
        int int11 = exceptionMap0.size();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(exceptionSet9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        exceptionMap1.clear();
        boolean boolean5 = exceptionMap1.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.lang.Class<?>> exceptionMap6 = org.apache.commons.collections4.map.MultiValueMap.multiValueMap((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap7 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean9 = exceptionMap7.containsValue((java.lang.Object) exceptionMap8);
        boolean boolean11 = exceptionMap8.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection13 = exceptionMap8.createCollection(10);
        int int14 = exceptionMap8.totalSize();
        boolean boolean15 = exceptionMap1.containsKey((java.lang.Object) int14);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(exceptionMap6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(serializableCollection13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap6);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor10 = exceptionMap6.mapIterator();
        java.lang.Object obj11 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection13 = exceptionMap12.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet14 = exceptionMap12.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap15 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection16 = exceptionMap15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet17 = exceptionMap15.entrySet();
        boolean boolean19 = exceptionMap12.remove((java.lang.Object) exceptionEntrySet17, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean22 = exceptionMap20.containsValue((java.lang.Object) exceptionMap21);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet23 = exceptionMap21.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap24 = exceptionMap21.map;
        int int25 = exceptionMap24.size();
        boolean boolean26 = exceptionMap12.containsKey((java.lang.Object) exceptionMap24);
        boolean boolean28 = exceptionMap12.equals((java.lang.Object) 0.0d);
        boolean boolean29 = exceptionMap6.remove(obj11, (java.lang.Object) boolean28);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.collections4.FunctorException functorException32 = new org.apache.commons.collections4.FunctorException(throwable31);
        org.apache.commons.collections4.FunctorException functorException33 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException32);
        java.lang.Throwable throwable34 = null;
        org.apache.commons.collections4.FunctorException functorException35 = new org.apache.commons.collections4.FunctorException(throwable34);
        functorException33.addSuppressed((java.lang.Throwable) functorException35);
        java.util.Collection<java.io.Serializable> serializableCollection37 = null;
        boolean boolean38 = exceptionMap6.putAll((java.lang.Exception) functorException35, serializableCollection37);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap39 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap40 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean41 = exceptionMap39.containsValue((java.lang.Object) exceptionMap40);
        int int42 = exceptionMap40.size();
        java.util.Collection<java.lang.Object> objCollection43 = exceptionMap40.values();
        exceptionMap40.clear();
        java.lang.Throwable throwable46 = null;
        org.apache.commons.collections4.FunctorException functorException47 = new org.apache.commons.collections4.FunctorException("", throwable46);
        int int48 = exceptionMap40.size((java.lang.Object) functorException47);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap49 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap50 = exceptionMap49.decorated();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap51 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap52 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean53 = exceptionMap51.containsValue((java.lang.Object) exceptionMap52);
        boolean boolean54 = exceptionMap50.containsValue((java.lang.Object) exceptionMap52);
        java.lang.Object obj55 = exceptionMap6.putIfAbsent((java.lang.Exception) functorException47, (java.lang.Object) boolean54);
        java.lang.String str56 = functorException47.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertNotNull(exceptionItor10);
        org.junit.Assert.assertNotNull(objCollection13);
        org.junit.Assert.assertNotNull(exceptionEntrySet14);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNotNull(exceptionEntrySet17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet23);
        org.junit.Assert.assertNotNull(exceptionMap24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(objCollection43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(exceptionMap50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + obj55 + "' != '" + false + "'", obj55, false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org.apache.commons.collections4.FunctorException: " + "'", str56, "org.apache.commons.collections4.FunctorException: ");
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.lang.String str3 = exceptionMap0.toString();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        int int7 = exceptionMap5.size();
        java.util.Collection<java.lang.Object> objCollection8 = exceptionMap5.values();
        java.util.Collection<java.lang.Object> objCollection9 = exceptionMap5.values();
        int int10 = exceptionMap5.size();
        boolean boolean11 = exceptionMap5.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean14 = exceptionMap12.containsValue((java.lang.Object) exceptionMap13);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet15 = exceptionMap13.entrySet();
        exceptionMap13.clear();
        boolean boolean17 = exceptionMap13.isEmpty();
        java.lang.Throwable throwable19 = null;
        org.apache.commons.collections4.FunctorException functorException20 = new org.apache.commons.collections4.FunctorException(throwable19);
        org.apache.commons.collections4.FunctorException functorException21 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException20);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap22 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean24 = exceptionMap22.containsValue((java.lang.Object) exceptionMap23);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap26 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean27 = exceptionMap25.containsValue((java.lang.Object) exceptionMap26);
        exceptionMap23.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap26);
        java.lang.Object obj29 = exceptionMap13.put((java.lang.Exception) functorException21, (java.lang.Object) exceptionMap26);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean33 = exceptionMap31.containsValue((java.lang.Object) exceptionMap32);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet34 = exceptionMap32.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap35 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean37 = exceptionMap35.containsValue((java.lang.Object) exceptionMap36);
        java.lang.Throwable throwable39 = null;
        org.apache.commons.collections4.FunctorException functorException40 = new org.apache.commons.collections4.FunctorException("", throwable39);
        java.lang.Throwable throwable47 = null;
        org.apache.commons.collections4.FunctorException functorException48 = new org.apache.commons.collections4.FunctorException("", throwable47);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap49 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap50 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean51 = exceptionMap49.containsValue((java.lang.Object) exceptionMap50);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap54 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection55 = exceptionMap54.values();
        int int56 = exceptionMap54.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap58 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection59 = exceptionMap58.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap60 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap61 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean62 = exceptionMap60.containsValue((java.lang.Object) exceptionMap61);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap67 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap68 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean69 = exceptionMap67.containsValue((java.lang.Object) exceptionMap68);
        int int70 = exceptionMap68.size();
        java.lang.Throwable throwable79 = null;
        org.apache.commons.collections4.FunctorException functorException80 = new org.apache.commons.collections4.FunctorException("", throwable79);
        org.apache.commons.collections4.FunctorException functorException81 = new org.apache.commons.collections4.FunctorException("", throwable79);
        java.io.Serializable[] serializableArray82 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable47, exceptionMap49, 0L, 0L, exceptionMap54, 0, exceptionMap58, exceptionMap60, (short) 1, ' ', "hi!", 100.0f, int70, false, 10.0f, '4', (-1), 1L, 1, throwable79 };
        java.util.ArrayList<java.io.Serializable> serializableList83 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList83, serializableArray82);
        boolean boolean85 = exceptionMap35.putAll((java.lang.Exception) functorException40, (java.util.Collection<java.io.Serializable>) serializableList83);
        boolean boolean87 = exceptionMap32.removeMapping((java.lang.Exception) functorException40, (java.io.Serializable) (-1.0f));
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor88 = exceptionMap32.mapIterator();
        boolean boolean89 = exceptionItor88.hasNext();
        boolean boolean90 = exceptionMap5.replace((java.lang.Exception) functorException21, (java.lang.Object) (short) 10, (java.lang.Object) exceptionItor88);
        java.lang.Object obj91 = null;
        java.lang.Object obj92 = exceptionMap0.putIfAbsent((java.lang.Exception) functorException21, obj91);
        java.lang.Throwable[] throwableArray93 = functorException21.getSuppressed();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(objCollection8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objCollection55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(objCollection59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(serializableArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(exceptionItor88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(obj92);
        org.junit.Assert.assertNotNull(throwableArray93);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Object obj11 = null;
        boolean boolean12 = exceptionMap1.containsKey(obj11);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean15 = exceptionMap13.containsValue((java.lang.Object) exceptionMap14);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet16 = exceptionMap14.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean19 = exceptionMap17.containsValue((java.lang.Object) exceptionMap18);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet20 = exceptionMap18.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap21 = exceptionMap18.map;
        int int22 = exceptionMap21.size();
        java.lang.Object obj23 = exceptionMap14.remove((java.lang.Object) int22);
        java.lang.Throwable throwable26 = null;
        org.apache.commons.collections4.FunctorException functorException27 = new org.apache.commons.collections4.FunctorException("", throwable26);
        org.apache.commons.collections4.FunctorException functorException28 = new org.apache.commons.collections4.FunctorException("", throwable26);
        org.apache.commons.collections4.FunctorException functorException30 = new org.apache.commons.collections4.FunctorException("");
        functorException28.addSuppressed((java.lang.Throwable) functorException30);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap33 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean34 = exceptionMap32.containsValue((java.lang.Object) exceptionMap33);
        boolean boolean36 = exceptionMap33.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection38 = exceptionMap33.createCollection(10);
        boolean boolean39 = exceptionMap14.putAll((java.lang.Exception) functorException30, serializableCollection38);
        boolean boolean40 = exceptionMap1.containsKey((java.lang.Object) serializableCollection38);
        int int41 = exceptionMap1.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap42 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap43 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean44 = exceptionMap42.containsValue((java.lang.Object) exceptionMap43);
        int int45 = exceptionMap43.size();
        java.util.Collection<java.lang.Object> objCollection46 = exceptionMap43.values();
        java.util.Collection<java.lang.Object> objCollection47 = exceptionMap43.values();
        int int48 = exceptionMap43.size();
        boolean boolean49 = exceptionMap43.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap51 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap52 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean53 = exceptionMap51.containsValue((java.lang.Object) exceptionMap52);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet54 = exceptionMap52.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap55 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap56 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean57 = exceptionMap55.containsValue((java.lang.Object) exceptionMap56);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet58 = exceptionMap56.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap59 = exceptionMap56.map;
        int int60 = exceptionMap59.size();
        java.lang.Object obj61 = exceptionMap52.remove((java.lang.Object) int60);
        java.lang.Throwable throwable64 = null;
        org.apache.commons.collections4.FunctorException functorException65 = new org.apache.commons.collections4.FunctorException("", throwable64);
        org.apache.commons.collections4.FunctorException functorException66 = new org.apache.commons.collections4.FunctorException("", throwable64);
        org.apache.commons.collections4.FunctorException functorException68 = new org.apache.commons.collections4.FunctorException("");
        functorException66.addSuppressed((java.lang.Throwable) functorException68);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap70 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap71 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean72 = exceptionMap70.containsValue((java.lang.Object) exceptionMap71);
        boolean boolean74 = exceptionMap71.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection76 = exceptionMap71.createCollection(10);
        boolean boolean77 = exceptionMap52.putAll((java.lang.Exception) functorException68, serializableCollection76);
        org.apache.commons.collections4.FunctorException functorException78 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException68);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap79 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap80 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean81 = exceptionMap79.containsValue((java.lang.Object) exceptionMap80);
        java.lang.Throwable throwable84 = null;
        org.apache.commons.collections4.FunctorException functorException85 = new org.apache.commons.collections4.FunctorException("", throwable84);
        org.apache.commons.collections4.FunctorException functorException86 = new org.apache.commons.collections4.FunctorException("", throwable84);
        java.lang.Object obj88 = exceptionMap80.put((java.lang.Exception) functorException86, (java.lang.Object) (-1));
        org.apache.commons.collections4.FunctorException functorException89 = new org.apache.commons.collections4.FunctorException((java.lang.Throwable) functorException86);
        java.lang.Object obj90 = exceptionMap43.put((java.lang.Exception) functorException78, (java.lang.Object) functorException86);
        java.lang.Object obj91 = exceptionMap1.get(obj90);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet20);
        org.junit.Assert.assertNotNull(exceptionMap21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(serializableCollection38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objCollection46);
        org.junit.Assert.assertNotNull(objCollection47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet58);
        org.junit.Assert.assertNotNull(exceptionMap59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(serializableCollection76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + obj88 + "' != '" + (-1) + "'", obj88, (-1));
        org.junit.Assert.assertNotNull(obj90);
        org.junit.Assert.assertEquals(obj90.toString(), "org.apache.commons.collections4.FunctorException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj90), "org.apache.commons.collections4.FunctorException: ");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj90), "org.apache.commons.collections4.FunctorException: ");
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        exceptionMap1.clear();
        java.lang.Throwable throwable7 = null;
        org.apache.commons.collections4.FunctorException functorException8 = new org.apache.commons.collections4.FunctorException("", throwable7);
        int int9 = exceptionMap1.size((java.lang.Object) functorException8);
        java.lang.String str10 = exceptionMap1.toString();
        boolean boolean12 = exceptionMap1.containsValue((java.lang.Object) (short) 0);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap13 = null;
        // The following exception was thrown during execution in test generation
        try {
            exceptionMap1.putAll(exceptionMap13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Throwable throwable13 = null;
        org.apache.commons.collections4.FunctorException functorException14 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException15 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("");
        functorException15.addSuppressed((java.lang.Throwable) functorException17);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean21 = exceptionMap19.containsValue((java.lang.Object) exceptionMap20);
        boolean boolean23 = exceptionMap20.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection25 = exceptionMap20.createCollection(10);
        boolean boolean26 = exceptionMap1.putAll((java.lang.Exception) functorException17, serializableCollection25);
        java.lang.Object obj27 = null;
        boolean boolean28 = exceptionMap1.containsValue(obj27);
        java.util.Set<java.lang.Exception> exceptionSet29 = exceptionMap1.keySet();
        int int30 = exceptionMap1.totalSize();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean33 = exceptionMap31.containsValue((java.lang.Object) exceptionMap32);
        int int34 = exceptionMap32.size();
        java.util.Collection<java.lang.Object> objCollection35 = exceptionMap32.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean38 = exceptionMap36.containsValue((java.lang.Object) exceptionMap37);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet39 = exceptionMap37.entrySet();
        exceptionMap32.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap37);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap41 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap42 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean43 = exceptionMap41.containsValue((java.lang.Object) exceptionMap42);
        java.lang.Throwable throwable45 = null;
        org.apache.commons.collections4.FunctorException functorException46 = new org.apache.commons.collections4.FunctorException("", throwable45);
        java.lang.Throwable throwable53 = null;
        org.apache.commons.collections4.FunctorException functorException54 = new org.apache.commons.collections4.FunctorException("", throwable53);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap55 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap56 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean57 = exceptionMap55.containsValue((java.lang.Object) exceptionMap56);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap60 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection61 = exceptionMap60.values();
        int int62 = exceptionMap60.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap64 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection65 = exceptionMap64.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap66 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap67 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean68 = exceptionMap66.containsValue((java.lang.Object) exceptionMap67);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap73 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap74 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean75 = exceptionMap73.containsValue((java.lang.Object) exceptionMap74);
        int int76 = exceptionMap74.size();
        java.lang.Throwable throwable85 = null;
        org.apache.commons.collections4.FunctorException functorException86 = new org.apache.commons.collections4.FunctorException("", throwable85);
        org.apache.commons.collections4.FunctorException functorException87 = new org.apache.commons.collections4.FunctorException("", throwable85);
        java.io.Serializable[] serializableArray88 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable53, exceptionMap55, 0L, 0L, exceptionMap60, 0, exceptionMap64, exceptionMap66, (short) 1, ' ', "hi!", 100.0f, int76, false, 10.0f, '4', (-1), 1L, 1, throwable85 };
        java.util.ArrayList<java.io.Serializable> serializableList89 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList89, serializableArray88);
        boolean boolean91 = exceptionMap41.putAll((java.lang.Exception) functorException46, (java.util.Collection<java.io.Serializable>) serializableList89);
        java.lang.Object obj93 = exceptionMap37.put((java.lang.Exception) functorException46, (java.lang.Object) (-1.0f));
        java.lang.Object obj94 = exceptionMap1.get(obj93);
        java.util.Collection<java.io.Serializable> serializableCollection96 = exceptionMap1.createCollection((int) (short) -1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(exceptionSet29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objCollection61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(objCollection65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(serializableArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertEquals("'" + obj93 + "' != '" + (-1.0f) + "'", obj93, (-1.0f));
        org.junit.Assert.assertNull(obj94);
        org.junit.Assert.assertNotNull(serializableCollection96);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        java.util.Collection<java.lang.Object> objCollection5 = exceptionMap1.values();
        int int6 = exceptionMap1.size();
        boolean boolean7 = exceptionMap1.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap10 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean11 = exceptionMap9.containsValue((java.lang.Object) exceptionMap10);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet12 = exceptionMap10.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean15 = exceptionMap13.containsValue((java.lang.Object) exceptionMap14);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet16 = exceptionMap14.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap17 = exceptionMap14.map;
        int int18 = exceptionMap17.size();
        java.lang.Object obj19 = exceptionMap10.remove((java.lang.Object) int18);
        java.lang.Throwable throwable22 = null;
        org.apache.commons.collections4.FunctorException functorException23 = new org.apache.commons.collections4.FunctorException("", throwable22);
        org.apache.commons.collections4.FunctorException functorException24 = new org.apache.commons.collections4.FunctorException("", throwable22);
        org.apache.commons.collections4.FunctorException functorException26 = new org.apache.commons.collections4.FunctorException("");
        functorException24.addSuppressed((java.lang.Throwable) functorException26);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap28 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean30 = exceptionMap28.containsValue((java.lang.Object) exceptionMap29);
        boolean boolean32 = exceptionMap29.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection34 = exceptionMap29.createCollection(10);
        boolean boolean35 = exceptionMap10.putAll((java.lang.Exception) functorException26, serializableCollection34);
        org.apache.commons.collections4.FunctorException functorException36 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException26);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap38 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean39 = exceptionMap37.containsValue((java.lang.Object) exceptionMap38);
        java.lang.Throwable throwable42 = null;
        org.apache.commons.collections4.FunctorException functorException43 = new org.apache.commons.collections4.FunctorException("", throwable42);
        org.apache.commons.collections4.FunctorException functorException44 = new org.apache.commons.collections4.FunctorException("", throwable42);
        java.lang.Object obj46 = exceptionMap38.put((java.lang.Exception) functorException44, (java.lang.Object) (-1));
        org.apache.commons.collections4.FunctorException functorException47 = new org.apache.commons.collections4.FunctorException((java.lang.Throwable) functorException44);
        java.lang.Object obj48 = exceptionMap1.put((java.lang.Exception) functorException36, (java.lang.Object) functorException44);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap49 = exceptionMap1.map;
        java.util.Collection<java.lang.Object> objCollection50 = exceptionMap1.values();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(objCollection5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet16);
        org.junit.Assert.assertNotNull(exceptionMap17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(serializableCollection34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + obj46 + "' != '" + (-1) + "'", obj46, (-1));
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "org.apache.commons.collections4.FunctorException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "org.apache.commons.collections4.FunctorException: ");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "org.apache.commons.collections4.FunctorException: ");
        org.junit.Assert.assertNotNull(exceptionMap49);
        org.junit.Assert.assertNotNull(objCollection50);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        exceptionMap1.clear();
        java.lang.Throwable throwable6 = null;
        org.apache.commons.collections4.FunctorException functorException7 = new org.apache.commons.collections4.FunctorException(throwable6);
        org.apache.commons.collections4.FunctorException functorException8 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException7);
        java.lang.Throwable throwable9 = null;
        org.apache.commons.collections4.FunctorException functorException10 = new org.apache.commons.collections4.FunctorException(throwable9);
        functorException8.addSuppressed((java.lang.Throwable) functorException10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean14 = exceptionMap12.containsValue((java.lang.Object) exceptionMap13);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet15 = exceptionMap13.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap16 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean18 = exceptionMap16.containsValue((java.lang.Object) exceptionMap17);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet19 = exceptionMap17.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap20 = exceptionMap17.map;
        int int21 = exceptionMap20.size();
        java.lang.Object obj22 = exceptionMap13.remove((java.lang.Object) int21);
        java.lang.Exception exception23 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection25 = exceptionMap24.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet26 = exceptionMap24.entrySet();
        java.lang.Object obj27 = exceptionMap13.put(exception23, (java.lang.Object) exceptionEntrySet26);
        java.lang.Object obj28 = exceptionMap1.put((java.lang.Exception) functorException8, (java.lang.Object) exceptionEntrySet26);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        int int32 = exceptionMap30.size();
        java.util.Collection<java.lang.Object> objCollection33 = exceptionMap30.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap34 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap35 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean36 = exceptionMap34.containsValue((java.lang.Object) exceptionMap35);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet37 = exceptionMap35.entrySet();
        exceptionMap30.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap35);
        java.util.Collection<java.io.Serializable> serializableCollection40 = exceptionMap35.createCollection(1);
        boolean boolean41 = exceptionMap1.containsKey((java.lang.Object) exceptionMap35);
        int int42 = exceptionMap35.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet19);
        org.junit.Assert.assertNotNull(exceptionMap20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(objCollection25);
        org.junit.Assert.assertNotNull(exceptionEntrySet26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "[]");
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet37);
        org.junit.Assert.assertNotNull(serializableCollection40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        boolean boolean4 = exceptionMap1.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection6 = exceptionMap1.createCollection(10);
        int int7 = exceptionMap1.totalSize();
        int int8 = exceptionMap1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(serializableCollection6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection1 = exceptionMap0.values();
        int int2 = exceptionMap0.size();
        boolean boolean4 = exceptionMap0.containsValue((java.lang.Object) true);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap5 = exceptionMap0.map;
        int int6 = exceptionMap0.size();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(exceptionMap5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        java.util.Collection<java.lang.Object> objCollection5 = exceptionMap1.values();
        int int6 = exceptionMap1.size();
        boolean boolean7 = exceptionMap1.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean10 = exceptionMap8.containsValue((java.lang.Object) exceptionMap9);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet11 = exceptionMap9.entrySet();
        exceptionMap9.clear();
        boolean boolean13 = exceptionMap9.isEmpty();
        java.lang.Throwable throwable15 = null;
        org.apache.commons.collections4.FunctorException functorException16 = new org.apache.commons.collections4.FunctorException(throwable15);
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException16);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean20 = exceptionMap18.containsValue((java.lang.Object) exceptionMap19);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap22 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean23 = exceptionMap21.containsValue((java.lang.Object) exceptionMap22);
        exceptionMap19.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap22);
        java.lang.Object obj25 = exceptionMap9.put((java.lang.Exception) functorException17, (java.lang.Object) exceptionMap22);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap28 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean29 = exceptionMap27.containsValue((java.lang.Object) exceptionMap28);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet30 = exceptionMap28.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean33 = exceptionMap31.containsValue((java.lang.Object) exceptionMap32);
        java.lang.Throwable throwable35 = null;
        org.apache.commons.collections4.FunctorException functorException36 = new org.apache.commons.collections4.FunctorException("", throwable35);
        java.lang.Throwable throwable43 = null;
        org.apache.commons.collections4.FunctorException functorException44 = new org.apache.commons.collections4.FunctorException("", throwable43);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap45 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap46 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean47 = exceptionMap45.containsValue((java.lang.Object) exceptionMap46);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap50 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection51 = exceptionMap50.values();
        int int52 = exceptionMap50.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap54 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection55 = exceptionMap54.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap56 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap57 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean58 = exceptionMap56.containsValue((java.lang.Object) exceptionMap57);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap63 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap64 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean65 = exceptionMap63.containsValue((java.lang.Object) exceptionMap64);
        int int66 = exceptionMap64.size();
        java.lang.Throwable throwable75 = null;
        org.apache.commons.collections4.FunctorException functorException76 = new org.apache.commons.collections4.FunctorException("", throwable75);
        org.apache.commons.collections4.FunctorException functorException77 = new org.apache.commons.collections4.FunctorException("", throwable75);
        java.io.Serializable[] serializableArray78 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable43, exceptionMap45, 0L, 0L, exceptionMap50, 0, exceptionMap54, exceptionMap56, (short) 1, ' ', "hi!", 100.0f, int66, false, 10.0f, '4', (-1), 1L, 1, throwable75 };
        java.util.ArrayList<java.io.Serializable> serializableList79 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList79, serializableArray78);
        boolean boolean81 = exceptionMap31.putAll((java.lang.Exception) functorException36, (java.util.Collection<java.io.Serializable>) serializableList79);
        boolean boolean83 = exceptionMap28.removeMapping((java.lang.Exception) functorException36, (java.io.Serializable) (-1.0f));
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor84 = exceptionMap28.mapIterator();
        boolean boolean85 = exceptionItor84.hasNext();
        boolean boolean86 = exceptionMap1.replace((java.lang.Exception) functorException17, (java.lang.Object) (short) 10, (java.lang.Object) exceptionItor84);
        java.lang.Object obj87 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj88 = exceptionItor84.setValue(obj87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(objCollection5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objCollection51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(objCollection55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(serializableArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(exceptionItor84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        exceptionMap1.clear();
        java.util.Collection<java.lang.Object> objCollection6 = exceptionMap1.values();
        java.util.Set<java.lang.Exception> exceptionSet7 = exceptionMap1.keySet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(exceptionSet7);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap6);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor10 = exceptionMap6.mapIterator();
        boolean boolean11 = exceptionItor10.hasNext();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean14 = exceptionMap12.containsValue((java.lang.Object) exceptionMap13);
        int int15 = exceptionMap13.size();
        java.util.Collection<java.lang.Object> objCollection16 = exceptionMap13.values();
        exceptionMap13.clear();
        java.lang.Throwable throwable19 = null;
        org.apache.commons.collections4.FunctorException functorException20 = new org.apache.commons.collections4.FunctorException("", throwable19);
        int int21 = exceptionMap13.size((java.lang.Object) functorException20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj22 = exceptionItor10.setValue((java.lang.Object) functorException20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertNotNull(exceptionItor10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        boolean boolean5 = exceptionMap1.containsKey((java.lang.Object) (byte) 1);
        int int6 = exceptionMap1.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap7 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean9 = exceptionMap7.containsValue((java.lang.Object) exceptionMap8);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet10 = exceptionMap8.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap11 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean13 = exceptionMap11.containsValue((java.lang.Object) exceptionMap12);
        java.lang.Throwable throwable15 = null;
        org.apache.commons.collections4.FunctorException functorException16 = new org.apache.commons.collections4.FunctorException("", throwable15);
        java.lang.Throwable throwable23 = null;
        org.apache.commons.collections4.FunctorException functorException24 = new org.apache.commons.collections4.FunctorException("", throwable23);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap26 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean27 = exceptionMap25.containsValue((java.lang.Object) exceptionMap26);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection31 = exceptionMap30.values();
        int int32 = exceptionMap30.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap34 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection35 = exceptionMap34.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean38 = exceptionMap36.containsValue((java.lang.Object) exceptionMap37);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap43 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap44 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean45 = exceptionMap43.containsValue((java.lang.Object) exceptionMap44);
        int int46 = exceptionMap44.size();
        java.lang.Throwable throwable55 = null;
        org.apache.commons.collections4.FunctorException functorException56 = new org.apache.commons.collections4.FunctorException("", throwable55);
        org.apache.commons.collections4.FunctorException functorException57 = new org.apache.commons.collections4.FunctorException("", throwable55);
        java.io.Serializable[] serializableArray58 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable23, exceptionMap25, 0L, 0L, exceptionMap30, 0, exceptionMap34, exceptionMap36, (short) 1, ' ', "hi!", 100.0f, int46, false, 10.0f, '4', (-1), 1L, 1, throwable55 };
        java.util.ArrayList<java.io.Serializable> serializableList59 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList59, serializableArray58);
        boolean boolean61 = exceptionMap11.putAll((java.lang.Exception) functorException16, (java.util.Collection<java.io.Serializable>) serializableList59);
        boolean boolean63 = exceptionMap8.removeMapping((java.lang.Exception) functorException16, (java.io.Serializable) (-1.0f));
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor64 = exceptionMap8.mapIterator();
        boolean boolean65 = exceptionItor64.hasNext();
        boolean boolean66 = exceptionMap1.equals((java.lang.Object) boolean65);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(serializableArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(exceptionItor64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap1 = exceptionMap0.decorated();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap2 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean4 = exceptionMap2.containsValue((java.lang.Object) exceptionMap3);
        boolean boolean5 = exceptionMap1.containsValue((java.lang.Object) exceptionMap3);
        boolean boolean6 = exceptionMap3.isEmpty();
        org.junit.Assert.assertNotNull(exceptionMap1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.lang.Throwable throwable8 = null;
        org.apache.commons.collections4.FunctorException functorException9 = new org.apache.commons.collections4.FunctorException("", throwable8);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("", throwable16);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean20 = exceptionMap18.containsValue((java.lang.Object) exceptionMap19);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection24 = exceptionMap23.values();
        int int25 = exceptionMap23.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection28 = exceptionMap27.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean38 = exceptionMap36.containsValue((java.lang.Object) exceptionMap37);
        int int39 = exceptionMap37.size();
        java.lang.Throwable throwable48 = null;
        org.apache.commons.collections4.FunctorException functorException49 = new org.apache.commons.collections4.FunctorException("", throwable48);
        org.apache.commons.collections4.FunctorException functorException50 = new org.apache.commons.collections4.FunctorException("", throwable48);
        java.io.Serializable[] serializableArray51 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable16, exceptionMap18, 0L, 0L, exceptionMap23, 0, exceptionMap27, exceptionMap29, (short) 1, ' ', "hi!", 100.0f, int39, false, 10.0f, '4', (-1), 1L, 1, throwable48 };
        java.util.ArrayList<java.io.Serializable> serializableList52 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList52, serializableArray51);
        boolean boolean54 = exceptionMap4.putAll((java.lang.Exception) functorException9, (java.util.Collection<java.io.Serializable>) serializableList52);
        boolean boolean56 = exceptionMap1.removeMapping((java.lang.Exception) functorException9, (java.io.Serializable) (-1.0f));
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor57 = exceptionMap1.mapIterator();
        boolean boolean58 = exceptionItor57.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            exceptionItor57.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(serializableArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(exceptionItor57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        exceptionMap1.clear();
        boolean boolean5 = exceptionMap1.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap7 = exceptionMap6.decorated();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean10 = exceptionMap8.containsValue((java.lang.Object) exceptionMap9);
        boolean boolean11 = exceptionMap7.containsValue((java.lang.Object) exceptionMap9);
        java.lang.Object obj12 = exceptionMap1.get((java.lang.Object) exceptionMap9);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.collections4.FunctorException functorException15 = new org.apache.commons.collections4.FunctorException("", throwable14);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap16 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean18 = exceptionMap16.containsValue((java.lang.Object) exceptionMap17);
        java.lang.Throwable throwable20 = null;
        org.apache.commons.collections4.FunctorException functorException21 = new org.apache.commons.collections4.FunctorException("", throwable20);
        java.lang.Throwable throwable28 = null;
        org.apache.commons.collections4.FunctorException functorException29 = new org.apache.commons.collections4.FunctorException("", throwable28);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean32 = exceptionMap30.containsValue((java.lang.Object) exceptionMap31);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap35 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection36 = exceptionMap35.values();
        int int37 = exceptionMap35.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap39 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection40 = exceptionMap39.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap41 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap42 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean43 = exceptionMap41.containsValue((java.lang.Object) exceptionMap42);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap48 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap49 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean50 = exceptionMap48.containsValue((java.lang.Object) exceptionMap49);
        int int51 = exceptionMap49.size();
        java.lang.Throwable throwable60 = null;
        org.apache.commons.collections4.FunctorException functorException61 = new org.apache.commons.collections4.FunctorException("", throwable60);
        org.apache.commons.collections4.FunctorException functorException62 = new org.apache.commons.collections4.FunctorException("", throwable60);
        java.io.Serializable[] serializableArray63 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable28, exceptionMap30, 0L, 0L, exceptionMap35, 0, exceptionMap39, exceptionMap41, (short) 1, ' ', "hi!", 100.0f, int51, false, 10.0f, '4', (-1), 1L, 1, throwable60 };
        java.util.ArrayList<java.io.Serializable> serializableList64 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList64, serializableArray63);
        boolean boolean66 = exceptionMap16.putAll((java.lang.Exception) functorException21, (java.util.Collection<java.io.Serializable>) serializableList64);
        functorException15.addSuppressed((java.lang.Throwable) functorException21);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap68 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap69 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean70 = exceptionMap68.containsValue((java.lang.Object) exceptionMap69);
        int int71 = exceptionMap69.size();
        java.util.Collection<java.lang.Object> objCollection72 = exceptionMap69.values();
        java.util.Collection<java.lang.Object> objCollection73 = exceptionMap69.values();
        int int74 = exceptionMap69.size();
        boolean boolean75 = exceptionMap69.isEmpty();
        java.lang.Object obj76 = exceptionMap9.replace((java.lang.Exception) functorException15, (java.lang.Object) exceptionMap69);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap77 = exceptionMap69.decorated();
        java.util.Collection<java.lang.Object> objCollection78 = exceptionMap69.values();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(exceptionMap7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objCollection36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(objCollection40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(serializableArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(objCollection72);
        org.junit.Assert.assertNotNull(objCollection73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(exceptionMap77);
        org.junit.Assert.assertNotNull(objCollection78);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        exceptionMap1.clear();
        boolean boolean5 = exceptionMap1.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection7 = exceptionMap6.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection10 = exceptionMap9.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet11 = exceptionMap9.entrySet();
        boolean boolean13 = exceptionMap6.remove((java.lang.Object) exceptionEntrySet11, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap15 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean16 = exceptionMap14.containsValue((java.lang.Object) exceptionMap15);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet17 = exceptionMap15.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap18 = exceptionMap15.map;
        int int19 = exceptionMap18.size();
        boolean boolean20 = exceptionMap6.containsKey((java.lang.Object) exceptionMap18);
        boolean boolean22 = exceptionMap6.equals((java.lang.Object) 0.0d);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean25 = exceptionMap23.containsValue((java.lang.Object) exceptionMap24);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet26 = exceptionMap24.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap28 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean29 = exceptionMap27.containsValue((java.lang.Object) exceptionMap28);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet30 = exceptionMap28.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap31 = exceptionMap28.map;
        int int32 = exceptionMap31.size();
        java.lang.Object obj33 = exceptionMap24.remove((java.lang.Object) int32);
        java.lang.Throwable throwable36 = null;
        org.apache.commons.collections4.FunctorException functorException37 = new org.apache.commons.collections4.FunctorException("", throwable36);
        org.apache.commons.collections4.FunctorException functorException38 = new org.apache.commons.collections4.FunctorException("", throwable36);
        org.apache.commons.collections4.FunctorException functorException40 = new org.apache.commons.collections4.FunctorException("");
        functorException38.addSuppressed((java.lang.Throwable) functorException40);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap42 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap43 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean44 = exceptionMap42.containsValue((java.lang.Object) exceptionMap43);
        boolean boolean46 = exceptionMap43.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection48 = exceptionMap43.createCollection(10);
        boolean boolean49 = exceptionMap24.putAll((java.lang.Exception) functorException40, serializableCollection48);
        boolean boolean50 = exceptionMap6.containsValue((java.lang.Object) serializableCollection48);
        boolean boolean51 = exceptionMap1.equals((java.lang.Object) boolean50);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertNotNull(exceptionEntrySet11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet17);
        org.junit.Assert.assertNotNull(exceptionMap18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet30);
        org.junit.Assert.assertNotNull(exceptionMap31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(serializableCollection48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj2 = exceptionMap0.get((java.lang.Object) (-1L));
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor3 = exceptionMap0.mapIterator();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        int int7 = exceptionMap5.size();
        java.util.Collection<java.lang.Object> objCollection8 = exceptionMap5.values();
        exceptionMap5.clear();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap10 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap11 = exceptionMap10.decorated();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean14 = exceptionMap12.containsValue((java.lang.Object) exceptionMap13);
        boolean boolean15 = exceptionMap11.containsValue((java.lang.Object) exceptionMap13);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap16 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection17 = exceptionMap16.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet18 = exceptionMap16.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection20 = exceptionMap19.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet21 = exceptionMap19.entrySet();
        boolean boolean23 = exceptionMap16.remove((java.lang.Object) exceptionEntrySet21, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean26 = exceptionMap24.containsValue((java.lang.Object) exceptionMap25);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet27 = exceptionMap25.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap28 = exceptionMap25.map;
        int int29 = exceptionMap28.size();
        boolean boolean30 = exceptionMap16.containsKey((java.lang.Object) exceptionMap28);
        boolean boolean32 = exceptionMap16.equals((java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection33 = exceptionMap16.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap34 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap35 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean36 = exceptionMap34.containsValue((java.lang.Object) exceptionMap35);
        int int37 = exceptionMap35.size();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet38 = exceptionMap35.entrySet();
        java.lang.Object obj40 = exceptionMap35.get((java.lang.Object) true);
        int int41 = exceptionMap35.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap42 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap43 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean44 = exceptionMap42.containsValue((java.lang.Object) exceptionMap43);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet45 = exceptionMap43.entrySet();
        exceptionMap43.clear();
        java.lang.Throwable throwable48 = null;
        org.apache.commons.collections4.FunctorException functorException49 = new org.apache.commons.collections4.FunctorException(throwable48);
        org.apache.commons.collections4.FunctorException functorException50 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException49);
        java.lang.Throwable throwable51 = null;
        org.apache.commons.collections4.FunctorException functorException52 = new org.apache.commons.collections4.FunctorException(throwable51);
        functorException50.addSuppressed((java.lang.Throwable) functorException52);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap54 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap55 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean56 = exceptionMap54.containsValue((java.lang.Object) exceptionMap55);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet57 = exceptionMap55.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap58 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap59 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean60 = exceptionMap58.containsValue((java.lang.Object) exceptionMap59);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet61 = exceptionMap59.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap62 = exceptionMap59.map;
        int int63 = exceptionMap62.size();
        java.lang.Object obj64 = exceptionMap55.remove((java.lang.Object) int63);
        java.lang.Exception exception65 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap66 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection67 = exceptionMap66.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet68 = exceptionMap66.entrySet();
        java.lang.Object obj69 = exceptionMap55.put(exception65, (java.lang.Object) exceptionEntrySet68);
        java.lang.Object obj70 = exceptionMap43.put((java.lang.Exception) functorException50, (java.lang.Object) exceptionEntrySet68);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap71 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap72 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean73 = exceptionMap71.containsValue((java.lang.Object) exceptionMap72);
        int int74 = exceptionMap72.size();
        java.util.Collection<java.lang.Object> objCollection75 = exceptionMap72.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap76 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap77 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean78 = exceptionMap76.containsValue((java.lang.Object) exceptionMap77);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet79 = exceptionMap77.entrySet();
        exceptionMap72.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap77);
        java.util.Collection<java.io.Serializable> serializableCollection82 = exceptionMap77.createCollection(1);
        boolean boolean83 = exceptionMap43.containsKey((java.lang.Object) exceptionMap77);
        java.lang.Object obj84 = exceptionMap35.get((java.lang.Object) exceptionMap77);
        boolean boolean85 = exceptionMap11.remove((java.lang.Object) objCollection33, (java.lang.Object) exceptionMap35);
        boolean boolean86 = exceptionMap5.equals((java.lang.Object) exceptionMap35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj87 = exceptionItor3.setValue((java.lang.Object) exceptionMap35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(exceptionItor3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(objCollection8);
        org.junit.Assert.assertNotNull(exceptionMap11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertNotNull(exceptionEntrySet18);
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertNotNull(exceptionEntrySet21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet27);
        org.junit.Assert.assertNotNull(exceptionMap28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(exceptionEntrySet38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet45);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet61);
        org.junit.Assert.assertNotNull(exceptionMap62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNotNull(objCollection67);
        org.junit.Assert.assertNotNull(exceptionEntrySet68);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "[]");
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "[]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(objCollection75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet79);
        org.junit.Assert.assertNotNull(serializableCollection82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Throwable throwable13 = null;
        org.apache.commons.collections4.FunctorException functorException14 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException15 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("");
        functorException15.addSuppressed((java.lang.Throwable) functorException17);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean21 = exceptionMap19.containsValue((java.lang.Object) exceptionMap20);
        boolean boolean23 = exceptionMap20.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection25 = exceptionMap20.createCollection(10);
        boolean boolean26 = exceptionMap1.putAll((java.lang.Exception) functorException17, serializableCollection25);
        java.lang.Object obj27 = null;
        boolean boolean28 = exceptionMap1.containsValue(obj27);
        java.util.Set<java.lang.Exception> exceptionSet29 = exceptionMap1.keySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj32 = exceptionMap30.get((java.lang.Object) (-1L));
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor33 = exceptionMap30.mapIterator();
        boolean boolean34 = exceptionMap1.equals((java.lang.Object) exceptionItor33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj36 = exceptionItor33.setValue((java.lang.Object) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(exceptionSet29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(exceptionItor33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        exceptionMap1.clear();
        boolean boolean5 = exceptionMap1.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection7 = exceptionMap6.values();
        int int8 = exceptionMap6.size();
        boolean boolean10 = exceptionMap6.containsValue((java.lang.Object) true);
        boolean boolean11 = exceptionMap1.containsValue((java.lang.Object) boolean10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean14 = exceptionMap12.containsValue((java.lang.Object) exceptionMap13);
        int int15 = exceptionMap13.size();
        java.util.Collection<java.lang.Object> objCollection16 = exceptionMap13.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean19 = exceptionMap17.containsValue((java.lang.Object) exceptionMap18);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet20 = exceptionMap18.entrySet();
        exceptionMap13.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap18);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap22 = exceptionMap18.decorated();
        boolean boolean23 = exceptionMap1.containsKey((java.lang.Object) exceptionMap18);
        java.util.Collection<java.io.Serializable> serializableCollection25 = exceptionMap1.createCollection((int) (short) -1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet20);
        org.junit.Assert.assertNotNull(exceptionMap22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableCollection25);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Object obj11 = null;
        boolean boolean12 = exceptionMap1.containsKey(obj11);
        int int13 = exceptionMap1.totalSize();
        org.apache.commons.collections4.FunctorException functorException14 = new org.apache.commons.collections4.FunctorException();
        org.apache.commons.collections4.FunctorException functorException15 = new org.apache.commons.collections4.FunctorException((java.lang.Throwable) functorException14);
        java.lang.Object obj16 = exceptionMap1.remove((java.lang.Object) functorException15);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.lang.Throwable throwable8 = null;
        org.apache.commons.collections4.FunctorException functorException9 = new org.apache.commons.collections4.FunctorException("", throwable8);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("", throwable16);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean20 = exceptionMap18.containsValue((java.lang.Object) exceptionMap19);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection24 = exceptionMap23.values();
        int int25 = exceptionMap23.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection28 = exceptionMap27.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean38 = exceptionMap36.containsValue((java.lang.Object) exceptionMap37);
        int int39 = exceptionMap37.size();
        java.lang.Throwable throwable48 = null;
        org.apache.commons.collections4.FunctorException functorException49 = new org.apache.commons.collections4.FunctorException("", throwable48);
        org.apache.commons.collections4.FunctorException functorException50 = new org.apache.commons.collections4.FunctorException("", throwable48);
        java.io.Serializable[] serializableArray51 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable16, exceptionMap18, 0L, 0L, exceptionMap23, 0, exceptionMap27, exceptionMap29, (short) 1, ' ', "hi!", 100.0f, int39, false, 10.0f, '4', (-1), 1L, 1, throwable48 };
        java.util.ArrayList<java.io.Serializable> serializableList52 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList52, serializableArray51);
        boolean boolean54 = exceptionMap4.putAll((java.lang.Exception) functorException9, (java.util.Collection<java.io.Serializable>) serializableList52);
        boolean boolean56 = exceptionMap1.removeMapping((java.lang.Exception) functorException9, (java.io.Serializable) (-1.0f));
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor57 = exceptionMap1.mapIterator();
        boolean boolean58 = exceptionItor57.hasNext();
        boolean boolean59 = exceptionItor57.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj60 = exceptionItor57.getValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(serializableArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(exceptionItor57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap1 = exceptionMap0.decorated();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap2 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean4 = exceptionMap2.containsValue((java.lang.Object) exceptionMap3);
        boolean boolean5 = exceptionMap1.containsValue((java.lang.Object) exceptionMap3);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection7 = exceptionMap6.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection10 = exceptionMap9.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet11 = exceptionMap9.entrySet();
        boolean boolean13 = exceptionMap6.remove((java.lang.Object) exceptionEntrySet11, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap15 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean16 = exceptionMap14.containsValue((java.lang.Object) exceptionMap15);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet17 = exceptionMap15.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap18 = exceptionMap15.map;
        int int19 = exceptionMap18.size();
        boolean boolean20 = exceptionMap6.containsKey((java.lang.Object) exceptionMap18);
        boolean boolean22 = exceptionMap6.equals((java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection23 = exceptionMap6.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean26 = exceptionMap24.containsValue((java.lang.Object) exceptionMap25);
        int int27 = exceptionMap25.size();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet28 = exceptionMap25.entrySet();
        java.lang.Object obj30 = exceptionMap25.get((java.lang.Object) true);
        int int31 = exceptionMap25.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap33 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean34 = exceptionMap32.containsValue((java.lang.Object) exceptionMap33);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet35 = exceptionMap33.entrySet();
        exceptionMap33.clear();
        java.lang.Throwable throwable38 = null;
        org.apache.commons.collections4.FunctorException functorException39 = new org.apache.commons.collections4.FunctorException(throwable38);
        org.apache.commons.collections4.FunctorException functorException40 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException39);
        java.lang.Throwable throwable41 = null;
        org.apache.commons.collections4.FunctorException functorException42 = new org.apache.commons.collections4.FunctorException(throwable41);
        functorException40.addSuppressed((java.lang.Throwable) functorException42);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap44 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap45 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean46 = exceptionMap44.containsValue((java.lang.Object) exceptionMap45);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet47 = exceptionMap45.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap48 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap49 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean50 = exceptionMap48.containsValue((java.lang.Object) exceptionMap49);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet51 = exceptionMap49.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap52 = exceptionMap49.map;
        int int53 = exceptionMap52.size();
        java.lang.Object obj54 = exceptionMap45.remove((java.lang.Object) int53);
        java.lang.Exception exception55 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap56 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection57 = exceptionMap56.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet58 = exceptionMap56.entrySet();
        java.lang.Object obj59 = exceptionMap45.put(exception55, (java.lang.Object) exceptionEntrySet58);
        java.lang.Object obj60 = exceptionMap33.put((java.lang.Exception) functorException40, (java.lang.Object) exceptionEntrySet58);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap61 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap62 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean63 = exceptionMap61.containsValue((java.lang.Object) exceptionMap62);
        int int64 = exceptionMap62.size();
        java.util.Collection<java.lang.Object> objCollection65 = exceptionMap62.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap66 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap67 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean68 = exceptionMap66.containsValue((java.lang.Object) exceptionMap67);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet69 = exceptionMap67.entrySet();
        exceptionMap62.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap67);
        java.util.Collection<java.io.Serializable> serializableCollection72 = exceptionMap67.createCollection(1);
        boolean boolean73 = exceptionMap33.containsKey((java.lang.Object) exceptionMap67);
        java.lang.Object obj74 = exceptionMap25.get((java.lang.Object) exceptionMap67);
        boolean boolean75 = exceptionMap1.remove((java.lang.Object) objCollection23, (java.lang.Object) exceptionMap25);
        int int76 = exceptionMap25.size();
        org.junit.Assert.assertNotNull(exceptionMap1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertNotNull(exceptionEntrySet11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet17);
        org.junit.Assert.assertNotNull(exceptionMap18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(exceptionEntrySet28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet35);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet51);
        org.junit.Assert.assertNotNull(exceptionMap52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(objCollection57);
        org.junit.Assert.assertNotNull(exceptionEntrySet58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "[]");
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "[]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(objCollection65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet69);
        org.junit.Assert.assertNotNull(serializableCollection72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        int int7 = exceptionMap5.size();
        java.util.Collection<java.lang.Object> objCollection8 = exceptionMap5.values();
        java.util.Collection<java.lang.Object> objCollection9 = exceptionMap5.values();
        java.lang.Object obj10 = exceptionMap3.remove((java.lang.Object) objCollection9);
        java.lang.Object obj11 = exceptionMap0.get((java.lang.Object) objCollection9);
        java.util.Collection<java.lang.Object> objCollection12 = exceptionMap0.values();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(objCollection8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(objCollection12);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap6);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor10 = exceptionMap6.mapIterator();
        java.lang.Object obj11 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection13 = exceptionMap12.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet14 = exceptionMap12.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap15 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection16 = exceptionMap15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet17 = exceptionMap15.entrySet();
        boolean boolean19 = exceptionMap12.remove((java.lang.Object) exceptionEntrySet17, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean22 = exceptionMap20.containsValue((java.lang.Object) exceptionMap21);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet23 = exceptionMap21.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap24 = exceptionMap21.map;
        int int25 = exceptionMap24.size();
        boolean boolean26 = exceptionMap12.containsKey((java.lang.Object) exceptionMap24);
        boolean boolean28 = exceptionMap12.equals((java.lang.Object) 0.0d);
        boolean boolean29 = exceptionMap6.remove(obj11, (java.lang.Object) boolean28);
        boolean boolean30 = exceptionMap6.isEmpty();
        java.lang.Object obj31 = null;
        java.lang.Object obj32 = exceptionMap6.remove(obj31);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertNotNull(exceptionItor10);
        org.junit.Assert.assertNotNull(objCollection13);
        org.junit.Assert.assertNotNull(exceptionEntrySet14);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNotNull(exceptionEntrySet17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet23);
        org.junit.Assert.assertNotNull(exceptionMap24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(obj32);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap6);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap10 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap11 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean12 = exceptionMap10.containsValue((java.lang.Object) exceptionMap11);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean15 = exceptionMap13.containsValue((java.lang.Object) exceptionMap14);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet16 = exceptionMap14.entrySet();
        exceptionMap14.clear();
        boolean boolean18 = exceptionMap14.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.lang.Class<?>> exceptionMap19 = org.apache.commons.collections4.map.MultiValueMap.multiValueMap((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap14);
        boolean boolean20 = exceptionMap10.equals((java.lang.Object) exceptionMap14);
        java.lang.Throwable throwable22 = null;
        org.apache.commons.collections4.FunctorException functorException23 = new org.apache.commons.collections4.FunctorException(throwable22);
        org.apache.commons.collections4.FunctorException functorException24 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException23);
        java.lang.Throwable throwable25 = null;
        org.apache.commons.collections4.FunctorException functorException26 = new org.apache.commons.collections4.FunctorException(throwable25);
        functorException24.addSuppressed((java.lang.Throwable) functorException26);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap28 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection29 = exceptionMap28.values();
        java.lang.Object obj30 = null;
        java.lang.Object obj31 = exceptionMap28.remove(obj30);
        java.lang.Object obj32 = exceptionMap14.put((java.lang.Exception) functorException24, obj31);
        exceptionMap6.map = exceptionMap14;
        java.util.Collection<java.lang.Object> objCollection34 = exceptionMap14.values();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(exceptionMap19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objCollection29);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(objCollection34);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Object obj11 = null;
        boolean boolean12 = exceptionMap1.containsKey(obj11);
        java.lang.Object obj13 = null;
        boolean boolean14 = exceptionMap1.containsKey(obj13);
        java.lang.Throwable throwable15 = null;
        org.apache.commons.collections4.FunctorException functorException16 = new org.apache.commons.collections4.FunctorException(throwable15);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean19 = exceptionMap17.containsValue((java.lang.Object) exceptionMap18);
        int int20 = exceptionMap18.size();
        java.util.Collection<java.lang.Object> objCollection21 = exceptionMap18.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap22 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean24 = exceptionMap22.containsValue((java.lang.Object) exceptionMap23);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet25 = exceptionMap23.entrySet();
        exceptionMap18.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap23);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor27 = exceptionMap23.mapIterator();
        java.lang.Object obj28 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection30 = exceptionMap29.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet31 = exceptionMap29.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection33 = exceptionMap32.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet34 = exceptionMap32.entrySet();
        boolean boolean36 = exceptionMap29.remove((java.lang.Object) exceptionEntrySet34, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap38 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean39 = exceptionMap37.containsValue((java.lang.Object) exceptionMap38);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet40 = exceptionMap38.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap41 = exceptionMap38.map;
        int int42 = exceptionMap41.size();
        boolean boolean43 = exceptionMap29.containsKey((java.lang.Object) exceptionMap41);
        boolean boolean45 = exceptionMap29.equals((java.lang.Object) 0.0d);
        boolean boolean46 = exceptionMap23.remove(obj28, (java.lang.Object) boolean45);
        java.lang.Throwable throwable48 = null;
        org.apache.commons.collections4.FunctorException functorException49 = new org.apache.commons.collections4.FunctorException(throwable48);
        org.apache.commons.collections4.FunctorException functorException50 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException49);
        java.lang.Throwable throwable51 = null;
        org.apache.commons.collections4.FunctorException functorException52 = new org.apache.commons.collections4.FunctorException(throwable51);
        functorException50.addSuppressed((java.lang.Throwable) functorException52);
        java.util.Collection<java.io.Serializable> serializableCollection54 = null;
        boolean boolean55 = exceptionMap23.putAll((java.lang.Exception) functorException52, serializableCollection54);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap56 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap57 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean58 = exceptionMap56.containsValue((java.lang.Object) exceptionMap57);
        int int59 = exceptionMap57.size();
        java.util.Collection<java.lang.Object> objCollection60 = exceptionMap57.values();
        exceptionMap57.clear();
        java.lang.Throwable throwable63 = null;
        org.apache.commons.collections4.FunctorException functorException64 = new org.apache.commons.collections4.FunctorException("", throwable63);
        int int65 = exceptionMap57.size((java.lang.Object) functorException64);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap66 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap67 = exceptionMap66.decorated();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap68 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap69 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean70 = exceptionMap68.containsValue((java.lang.Object) exceptionMap69);
        boolean boolean71 = exceptionMap67.containsValue((java.lang.Object) exceptionMap69);
        java.lang.Object obj72 = exceptionMap23.putIfAbsent((java.lang.Exception) functorException64, (java.lang.Object) boolean71);
        java.lang.Throwable[] throwableArray73 = functorException64.getSuppressed();
        boolean boolean74 = exceptionMap1.removeMapping((java.lang.Exception) functorException16, (java.io.Serializable) throwableArray73);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(objCollection21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet25);
        org.junit.Assert.assertNotNull(exceptionItor27);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertNotNull(exceptionEntrySet31);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertNotNull(exceptionEntrySet34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet40);
        org.junit.Assert.assertNotNull(exceptionMap41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(objCollection60);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(exceptionMap67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + obj72 + "' != '" + false + "'", obj72, false);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap1 = exceptionMap0.decorated();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap2 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean4 = exceptionMap2.containsValue((java.lang.Object) exceptionMap3);
        boolean boolean5 = exceptionMap1.containsValue((java.lang.Object) exceptionMap3);
        boolean boolean6 = exceptionMap3.isEmpty();
        int int7 = exceptionMap3.size();
        org.junit.Assert.assertNotNull(exceptionMap1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        boolean boolean5 = exceptionMap1.containsKey((java.lang.Object) (byte) 1);
        java.lang.Throwable throwable8 = null;
        org.apache.commons.collections4.FunctorException functorException9 = new org.apache.commons.collections4.FunctorException("", throwable8);
        org.apache.commons.collections4.FunctorException functorException10 = new org.apache.commons.collections4.FunctorException("", throwable8);
        org.apache.commons.collections4.FunctorException functorException12 = new org.apache.commons.collections4.FunctorException("");
        functorException10.addSuppressed((java.lang.Throwable) functorException12);
        boolean boolean15 = exceptionMap1.removeMapping((java.lang.Exception) functorException12, (java.io.Serializable) 1);
        java.lang.Exception exception16 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean19 = exceptionMap17.containsValue((java.lang.Object) exceptionMap18);
        boolean boolean21 = exceptionMap18.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection23 = exceptionMap18.createCollection(10);
        boolean boolean24 = exceptionMap1.putAll(exception16, serializableCollection23);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap26 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean27 = exceptionMap25.containsValue((java.lang.Object) exceptionMap26);
        int int28 = exceptionMap26.size();
        java.util.Collection<java.lang.Object> objCollection29 = exceptionMap26.values();
        java.util.Collection<java.lang.Object> objCollection30 = exceptionMap26.values();
        java.lang.Object obj31 = exceptionMap1.remove((java.lang.Object) objCollection30);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(serializableCollection23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objCollection29);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertNull(obj31);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj2 = exceptionMap0.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable4 = null;
        org.apache.commons.collections4.FunctorException functorException5 = new org.apache.commons.collections4.FunctorException(throwable4);
        org.apache.commons.collections4.FunctorException functorException6 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException5);
        boolean boolean8 = exceptionMap0.removeMapping((java.lang.Exception) functorException5, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet9 = exceptionMap0.keySet();
        int int10 = exceptionMap0.totalSize();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap11 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean13 = exceptionMap11.containsValue((java.lang.Object) exceptionMap12);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet14 = exceptionMap12.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap15 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap16 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean17 = exceptionMap15.containsValue((java.lang.Object) exceptionMap16);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet18 = exceptionMap16.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap19 = exceptionMap16.map;
        int int20 = exceptionMap19.size();
        java.lang.Object obj21 = exceptionMap12.remove((java.lang.Object) int20);
        java.lang.Throwable throwable24 = null;
        org.apache.commons.collections4.FunctorException functorException25 = new org.apache.commons.collections4.FunctorException("", throwable24);
        org.apache.commons.collections4.FunctorException functorException26 = new org.apache.commons.collections4.FunctorException("", throwable24);
        org.apache.commons.collections4.FunctorException functorException28 = new org.apache.commons.collections4.FunctorException("");
        functorException26.addSuppressed((java.lang.Throwable) functorException28);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean32 = exceptionMap30.containsValue((java.lang.Object) exceptionMap31);
        boolean boolean34 = exceptionMap31.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection36 = exceptionMap31.createCollection(10);
        boolean boolean37 = exceptionMap12.putAll((java.lang.Exception) functorException28, serializableCollection36);
        java.lang.Object obj38 = null;
        boolean boolean39 = exceptionMap12.containsValue(obj38);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap40 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap41 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean42 = exceptionMap40.containsValue((java.lang.Object) exceptionMap41);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet43 = exceptionMap41.entrySet();
        exceptionMap41.clear();
        boolean boolean45 = exceptionMap41.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap46 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection47 = exceptionMap46.values();
        int int48 = exceptionMap46.size();
        boolean boolean50 = exceptionMap46.containsValue((java.lang.Object) true);
        boolean boolean51 = exceptionMap41.containsValue((java.lang.Object) boolean50);
        java.util.Set<java.lang.Exception> exceptionSet52 = exceptionMap41.keySet();
        boolean boolean53 = exceptionMap12.containsValue((java.lang.Object) exceptionSet52);
        boolean boolean54 = exceptionMap0.containsValue((java.lang.Object) exceptionMap12);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(exceptionSet9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet18);
        org.junit.Assert.assertNotNull(exceptionMap19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(serializableCollection36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objCollection47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(exceptionSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap6);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor10 = exceptionMap6.mapIterator();
        java.lang.Object obj11 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection13 = exceptionMap12.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet14 = exceptionMap12.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap15 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection16 = exceptionMap15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet17 = exceptionMap15.entrySet();
        boolean boolean19 = exceptionMap12.remove((java.lang.Object) exceptionEntrySet17, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean22 = exceptionMap20.containsValue((java.lang.Object) exceptionMap21);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet23 = exceptionMap21.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap24 = exceptionMap21.map;
        int int25 = exceptionMap24.size();
        boolean boolean26 = exceptionMap12.containsKey((java.lang.Object) exceptionMap24);
        boolean boolean28 = exceptionMap12.equals((java.lang.Object) 0.0d);
        boolean boolean29 = exceptionMap6.remove(obj11, (java.lang.Object) boolean28);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.collections4.FunctorException functorException32 = new org.apache.commons.collections4.FunctorException(throwable31);
        org.apache.commons.collections4.FunctorException functorException33 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException32);
        java.lang.Throwable throwable34 = null;
        org.apache.commons.collections4.FunctorException functorException35 = new org.apache.commons.collections4.FunctorException(throwable34);
        functorException33.addSuppressed((java.lang.Throwable) functorException35);
        java.util.Collection<java.io.Serializable> serializableCollection37 = null;
        boolean boolean38 = exceptionMap6.putAll((java.lang.Exception) functorException35, serializableCollection37);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap39 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap40 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean41 = exceptionMap39.containsValue((java.lang.Object) exceptionMap40);
        int int42 = exceptionMap40.size();
        java.util.Collection<java.lang.Object> objCollection43 = exceptionMap40.values();
        exceptionMap40.clear();
        java.lang.Throwable throwable46 = null;
        org.apache.commons.collections4.FunctorException functorException47 = new org.apache.commons.collections4.FunctorException("", throwable46);
        int int48 = exceptionMap40.size((java.lang.Object) functorException47);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap49 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap50 = exceptionMap49.decorated();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap51 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap52 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean53 = exceptionMap51.containsValue((java.lang.Object) exceptionMap52);
        boolean boolean54 = exceptionMap50.containsValue((java.lang.Object) exceptionMap52);
        java.lang.Object obj55 = exceptionMap6.putIfAbsent((java.lang.Exception) functorException47, (java.lang.Object) boolean54);
        java.util.Collection<java.lang.Object> objCollection56 = exceptionMap6.values();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertNotNull(exceptionItor10);
        org.junit.Assert.assertNotNull(objCollection13);
        org.junit.Assert.assertNotNull(exceptionEntrySet14);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNotNull(exceptionEntrySet17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet23);
        org.junit.Assert.assertNotNull(exceptionMap24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(objCollection43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(exceptionMap50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + obj55 + "' != '" + false + "'", obj55, false);
        org.junit.Assert.assertNotNull(objCollection56);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        boolean boolean4 = exceptionMap1.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection6 = exceptionMap1.createCollection(10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap7 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj9 = exceptionMap7.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable11 = null;
        org.apache.commons.collections4.FunctorException functorException12 = new org.apache.commons.collections4.FunctorException(throwable11);
        org.apache.commons.collections4.FunctorException functorException13 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException12);
        boolean boolean15 = exceptionMap7.removeMapping((java.lang.Exception) functorException12, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet16 = exceptionMap7.keySet();
        java.util.Collection<java.lang.Object> objCollection17 = exceptionMap7.values();
        boolean boolean18 = exceptionMap1.containsValue((java.lang.Object) exceptionMap7);
        java.lang.Throwable throwable21 = null;
        org.apache.commons.collections4.FunctorException functorException22 = new org.apache.commons.collections4.FunctorException("", throwable21);
        org.apache.commons.collections4.FunctorException functorException23 = new org.apache.commons.collections4.FunctorException("", throwable21);
        boolean boolean24 = exceptionMap7.containsKey((java.lang.Object) "");
        boolean boolean25 = exceptionMap7.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(serializableCollection6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(exceptionSet16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.lang.Throwable throwable8 = null;
        org.apache.commons.collections4.FunctorException functorException9 = new org.apache.commons.collections4.FunctorException("", throwable8);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("", throwable16);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean20 = exceptionMap18.containsValue((java.lang.Object) exceptionMap19);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection24 = exceptionMap23.values();
        int int25 = exceptionMap23.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection28 = exceptionMap27.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean38 = exceptionMap36.containsValue((java.lang.Object) exceptionMap37);
        int int39 = exceptionMap37.size();
        java.lang.Throwable throwable48 = null;
        org.apache.commons.collections4.FunctorException functorException49 = new org.apache.commons.collections4.FunctorException("", throwable48);
        org.apache.commons.collections4.FunctorException functorException50 = new org.apache.commons.collections4.FunctorException("", throwable48);
        java.io.Serializable[] serializableArray51 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable16, exceptionMap18, 0L, 0L, exceptionMap23, 0, exceptionMap27, exceptionMap29, (short) 1, ' ', "hi!", 100.0f, int39, false, 10.0f, '4', (-1), 1L, 1, throwable48 };
        java.util.ArrayList<java.io.Serializable> serializableList52 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList52, serializableArray51);
        boolean boolean54 = exceptionMap4.putAll((java.lang.Exception) functorException9, (java.util.Collection<java.io.Serializable>) serializableList52);
        boolean boolean56 = exceptionMap1.removeMapping((java.lang.Exception) functorException9, (java.io.Serializable) (-1.0f));
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor57 = exceptionMap1.mapIterator();
        boolean boolean58 = exceptionItor57.hasNext();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap59 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap60 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean61 = exceptionMap59.containsValue((java.lang.Object) exceptionMap60);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet62 = exceptionMap60.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap63 = exceptionMap60.map;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj64 = exceptionItor57.setValue((java.lang.Object) exceptionMap60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(serializableArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(exceptionItor57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet62);
        org.junit.Assert.assertNotNull(exceptionMap63);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap7 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean8 = exceptionMap6.containsValue((java.lang.Object) exceptionMap7);
        boolean boolean10 = exceptionMap7.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection12 = exceptionMap7.createCollection(10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj15 = exceptionMap13.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable17 = null;
        org.apache.commons.collections4.FunctorException functorException18 = new org.apache.commons.collections4.FunctorException(throwable17);
        org.apache.commons.collections4.FunctorException functorException19 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException18);
        boolean boolean21 = exceptionMap13.removeMapping((java.lang.Exception) functorException18, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet22 = exceptionMap13.keySet();
        java.util.Collection<java.lang.Object> objCollection23 = exceptionMap13.values();
        boolean boolean24 = exceptionMap7.containsValue((java.lang.Object) exceptionMap13);
        boolean boolean25 = exceptionMap1.remove((java.lang.Object) "", (java.lang.Object) exceptionMap7);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet26 = exceptionMap1.entrySet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(serializableCollection12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(exceptionSet22);
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet26);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        boolean boolean4 = exceptionMap1.containsKey((java.lang.Object) (short) 10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap10 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean11 = exceptionMap9.containsValue((java.lang.Object) exceptionMap10);
        int int12 = exceptionMap10.size();
        java.util.Collection<java.lang.Object> objCollection13 = exceptionMap10.values();
        java.util.Collection<java.lang.Object> objCollection14 = exceptionMap10.values();
        java.lang.Object obj15 = exceptionMap8.remove((java.lang.Object) objCollection14);
        java.lang.Object obj16 = exceptionMap5.get((java.lang.Object) objCollection14);
        boolean boolean17 = exceptionMap5.isEmpty();
        boolean boolean19 = exceptionMap1.containsValue((java.lang.Object) exceptionMap5, (java.lang.Object) (byte) 10);
        java.lang.Object obj20 = null;
        java.lang.Object obj21 = exceptionMap1.get(obj20);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objCollection13);
        org.junit.Assert.assertNotNull(objCollection14);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj21);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        boolean boolean5 = exceptionMap1.containsKey((java.lang.Object) (byte) 1);
        int int6 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection7 = exceptionMap1.values();
        java.lang.Throwable throwable10 = null;
        org.apache.commons.collections4.FunctorException functorException11 = new org.apache.commons.collections4.FunctorException("", throwable10);
        org.apache.commons.collections4.FunctorException functorException12 = new org.apache.commons.collections4.FunctorException("", throwable10);
        org.apache.commons.collections4.FunctorException functorException14 = new org.apache.commons.collections4.FunctorException("");
        functorException12.addSuppressed((java.lang.Throwable) functorException14);
        java.lang.Throwable[] throwableArray16 = functorException14.getSuppressed();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean19 = exceptionMap17.containsValue((java.lang.Object) exceptionMap18);
        int int20 = exceptionMap18.size();
        java.util.Collection<java.lang.Object> objCollection21 = exceptionMap18.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap22 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean24 = exceptionMap22.containsValue((java.lang.Object) exceptionMap23);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet25 = exceptionMap23.entrySet();
        exceptionMap18.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap23);
        java.util.Collection<java.io.Serializable> serializableCollection28 = exceptionMap23.createCollection(1);
        boolean boolean29 = exceptionMap1.putAll((java.lang.Exception) functorException14, serializableCollection28);
        int int30 = exceptionMap1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(objCollection21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet25);
        org.junit.Assert.assertNotNull(serializableCollection28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap6);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor10 = exceptionMap6.mapIterator();
        boolean boolean11 = exceptionItor10.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = exceptionItor10.getValue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertNotNull(exceptionItor10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection1 = exceptionMap0.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet2 = exceptionMap0.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap3.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet5 = exceptionMap3.entrySet();
        boolean boolean7 = exceptionMap0.remove((java.lang.Object) exceptionEntrySet5, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean10 = exceptionMap8.containsValue((java.lang.Object) exceptionMap9);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet11 = exceptionMap9.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap12 = exceptionMap9.map;
        int int13 = exceptionMap12.size();
        boolean boolean14 = exceptionMap0.containsKey((java.lang.Object) exceptionMap12);
        boolean boolean16 = exceptionMap0.equals((java.lang.Object) 0.0d);
        int int17 = exceptionMap0.size();
        exceptionMap0.clear();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean22 = exceptionMap20.containsValue((java.lang.Object) exceptionMap21);
        boolean boolean24 = exceptionMap21.containsKey((java.lang.Object) (short) 10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap26 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean27 = exceptionMap25.containsValue((java.lang.Object) exceptionMap26);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap28 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        int int32 = exceptionMap30.size();
        java.util.Collection<java.lang.Object> objCollection33 = exceptionMap30.values();
        java.util.Collection<java.lang.Object> objCollection34 = exceptionMap30.values();
        java.lang.Object obj35 = exceptionMap28.remove((java.lang.Object) objCollection34);
        java.lang.Object obj36 = exceptionMap25.get((java.lang.Object) objCollection34);
        boolean boolean37 = exceptionMap25.isEmpty();
        boolean boolean39 = exceptionMap21.containsValue((java.lang.Object) exceptionMap25, (java.lang.Object) (byte) 10);
        java.lang.Object obj40 = exceptionMap0.getOrDefault((java.lang.Object) 100.0d, (java.lang.Object) exceptionMap21);
        java.util.Iterator<java.util.Map.Entry<java.lang.Exception, java.io.Serializable>> exceptionEntryItor41 = exceptionMap21.iterator();
        java.lang.Throwable throwable44 = null;
        org.apache.commons.collections4.FunctorException functorException45 = new org.apache.commons.collections4.FunctorException("", throwable44);
        org.apache.commons.collections4.FunctorException functorException46 = new org.apache.commons.collections4.FunctorException("", throwable44);
        org.apache.commons.collections4.FunctorException functorException48 = new org.apache.commons.collections4.FunctorException("");
        functorException46.addSuppressed((java.lang.Throwable) functorException48);
        java.lang.Throwable[] throwableArray50 = functorException48.getSuppressed();
        org.apache.commons.collections4.FunctorException functorException51 = new org.apache.commons.collections4.FunctorException((java.lang.Throwable) functorException48);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap52 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap53 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean54 = exceptionMap52.containsValue((java.lang.Object) exceptionMap53);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet55 = exceptionMap53.entrySet();
        boolean boolean57 = exceptionMap53.containsKey((java.lang.Object) (byte) 1);
        java.lang.Throwable throwable60 = null;
        org.apache.commons.collections4.FunctorException functorException61 = new org.apache.commons.collections4.FunctorException("", throwable60);
        org.apache.commons.collections4.FunctorException functorException62 = new org.apache.commons.collections4.FunctorException("", throwable60);
        org.apache.commons.collections4.FunctorException functorException64 = new org.apache.commons.collections4.FunctorException("");
        functorException62.addSuppressed((java.lang.Throwable) functorException64);
        boolean boolean67 = exceptionMap53.removeMapping((java.lang.Exception) functorException64, (java.io.Serializable) 1);
        java.lang.Exception exception68 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap69 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap70 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean71 = exceptionMap69.containsValue((java.lang.Object) exceptionMap70);
        boolean boolean73 = exceptionMap70.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection75 = exceptionMap70.createCollection(10);
        boolean boolean76 = exceptionMap53.putAll(exception68, serializableCollection75);
        java.lang.Object obj77 = exceptionMap21.replace((java.lang.Exception) functorException48, (java.lang.Object) exception68);
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(exceptionEntrySet2);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(exceptionEntrySet5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet11);
        org.junit.Assert.assertNotNull(exceptionMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{}");
        org.junit.Assert.assertNotNull(exceptionEntryItor41);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(serializableCollection75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(obj77);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj2 = exceptionMap0.get((java.lang.Object) (-1L));
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor3 = exceptionMap0.mapIterator();
        exceptionMap0.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet5 = exceptionMap0.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap7 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean8 = exceptionMap6.containsValue((java.lang.Object) exceptionMap7);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet9 = exceptionMap7.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap10 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap11 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean12 = exceptionMap10.containsValue((java.lang.Object) exceptionMap11);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.collections4.FunctorException functorException15 = new org.apache.commons.collections4.FunctorException("", throwable14);
        java.lang.Throwable throwable22 = null;
        org.apache.commons.collections4.FunctorException functorException23 = new org.apache.commons.collections4.FunctorException("", throwable22);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean26 = exceptionMap24.containsValue((java.lang.Object) exceptionMap25);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection30 = exceptionMap29.values();
        int int31 = exceptionMap29.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap33 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection34 = exceptionMap33.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap35 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean37 = exceptionMap35.containsValue((java.lang.Object) exceptionMap36);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap42 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap43 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean44 = exceptionMap42.containsValue((java.lang.Object) exceptionMap43);
        int int45 = exceptionMap43.size();
        java.lang.Throwable throwable54 = null;
        org.apache.commons.collections4.FunctorException functorException55 = new org.apache.commons.collections4.FunctorException("", throwable54);
        org.apache.commons.collections4.FunctorException functorException56 = new org.apache.commons.collections4.FunctorException("", throwable54);
        java.io.Serializable[] serializableArray57 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable22, exceptionMap24, 0L, 0L, exceptionMap29, 0, exceptionMap33, exceptionMap35, (short) 1, ' ', "hi!", 100.0f, int45, false, 10.0f, '4', (-1), 1L, 1, throwable54 };
        java.util.ArrayList<java.io.Serializable> serializableList58 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList58, serializableArray57);
        boolean boolean60 = exceptionMap10.putAll((java.lang.Exception) functorException15, (java.util.Collection<java.io.Serializable>) serializableList58);
        boolean boolean62 = exceptionMap7.removeMapping((java.lang.Exception) functorException15, (java.io.Serializable) (-1.0f));
        boolean boolean63 = exceptionMap7.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap64 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap65 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean66 = exceptionMap64.containsValue((java.lang.Object) exceptionMap65);
        int int67 = exceptionMap65.size();
        java.util.Collection<java.lang.Object> objCollection68 = exceptionMap65.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap69 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap70 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean71 = exceptionMap69.containsValue((java.lang.Object) exceptionMap70);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet72 = exceptionMap70.entrySet();
        exceptionMap65.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap70);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap74 = exceptionMap70.decorated();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap75 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap76 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean77 = exceptionMap75.containsValue((java.lang.Object) exceptionMap76);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet78 = exceptionMap76.entrySet();
        exceptionMap76.clear();
        boolean boolean80 = exceptionMap76.isEmpty();
        java.lang.Throwable throwable82 = null;
        org.apache.commons.collections4.FunctorException functorException83 = new org.apache.commons.collections4.FunctorException(throwable82);
        org.apache.commons.collections4.FunctorException functorException84 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException83);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap85 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap86 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean87 = exceptionMap85.containsValue((java.lang.Object) exceptionMap86);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap88 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap89 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean90 = exceptionMap88.containsValue((java.lang.Object) exceptionMap89);
        exceptionMap86.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap89);
        java.lang.Object obj92 = exceptionMap76.put((java.lang.Exception) functorException84, (java.lang.Object) exceptionMap89);
        boolean boolean93 = exceptionMap7.remove((java.lang.Object) exceptionMap74, (java.lang.Object) exceptionMap89);
        java.lang.Object obj94 = exceptionMap0.get((java.lang.Object) exceptionMap89);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(exceptionItor3);
        org.junit.Assert.assertNotNull(exceptionEntrySet5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(serializableArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objCollection68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet72);
        org.junit.Assert.assertNotNull(exceptionMap74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(obj92);
        org.junit.Assert.assertEquals(obj92.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj92), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj92), "{}");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(obj94);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap6);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor10 = exceptionMap6.mapIterator();
        boolean boolean11 = exceptionItor10.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Exception exception12 = exceptionItor10.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertNotNull(exceptionItor10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        exceptionMap1.clear();
        java.lang.Throwable throwable6 = null;
        org.apache.commons.collections4.FunctorException functorException7 = new org.apache.commons.collections4.FunctorException(throwable6);
        org.apache.commons.collections4.FunctorException functorException8 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException7);
        java.lang.Throwable throwable9 = null;
        org.apache.commons.collections4.FunctorException functorException10 = new org.apache.commons.collections4.FunctorException(throwable9);
        functorException8.addSuppressed((java.lang.Throwable) functorException10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean14 = exceptionMap12.containsValue((java.lang.Object) exceptionMap13);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet15 = exceptionMap13.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap16 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean18 = exceptionMap16.containsValue((java.lang.Object) exceptionMap17);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet19 = exceptionMap17.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap20 = exceptionMap17.map;
        int int21 = exceptionMap20.size();
        java.lang.Object obj22 = exceptionMap13.remove((java.lang.Object) int21);
        java.lang.Exception exception23 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection25 = exceptionMap24.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet26 = exceptionMap24.entrySet();
        java.lang.Object obj27 = exceptionMap13.put(exception23, (java.lang.Object) exceptionEntrySet26);
        java.lang.Object obj28 = exceptionMap1.put((java.lang.Exception) functorException8, (java.lang.Object) exceptionEntrySet26);
        boolean boolean29 = exceptionMap1.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean32 = exceptionMap30.containsValue((java.lang.Object) exceptionMap31);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet33 = exceptionMap31.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap34 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap35 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean36 = exceptionMap34.containsValue((java.lang.Object) exceptionMap35);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet37 = exceptionMap35.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap38 = exceptionMap35.map;
        int int39 = exceptionMap38.size();
        java.lang.Object obj40 = exceptionMap31.remove((java.lang.Object) int39);
        java.lang.Throwable throwable43 = null;
        org.apache.commons.collections4.FunctorException functorException44 = new org.apache.commons.collections4.FunctorException("", throwable43);
        org.apache.commons.collections4.FunctorException functorException45 = new org.apache.commons.collections4.FunctorException("", throwable43);
        org.apache.commons.collections4.FunctorException functorException47 = new org.apache.commons.collections4.FunctorException("");
        functorException45.addSuppressed((java.lang.Throwable) functorException47);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap49 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap50 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean51 = exceptionMap49.containsValue((java.lang.Object) exceptionMap50);
        boolean boolean53 = exceptionMap50.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection55 = exceptionMap50.createCollection(10);
        boolean boolean56 = exceptionMap31.putAll((java.lang.Exception) functorException47, serializableCollection55);
        java.lang.Object obj57 = null;
        boolean boolean58 = exceptionMap1.removeMapping((java.lang.Object) boolean56, obj57);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet19);
        org.junit.Assert.assertNotNull(exceptionMap20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(objCollection25);
        org.junit.Assert.assertNotNull(exceptionEntrySet26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "[]");
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet37);
        org.junit.Assert.assertNotNull(exceptionMap38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(serializableCollection55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap6);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor10 = exceptionMap6.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Exception exception11 = exceptionItor10.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertNotNull(exceptionItor10);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        int int7 = exceptionMap5.size();
        java.util.Collection<java.lang.Object> objCollection8 = exceptionMap5.values();
        java.util.Collection<java.lang.Object> objCollection9 = exceptionMap5.values();
        java.lang.Object obj10 = exceptionMap3.remove((java.lang.Object) objCollection9);
        java.lang.Object obj11 = exceptionMap0.get((java.lang.Object) objCollection9);
        java.lang.Object obj13 = exceptionMap0.remove((java.lang.Object) (short) 0);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap15 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean16 = exceptionMap14.containsValue((java.lang.Object) exceptionMap15);
        int int17 = exceptionMap15.size();
        java.util.Collection<java.lang.Object> objCollection18 = exceptionMap15.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean21 = exceptionMap19.containsValue((java.lang.Object) exceptionMap20);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet22 = exceptionMap20.entrySet();
        exceptionMap15.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap20);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean26 = exceptionMap24.containsValue((java.lang.Object) exceptionMap25);
        java.lang.Throwable throwable28 = null;
        org.apache.commons.collections4.FunctorException functorException29 = new org.apache.commons.collections4.FunctorException("", throwable28);
        java.lang.Throwable throwable36 = null;
        org.apache.commons.collections4.FunctorException functorException37 = new org.apache.commons.collections4.FunctorException("", throwable36);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap38 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap39 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean40 = exceptionMap38.containsValue((java.lang.Object) exceptionMap39);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap43 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection44 = exceptionMap43.values();
        int int45 = exceptionMap43.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap47 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection48 = exceptionMap47.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap49 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap50 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean51 = exceptionMap49.containsValue((java.lang.Object) exceptionMap50);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap56 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap57 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean58 = exceptionMap56.containsValue((java.lang.Object) exceptionMap57);
        int int59 = exceptionMap57.size();
        java.lang.Throwable throwable68 = null;
        org.apache.commons.collections4.FunctorException functorException69 = new org.apache.commons.collections4.FunctorException("", throwable68);
        org.apache.commons.collections4.FunctorException functorException70 = new org.apache.commons.collections4.FunctorException("", throwable68);
        java.io.Serializable[] serializableArray71 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable36, exceptionMap38, 0L, 0L, exceptionMap43, 0, exceptionMap47, exceptionMap49, (short) 1, ' ', "hi!", 100.0f, int59, false, 10.0f, '4', (-1), 1L, 1, throwable68 };
        java.util.ArrayList<java.io.Serializable> serializableList72 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList72, serializableArray71);
        boolean boolean74 = exceptionMap24.putAll((java.lang.Exception) functorException29, (java.util.Collection<java.io.Serializable>) serializableList72);
        java.lang.Object obj76 = exceptionMap20.put((java.lang.Exception) functorException29, (java.lang.Object) (-1.0f));
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap77 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap78 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean79 = exceptionMap77.containsValue((java.lang.Object) exceptionMap78);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet80 = exceptionMap78.entrySet();
        java.lang.Object obj81 = exceptionMap0.put((java.lang.Exception) functorException29, (java.lang.Object) exceptionEntrySet80);
        boolean boolean82 = exceptionMap0.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap83 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap84 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean85 = exceptionMap83.containsValue((java.lang.Object) exceptionMap84);
        int int86 = exceptionMap84.size();
        java.util.Collection<java.lang.Object> objCollection87 = exceptionMap84.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap88 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap89 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean90 = exceptionMap88.containsValue((java.lang.Object) exceptionMap89);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet91 = exceptionMap89.entrySet();
        exceptionMap84.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap89);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap93 = exceptionMap89.decorated();
        java.util.Set<java.lang.Exception> exceptionSet94 = exceptionMap89.keySet();
        exceptionMap0.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap89);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(objCollection8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objCollection48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(serializableArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertEquals("'" + obj76 + "' != '" + (-1.0f) + "'", obj76, (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet80);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertEquals(obj81.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "[]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objCollection87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet91);
        org.junit.Assert.assertNotNull(exceptionMap93);
        org.junit.Assert.assertNotNull(exceptionSet94);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection1 = exceptionMap0.values();
        int int2 = exceptionMap0.size();
        java.util.Collection<java.lang.Object> objCollection3 = exceptionMap0.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        int int7 = exceptionMap5.size();
        java.util.Collection<java.lang.Object> objCollection8 = exceptionMap5.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap10 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean11 = exceptionMap9.containsValue((java.lang.Object) exceptionMap10);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet12 = exceptionMap10.entrySet();
        exceptionMap5.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap15 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean16 = exceptionMap14.containsValue((java.lang.Object) exceptionMap15);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean19 = exceptionMap17.containsValue((java.lang.Object) exceptionMap18);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet20 = exceptionMap18.entrySet();
        exceptionMap18.clear();
        boolean boolean22 = exceptionMap18.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.lang.Class<?>> exceptionMap23 = org.apache.commons.collections4.map.MultiValueMap.multiValueMap((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap18);
        boolean boolean24 = exceptionMap14.equals((java.lang.Object) exceptionMap18);
        java.lang.Throwable throwable26 = null;
        org.apache.commons.collections4.FunctorException functorException27 = new org.apache.commons.collections4.FunctorException(throwable26);
        org.apache.commons.collections4.FunctorException functorException28 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException27);
        java.lang.Throwable throwable29 = null;
        org.apache.commons.collections4.FunctorException functorException30 = new org.apache.commons.collections4.FunctorException(throwable29);
        functorException28.addSuppressed((java.lang.Throwable) functorException30);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection33 = exceptionMap32.values();
        java.lang.Object obj34 = null;
        java.lang.Object obj35 = exceptionMap32.remove(obj34);
        java.lang.Object obj36 = exceptionMap18.put((java.lang.Exception) functorException28, obj35);
        exceptionMap10.map = exceptionMap18;
        java.lang.Object obj38 = exceptionMap0.get((java.lang.Object) exceptionMap18);
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(objCollection3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(objCollection8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(exceptionMap23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj38);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap1 = exceptionMap0.decorated();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap2 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean4 = exceptionMap2.containsValue((java.lang.Object) exceptionMap3);
        boolean boolean5 = exceptionMap1.containsValue((java.lang.Object) exceptionMap3);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection7 = exceptionMap6.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection10 = exceptionMap9.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet11 = exceptionMap9.entrySet();
        boolean boolean13 = exceptionMap6.remove((java.lang.Object) exceptionEntrySet11, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap15 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean16 = exceptionMap14.containsValue((java.lang.Object) exceptionMap15);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet17 = exceptionMap15.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap18 = exceptionMap15.map;
        int int19 = exceptionMap18.size();
        boolean boolean20 = exceptionMap6.containsKey((java.lang.Object) exceptionMap18);
        boolean boolean22 = exceptionMap6.equals((java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection23 = exceptionMap6.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean26 = exceptionMap24.containsValue((java.lang.Object) exceptionMap25);
        int int27 = exceptionMap25.size();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet28 = exceptionMap25.entrySet();
        java.lang.Object obj30 = exceptionMap25.get((java.lang.Object) true);
        int int31 = exceptionMap25.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap33 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean34 = exceptionMap32.containsValue((java.lang.Object) exceptionMap33);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet35 = exceptionMap33.entrySet();
        exceptionMap33.clear();
        java.lang.Throwable throwable38 = null;
        org.apache.commons.collections4.FunctorException functorException39 = new org.apache.commons.collections4.FunctorException(throwable38);
        org.apache.commons.collections4.FunctorException functorException40 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException39);
        java.lang.Throwable throwable41 = null;
        org.apache.commons.collections4.FunctorException functorException42 = new org.apache.commons.collections4.FunctorException(throwable41);
        functorException40.addSuppressed((java.lang.Throwable) functorException42);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap44 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap45 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean46 = exceptionMap44.containsValue((java.lang.Object) exceptionMap45);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet47 = exceptionMap45.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap48 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap49 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean50 = exceptionMap48.containsValue((java.lang.Object) exceptionMap49);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet51 = exceptionMap49.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap52 = exceptionMap49.map;
        int int53 = exceptionMap52.size();
        java.lang.Object obj54 = exceptionMap45.remove((java.lang.Object) int53);
        java.lang.Exception exception55 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap56 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection57 = exceptionMap56.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet58 = exceptionMap56.entrySet();
        java.lang.Object obj59 = exceptionMap45.put(exception55, (java.lang.Object) exceptionEntrySet58);
        java.lang.Object obj60 = exceptionMap33.put((java.lang.Exception) functorException40, (java.lang.Object) exceptionEntrySet58);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap61 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap62 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean63 = exceptionMap61.containsValue((java.lang.Object) exceptionMap62);
        int int64 = exceptionMap62.size();
        java.util.Collection<java.lang.Object> objCollection65 = exceptionMap62.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap66 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap67 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean68 = exceptionMap66.containsValue((java.lang.Object) exceptionMap67);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet69 = exceptionMap67.entrySet();
        exceptionMap62.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap67);
        java.util.Collection<java.io.Serializable> serializableCollection72 = exceptionMap67.createCollection(1);
        boolean boolean73 = exceptionMap33.containsKey((java.lang.Object) exceptionMap67);
        java.lang.Object obj74 = exceptionMap25.get((java.lang.Object) exceptionMap67);
        boolean boolean75 = exceptionMap1.remove((java.lang.Object) objCollection23, (java.lang.Object) exceptionMap25);
        int int76 = exceptionMap1.size();
        java.lang.Class<?> wildcardClass77 = exceptionMap1.getClass();
        org.junit.Assert.assertNotNull(exceptionMap1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertNotNull(exceptionEntrySet11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet17);
        org.junit.Assert.assertNotNull(exceptionMap18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(exceptionEntrySet28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet35);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet51);
        org.junit.Assert.assertNotNull(exceptionMap52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(objCollection57);
        org.junit.Assert.assertNotNull(exceptionEntrySet58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "[]");
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "[]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(objCollection65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet69);
        org.junit.Assert.assertNotNull(serializableCollection72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection1 = exceptionMap0.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet2 = exceptionMap0.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap3.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet5 = exceptionMap3.entrySet();
        boolean boolean7 = exceptionMap0.remove((java.lang.Object) exceptionEntrySet5, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean10 = exceptionMap8.containsValue((java.lang.Object) exceptionMap9);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet11 = exceptionMap9.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap12 = exceptionMap9.map;
        int int13 = exceptionMap12.size();
        boolean boolean14 = exceptionMap0.containsKey((java.lang.Object) exceptionMap12);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.util.List<java.io.Serializable>> exceptionMap15 = org.apache.commons.collections4.map.MultiValueMap.multiValueMap(exceptionMap12);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap16 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean18 = exceptionMap16.containsValue((java.lang.Object) exceptionMap17);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet19 = exceptionMap17.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean22 = exceptionMap20.containsValue((java.lang.Object) exceptionMap21);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet23 = exceptionMap21.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap24 = exceptionMap21.map;
        int int25 = exceptionMap24.size();
        java.lang.Object obj26 = exceptionMap17.remove((java.lang.Object) int25);
        java.lang.Throwable throwable29 = null;
        org.apache.commons.collections4.FunctorException functorException30 = new org.apache.commons.collections4.FunctorException("", throwable29);
        org.apache.commons.collections4.FunctorException functorException31 = new org.apache.commons.collections4.FunctorException("", throwable29);
        org.apache.commons.collections4.FunctorException functorException33 = new org.apache.commons.collections4.FunctorException("");
        functorException31.addSuppressed((java.lang.Throwable) functorException33);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap35 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean37 = exceptionMap35.containsValue((java.lang.Object) exceptionMap36);
        boolean boolean39 = exceptionMap36.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection41 = exceptionMap36.createCollection(10);
        boolean boolean42 = exceptionMap17.putAll((java.lang.Exception) functorException33, serializableCollection41);
        java.lang.Throwable throwable45 = null;
        org.apache.commons.collections4.FunctorException functorException46 = new org.apache.commons.collections4.FunctorException("", throwable45);
        org.apache.commons.collections4.FunctorException functorException47 = new org.apache.commons.collections4.FunctorException("", throwable45);
        org.apache.commons.collections4.FunctorException functorException49 = new org.apache.commons.collections4.FunctorException("");
        functorException47.addSuppressed((java.lang.Throwable) functorException49);
        java.lang.Throwable[] throwableArray51 = functorException49.getSuppressed();
        org.apache.commons.collections4.FunctorException functorException52 = new org.apache.commons.collections4.FunctorException((java.lang.Throwable) functorException49);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap53 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap54 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap55 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean56 = exceptionMap54.containsValue((java.lang.Object) exceptionMap55);
        int int57 = exceptionMap55.size();
        java.util.Collection<java.lang.Object> objCollection58 = exceptionMap55.values();
        java.util.Collection<java.lang.Object> objCollection59 = exceptionMap55.values();
        java.lang.Object obj60 = exceptionMap53.remove((java.lang.Object) objCollection59);
        java.lang.Object obj61 = exceptionMap17.put((java.lang.Exception) functorException49, obj60);
        exceptionMap12.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap17);
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(exceptionEntrySet2);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(exceptionEntrySet5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet11);
        org.junit.Assert.assertNotNull(exceptionMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(exceptionMap15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet23);
        org.junit.Assert.assertNotNull(exceptionMap24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(serializableCollection41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(objCollection58);
        org.junit.Assert.assertNotNull(objCollection59);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNull(obj61);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection1 = exceptionMap0.values();
        int int2 = exceptionMap0.size();
        boolean boolean4 = exceptionMap0.containsValue((java.lang.Object) true);
        java.lang.Throwable throwable6 = null;
        org.apache.commons.collections4.FunctorException functorException7 = new org.apache.commons.collections4.FunctorException("", throwable6);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean10 = exceptionMap8.containsValue((java.lang.Object) exceptionMap9);
        java.lang.Throwable throwable12 = null;
        org.apache.commons.collections4.FunctorException functorException13 = new org.apache.commons.collections4.FunctorException("", throwable12);
        java.lang.Throwable throwable20 = null;
        org.apache.commons.collections4.FunctorException functorException21 = new org.apache.commons.collections4.FunctorException("", throwable20);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap22 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean24 = exceptionMap22.containsValue((java.lang.Object) exceptionMap23);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection28 = exceptionMap27.values();
        int int29 = exceptionMap27.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection32 = exceptionMap31.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap33 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap34 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean35 = exceptionMap33.containsValue((java.lang.Object) exceptionMap34);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap40 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap41 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean42 = exceptionMap40.containsValue((java.lang.Object) exceptionMap41);
        int int43 = exceptionMap41.size();
        java.lang.Throwable throwable52 = null;
        org.apache.commons.collections4.FunctorException functorException53 = new org.apache.commons.collections4.FunctorException("", throwable52);
        org.apache.commons.collections4.FunctorException functorException54 = new org.apache.commons.collections4.FunctorException("", throwable52);
        java.io.Serializable[] serializableArray55 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable20, exceptionMap22, 0L, 0L, exceptionMap27, 0, exceptionMap31, exceptionMap33, (short) 1, ' ', "hi!", 100.0f, int43, false, 10.0f, '4', (-1), 1L, 1, throwable52 };
        java.util.ArrayList<java.io.Serializable> serializableList56 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList56, serializableArray55);
        boolean boolean58 = exceptionMap8.putAll((java.lang.Exception) functorException13, (java.util.Collection<java.io.Serializable>) serializableList56);
        functorException7.addSuppressed((java.lang.Throwable) functorException13);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap60 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap61 = exceptionMap60.decorated();
        boolean boolean62 = exceptionMap0.removeMapping((java.lang.Exception) functorException7, (java.io.Serializable) exceptionMap60);
        org.apache.commons.collections4.map.MultiValueMap<org.apache.commons.collections4.FunctorException, java.lang.RuntimeException> functorExceptionMap63 = new org.apache.commons.collections4.map.MultiValueMap<org.apache.commons.collections4.FunctorException, java.lang.RuntimeException>();
        boolean boolean65 = exceptionMap0.containsValue((java.lang.Object) functorExceptionMap63, (java.lang.Object) (short) 1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap66 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection67 = exceptionMap66.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet68 = exceptionMap66.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap69 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection70 = exceptionMap69.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet71 = exceptionMap69.entrySet();
        boolean boolean73 = exceptionMap66.remove((java.lang.Object) exceptionEntrySet71, (java.lang.Object) (byte) -1);
        java.util.Set<java.lang.Exception> exceptionSet74 = exceptionMap66.keySet();
        boolean boolean75 = exceptionMap0.containsKey((java.lang.Object) exceptionMap66);
        java.lang.String str76 = exceptionMap0.toString();
        boolean boolean77 = exceptionMap0.isEmpty();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objCollection32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(serializableArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(exceptionMap61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objCollection67);
        org.junit.Assert.assertNotNull(exceptionEntrySet68);
        org.junit.Assert.assertNotNull(objCollection70);
        org.junit.Assert.assertNotNull(exceptionEntrySet71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(exceptionSet74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "{}" + "'", str76, "{}");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Object obj11 = null;
        boolean boolean12 = exceptionMap1.containsKey(obj11);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj15 = exceptionMap13.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable17 = null;
        org.apache.commons.collections4.FunctorException functorException18 = new org.apache.commons.collections4.FunctorException(throwable17);
        org.apache.commons.collections4.FunctorException functorException19 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException18);
        boolean boolean21 = exceptionMap13.removeMapping((java.lang.Exception) functorException18, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet22 = exceptionMap13.keySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean25 = exceptionMap23.containsValue((java.lang.Object) exceptionMap24);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet26 = exceptionMap24.entrySet();
        boolean boolean28 = exceptionMap24.containsKey((java.lang.Object) (byte) 1);
        int int29 = exceptionMap24.size();
        exceptionMap13.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap24);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap32 = exceptionMap31.decorated();
        boolean boolean33 = exceptionMap1.removeMapping((java.lang.Object) exceptionMap24, (java.lang.Object) exceptionMap32);
        java.lang.Class<?> wildcardClass34 = exceptionMap1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(exceptionSet22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(exceptionMap32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        boolean boolean4 = exceptionMap1.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection6 = exceptionMap1.createCollection(10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap7 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj9 = exceptionMap7.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable11 = null;
        org.apache.commons.collections4.FunctorException functorException12 = new org.apache.commons.collections4.FunctorException(throwable11);
        org.apache.commons.collections4.FunctorException functorException13 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException12);
        boolean boolean15 = exceptionMap7.removeMapping((java.lang.Exception) functorException12, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet16 = exceptionMap7.keySet();
        java.util.Collection<java.lang.Object> objCollection17 = exceptionMap7.values();
        boolean boolean18 = exceptionMap1.containsValue((java.lang.Object) exceptionMap7);
        int int19 = exceptionMap7.size();
        java.lang.Class<?> wildcardClass20 = exceptionMap7.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(serializableCollection6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(exceptionSet16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        java.util.Collection<java.lang.Object> objCollection5 = exceptionMap1.values();
        int int6 = exceptionMap1.size();
        boolean boolean7 = exceptionMap1.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean10 = exceptionMap8.containsValue((java.lang.Object) exceptionMap9);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet11 = exceptionMap9.entrySet();
        exceptionMap9.clear();
        boolean boolean13 = exceptionMap9.isEmpty();
        java.lang.Throwable throwable15 = null;
        org.apache.commons.collections4.FunctorException functorException16 = new org.apache.commons.collections4.FunctorException(throwable15);
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException16);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean20 = exceptionMap18.containsValue((java.lang.Object) exceptionMap19);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap22 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean23 = exceptionMap21.containsValue((java.lang.Object) exceptionMap22);
        exceptionMap19.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap22);
        java.lang.Object obj25 = exceptionMap9.put((java.lang.Exception) functorException17, (java.lang.Object) exceptionMap22);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap28 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean29 = exceptionMap27.containsValue((java.lang.Object) exceptionMap28);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet30 = exceptionMap28.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean33 = exceptionMap31.containsValue((java.lang.Object) exceptionMap32);
        java.lang.Throwable throwable35 = null;
        org.apache.commons.collections4.FunctorException functorException36 = new org.apache.commons.collections4.FunctorException("", throwable35);
        java.lang.Throwable throwable43 = null;
        org.apache.commons.collections4.FunctorException functorException44 = new org.apache.commons.collections4.FunctorException("", throwable43);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap45 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap46 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean47 = exceptionMap45.containsValue((java.lang.Object) exceptionMap46);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap50 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection51 = exceptionMap50.values();
        int int52 = exceptionMap50.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap54 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection55 = exceptionMap54.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap56 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap57 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean58 = exceptionMap56.containsValue((java.lang.Object) exceptionMap57);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap63 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap64 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean65 = exceptionMap63.containsValue((java.lang.Object) exceptionMap64);
        int int66 = exceptionMap64.size();
        java.lang.Throwable throwable75 = null;
        org.apache.commons.collections4.FunctorException functorException76 = new org.apache.commons.collections4.FunctorException("", throwable75);
        org.apache.commons.collections4.FunctorException functorException77 = new org.apache.commons.collections4.FunctorException("", throwable75);
        java.io.Serializable[] serializableArray78 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable43, exceptionMap45, 0L, 0L, exceptionMap50, 0, exceptionMap54, exceptionMap56, (short) 1, ' ', "hi!", 100.0f, int66, false, 10.0f, '4', (-1), 1L, 1, throwable75 };
        java.util.ArrayList<java.io.Serializable> serializableList79 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList79, serializableArray78);
        boolean boolean81 = exceptionMap31.putAll((java.lang.Exception) functorException36, (java.util.Collection<java.io.Serializable>) serializableList79);
        boolean boolean83 = exceptionMap28.removeMapping((java.lang.Exception) functorException36, (java.io.Serializable) (-1.0f));
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor84 = exceptionMap28.mapIterator();
        boolean boolean85 = exceptionItor84.hasNext();
        boolean boolean86 = exceptionMap1.replace((java.lang.Exception) functorException17, (java.lang.Object) (short) 10, (java.lang.Object) exceptionItor84);
        java.util.Collection<java.lang.Object> objCollection87 = exceptionMap1.values();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(objCollection5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objCollection51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(objCollection55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(serializableArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(exceptionItor84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objCollection87);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj2 = exceptionMap0.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable4 = null;
        org.apache.commons.collections4.FunctorException functorException5 = new org.apache.commons.collections4.FunctorException(throwable4);
        org.apache.commons.collections4.FunctorException functorException6 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException5);
        boolean boolean8 = exceptionMap0.removeMapping((java.lang.Exception) functorException5, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet9 = exceptionMap0.keySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap10 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap11 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean12 = exceptionMap10.containsValue((java.lang.Object) exceptionMap11);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet13 = exceptionMap11.entrySet();
        boolean boolean15 = exceptionMap11.containsKey((java.lang.Object) (byte) 1);
        int int16 = exceptionMap11.size();
        exceptionMap0.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap11);
        java.lang.Throwable throwable19 = null;
        org.apache.commons.collections4.FunctorException functorException20 = new org.apache.commons.collections4.FunctorException(throwable19);
        org.apache.commons.collections4.FunctorException functorException21 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException20);
        java.lang.Throwable throwable22 = null;
        org.apache.commons.collections4.FunctorException functorException23 = new org.apache.commons.collections4.FunctorException(throwable22);
        functorException21.addSuppressed((java.lang.Throwable) functorException23);
        java.lang.Object obj26 = exceptionMap11.replace((java.lang.Exception) functorException21, (java.lang.Object) "org.apache.commons.collections4.FunctorException");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap28 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean29 = exceptionMap27.containsValue((java.lang.Object) exceptionMap28);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet30 = exceptionMap28.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean33 = exceptionMap31.containsValue((java.lang.Object) exceptionMap32);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet34 = exceptionMap32.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap35 = exceptionMap32.map;
        int int36 = exceptionMap35.size();
        java.lang.Object obj37 = exceptionMap28.remove((java.lang.Object) int36);
        java.lang.Throwable throwable40 = null;
        org.apache.commons.collections4.FunctorException functorException41 = new org.apache.commons.collections4.FunctorException("", throwable40);
        org.apache.commons.collections4.FunctorException functorException42 = new org.apache.commons.collections4.FunctorException("", throwable40);
        org.apache.commons.collections4.FunctorException functorException44 = new org.apache.commons.collections4.FunctorException("");
        functorException42.addSuppressed((java.lang.Throwable) functorException44);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap46 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap47 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean48 = exceptionMap46.containsValue((java.lang.Object) exceptionMap47);
        boolean boolean50 = exceptionMap47.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection52 = exceptionMap47.createCollection(10);
        boolean boolean53 = exceptionMap28.putAll((java.lang.Exception) functorException44, serializableCollection52);
        java.lang.Object obj54 = null;
        boolean boolean55 = exceptionMap28.containsValue(obj54);
        boolean boolean57 = exceptionMap28.containsKey((java.lang.Object) (short) 100);
        int int58 = exceptionMap11.size((java.lang.Object) boolean57);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(exceptionSet9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet34);
        org.junit.Assert.assertNotNull(exceptionMap35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(serializableCollection52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.lang.String str3 = exceptionMap0.toString();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        int int7 = exceptionMap5.size();
        java.util.Collection<java.lang.Object> objCollection8 = exceptionMap5.values();
        exceptionMap5.clear();
        java.lang.Throwable throwable11 = null;
        org.apache.commons.collections4.FunctorException functorException12 = new org.apache.commons.collections4.FunctorException("", throwable11);
        int int13 = exceptionMap5.size((java.lang.Object) functorException12);
        java.lang.String str14 = exceptionMap5.toString();
        boolean boolean15 = exceptionMap0.containsValue((java.lang.Object) exceptionMap5);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(objCollection8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{}" + "'", str14, "{}");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection1 = exceptionMap0.values();
        int int2 = exceptionMap0.size();
        boolean boolean4 = exceptionMap0.containsValue((java.lang.Object) true);
        java.lang.Throwable throwable6 = null;
        org.apache.commons.collections4.FunctorException functorException7 = new org.apache.commons.collections4.FunctorException("", throwable6);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean10 = exceptionMap8.containsValue((java.lang.Object) exceptionMap9);
        java.lang.Throwable throwable12 = null;
        org.apache.commons.collections4.FunctorException functorException13 = new org.apache.commons.collections4.FunctorException("", throwable12);
        java.lang.Throwable throwable20 = null;
        org.apache.commons.collections4.FunctorException functorException21 = new org.apache.commons.collections4.FunctorException("", throwable20);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap22 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean24 = exceptionMap22.containsValue((java.lang.Object) exceptionMap23);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection28 = exceptionMap27.values();
        int int29 = exceptionMap27.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection32 = exceptionMap31.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap33 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap34 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean35 = exceptionMap33.containsValue((java.lang.Object) exceptionMap34);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap40 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap41 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean42 = exceptionMap40.containsValue((java.lang.Object) exceptionMap41);
        int int43 = exceptionMap41.size();
        java.lang.Throwable throwable52 = null;
        org.apache.commons.collections4.FunctorException functorException53 = new org.apache.commons.collections4.FunctorException("", throwable52);
        org.apache.commons.collections4.FunctorException functorException54 = new org.apache.commons.collections4.FunctorException("", throwable52);
        java.io.Serializable[] serializableArray55 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable20, exceptionMap22, 0L, 0L, exceptionMap27, 0, exceptionMap31, exceptionMap33, (short) 1, ' ', "hi!", 100.0f, int43, false, 10.0f, '4', (-1), 1L, 1, throwable52 };
        java.util.ArrayList<java.io.Serializable> serializableList56 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList56, serializableArray55);
        boolean boolean58 = exceptionMap8.putAll((java.lang.Exception) functorException13, (java.util.Collection<java.io.Serializable>) serializableList56);
        functorException7.addSuppressed((java.lang.Throwable) functorException13);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap60 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap61 = exceptionMap60.decorated();
        boolean boolean62 = exceptionMap0.removeMapping((java.lang.Exception) functorException7, (java.io.Serializable) exceptionMap60);
        java.lang.Class<?> wildcardClass63 = exceptionMap60.getClass();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objCollection32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(serializableArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(exceptionMap61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        int int8 = exceptionMap6.size();
        java.util.Collection<java.lang.Object> objCollection9 = exceptionMap6.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap10 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap11 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean12 = exceptionMap10.containsValue((java.lang.Object) exceptionMap11);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet13 = exceptionMap11.entrySet();
        exceptionMap6.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap11);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor15 = exceptionMap11.mapIterator();
        boolean boolean16 = exceptionMap11.isEmpty();
        java.lang.Object obj17 = exceptionMap1.get((java.lang.Object) boolean16);
        boolean boolean18 = exceptionMap1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet13);
        org.junit.Assert.assertNotNull(exceptionItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Throwable throwable13 = null;
        org.apache.commons.collections4.FunctorException functorException14 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException15 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("");
        functorException15.addSuppressed((java.lang.Throwable) functorException17);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean21 = exceptionMap19.containsValue((java.lang.Object) exceptionMap20);
        boolean boolean23 = exceptionMap20.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection25 = exceptionMap20.createCollection(10);
        boolean boolean26 = exceptionMap1.putAll((java.lang.Exception) functorException17, serializableCollection25);
        boolean boolean27 = exceptionMap1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj2 = exceptionMap0.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable4 = null;
        org.apache.commons.collections4.FunctorException functorException5 = new org.apache.commons.collections4.FunctorException(throwable4);
        org.apache.commons.collections4.FunctorException functorException6 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException5);
        boolean boolean8 = exceptionMap0.removeMapping((java.lang.Exception) functorException5, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet9 = exceptionMap0.keySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap10 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap11 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean12 = exceptionMap10.containsValue((java.lang.Object) exceptionMap11);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet13 = exceptionMap11.entrySet();
        boolean boolean15 = exceptionMap11.containsKey((java.lang.Object) (byte) 1);
        int int16 = exceptionMap11.size();
        exceptionMap0.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap11);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap18 = exceptionMap11.decorated();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(exceptionSet9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(exceptionMap18);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.lang.Throwable throwable8 = null;
        org.apache.commons.collections4.FunctorException functorException9 = new org.apache.commons.collections4.FunctorException("", throwable8);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("", throwable16);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean20 = exceptionMap18.containsValue((java.lang.Object) exceptionMap19);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection24 = exceptionMap23.values();
        int int25 = exceptionMap23.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection28 = exceptionMap27.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean38 = exceptionMap36.containsValue((java.lang.Object) exceptionMap37);
        int int39 = exceptionMap37.size();
        java.lang.Throwable throwable48 = null;
        org.apache.commons.collections4.FunctorException functorException49 = new org.apache.commons.collections4.FunctorException("", throwable48);
        org.apache.commons.collections4.FunctorException functorException50 = new org.apache.commons.collections4.FunctorException("", throwable48);
        java.io.Serializable[] serializableArray51 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable16, exceptionMap18, 0L, 0L, exceptionMap23, 0, exceptionMap27, exceptionMap29, (short) 1, ' ', "hi!", 100.0f, int39, false, 10.0f, '4', (-1), 1L, 1, throwable48 };
        java.util.ArrayList<java.io.Serializable> serializableList52 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList52, serializableArray51);
        boolean boolean54 = exceptionMap4.putAll((java.lang.Exception) functorException9, (java.util.Collection<java.io.Serializable>) serializableList52);
        boolean boolean56 = exceptionMap1.removeMapping((java.lang.Exception) functorException9, (java.io.Serializable) (-1.0f));
        boolean boolean57 = exceptionMap1.isEmpty();
        java.util.Collection<java.lang.Object> objCollection58 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap59 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection60 = exceptionMap59.values();
        java.lang.Object obj61 = null;
        java.lang.Object obj62 = exceptionMap59.remove(obj61);
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap59);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(serializableArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objCollection58);
        org.junit.Assert.assertNotNull(objCollection60);
        org.junit.Assert.assertNull(obj62);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection1 = exceptionMap0.values();
        int int2 = exceptionMap0.size();
        boolean boolean4 = exceptionMap0.containsValue((java.lang.Object) true);
        int int5 = exceptionMap0.size();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap6);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap10 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap11 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean12 = exceptionMap10.containsValue((java.lang.Object) exceptionMap11);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet13 = exceptionMap11.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap15 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean16 = exceptionMap14.containsValue((java.lang.Object) exceptionMap15);
        java.lang.Throwable throwable18 = null;
        org.apache.commons.collections4.FunctorException functorException19 = new org.apache.commons.collections4.FunctorException("", throwable18);
        java.lang.Throwable throwable26 = null;
        org.apache.commons.collections4.FunctorException functorException27 = new org.apache.commons.collections4.FunctorException("", throwable26);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap28 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean30 = exceptionMap28.containsValue((java.lang.Object) exceptionMap29);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap33 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection34 = exceptionMap33.values();
        int int35 = exceptionMap33.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection38 = exceptionMap37.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap39 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap40 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean41 = exceptionMap39.containsValue((java.lang.Object) exceptionMap40);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap46 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap47 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean48 = exceptionMap46.containsValue((java.lang.Object) exceptionMap47);
        int int49 = exceptionMap47.size();
        java.lang.Throwable throwable58 = null;
        org.apache.commons.collections4.FunctorException functorException59 = new org.apache.commons.collections4.FunctorException("", throwable58);
        org.apache.commons.collections4.FunctorException functorException60 = new org.apache.commons.collections4.FunctorException("", throwable58);
        java.io.Serializable[] serializableArray61 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable26, exceptionMap28, 0L, 0L, exceptionMap33, 0, exceptionMap37, exceptionMap39, (short) 1, ' ', "hi!", 100.0f, int49, false, 10.0f, '4', (-1), 1L, 1, throwable58 };
        java.util.ArrayList<java.io.Serializable> serializableList62 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList62, serializableArray61);
        boolean boolean64 = exceptionMap14.putAll((java.lang.Exception) functorException19, (java.util.Collection<java.io.Serializable>) serializableList62);
        boolean boolean66 = exceptionMap11.removeMapping((java.lang.Exception) functorException19, (java.io.Serializable) (-1.0f));
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap68 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap69 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean70 = exceptionMap68.containsValue((java.lang.Object) exceptionMap69);
        boolean boolean71 = exceptionMap6.replace((java.lang.Exception) functorException19, (java.lang.Object) (short) 0, (java.lang.Object) exceptionMap68);
        java.util.Collection<java.lang.Object> objCollection72 = exceptionMap68.values();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(objCollection38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(serializableArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objCollection72);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        exceptionMap1.clear();
        boolean boolean5 = exceptionMap1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Throwable throwable13 = null;
        org.apache.commons.collections4.FunctorException functorException14 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException15 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("");
        functorException15.addSuppressed((java.lang.Throwable) functorException17);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean21 = exceptionMap19.containsValue((java.lang.Object) exceptionMap20);
        boolean boolean23 = exceptionMap20.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection25 = exceptionMap20.createCollection(10);
        boolean boolean26 = exceptionMap1.putAll((java.lang.Exception) functorException17, serializableCollection25);
        java.lang.Object obj27 = null;
        boolean boolean28 = exceptionMap1.containsValue(obj27);
        java.util.Set<java.lang.Exception> exceptionSet29 = exceptionMap1.keySet();
        org.apache.commons.collections4.FunctorException functorException31 = new org.apache.commons.collections4.FunctorException("");
        org.apache.commons.collections4.FunctorException functorException32 = new org.apache.commons.collections4.FunctorException((java.lang.Throwable) functorException31);
        java.util.Collection<java.io.Serializable> serializableCollection33 = exceptionMap1.getCollection((java.lang.Object) functorException31);
        org.apache.commons.collections4.FunctorException functorException34 = new org.apache.commons.collections4.FunctorException((java.lang.Throwable) functorException31);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(exceptionSet29);
        org.junit.Assert.assertNull(serializableCollection33);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Throwable throwable13 = null;
        org.apache.commons.collections4.FunctorException functorException14 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException15 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("");
        functorException15.addSuppressed((java.lang.Throwable) functorException17);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean21 = exceptionMap19.containsValue((java.lang.Object) exceptionMap20);
        boolean boolean23 = exceptionMap20.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection25 = exceptionMap20.createCollection(10);
        boolean boolean26 = exceptionMap1.putAll((java.lang.Exception) functorException17, serializableCollection25);
        java.lang.Throwable throwable29 = null;
        org.apache.commons.collections4.FunctorException functorException30 = new org.apache.commons.collections4.FunctorException("", throwable29);
        org.apache.commons.collections4.FunctorException functorException31 = new org.apache.commons.collections4.FunctorException("", throwable29);
        org.apache.commons.collections4.FunctorException functorException33 = new org.apache.commons.collections4.FunctorException("");
        functorException31.addSuppressed((java.lang.Throwable) functorException33);
        java.lang.Throwable[] throwableArray35 = functorException33.getSuppressed();
        org.apache.commons.collections4.FunctorException functorException36 = new org.apache.commons.collections4.FunctorException((java.lang.Throwable) functorException33);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap38 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap39 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean40 = exceptionMap38.containsValue((java.lang.Object) exceptionMap39);
        int int41 = exceptionMap39.size();
        java.util.Collection<java.lang.Object> objCollection42 = exceptionMap39.values();
        java.util.Collection<java.lang.Object> objCollection43 = exceptionMap39.values();
        java.lang.Object obj44 = exceptionMap37.remove((java.lang.Object) objCollection43);
        java.lang.Object obj45 = exceptionMap1.put((java.lang.Exception) functorException33, obj44);
        java.lang.Throwable throwable48 = null;
        org.apache.commons.collections4.FunctorException functorException49 = new org.apache.commons.collections4.FunctorException("", throwable48);
        org.apache.commons.collections4.FunctorException functorException50 = new org.apache.commons.collections4.FunctorException("", throwable48);
        org.apache.commons.collections4.FunctorException functorException52 = new org.apache.commons.collections4.FunctorException("");
        functorException50.addSuppressed((java.lang.Throwable) functorException52);
        functorException33.addSuppressed((java.lang.Throwable) functorException52);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertNotNull(objCollection43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj45);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap1 = exceptionMap0.decorated();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap2 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean4 = exceptionMap2.containsValue((java.lang.Object) exceptionMap3);
        int int5 = exceptionMap3.size();
        java.util.Collection<java.lang.Object> objCollection6 = exceptionMap3.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap7 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean9 = exceptionMap7.containsValue((java.lang.Object) exceptionMap8);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet10 = exceptionMap8.entrySet();
        exceptionMap3.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap8);
        boolean boolean12 = exceptionMap0.equals((java.lang.Object) exceptionMap8);
        java.lang.Object obj13 = null;
        java.lang.Object obj14 = exceptionMap8.remove(obj13);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap15 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap16 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean17 = exceptionMap15.containsValue((java.lang.Object) exceptionMap16);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet18 = exceptionMap16.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean21 = exceptionMap19.containsValue((java.lang.Object) exceptionMap20);
        java.lang.Throwable throwable23 = null;
        org.apache.commons.collections4.FunctorException functorException24 = new org.apache.commons.collections4.FunctorException("", throwable23);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.collections4.FunctorException functorException32 = new org.apache.commons.collections4.FunctorException("", throwable31);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap33 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap34 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean35 = exceptionMap33.containsValue((java.lang.Object) exceptionMap34);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap38 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection39 = exceptionMap38.values();
        int int40 = exceptionMap38.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap42 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection43 = exceptionMap42.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap44 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap45 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean46 = exceptionMap44.containsValue((java.lang.Object) exceptionMap45);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap51 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap52 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean53 = exceptionMap51.containsValue((java.lang.Object) exceptionMap52);
        int int54 = exceptionMap52.size();
        java.lang.Throwable throwable63 = null;
        org.apache.commons.collections4.FunctorException functorException64 = new org.apache.commons.collections4.FunctorException("", throwable63);
        org.apache.commons.collections4.FunctorException functorException65 = new org.apache.commons.collections4.FunctorException("", throwable63);
        java.io.Serializable[] serializableArray66 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable31, exceptionMap33, 0L, 0L, exceptionMap38, 0, exceptionMap42, exceptionMap44, (short) 1, ' ', "hi!", 100.0f, int54, false, 10.0f, '4', (-1), 1L, 1, throwable63 };
        java.util.ArrayList<java.io.Serializable> serializableList67 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList67, serializableArray66);
        boolean boolean69 = exceptionMap19.putAll((java.lang.Exception) functorException24, (java.util.Collection<java.io.Serializable>) serializableList67);
        boolean boolean71 = exceptionMap16.removeMapping((java.lang.Exception) functorException24, (java.io.Serializable) (-1.0f));
        boolean boolean72 = exceptionMap16.isEmpty();
        java.util.Collection<java.lang.Object> objCollection73 = exceptionMap16.values();
        boolean boolean74 = exceptionMap8.containsValue((java.lang.Object) exceptionMap16);
        org.junit.Assert.assertNotNull(exceptionMap1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objCollection39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objCollection43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(serializableArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(objCollection73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Throwable throwable13 = null;
        org.apache.commons.collections4.FunctorException functorException14 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException15 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("");
        functorException15.addSuppressed((java.lang.Throwable) functorException17);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean21 = exceptionMap19.containsValue((java.lang.Object) exceptionMap20);
        boolean boolean23 = exceptionMap20.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection25 = exceptionMap20.createCollection(10);
        boolean boolean26 = exceptionMap1.putAll((java.lang.Exception) functorException17, serializableCollection25);
        java.lang.Object obj27 = null;
        boolean boolean28 = exceptionMap1.containsValue(obj27);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet32 = exceptionMap30.entrySet();
        exceptionMap30.clear();
        boolean boolean34 = exceptionMap30.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap35 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection36 = exceptionMap35.values();
        int int37 = exceptionMap35.size();
        boolean boolean39 = exceptionMap35.containsValue((java.lang.Object) true);
        boolean boolean40 = exceptionMap30.containsValue((java.lang.Object) boolean39);
        java.util.Set<java.lang.Exception> exceptionSet41 = exceptionMap30.keySet();
        boolean boolean42 = exceptionMap1.containsValue((java.lang.Object) exceptionSet41);
        exceptionMap1.clear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objCollection36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(exceptionSet41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap6);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap10 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap11 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean12 = exceptionMap10.containsValue((java.lang.Object) exceptionMap11);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet13 = exceptionMap11.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap15 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean16 = exceptionMap14.containsValue((java.lang.Object) exceptionMap15);
        java.lang.Throwable throwable18 = null;
        org.apache.commons.collections4.FunctorException functorException19 = new org.apache.commons.collections4.FunctorException("", throwable18);
        java.lang.Throwable throwable26 = null;
        org.apache.commons.collections4.FunctorException functorException27 = new org.apache.commons.collections4.FunctorException("", throwable26);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap28 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean30 = exceptionMap28.containsValue((java.lang.Object) exceptionMap29);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap33 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection34 = exceptionMap33.values();
        int int35 = exceptionMap33.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection38 = exceptionMap37.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap39 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap40 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean41 = exceptionMap39.containsValue((java.lang.Object) exceptionMap40);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap46 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap47 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean48 = exceptionMap46.containsValue((java.lang.Object) exceptionMap47);
        int int49 = exceptionMap47.size();
        java.lang.Throwable throwable58 = null;
        org.apache.commons.collections4.FunctorException functorException59 = new org.apache.commons.collections4.FunctorException("", throwable58);
        org.apache.commons.collections4.FunctorException functorException60 = new org.apache.commons.collections4.FunctorException("", throwable58);
        java.io.Serializable[] serializableArray61 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable26, exceptionMap28, 0L, 0L, exceptionMap33, 0, exceptionMap37, exceptionMap39, (short) 1, ' ', "hi!", 100.0f, int49, false, 10.0f, '4', (-1), 1L, 1, throwable58 };
        java.util.ArrayList<java.io.Serializable> serializableList62 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList62, serializableArray61);
        boolean boolean64 = exceptionMap14.putAll((java.lang.Exception) functorException19, (java.util.Collection<java.io.Serializable>) serializableList62);
        boolean boolean66 = exceptionMap11.removeMapping((java.lang.Exception) functorException19, (java.io.Serializable) (-1.0f));
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap68 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap69 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean70 = exceptionMap68.containsValue((java.lang.Object) exceptionMap69);
        boolean boolean71 = exceptionMap6.replace((java.lang.Exception) functorException19, (java.lang.Object) (short) 0, (java.lang.Object) exceptionMap68);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet72 = exceptionMap68.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap73 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection74 = exceptionMap73.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet75 = exceptionMap73.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap76 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection77 = exceptionMap76.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet78 = exceptionMap76.entrySet();
        boolean boolean80 = exceptionMap73.remove((java.lang.Object) exceptionEntrySet78, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap81 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap82 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean83 = exceptionMap81.containsValue((java.lang.Object) exceptionMap82);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet84 = exceptionMap82.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap85 = exceptionMap82.map;
        int int86 = exceptionMap85.size();
        boolean boolean87 = exceptionMap73.containsKey((java.lang.Object) exceptionMap85);
        boolean boolean89 = exceptionMap85.containsKey((java.lang.Object) '4');
        exceptionMap68.map = exceptionMap85;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(objCollection38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(serializableArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet72);
        org.junit.Assert.assertNotNull(objCollection74);
        org.junit.Assert.assertNotNull(exceptionEntrySet75);
        org.junit.Assert.assertNotNull(objCollection77);
        org.junit.Assert.assertNotNull(exceptionEntrySet78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet84);
        org.junit.Assert.assertNotNull(exceptionMap85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        exceptionMap1.clear();
        java.lang.Throwable throwable6 = null;
        org.apache.commons.collections4.FunctorException functorException7 = new org.apache.commons.collections4.FunctorException(throwable6);
        org.apache.commons.collections4.FunctorException functorException8 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException7);
        java.lang.Throwable throwable9 = null;
        org.apache.commons.collections4.FunctorException functorException10 = new org.apache.commons.collections4.FunctorException(throwable9);
        functorException8.addSuppressed((java.lang.Throwable) functorException10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean14 = exceptionMap12.containsValue((java.lang.Object) exceptionMap13);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet15 = exceptionMap13.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap16 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean18 = exceptionMap16.containsValue((java.lang.Object) exceptionMap17);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet19 = exceptionMap17.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap20 = exceptionMap17.map;
        int int21 = exceptionMap20.size();
        java.lang.Object obj22 = exceptionMap13.remove((java.lang.Object) int21);
        java.lang.Exception exception23 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection25 = exceptionMap24.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet26 = exceptionMap24.entrySet();
        java.lang.Object obj27 = exceptionMap13.put(exception23, (java.lang.Object) exceptionEntrySet26);
        java.lang.Object obj28 = exceptionMap1.put((java.lang.Exception) functorException8, (java.lang.Object) exceptionEntrySet26);
        org.apache.commons.collections4.FunctorException functorException29 = new org.apache.commons.collections4.FunctorException((java.lang.Throwable) functorException8);
        java.lang.String str30 = functorException29.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet19);
        org.junit.Assert.assertNotNull(exceptionMap20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(objCollection25);
        org.junit.Assert.assertNotNull(exceptionEntrySet26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "[]");
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org.apache.commons.collections4.FunctorException: org.apache.commons.collections4.FunctorException: hi!" + "'", str30, "org.apache.commons.collections4.FunctorException: org.apache.commons.collections4.FunctorException: hi!");
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap6);
        java.util.Collection<java.io.Serializable> serializableCollection11 = exceptionMap6.createCollection(1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet12 = exceptionMap6.entrySet();
        java.lang.Object obj13 = null;
        java.lang.Object obj14 = exceptionMap6.get(obj13);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertNotNull(serializableCollection11);
        org.junit.Assert.assertNotNull(exceptionEntrySet12);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap2 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean3 = exceptionMap1.containsValue((java.lang.Object) exceptionMap2);
        int int4 = exceptionMap2.size();
        java.util.Collection<java.lang.Object> objCollection5 = exceptionMap2.values();
        java.util.Collection<java.lang.Object> objCollection6 = exceptionMap2.values();
        java.lang.Object obj7 = exceptionMap0.remove((java.lang.Object) objCollection6);
        java.util.Collection<java.lang.Object> objCollection8 = exceptionMap0.values();
        exceptionMap0.clear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(objCollection5);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(objCollection8);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection2 = exceptionMap1.values();
        int int3 = exceptionMap1.size();
        java.lang.Throwable throwable5 = null;
        org.apache.commons.collections4.FunctorException functorException6 = new org.apache.commons.collections4.FunctorException("", throwable5);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap7 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean9 = exceptionMap7.containsValue((java.lang.Object) exceptionMap8);
        java.lang.Throwable throwable11 = null;
        org.apache.commons.collections4.FunctorException functorException12 = new org.apache.commons.collections4.FunctorException("", throwable11);
        java.lang.Throwable throwable19 = null;
        org.apache.commons.collections4.FunctorException functorException20 = new org.apache.commons.collections4.FunctorException("", throwable19);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap22 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean23 = exceptionMap21.containsValue((java.lang.Object) exceptionMap22);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap26 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection27 = exceptionMap26.values();
        int int28 = exceptionMap26.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection31 = exceptionMap30.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap33 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean34 = exceptionMap32.containsValue((java.lang.Object) exceptionMap33);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap39 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap40 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean41 = exceptionMap39.containsValue((java.lang.Object) exceptionMap40);
        int int42 = exceptionMap40.size();
        java.lang.Throwable throwable51 = null;
        org.apache.commons.collections4.FunctorException functorException52 = new org.apache.commons.collections4.FunctorException("", throwable51);
        org.apache.commons.collections4.FunctorException functorException53 = new org.apache.commons.collections4.FunctorException("", throwable51);
        java.io.Serializable[] serializableArray54 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable19, exceptionMap21, 0L, 0L, exceptionMap26, 0, exceptionMap30, exceptionMap32, (short) 1, ' ', "hi!", 100.0f, int42, false, 10.0f, '4', (-1), 1L, 1, throwable51 };
        java.util.ArrayList<java.io.Serializable> serializableList55 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList55, serializableArray54);
        boolean boolean57 = exceptionMap7.putAll((java.lang.Exception) functorException12, (java.util.Collection<java.io.Serializable>) serializableList55);
        functorException6.addSuppressed((java.lang.Throwable) functorException12);
        boolean boolean61 = exceptionMap1.replace((java.lang.Exception) functorException12, (java.lang.Object) "org.apache.commons.collections4.FunctorException: ", (java.lang.Object) 100.0f);
        org.apache.commons.collections4.FunctorException functorException62 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException12);
        org.junit.Assert.assertNotNull(objCollection2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objCollection27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(serializableArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        boolean boolean4 = exceptionMap1.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection6 = exceptionMap1.createCollection(10);
        int int7 = exceptionMap1.totalSize();
        java.lang.Object obj8 = null;
        java.lang.Object obj9 = exceptionMap1.get(obj8);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(serializableCollection6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Object obj11 = null;
        boolean boolean12 = exceptionMap1.containsKey(obj11);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj15 = exceptionMap13.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable17 = null;
        org.apache.commons.collections4.FunctorException functorException18 = new org.apache.commons.collections4.FunctorException(throwable17);
        org.apache.commons.collections4.FunctorException functorException19 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException18);
        boolean boolean21 = exceptionMap13.removeMapping((java.lang.Exception) functorException18, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet22 = exceptionMap13.keySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean25 = exceptionMap23.containsValue((java.lang.Object) exceptionMap24);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet26 = exceptionMap24.entrySet();
        boolean boolean28 = exceptionMap24.containsKey((java.lang.Object) (byte) 1);
        int int29 = exceptionMap24.size();
        exceptionMap13.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap24);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap32 = exceptionMap31.decorated();
        boolean boolean33 = exceptionMap1.removeMapping((java.lang.Object) exceptionMap24, (java.lang.Object) exceptionMap32);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor34 = exceptionMap1.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Exception exception35 = exceptionItor34.getKey();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(exceptionSet22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(exceptionMap32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(exceptionItor34);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Object obj11 = null;
        boolean boolean12 = exceptionMap1.containsKey(obj11);
        java.util.Collection<java.lang.Object> objCollection13 = exceptionMap1.values();
        java.lang.Class<?> wildcardClass14 = exceptionMap1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objCollection13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Throwable throwable13 = null;
        org.apache.commons.collections4.FunctorException functorException14 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException15 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("");
        functorException15.addSuppressed((java.lang.Throwable) functorException17);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean21 = exceptionMap19.containsValue((java.lang.Object) exceptionMap20);
        boolean boolean23 = exceptionMap20.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection25 = exceptionMap20.createCollection(10);
        boolean boolean26 = exceptionMap1.putAll((java.lang.Exception) functorException17, serializableCollection25);
        java.lang.Object obj27 = null;
        boolean boolean28 = exceptionMap1.containsValue(obj27);
        java.util.Set<java.lang.Exception> exceptionSet29 = exceptionMap1.keySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj32 = exceptionMap30.get((java.lang.Object) (-1L));
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor33 = exceptionMap30.mapIterator();
        boolean boolean34 = exceptionMap1.equals((java.lang.Object) exceptionItor33);
        boolean boolean35 = exceptionItor33.hasNext();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(exceptionSet29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(exceptionItor33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection1 = exceptionMap0.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet2 = exceptionMap0.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap3.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet5 = exceptionMap3.entrySet();
        boolean boolean7 = exceptionMap0.remove((java.lang.Object) exceptionEntrySet5, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean10 = exceptionMap8.containsValue((java.lang.Object) exceptionMap9);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet11 = exceptionMap9.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap12 = exceptionMap9.map;
        int int13 = exceptionMap12.size();
        boolean boolean14 = exceptionMap0.containsKey((java.lang.Object) exceptionMap12);
        boolean boolean16 = exceptionMap0.equals((java.lang.Object) 0.0d);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean19 = exceptionMap17.containsValue((java.lang.Object) exceptionMap18);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet20 = exceptionMap18.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap22 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean23 = exceptionMap21.containsValue((java.lang.Object) exceptionMap22);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet24 = exceptionMap22.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap25 = exceptionMap22.map;
        int int26 = exceptionMap25.size();
        java.lang.Object obj27 = exceptionMap18.remove((java.lang.Object) int26);
        java.lang.Throwable throwable30 = null;
        org.apache.commons.collections4.FunctorException functorException31 = new org.apache.commons.collections4.FunctorException("", throwable30);
        org.apache.commons.collections4.FunctorException functorException32 = new org.apache.commons.collections4.FunctorException("", throwable30);
        org.apache.commons.collections4.FunctorException functorException34 = new org.apache.commons.collections4.FunctorException("");
        functorException32.addSuppressed((java.lang.Throwable) functorException34);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean38 = exceptionMap36.containsValue((java.lang.Object) exceptionMap37);
        boolean boolean40 = exceptionMap37.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection42 = exceptionMap37.createCollection(10);
        boolean boolean43 = exceptionMap18.putAll((java.lang.Exception) functorException34, serializableCollection42);
        boolean boolean44 = exceptionMap0.containsValue((java.lang.Object) serializableCollection42);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap45 = null;
        // The following exception was thrown during execution in test generation
        try {
            exceptionMap0.putAll(exceptionMap45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(exceptionEntrySet2);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(exceptionEntrySet5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet11);
        org.junit.Assert.assertNotNull(exceptionMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet24);
        org.junit.Assert.assertNotNull(exceptionMap25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(serializableCollection42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        boolean boolean4 = exceptionMap1.containsKey((java.lang.Object) (short) 10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap10 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean11 = exceptionMap9.containsValue((java.lang.Object) exceptionMap10);
        int int12 = exceptionMap10.size();
        java.util.Collection<java.lang.Object> objCollection13 = exceptionMap10.values();
        java.util.Collection<java.lang.Object> objCollection14 = exceptionMap10.values();
        java.lang.Object obj15 = exceptionMap8.remove((java.lang.Object) objCollection14);
        java.lang.Object obj16 = exceptionMap5.get((java.lang.Object) objCollection14);
        boolean boolean17 = exceptionMap5.isEmpty();
        boolean boolean19 = exceptionMap1.containsValue((java.lang.Object) exceptionMap5, (java.lang.Object) (byte) 10);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor20 = exceptionMap1.mapIterator();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objCollection13);
        org.junit.Assert.assertNotNull(objCollection14);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(exceptionItor20);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Throwable throwable13 = null;
        org.apache.commons.collections4.FunctorException functorException14 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException15 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("");
        functorException15.addSuppressed((java.lang.Throwable) functorException17);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean21 = exceptionMap19.containsValue((java.lang.Object) exceptionMap20);
        boolean boolean23 = exceptionMap20.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection25 = exceptionMap20.createCollection(10);
        boolean boolean26 = exceptionMap1.putAll((java.lang.Exception) functorException17, serializableCollection25);
        java.lang.Throwable throwable29 = null;
        org.apache.commons.collections4.FunctorException functorException30 = new org.apache.commons.collections4.FunctorException("", throwable29);
        org.apache.commons.collections4.FunctorException functorException31 = new org.apache.commons.collections4.FunctorException("", throwable29);
        org.apache.commons.collections4.FunctorException functorException33 = new org.apache.commons.collections4.FunctorException("");
        functorException31.addSuppressed((java.lang.Throwable) functorException33);
        java.lang.Throwable[] throwableArray35 = functorException33.getSuppressed();
        org.apache.commons.collections4.FunctorException functorException36 = new org.apache.commons.collections4.FunctorException((java.lang.Throwable) functorException33);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap38 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap39 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean40 = exceptionMap38.containsValue((java.lang.Object) exceptionMap39);
        int int41 = exceptionMap39.size();
        java.util.Collection<java.lang.Object> objCollection42 = exceptionMap39.values();
        java.util.Collection<java.lang.Object> objCollection43 = exceptionMap39.values();
        java.lang.Object obj44 = exceptionMap37.remove((java.lang.Object) objCollection43);
        java.lang.Object obj45 = exceptionMap1.put((java.lang.Exception) functorException33, obj44);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap46 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap47 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean48 = exceptionMap46.containsValue((java.lang.Object) exceptionMap47);
        int int49 = exceptionMap47.size();
        java.util.Collection<java.lang.Object> objCollection50 = exceptionMap47.values();
        exceptionMap47.clear();
        java.lang.Throwable throwable53 = null;
        org.apache.commons.collections4.FunctorException functorException54 = new org.apache.commons.collections4.FunctorException("", throwable53);
        int int55 = exceptionMap47.size((java.lang.Object) functorException54);
        java.lang.Object obj56 = exceptionMap1.get((java.lang.Object) exceptionMap47);
        int int57 = exceptionMap47.totalSize();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertNotNull(objCollection43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(objCollection50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        exceptionMap1.clear();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap6 = exceptionMap1.map;
        java.util.Collection<java.lang.Object> objCollection7 = exceptionMap1.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap1.entrySet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(exceptionMap6);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        boolean boolean4 = exceptionMap1.containsKey((java.lang.Object) (short) 10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap10 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean11 = exceptionMap9.containsValue((java.lang.Object) exceptionMap10);
        int int12 = exceptionMap10.size();
        java.util.Collection<java.lang.Object> objCollection13 = exceptionMap10.values();
        java.util.Collection<java.lang.Object> objCollection14 = exceptionMap10.values();
        java.lang.Object obj15 = exceptionMap8.remove((java.lang.Object) objCollection14);
        java.lang.Object obj16 = exceptionMap5.get((java.lang.Object) objCollection14);
        boolean boolean17 = exceptionMap5.isEmpty();
        boolean boolean19 = exceptionMap1.containsValue((java.lang.Object) exceptionMap5, (java.lang.Object) (byte) 10);
        java.lang.Throwable throwable21 = null;
        org.apache.commons.collections4.FunctorException functorException22 = new org.apache.commons.collections4.FunctorException(throwable21);
        org.apache.commons.collections4.FunctorException functorException23 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException22);
        java.lang.Throwable throwable24 = null;
        org.apache.commons.collections4.FunctorException functorException25 = new org.apache.commons.collections4.FunctorException(throwable24);
        functorException23.addSuppressed((java.lang.Throwable) functorException25);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap28 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean29 = exceptionMap27.containsValue((java.lang.Object) exceptionMap28);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet30 = exceptionMap28.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean33 = exceptionMap31.containsValue((java.lang.Object) exceptionMap32);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet34 = exceptionMap32.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap35 = exceptionMap32.map;
        int int36 = exceptionMap35.size();
        java.lang.Object obj37 = exceptionMap28.remove((java.lang.Object) int36);
        java.lang.Exception exception38 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap39 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection40 = exceptionMap39.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet41 = exceptionMap39.entrySet();
        java.lang.Object obj42 = exceptionMap28.put(exception38, (java.lang.Object) exceptionEntrySet41);
        java.lang.Object obj43 = exceptionMap1.put((java.lang.Exception) functorException25, (java.lang.Object) exception38);
        int int44 = exceptionMap1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objCollection13);
        org.junit.Assert.assertNotNull(objCollection14);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet34);
        org.junit.Assert.assertNotNull(exceptionMap35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(objCollection40);
        org.junit.Assert.assertNotNull(exceptionEntrySet41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "[]");
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        org.apache.commons.collections4.FunctorException functorException0 = new org.apache.commons.collections4.FunctorException();
        org.apache.commons.collections4.FunctorException functorException1 = new org.apache.commons.collections4.FunctorException((java.lang.Throwable) functorException0);
        java.lang.Class<?> wildcardClass2 = functorException1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection1 = exceptionMap0.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet2 = exceptionMap0.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap3.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet5 = exceptionMap3.entrySet();
        boolean boolean7 = exceptionMap0.remove((java.lang.Object) exceptionEntrySet5, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean10 = exceptionMap8.containsValue((java.lang.Object) exceptionMap9);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet11 = exceptionMap9.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap12 = exceptionMap9.map;
        int int13 = exceptionMap12.size();
        boolean boolean14 = exceptionMap0.containsKey((java.lang.Object) exceptionMap12);
        boolean boolean16 = exceptionMap0.equals((java.lang.Object) 0.0d);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean19 = exceptionMap17.containsValue((java.lang.Object) exceptionMap18);
        boolean boolean21 = exceptionMap18.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection23 = exceptionMap18.createCollection(10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj26 = exceptionMap24.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable28 = null;
        org.apache.commons.collections4.FunctorException functorException29 = new org.apache.commons.collections4.FunctorException(throwable28);
        org.apache.commons.collections4.FunctorException functorException30 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException29);
        boolean boolean32 = exceptionMap24.removeMapping((java.lang.Exception) functorException29, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet33 = exceptionMap24.keySet();
        java.util.Collection<java.lang.Object> objCollection34 = exceptionMap24.values();
        boolean boolean35 = exceptionMap18.containsValue((java.lang.Object) exceptionMap24);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean38 = exceptionMap36.containsValue((java.lang.Object) exceptionMap37);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet39 = exceptionMap37.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap40 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap41 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean42 = exceptionMap40.containsValue((java.lang.Object) exceptionMap41);
        java.lang.Throwable throwable44 = null;
        org.apache.commons.collections4.FunctorException functorException45 = new org.apache.commons.collections4.FunctorException("", throwable44);
        java.lang.Throwable throwable52 = null;
        org.apache.commons.collections4.FunctorException functorException53 = new org.apache.commons.collections4.FunctorException("", throwable52);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap54 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap55 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean56 = exceptionMap54.containsValue((java.lang.Object) exceptionMap55);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap59 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection60 = exceptionMap59.values();
        int int61 = exceptionMap59.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap63 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection64 = exceptionMap63.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap65 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap66 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean67 = exceptionMap65.containsValue((java.lang.Object) exceptionMap66);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap72 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap73 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean74 = exceptionMap72.containsValue((java.lang.Object) exceptionMap73);
        int int75 = exceptionMap73.size();
        java.lang.Throwable throwable84 = null;
        org.apache.commons.collections4.FunctorException functorException85 = new org.apache.commons.collections4.FunctorException("", throwable84);
        org.apache.commons.collections4.FunctorException functorException86 = new org.apache.commons.collections4.FunctorException("", throwable84);
        java.io.Serializable[] serializableArray87 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable52, exceptionMap54, 0L, 0L, exceptionMap59, 0, exceptionMap63, exceptionMap65, (short) 1, ' ', "hi!", 100.0f, int75, false, 10.0f, '4', (-1), 1L, 1, throwable84 };
        java.util.ArrayList<java.io.Serializable> serializableList88 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList88, serializableArray87);
        boolean boolean90 = exceptionMap40.putAll((java.lang.Exception) functorException45, (java.util.Collection<java.io.Serializable>) serializableList88);
        boolean boolean92 = exceptionMap37.removeMapping((java.lang.Exception) functorException45, (java.io.Serializable) (-1.0f));
        boolean boolean94 = exceptionMap37.containsKey((java.lang.Object) 1L);
        java.lang.Object obj95 = exceptionMap24.remove((java.lang.Object) 1L);
        int int96 = exceptionMap24.size();
        exceptionMap0.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap24);
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(exceptionEntrySet2);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(exceptionEntrySet5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet11);
        org.junit.Assert.assertNotNull(exceptionMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(serializableCollection23);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(exceptionSet33);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objCollection60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(objCollection64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(serializableArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(obj95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        exceptionMap1.clear();
        java.lang.Throwable throwable6 = null;
        org.apache.commons.collections4.FunctorException functorException7 = new org.apache.commons.collections4.FunctorException(throwable6);
        org.apache.commons.collections4.FunctorException functorException8 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException7);
        java.lang.Throwable throwable9 = null;
        org.apache.commons.collections4.FunctorException functorException10 = new org.apache.commons.collections4.FunctorException(throwable9);
        functorException8.addSuppressed((java.lang.Throwable) functorException10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean14 = exceptionMap12.containsValue((java.lang.Object) exceptionMap13);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet15 = exceptionMap13.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap16 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean18 = exceptionMap16.containsValue((java.lang.Object) exceptionMap17);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet19 = exceptionMap17.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap20 = exceptionMap17.map;
        int int21 = exceptionMap20.size();
        java.lang.Object obj22 = exceptionMap13.remove((java.lang.Object) int21);
        java.lang.Exception exception23 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection25 = exceptionMap24.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet26 = exceptionMap24.entrySet();
        java.lang.Object obj27 = exceptionMap13.put(exception23, (java.lang.Object) exceptionEntrySet26);
        java.lang.Object obj28 = exceptionMap1.put((java.lang.Exception) functorException8, (java.lang.Object) exceptionEntrySet26);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        int int32 = exceptionMap30.size();
        java.util.Collection<java.lang.Object> objCollection33 = exceptionMap30.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap34 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap35 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean36 = exceptionMap34.containsValue((java.lang.Object) exceptionMap35);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet37 = exceptionMap35.entrySet();
        exceptionMap30.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap35);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap39 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap40 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean41 = exceptionMap39.containsValue((java.lang.Object) exceptionMap40);
        java.lang.Throwable throwable43 = null;
        org.apache.commons.collections4.FunctorException functorException44 = new org.apache.commons.collections4.FunctorException("", throwable43);
        java.lang.Throwable throwable51 = null;
        org.apache.commons.collections4.FunctorException functorException52 = new org.apache.commons.collections4.FunctorException("", throwable51);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap53 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap54 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean55 = exceptionMap53.containsValue((java.lang.Object) exceptionMap54);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap58 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection59 = exceptionMap58.values();
        int int60 = exceptionMap58.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap62 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection63 = exceptionMap62.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap64 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap65 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean66 = exceptionMap64.containsValue((java.lang.Object) exceptionMap65);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap71 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap72 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean73 = exceptionMap71.containsValue((java.lang.Object) exceptionMap72);
        int int74 = exceptionMap72.size();
        java.lang.Throwable throwable83 = null;
        org.apache.commons.collections4.FunctorException functorException84 = new org.apache.commons.collections4.FunctorException("", throwable83);
        org.apache.commons.collections4.FunctorException functorException85 = new org.apache.commons.collections4.FunctorException("", throwable83);
        java.io.Serializable[] serializableArray86 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable51, exceptionMap53, 0L, 0L, exceptionMap58, 0, exceptionMap62, exceptionMap64, (short) 1, ' ', "hi!", 100.0f, int74, false, 10.0f, '4', (-1), 1L, 1, throwable83 };
        java.util.ArrayList<java.io.Serializable> serializableList87 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList87, serializableArray86);
        boolean boolean89 = exceptionMap39.putAll((java.lang.Exception) functorException44, (java.util.Collection<java.io.Serializable>) serializableList87);
        java.lang.Object obj91 = exceptionMap35.put((java.lang.Exception) functorException44, (java.lang.Object) (-1.0f));
        boolean boolean92 = exceptionMap1.containsKey((java.lang.Object) exceptionMap35);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet19);
        org.junit.Assert.assertNotNull(exceptionMap20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(objCollection25);
        org.junit.Assert.assertNotNull(exceptionEntrySet26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "[]");
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objCollection59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(objCollection63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(serializableArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertEquals("'" + obj91 + "' != '" + (-1.0f) + "'", obj91, (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Object obj11 = null;
        boolean boolean12 = exceptionMap1.containsKey(obj11);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj15 = exceptionMap13.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable17 = null;
        org.apache.commons.collections4.FunctorException functorException18 = new org.apache.commons.collections4.FunctorException(throwable17);
        org.apache.commons.collections4.FunctorException functorException19 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException18);
        boolean boolean21 = exceptionMap13.removeMapping((java.lang.Exception) functorException18, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet22 = exceptionMap13.keySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean25 = exceptionMap23.containsValue((java.lang.Object) exceptionMap24);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet26 = exceptionMap24.entrySet();
        boolean boolean28 = exceptionMap24.containsKey((java.lang.Object) (byte) 1);
        int int29 = exceptionMap24.size();
        exceptionMap13.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap24);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap32 = exceptionMap31.decorated();
        boolean boolean33 = exceptionMap1.removeMapping((java.lang.Object) exceptionMap24, (java.lang.Object) exceptionMap32);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor34 = exceptionMap1.mapIterator();
        boolean boolean35 = exceptionItor34.hasNext();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(exceptionSet22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(exceptionMap32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(exceptionItor34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Throwable throwable13 = null;
        org.apache.commons.collections4.FunctorException functorException14 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException15 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("");
        functorException15.addSuppressed((java.lang.Throwable) functorException17);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean21 = exceptionMap19.containsValue((java.lang.Object) exceptionMap20);
        boolean boolean23 = exceptionMap20.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection25 = exceptionMap20.createCollection(10);
        boolean boolean26 = exceptionMap1.putAll((java.lang.Exception) functorException17, serializableCollection25);
        java.lang.Object obj27 = null;
        boolean boolean28 = exceptionMap1.containsValue(obj27);
        java.util.Set<java.lang.Exception> exceptionSet29 = exceptionMap1.keySet();
        java.util.Set<java.lang.Exception> exceptionSet30 = exceptionMap1.keySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean33 = exceptionMap31.containsValue((java.lang.Object) exceptionMap32);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet34 = exceptionMap32.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap35 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean37 = exceptionMap35.containsValue((java.lang.Object) exceptionMap36);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet38 = exceptionMap36.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap39 = exceptionMap36.map;
        int int40 = exceptionMap39.size();
        java.lang.Object obj41 = exceptionMap32.remove((java.lang.Object) int40);
        java.lang.Object obj42 = null;
        boolean boolean43 = exceptionMap32.containsKey(obj42);
        java.lang.Object obj44 = null;
        boolean boolean45 = exceptionMap32.containsKey(obj44);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap46 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap47 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean48 = exceptionMap46.containsValue((java.lang.Object) exceptionMap47);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet49 = exceptionMap47.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap50 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap51 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean52 = exceptionMap50.containsValue((java.lang.Object) exceptionMap51);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet53 = exceptionMap51.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap54 = exceptionMap51.map;
        int int55 = exceptionMap54.size();
        java.lang.Object obj56 = exceptionMap47.remove((java.lang.Object) int55);
        java.lang.Object obj57 = null;
        boolean boolean58 = exceptionMap47.containsKey(obj57);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap59 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap60 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean61 = exceptionMap59.containsValue((java.lang.Object) exceptionMap60);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet62 = exceptionMap60.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap63 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap64 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean65 = exceptionMap63.containsValue((java.lang.Object) exceptionMap64);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet66 = exceptionMap64.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap67 = exceptionMap64.map;
        int int68 = exceptionMap67.size();
        java.lang.Object obj69 = exceptionMap60.remove((java.lang.Object) int68);
        java.lang.Throwable throwable72 = null;
        org.apache.commons.collections4.FunctorException functorException73 = new org.apache.commons.collections4.FunctorException("", throwable72);
        org.apache.commons.collections4.FunctorException functorException74 = new org.apache.commons.collections4.FunctorException("", throwable72);
        org.apache.commons.collections4.FunctorException functorException76 = new org.apache.commons.collections4.FunctorException("");
        functorException74.addSuppressed((java.lang.Throwable) functorException76);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap78 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap79 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean80 = exceptionMap78.containsValue((java.lang.Object) exceptionMap79);
        boolean boolean82 = exceptionMap79.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection84 = exceptionMap79.createCollection(10);
        boolean boolean85 = exceptionMap60.putAll((java.lang.Exception) functorException76, serializableCollection84);
        boolean boolean86 = exceptionMap47.containsKey((java.lang.Object) serializableCollection84);
        int int87 = exceptionMap47.size();
        boolean boolean88 = exceptionMap1.remove(obj44, (java.lang.Object) int87);
        java.lang.Object obj89 = null;
        boolean boolean90 = exceptionMap1.equals(obj89);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(exceptionSet29);
        org.junit.Assert.assertNotNull(exceptionSet30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet38);
        org.junit.Assert.assertNotNull(exceptionMap39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet53);
        org.junit.Assert.assertNotNull(exceptionMap54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet66);
        org.junit.Assert.assertNotNull(exceptionMap67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(serializableCollection84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap6);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor10 = exceptionMap6.mapIterator();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap11 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean13 = exceptionMap11.containsValue((java.lang.Object) exceptionMap12);
        int int14 = exceptionMap12.size();
        java.util.Collection<java.lang.Object> objCollection15 = exceptionMap12.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap16 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean18 = exceptionMap16.containsValue((java.lang.Object) exceptionMap17);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet19 = exceptionMap17.entrySet();
        exceptionMap12.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap17);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap22 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean23 = exceptionMap21.containsValue((java.lang.Object) exceptionMap22);
        java.lang.Throwable throwable25 = null;
        org.apache.commons.collections4.FunctorException functorException26 = new org.apache.commons.collections4.FunctorException("", throwable25);
        java.lang.Throwable throwable33 = null;
        org.apache.commons.collections4.FunctorException functorException34 = new org.apache.commons.collections4.FunctorException("", throwable33);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap35 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean37 = exceptionMap35.containsValue((java.lang.Object) exceptionMap36);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap40 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection41 = exceptionMap40.values();
        int int42 = exceptionMap40.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap44 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection45 = exceptionMap44.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap46 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap47 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean48 = exceptionMap46.containsValue((java.lang.Object) exceptionMap47);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap53 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap54 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean55 = exceptionMap53.containsValue((java.lang.Object) exceptionMap54);
        int int56 = exceptionMap54.size();
        java.lang.Throwable throwable65 = null;
        org.apache.commons.collections4.FunctorException functorException66 = new org.apache.commons.collections4.FunctorException("", throwable65);
        org.apache.commons.collections4.FunctorException functorException67 = new org.apache.commons.collections4.FunctorException("", throwable65);
        java.io.Serializable[] serializableArray68 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable33, exceptionMap35, 0L, 0L, exceptionMap40, 0, exceptionMap44, exceptionMap46, (short) 1, ' ', "hi!", 100.0f, int56, false, 10.0f, '4', (-1), 1L, 1, throwable65 };
        java.util.ArrayList<java.io.Serializable> serializableList69 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList69, serializableArray68);
        boolean boolean71 = exceptionMap21.putAll((java.lang.Exception) functorException26, (java.util.Collection<java.io.Serializable>) serializableList69);
        java.lang.Object obj73 = exceptionMap17.put((java.lang.Exception) functorException26, (java.lang.Object) (-1.0f));
        java.util.Collection<java.lang.Object> objCollection74 = exceptionMap17.values();
        java.lang.Object obj75 = exceptionMap6.get((java.lang.Object) objCollection74);
        int int76 = exceptionMap6.totalSize();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertNotNull(exceptionItor10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objCollection41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(objCollection45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(serializableArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertEquals("'" + obj73 + "' != '" + (-1.0f) + "'", obj73, (-1.0f));
        org.junit.Assert.assertNotNull(objCollection74);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        exceptionMap1.clear();
        java.lang.Throwable throwable6 = null;
        org.apache.commons.collections4.FunctorException functorException7 = new org.apache.commons.collections4.FunctorException(throwable6);
        org.apache.commons.collections4.FunctorException functorException8 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException7);
        java.lang.Throwable throwable9 = null;
        org.apache.commons.collections4.FunctorException functorException10 = new org.apache.commons.collections4.FunctorException(throwable9);
        functorException8.addSuppressed((java.lang.Throwable) functorException10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean14 = exceptionMap12.containsValue((java.lang.Object) exceptionMap13);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet15 = exceptionMap13.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap16 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean18 = exceptionMap16.containsValue((java.lang.Object) exceptionMap17);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet19 = exceptionMap17.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap20 = exceptionMap17.map;
        int int21 = exceptionMap20.size();
        java.lang.Object obj22 = exceptionMap13.remove((java.lang.Object) int21);
        java.lang.Exception exception23 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection25 = exceptionMap24.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet26 = exceptionMap24.entrySet();
        java.lang.Object obj27 = exceptionMap13.put(exception23, (java.lang.Object) exceptionEntrySet26);
        java.lang.Object obj28 = exceptionMap1.put((java.lang.Exception) functorException8, (java.lang.Object) exceptionEntrySet26);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        int int32 = exceptionMap30.size();
        java.util.Collection<java.lang.Object> objCollection33 = exceptionMap30.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap34 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap35 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean36 = exceptionMap34.containsValue((java.lang.Object) exceptionMap35);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet37 = exceptionMap35.entrySet();
        exceptionMap30.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap35);
        java.util.Collection<java.io.Serializable> serializableCollection40 = exceptionMap35.createCollection(1);
        boolean boolean41 = exceptionMap1.containsKey((java.lang.Object) exceptionMap35);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor42 = exceptionMap35.mapIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Exception exception43 = exceptionItor42.getKey();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet19);
        org.junit.Assert.assertNotNull(exceptionMap20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(objCollection25);
        org.junit.Assert.assertNotNull(exceptionEntrySet26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "[]");
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet37);
        org.junit.Assert.assertNotNull(serializableCollection40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(exceptionItor42);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        java.util.Collection<java.lang.Object> objCollection5 = exceptionMap1.values();
        int int6 = exceptionMap1.size();
        boolean boolean7 = exceptionMap1.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap10 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean11 = exceptionMap9.containsValue((java.lang.Object) exceptionMap10);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet12 = exceptionMap10.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean15 = exceptionMap13.containsValue((java.lang.Object) exceptionMap14);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet16 = exceptionMap14.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap17 = exceptionMap14.map;
        int int18 = exceptionMap17.size();
        java.lang.Object obj19 = exceptionMap10.remove((java.lang.Object) int18);
        java.lang.Throwable throwable22 = null;
        org.apache.commons.collections4.FunctorException functorException23 = new org.apache.commons.collections4.FunctorException("", throwable22);
        org.apache.commons.collections4.FunctorException functorException24 = new org.apache.commons.collections4.FunctorException("", throwable22);
        org.apache.commons.collections4.FunctorException functorException26 = new org.apache.commons.collections4.FunctorException("");
        functorException24.addSuppressed((java.lang.Throwable) functorException26);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap28 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean30 = exceptionMap28.containsValue((java.lang.Object) exceptionMap29);
        boolean boolean32 = exceptionMap29.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection34 = exceptionMap29.createCollection(10);
        boolean boolean35 = exceptionMap10.putAll((java.lang.Exception) functorException26, serializableCollection34);
        org.apache.commons.collections4.FunctorException functorException36 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException26);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap38 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean39 = exceptionMap37.containsValue((java.lang.Object) exceptionMap38);
        java.lang.Throwable throwable42 = null;
        org.apache.commons.collections4.FunctorException functorException43 = new org.apache.commons.collections4.FunctorException("", throwable42);
        org.apache.commons.collections4.FunctorException functorException44 = new org.apache.commons.collections4.FunctorException("", throwable42);
        java.lang.Object obj46 = exceptionMap38.put((java.lang.Exception) functorException44, (java.lang.Object) (-1));
        org.apache.commons.collections4.FunctorException functorException47 = new org.apache.commons.collections4.FunctorException((java.lang.Throwable) functorException44);
        java.lang.Object obj48 = exceptionMap1.put((java.lang.Exception) functorException36, (java.lang.Object) functorException44);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet49 = exceptionMap1.entrySet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(objCollection5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet16);
        org.junit.Assert.assertNotNull(exceptionMap17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(serializableCollection34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + obj46 + "' != '" + (-1) + "'", obj46, (-1));
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "org.apache.commons.collections4.FunctorException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "org.apache.commons.collections4.FunctorException: ");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "org.apache.commons.collections4.FunctorException: ");
        org.junit.Assert.assertNotNull(exceptionEntrySet49);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        exceptionMap1.clear();
        boolean boolean5 = exceptionMap1.isEmpty();
        java.lang.Throwable throwable7 = null;
        org.apache.commons.collections4.FunctorException functorException8 = new org.apache.commons.collections4.FunctorException(throwable7);
        org.apache.commons.collections4.FunctorException functorException9 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException8);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap10 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap11 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean12 = exceptionMap10.containsValue((java.lang.Object) exceptionMap11);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean15 = exceptionMap13.containsValue((java.lang.Object) exceptionMap14);
        exceptionMap11.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap14);
        java.lang.Object obj17 = exceptionMap1.put((java.lang.Exception) functorException9, (java.lang.Object) exceptionMap14);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean20 = exceptionMap18.containsValue((java.lang.Object) exceptionMap19);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet21 = exceptionMap19.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap22 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean24 = exceptionMap22.containsValue((java.lang.Object) exceptionMap23);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet25 = exceptionMap23.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap26 = exceptionMap23.map;
        int int27 = exceptionMap26.size();
        java.lang.Object obj28 = exceptionMap19.remove((java.lang.Object) int27);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.collections4.FunctorException functorException32 = new org.apache.commons.collections4.FunctorException("", throwable31);
        org.apache.commons.collections4.FunctorException functorException33 = new org.apache.commons.collections4.FunctorException("", throwable31);
        org.apache.commons.collections4.FunctorException functorException35 = new org.apache.commons.collections4.FunctorException("");
        functorException33.addSuppressed((java.lang.Throwable) functorException35);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap38 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean39 = exceptionMap37.containsValue((java.lang.Object) exceptionMap38);
        boolean boolean41 = exceptionMap38.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection43 = exceptionMap38.createCollection(10);
        boolean boolean44 = exceptionMap19.putAll((java.lang.Exception) functorException35, serializableCollection43);
        java.util.Iterator<java.io.Serializable> serializableItor45 = exceptionMap1.iterator((java.lang.Object) functorException35);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "{}");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet25);
        org.junit.Assert.assertNotNull(exceptionMap26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(serializableCollection43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(serializableItor45);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection1 = exceptionMap0.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet2 = exceptionMap0.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean5 = exceptionMap3.containsValue((java.lang.Object) exceptionMap4);
        java.lang.Throwable throwable8 = null;
        org.apache.commons.collections4.FunctorException functorException9 = new org.apache.commons.collections4.FunctorException("", throwable8);
        org.apache.commons.collections4.FunctorException functorException10 = new org.apache.commons.collections4.FunctorException("", throwable8);
        java.lang.Object obj12 = exceptionMap4.put((java.lang.Exception) functorException10, (java.lang.Object) (-1));
        org.apache.commons.collections4.FunctorException functorException13 = new org.apache.commons.collections4.FunctorException((java.lang.Throwable) functorException10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection15 = exceptionMap14.values();
        int int16 = exceptionMap14.size();
        boolean boolean18 = exceptionMap14.containsValue((java.lang.Object) true);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap19 = exceptionMap14.map;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean22 = exceptionMap20.containsValue((java.lang.Object) exceptionMap21);
        int int23 = exceptionMap21.size();
        java.util.Collection<java.lang.Object> objCollection24 = exceptionMap21.values();
        exceptionMap21.clear();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap26 = exceptionMap21.map;
        java.util.Collection<java.lang.Object> objCollection27 = exceptionMap21.values();
        java.util.Collection<java.lang.Object> objCollection28 = exceptionMap21.values();
        java.lang.Throwable throwable31 = null;
        org.apache.commons.collections4.FunctorException functorException32 = new org.apache.commons.collections4.FunctorException("", throwable31);
        org.apache.commons.collections4.FunctorException functorException33 = new org.apache.commons.collections4.FunctorException("", throwable31);
        org.apache.commons.collections4.FunctorException functorException35 = new org.apache.commons.collections4.FunctorException("");
        functorException33.addSuppressed((java.lang.Throwable) functorException35);
        java.lang.Throwable[] throwableArray37 = functorException35.getSuppressed();
        org.apache.commons.collections4.FunctorException functorException38 = new org.apache.commons.collections4.FunctorException((java.lang.Throwable) functorException35);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap39 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap40 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean41 = exceptionMap39.containsValue((java.lang.Object) exceptionMap40);
        int int42 = exceptionMap40.size();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet43 = exceptionMap40.entrySet();
        java.lang.Object obj45 = exceptionMap40.get((java.lang.Object) true);
        int int46 = exceptionMap40.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap47 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap48 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean49 = exceptionMap47.containsValue((java.lang.Object) exceptionMap48);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet50 = exceptionMap48.entrySet();
        exceptionMap48.clear();
        java.lang.Throwable throwable53 = null;
        org.apache.commons.collections4.FunctorException functorException54 = new org.apache.commons.collections4.FunctorException(throwable53);
        org.apache.commons.collections4.FunctorException functorException55 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException54);
        java.lang.Throwable throwable56 = null;
        org.apache.commons.collections4.FunctorException functorException57 = new org.apache.commons.collections4.FunctorException(throwable56);
        functorException55.addSuppressed((java.lang.Throwable) functorException57);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap59 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap60 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean61 = exceptionMap59.containsValue((java.lang.Object) exceptionMap60);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet62 = exceptionMap60.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap63 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap64 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean65 = exceptionMap63.containsValue((java.lang.Object) exceptionMap64);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet66 = exceptionMap64.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap67 = exceptionMap64.map;
        int int68 = exceptionMap67.size();
        java.lang.Object obj69 = exceptionMap60.remove((java.lang.Object) int68);
        java.lang.Exception exception70 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap71 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection72 = exceptionMap71.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet73 = exceptionMap71.entrySet();
        java.lang.Object obj74 = exceptionMap60.put(exception70, (java.lang.Object) exceptionEntrySet73);
        java.lang.Object obj75 = exceptionMap48.put((java.lang.Exception) functorException55, (java.lang.Object) exceptionEntrySet73);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap76 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap77 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean78 = exceptionMap76.containsValue((java.lang.Object) exceptionMap77);
        int int79 = exceptionMap77.size();
        java.util.Collection<java.lang.Object> objCollection80 = exceptionMap77.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap81 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap82 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean83 = exceptionMap81.containsValue((java.lang.Object) exceptionMap82);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet84 = exceptionMap82.entrySet();
        exceptionMap77.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap82);
        java.util.Collection<java.io.Serializable> serializableCollection87 = exceptionMap82.createCollection(1);
        boolean boolean88 = exceptionMap48.containsKey((java.lang.Object) exceptionMap82);
        java.lang.Object obj89 = exceptionMap40.get((java.lang.Object) exceptionMap82);
        java.lang.Object obj90 = exceptionMap21.put((java.lang.Exception) functorException35, obj89);
        boolean boolean91 = exceptionMap14.containsValue((java.lang.Object) functorException35);
        boolean boolean92 = exceptionMap0.containsValue((java.lang.Object) functorException13, (java.lang.Object) functorException35);
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(exceptionEntrySet2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + (-1) + "'", obj12, (-1));
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(exceptionMap19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNotNull(exceptionMap26);
        org.junit.Assert.assertNotNull(objCollection27);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(exceptionEntrySet43);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet50);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet66);
        org.junit.Assert.assertNotNull(exceptionMap67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNotNull(objCollection72);
        org.junit.Assert.assertNotNull(exceptionEntrySet73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "[]");
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "[]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(objCollection80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet84);
        org.junit.Assert.assertNotNull(serializableCollection87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Throwable throwable13 = null;
        org.apache.commons.collections4.FunctorException functorException14 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException15 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("");
        functorException15.addSuppressed((java.lang.Throwable) functorException17);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean21 = exceptionMap19.containsValue((java.lang.Object) exceptionMap20);
        boolean boolean23 = exceptionMap20.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection25 = exceptionMap20.createCollection(10);
        boolean boolean26 = exceptionMap1.putAll((java.lang.Exception) functorException17, serializableCollection25);
        java.lang.Object obj27 = null;
        boolean boolean28 = exceptionMap1.containsValue(obj27);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet32 = exceptionMap30.entrySet();
        exceptionMap30.clear();
        boolean boolean34 = exceptionMap30.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap35 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection36 = exceptionMap35.values();
        int int37 = exceptionMap35.size();
        boolean boolean39 = exceptionMap35.containsValue((java.lang.Object) true);
        boolean boolean40 = exceptionMap30.containsValue((java.lang.Object) boolean39);
        java.util.Set<java.lang.Exception> exceptionSet41 = exceptionMap30.keySet();
        boolean boolean42 = exceptionMap1.containsValue((java.lang.Object) exceptionSet41);
        int int43 = exceptionMap1.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap44 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap45 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean46 = exceptionMap44.containsValue((java.lang.Object) exceptionMap45);
        int int47 = exceptionMap45.size();
        java.util.Collection<java.lang.Object> objCollection48 = exceptionMap45.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap50 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap51 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean52 = exceptionMap50.containsValue((java.lang.Object) exceptionMap51);
        boolean boolean54 = exceptionMap51.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection56 = exceptionMap51.createCollection(10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap57 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj59 = exceptionMap57.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable61 = null;
        org.apache.commons.collections4.FunctorException functorException62 = new org.apache.commons.collections4.FunctorException(throwable61);
        org.apache.commons.collections4.FunctorException functorException63 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException62);
        boolean boolean65 = exceptionMap57.removeMapping((java.lang.Exception) functorException62, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet66 = exceptionMap57.keySet();
        java.util.Collection<java.lang.Object> objCollection67 = exceptionMap57.values();
        boolean boolean68 = exceptionMap51.containsValue((java.lang.Object) exceptionMap57);
        boolean boolean69 = exceptionMap45.remove((java.lang.Object) "", (java.lang.Object) exceptionMap51);
        exceptionMap1.map = exceptionMap51;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objCollection36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(exceptionSet41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(objCollection48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(serializableCollection56);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(exceptionSet66);
        org.junit.Assert.assertNotNull(objCollection67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        java.util.Set<java.lang.Exception> exceptionSet5 = exceptionMap1.keySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj8 = exceptionMap6.get((java.lang.Object) (-1L));
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor9 = exceptionMap6.mapIterator();
        exceptionMap6.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet11 = exceptionMap6.entrySet();
        java.lang.Object obj12 = exceptionMap1.get((java.lang.Object) exceptionMap6);
        java.lang.String str13 = exceptionMap1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(exceptionSet5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(exceptionItor9);
        org.junit.Assert.assertNotNull(exceptionEntrySet11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{}" + "'", str13, "{}");
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        java.util.Collection<java.lang.Object> objCollection5 = exceptionMap1.values();
        int int6 = exceptionMap1.size();
        boolean boolean7 = exceptionMap1.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap10 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean11 = exceptionMap9.containsValue((java.lang.Object) exceptionMap10);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet12 = exceptionMap10.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean15 = exceptionMap13.containsValue((java.lang.Object) exceptionMap14);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet16 = exceptionMap14.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap17 = exceptionMap14.map;
        int int18 = exceptionMap17.size();
        java.lang.Object obj19 = exceptionMap10.remove((java.lang.Object) int18);
        java.lang.Throwable throwable22 = null;
        org.apache.commons.collections4.FunctorException functorException23 = new org.apache.commons.collections4.FunctorException("", throwable22);
        org.apache.commons.collections4.FunctorException functorException24 = new org.apache.commons.collections4.FunctorException("", throwable22);
        org.apache.commons.collections4.FunctorException functorException26 = new org.apache.commons.collections4.FunctorException("");
        functorException24.addSuppressed((java.lang.Throwable) functorException26);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap28 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean30 = exceptionMap28.containsValue((java.lang.Object) exceptionMap29);
        boolean boolean32 = exceptionMap29.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection34 = exceptionMap29.createCollection(10);
        boolean boolean35 = exceptionMap10.putAll((java.lang.Exception) functorException26, serializableCollection34);
        org.apache.commons.collections4.FunctorException functorException36 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException26);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap38 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean39 = exceptionMap37.containsValue((java.lang.Object) exceptionMap38);
        java.lang.Throwable throwable42 = null;
        org.apache.commons.collections4.FunctorException functorException43 = new org.apache.commons.collections4.FunctorException("", throwable42);
        org.apache.commons.collections4.FunctorException functorException44 = new org.apache.commons.collections4.FunctorException("", throwable42);
        java.lang.Object obj46 = exceptionMap38.put((java.lang.Exception) functorException44, (java.lang.Object) (-1));
        org.apache.commons.collections4.FunctorException functorException47 = new org.apache.commons.collections4.FunctorException((java.lang.Throwable) functorException44);
        java.lang.Object obj48 = exceptionMap1.put((java.lang.Exception) functorException36, (java.lang.Object) functorException44);
        org.apache.commons.collections4.FunctorException functorException49 = new org.apache.commons.collections4.FunctorException((java.lang.Throwable) functorException44);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(objCollection5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet16);
        org.junit.Assert.assertNotNull(exceptionMap17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(serializableCollection34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + obj46 + "' != '" + (-1) + "'", obj46, (-1));
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "org.apache.commons.collections4.FunctorException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "org.apache.commons.collections4.FunctorException: ");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "org.apache.commons.collections4.FunctorException: ");
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.lang.Throwable throwable8 = null;
        org.apache.commons.collections4.FunctorException functorException9 = new org.apache.commons.collections4.FunctorException("", throwable8);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("", throwable16);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean20 = exceptionMap18.containsValue((java.lang.Object) exceptionMap19);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection24 = exceptionMap23.values();
        int int25 = exceptionMap23.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection28 = exceptionMap27.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean38 = exceptionMap36.containsValue((java.lang.Object) exceptionMap37);
        int int39 = exceptionMap37.size();
        java.lang.Throwable throwable48 = null;
        org.apache.commons.collections4.FunctorException functorException49 = new org.apache.commons.collections4.FunctorException("", throwable48);
        org.apache.commons.collections4.FunctorException functorException50 = new org.apache.commons.collections4.FunctorException("", throwable48);
        java.io.Serializable[] serializableArray51 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable16, exceptionMap18, 0L, 0L, exceptionMap23, 0, exceptionMap27, exceptionMap29, (short) 1, ' ', "hi!", 100.0f, int39, false, 10.0f, '4', (-1), 1L, 1, throwable48 };
        java.util.ArrayList<java.io.Serializable> serializableList52 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList52, serializableArray51);
        boolean boolean54 = exceptionMap4.putAll((java.lang.Exception) functorException9, (java.util.Collection<java.io.Serializable>) serializableList52);
        boolean boolean56 = exceptionMap1.removeMapping((java.lang.Exception) functorException9, (java.io.Serializable) (-1.0f));
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor57 = exceptionMap1.mapIterator();
        boolean boolean58 = exceptionMap1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet59 = exceptionMap1.entrySet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(serializableArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(exceptionItor57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(exceptionEntrySet59);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap6);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor10 = exceptionMap6.mapIterator();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertNotNull(exceptionItor10);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj2 = exceptionMap0.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable4 = null;
        org.apache.commons.collections4.FunctorException functorException5 = new org.apache.commons.collections4.FunctorException(throwable4);
        org.apache.commons.collections4.FunctorException functorException6 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException5);
        boolean boolean8 = exceptionMap0.removeMapping((java.lang.Exception) functorException5, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet9 = exceptionMap0.keySet();
        exceptionMap0.clear();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap11 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean13 = exceptionMap11.containsValue((java.lang.Object) exceptionMap12);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet14 = exceptionMap12.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap15 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap16 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean17 = exceptionMap15.containsValue((java.lang.Object) exceptionMap16);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet18 = exceptionMap16.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap19 = exceptionMap16.map;
        int int20 = exceptionMap19.size();
        java.lang.Object obj21 = exceptionMap12.remove((java.lang.Object) int20);
        java.lang.Object obj22 = null;
        boolean boolean23 = exceptionMap12.containsKey(obj22);
        java.util.Collection<java.lang.Object> objCollection24 = exceptionMap12.values();
        java.lang.Throwable throwable26 = null;
        org.apache.commons.collections4.FunctorException functorException27 = new org.apache.commons.collections4.FunctorException(throwable26);
        org.apache.commons.collections4.FunctorException functorException28 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException27);
        boolean boolean29 = exceptionMap12.containsValue((java.lang.Object) "hi!");
        exceptionMap0.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap12);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean33 = exceptionMap31.containsValue((java.lang.Object) exceptionMap32);
        int int34 = exceptionMap32.size();
        java.util.Collection<java.lang.Object> objCollection35 = exceptionMap32.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj38 = exceptionMap36.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable40 = null;
        org.apache.commons.collections4.FunctorException functorException41 = new org.apache.commons.collections4.FunctorException(throwable40);
        org.apache.commons.collections4.FunctorException functorException42 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException41);
        boolean boolean44 = exceptionMap36.removeMapping((java.lang.Exception) functorException41, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet45 = exceptionMap36.keySet();
        boolean boolean46 = exceptionMap32.equals((java.lang.Object) exceptionSet45);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap47 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap48 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean49 = exceptionMap47.containsValue((java.lang.Object) exceptionMap48);
        int int50 = exceptionMap48.size();
        java.util.Collection<java.lang.Object> objCollection51 = exceptionMap48.values();
        exceptionMap48.clear();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap53 = exceptionMap48.map;
        java.util.Collection<java.io.Serializable> serializableCollection54 = exceptionMap32.getCollection((java.lang.Object) exceptionMap48);
        boolean boolean55 = exceptionMap12.containsValue((java.lang.Object) exceptionMap32);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(exceptionSet9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet18);
        org.junit.Assert.assertNotNull(exceptionMap19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(exceptionSet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(objCollection51);
        org.junit.Assert.assertNotNull(exceptionMap53);
        org.junit.Assert.assertNull(serializableCollection54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        java.util.Collection<java.lang.Object> objCollection5 = exceptionMap1.values();
        int int6 = exceptionMap1.size();
        boolean boolean7 = exceptionMap1.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean10 = exceptionMap8.containsValue((java.lang.Object) exceptionMap9);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet11 = exceptionMap9.entrySet();
        exceptionMap9.clear();
        boolean boolean13 = exceptionMap9.isEmpty();
        java.lang.Throwable throwable15 = null;
        org.apache.commons.collections4.FunctorException functorException16 = new org.apache.commons.collections4.FunctorException(throwable15);
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException16);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean20 = exceptionMap18.containsValue((java.lang.Object) exceptionMap19);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap22 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean23 = exceptionMap21.containsValue((java.lang.Object) exceptionMap22);
        exceptionMap19.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap22);
        java.lang.Object obj25 = exceptionMap9.put((java.lang.Exception) functorException17, (java.lang.Object) exceptionMap22);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap28 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean29 = exceptionMap27.containsValue((java.lang.Object) exceptionMap28);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet30 = exceptionMap28.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean33 = exceptionMap31.containsValue((java.lang.Object) exceptionMap32);
        java.lang.Throwable throwable35 = null;
        org.apache.commons.collections4.FunctorException functorException36 = new org.apache.commons.collections4.FunctorException("", throwable35);
        java.lang.Throwable throwable43 = null;
        org.apache.commons.collections4.FunctorException functorException44 = new org.apache.commons.collections4.FunctorException("", throwable43);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap45 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap46 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean47 = exceptionMap45.containsValue((java.lang.Object) exceptionMap46);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap50 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection51 = exceptionMap50.values();
        int int52 = exceptionMap50.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap54 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection55 = exceptionMap54.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap56 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap57 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean58 = exceptionMap56.containsValue((java.lang.Object) exceptionMap57);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap63 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap64 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean65 = exceptionMap63.containsValue((java.lang.Object) exceptionMap64);
        int int66 = exceptionMap64.size();
        java.lang.Throwable throwable75 = null;
        org.apache.commons.collections4.FunctorException functorException76 = new org.apache.commons.collections4.FunctorException("", throwable75);
        org.apache.commons.collections4.FunctorException functorException77 = new org.apache.commons.collections4.FunctorException("", throwable75);
        java.io.Serializable[] serializableArray78 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable43, exceptionMap45, 0L, 0L, exceptionMap50, 0, exceptionMap54, exceptionMap56, (short) 1, ' ', "hi!", 100.0f, int66, false, 10.0f, '4', (-1), 1L, 1, throwable75 };
        java.util.ArrayList<java.io.Serializable> serializableList79 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList79, serializableArray78);
        boolean boolean81 = exceptionMap31.putAll((java.lang.Exception) functorException36, (java.util.Collection<java.io.Serializable>) serializableList79);
        boolean boolean83 = exceptionMap28.removeMapping((java.lang.Exception) functorException36, (java.io.Serializable) (-1.0f));
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor84 = exceptionMap28.mapIterator();
        boolean boolean85 = exceptionItor84.hasNext();
        boolean boolean86 = exceptionMap1.replace((java.lang.Exception) functorException17, (java.lang.Object) (short) 10, (java.lang.Object) exceptionItor84);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet87 = exceptionMap1.entrySet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(objCollection5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objCollection51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(objCollection55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(serializableArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(exceptionItor84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet87);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.lang.Throwable throwable4 = null;
        org.apache.commons.collections4.FunctorException functorException5 = new org.apache.commons.collections4.FunctorException("", throwable4);
        java.lang.Throwable throwable12 = null;
        org.apache.commons.collections4.FunctorException functorException13 = new org.apache.commons.collections4.FunctorException("", throwable12);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap15 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean16 = exceptionMap14.containsValue((java.lang.Object) exceptionMap15);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection20 = exceptionMap19.values();
        int int21 = exceptionMap19.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection24 = exceptionMap23.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap26 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean27 = exceptionMap25.containsValue((java.lang.Object) exceptionMap26);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap33 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean34 = exceptionMap32.containsValue((java.lang.Object) exceptionMap33);
        int int35 = exceptionMap33.size();
        java.lang.Throwable throwable44 = null;
        org.apache.commons.collections4.FunctorException functorException45 = new org.apache.commons.collections4.FunctorException("", throwable44);
        org.apache.commons.collections4.FunctorException functorException46 = new org.apache.commons.collections4.FunctorException("", throwable44);
        java.io.Serializable[] serializableArray47 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable12, exceptionMap14, 0L, 0L, exceptionMap19, 0, exceptionMap23, exceptionMap25, (short) 1, ' ', "hi!", 100.0f, int35, false, 10.0f, '4', (-1), 1L, 1, throwable44 };
        java.util.ArrayList<java.io.Serializable> serializableList48 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList48, serializableArray47);
        boolean boolean50 = exceptionMap0.putAll((java.lang.Exception) functorException5, (java.util.Collection<java.io.Serializable>) serializableList48);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet51 = exceptionMap0.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap52 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection53 = exceptionMap52.values();
        int int54 = exceptionMap52.size();
        java.lang.Object obj55 = exceptionMap0.get((java.lang.Object) exceptionMap52);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(serializableArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(exceptionEntrySet51);
        org.junit.Assert.assertNotNull(objCollection53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNull(obj55);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        java.lang.Object obj5 = null;
        boolean boolean6 = exceptionMap1.containsKey(obj5);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj2 = exceptionMap0.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable4 = null;
        org.apache.commons.collections4.FunctorException functorException5 = new org.apache.commons.collections4.FunctorException(throwable4);
        org.apache.commons.collections4.FunctorException functorException6 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException5);
        boolean boolean8 = exceptionMap0.removeMapping((java.lang.Exception) functorException5, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet9 = exceptionMap0.keySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap10 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap11 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean12 = exceptionMap10.containsValue((java.lang.Object) exceptionMap11);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet13 = exceptionMap11.entrySet();
        boolean boolean15 = exceptionMap11.containsKey((java.lang.Object) (byte) 1);
        int int16 = exceptionMap11.size();
        exceptionMap0.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap11);
        java.lang.Throwable throwable19 = null;
        org.apache.commons.collections4.FunctorException functorException20 = new org.apache.commons.collections4.FunctorException(throwable19);
        org.apache.commons.collections4.FunctorException functorException21 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException20);
        java.lang.Throwable throwable22 = null;
        org.apache.commons.collections4.FunctorException functorException23 = new org.apache.commons.collections4.FunctorException(throwable22);
        functorException21.addSuppressed((java.lang.Throwable) functorException23);
        java.lang.Object obj26 = exceptionMap11.replace((java.lang.Exception) functorException21, (java.lang.Object) "org.apache.commons.collections4.FunctorException");
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor27 = exceptionMap11.mapIterator();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(exceptionSet9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(exceptionItor27);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection1 = exceptionMap0.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet2 = exceptionMap0.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap3.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet5 = exceptionMap3.entrySet();
        boolean boolean7 = exceptionMap0.remove((java.lang.Object) exceptionEntrySet5, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean10 = exceptionMap8.containsValue((java.lang.Object) exceptionMap9);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet11 = exceptionMap9.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap12 = exceptionMap9.map;
        int int13 = exceptionMap12.size();
        boolean boolean14 = exceptionMap0.containsKey((java.lang.Object) exceptionMap12);
        boolean boolean16 = exceptionMap0.equals((java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = exceptionMap0.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean20 = exceptionMap18.containsValue((java.lang.Object) exceptionMap19);
        int int21 = exceptionMap19.size();
        java.util.Collection<java.lang.Object> objCollection22 = exceptionMap19.values();
        exceptionMap19.clear();
        java.lang.Throwable throwable25 = null;
        org.apache.commons.collections4.FunctorException functorException26 = new org.apache.commons.collections4.FunctorException("", throwable25);
        int int27 = exceptionMap19.size((java.lang.Object) functorException26);
        java.lang.Object obj28 = null;
        boolean boolean29 = exceptionMap19.containsValue(obj28);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean32 = exceptionMap30.containsValue((java.lang.Object) exceptionMap31);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet33 = exceptionMap31.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap34 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap35 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean36 = exceptionMap34.containsValue((java.lang.Object) exceptionMap35);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet37 = exceptionMap35.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap38 = exceptionMap35.map;
        int int39 = exceptionMap38.size();
        java.lang.Object obj40 = exceptionMap31.remove((java.lang.Object) int39);
        java.lang.Throwable throwable43 = null;
        org.apache.commons.collections4.FunctorException functorException44 = new org.apache.commons.collections4.FunctorException("", throwable43);
        org.apache.commons.collections4.FunctorException functorException45 = new org.apache.commons.collections4.FunctorException("", throwable43);
        org.apache.commons.collections4.FunctorException functorException47 = new org.apache.commons.collections4.FunctorException("");
        functorException45.addSuppressed((java.lang.Throwable) functorException47);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap49 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap50 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean51 = exceptionMap49.containsValue((java.lang.Object) exceptionMap50);
        boolean boolean53 = exceptionMap50.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection55 = exceptionMap50.createCollection(10);
        boolean boolean56 = exceptionMap31.putAll((java.lang.Exception) functorException47, serializableCollection55);
        java.lang.Object obj57 = null;
        boolean boolean58 = exceptionMap31.containsValue(obj57);
        java.util.Set<java.lang.Exception> exceptionSet59 = exceptionMap31.keySet();
        java.lang.Object obj60 = null;
        boolean boolean61 = exceptionMap31.containsKey(obj60);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap62 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap63 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean64 = exceptionMap62.containsValue((java.lang.Object) exceptionMap63);
        int int65 = exceptionMap63.size();
        java.util.Collection<java.lang.Object> objCollection66 = exceptionMap63.values();
        java.util.Collection<java.lang.Object> objCollection67 = exceptionMap63.values();
        int int68 = exceptionMap63.size();
        exceptionMap63.clear();
        exceptionMap31.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap63);
        boolean boolean71 = exceptionMap0.containsValue((java.lang.Object) boolean29, (java.lang.Object) exceptionMap31);
        int int72 = exceptionMap0.size();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(exceptionEntrySet2);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(exceptionEntrySet5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet11);
        org.junit.Assert.assertNotNull(exceptionMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(objCollection22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet37);
        org.junit.Assert.assertNotNull(exceptionMap38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(serializableCollection55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(exceptionSet59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(objCollection66);
        org.junit.Assert.assertNotNull(objCollection67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap6);
        java.util.Collection<java.io.Serializable> serializableCollection11 = exceptionMap6.createCollection(1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection13 = exceptionMap12.values();
        int int14 = exceptionMap12.size();
        java.lang.String str15 = exceptionMap12.toString();
        boolean boolean16 = exceptionMap6.containsKey((java.lang.Object) exceptionMap12);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertNotNull(serializableCollection11);
        org.junit.Assert.assertNotNull(objCollection13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean5 = exceptionMap3.containsValue((java.lang.Object) exceptionMap4);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet6 = exceptionMap4.entrySet();
        exceptionMap4.clear();
        boolean boolean8 = exceptionMap4.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.lang.Class<?>> exceptionMap9 = org.apache.commons.collections4.map.MultiValueMap.multiValueMap((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap4);
        boolean boolean10 = exceptionMap0.equals((java.lang.Object) exceptionMap4);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap11 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean13 = exceptionMap11.containsValue((java.lang.Object) exceptionMap12);
        int int14 = exceptionMap12.size();
        java.util.Collection<java.lang.Object> objCollection15 = exceptionMap12.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap16 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean18 = exceptionMap16.containsValue((java.lang.Object) exceptionMap17);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet19 = exceptionMap17.entrySet();
        exceptionMap12.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap17);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap21 = exceptionMap17.decorated();
        java.lang.Object obj22 = exceptionMap4.get((java.lang.Object) exceptionMap17);
        java.util.Collection<java.lang.Object> objCollection23 = exceptionMap4.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean26 = exceptionMap24.containsValue((java.lang.Object) exceptionMap25);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet27 = exceptionMap25.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap28 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean30 = exceptionMap28.containsValue((java.lang.Object) exceptionMap29);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet31 = exceptionMap29.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap32 = exceptionMap29.map;
        int int33 = exceptionMap32.size();
        java.lang.Object obj34 = exceptionMap25.remove((java.lang.Object) int33);
        java.lang.Exception exception35 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection37 = exceptionMap36.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet38 = exceptionMap36.entrySet();
        java.lang.Object obj39 = exceptionMap25.put(exception35, (java.lang.Object) exceptionEntrySet38);
        boolean boolean40 = exceptionMap4.containsValue((java.lang.Object) exceptionMap25);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet41 = exceptionMap4.entrySet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(exceptionMap9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet19);
        org.junit.Assert.assertNotNull(exceptionMap21);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet31);
        org.junit.Assert.assertNotNull(exceptionMap32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(objCollection37);
        org.junit.Assert.assertNotNull(exceptionEntrySet38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet41);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        boolean boolean4 = exceptionMap1.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection6 = exceptionMap1.createCollection(10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap7 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj9 = exceptionMap7.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable11 = null;
        org.apache.commons.collections4.FunctorException functorException12 = new org.apache.commons.collections4.FunctorException(throwable11);
        org.apache.commons.collections4.FunctorException functorException13 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException12);
        boolean boolean15 = exceptionMap7.removeMapping((java.lang.Exception) functorException12, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet16 = exceptionMap7.keySet();
        java.util.Collection<java.lang.Object> objCollection17 = exceptionMap7.values();
        boolean boolean18 = exceptionMap1.containsValue((java.lang.Object) exceptionMap7);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean21 = exceptionMap19.containsValue((java.lang.Object) exceptionMap20);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet22 = exceptionMap20.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean25 = exceptionMap23.containsValue((java.lang.Object) exceptionMap24);
        java.lang.Throwable throwable27 = null;
        org.apache.commons.collections4.FunctorException functorException28 = new org.apache.commons.collections4.FunctorException("", throwable27);
        java.lang.Throwable throwable35 = null;
        org.apache.commons.collections4.FunctorException functorException36 = new org.apache.commons.collections4.FunctorException("", throwable35);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap38 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean39 = exceptionMap37.containsValue((java.lang.Object) exceptionMap38);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap42 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection43 = exceptionMap42.values();
        int int44 = exceptionMap42.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap46 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection47 = exceptionMap46.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap48 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap49 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean50 = exceptionMap48.containsValue((java.lang.Object) exceptionMap49);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap55 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap56 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean57 = exceptionMap55.containsValue((java.lang.Object) exceptionMap56);
        int int58 = exceptionMap56.size();
        java.lang.Throwable throwable67 = null;
        org.apache.commons.collections4.FunctorException functorException68 = new org.apache.commons.collections4.FunctorException("", throwable67);
        org.apache.commons.collections4.FunctorException functorException69 = new org.apache.commons.collections4.FunctorException("", throwable67);
        java.io.Serializable[] serializableArray70 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable35, exceptionMap37, 0L, 0L, exceptionMap42, 0, exceptionMap46, exceptionMap48, (short) 1, ' ', "hi!", 100.0f, int58, false, 10.0f, '4', (-1), 1L, 1, throwable67 };
        java.util.ArrayList<java.io.Serializable> serializableList71 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList71, serializableArray70);
        boolean boolean73 = exceptionMap23.putAll((java.lang.Exception) functorException28, (java.util.Collection<java.io.Serializable>) serializableList71);
        boolean boolean75 = exceptionMap20.removeMapping((java.lang.Exception) functorException28, (java.io.Serializable) (-1.0f));
        boolean boolean77 = exceptionMap20.containsKey((java.lang.Object) 1L);
        java.lang.Object obj78 = exceptionMap7.remove((java.lang.Object) 1L);
        int int79 = exceptionMap7.size();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap80 = exceptionMap7.map;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(serializableCollection6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(exceptionSet16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objCollection43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objCollection47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(serializableArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(exceptionMap80);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Collection<java.lang.Object> objCollection3 = exceptionMap0.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet4 = exceptionMap0.entrySet();
        java.util.Set<java.lang.Exception> exceptionSet5 = exceptionMap0.keySet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objCollection3);
        org.junit.Assert.assertNotNull(exceptionEntrySet4);
        org.junit.Assert.assertNotNull(exceptionSet5);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        int int5 = exceptionMap1.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection7 = exceptionMap6.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection10 = exceptionMap9.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet11 = exceptionMap9.entrySet();
        boolean boolean13 = exceptionMap6.remove((java.lang.Object) exceptionEntrySet11, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap15 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean16 = exceptionMap14.containsValue((java.lang.Object) exceptionMap15);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet17 = exceptionMap15.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap18 = exceptionMap15.map;
        int int19 = exceptionMap18.size();
        boolean boolean20 = exceptionMap6.containsKey((java.lang.Object) exceptionMap18);
        boolean boolean22 = exceptionMap6.equals((java.lang.Object) 0.0d);
        int int23 = exceptionMap6.size();
        exceptionMap6.clear();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap26 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean28 = exceptionMap26.containsValue((java.lang.Object) exceptionMap27);
        boolean boolean30 = exceptionMap27.containsKey((java.lang.Object) (short) 10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean33 = exceptionMap31.containsValue((java.lang.Object) exceptionMap32);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap34 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap35 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean37 = exceptionMap35.containsValue((java.lang.Object) exceptionMap36);
        int int38 = exceptionMap36.size();
        java.util.Collection<java.lang.Object> objCollection39 = exceptionMap36.values();
        java.util.Collection<java.lang.Object> objCollection40 = exceptionMap36.values();
        java.lang.Object obj41 = exceptionMap34.remove((java.lang.Object) objCollection40);
        java.lang.Object obj42 = exceptionMap31.get((java.lang.Object) objCollection40);
        boolean boolean43 = exceptionMap31.isEmpty();
        boolean boolean45 = exceptionMap27.containsValue((java.lang.Object) exceptionMap31, (java.lang.Object) (byte) 10);
        java.lang.Object obj46 = exceptionMap6.getOrDefault((java.lang.Object) 100.0d, (java.lang.Object) exceptionMap27);
        java.util.Collection<java.io.Serializable> serializableCollection48 = exceptionMap27.createCollection(1);
        boolean boolean49 = exceptionMap1.containsValue((java.lang.Object) serializableCollection48);
        java.util.Iterator<java.util.Map.Entry<java.lang.Exception, java.io.Serializable>> exceptionEntryItor50 = exceptionMap1.iterator();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertNotNull(exceptionEntrySet11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet17);
        org.junit.Assert.assertNotNull(exceptionMap18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objCollection39);
        org.junit.Assert.assertNotNull(objCollection40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "{}");
        org.junit.Assert.assertNotNull(serializableCollection48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(exceptionEntryItor50);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        exceptionMap1.clear();
        boolean boolean5 = exceptionMap1.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection7 = exceptionMap6.values();
        int int8 = exceptionMap6.size();
        boolean boolean10 = exceptionMap6.containsValue((java.lang.Object) true);
        boolean boolean11 = exceptionMap1.containsValue((java.lang.Object) boolean10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean14 = exceptionMap12.containsValue((java.lang.Object) exceptionMap13);
        int int15 = exceptionMap13.size();
        java.util.Collection<java.lang.Object> objCollection16 = exceptionMap13.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean19 = exceptionMap17.containsValue((java.lang.Object) exceptionMap18);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet20 = exceptionMap18.entrySet();
        exceptionMap13.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap18);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor22 = exceptionMap18.mapIterator();
        java.lang.Object obj23 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection25 = exceptionMap24.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet26 = exceptionMap24.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection28 = exceptionMap27.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet29 = exceptionMap27.entrySet();
        boolean boolean31 = exceptionMap24.remove((java.lang.Object) exceptionEntrySet29, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap33 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean34 = exceptionMap32.containsValue((java.lang.Object) exceptionMap33);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet35 = exceptionMap33.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap36 = exceptionMap33.map;
        int int37 = exceptionMap36.size();
        boolean boolean38 = exceptionMap24.containsKey((java.lang.Object) exceptionMap36);
        boolean boolean40 = exceptionMap24.equals((java.lang.Object) 0.0d);
        boolean boolean41 = exceptionMap18.remove(obj23, (java.lang.Object) boolean40);
        java.lang.Throwable throwable43 = null;
        org.apache.commons.collections4.FunctorException functorException44 = new org.apache.commons.collections4.FunctorException(throwable43);
        org.apache.commons.collections4.FunctorException functorException45 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException44);
        java.lang.Throwable throwable46 = null;
        org.apache.commons.collections4.FunctorException functorException47 = new org.apache.commons.collections4.FunctorException(throwable46);
        functorException45.addSuppressed((java.lang.Throwable) functorException47);
        java.util.Collection<java.io.Serializable> serializableCollection49 = null;
        boolean boolean50 = exceptionMap18.putAll((java.lang.Exception) functorException47, serializableCollection49);
        java.lang.Object obj51 = exceptionMap1.remove((java.lang.Object) serializableCollection49);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet20);
        org.junit.Assert.assertNotNull(exceptionItor22);
        org.junit.Assert.assertNotNull(objCollection25);
        org.junit.Assert.assertNotNull(exceptionEntrySet26);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertNotNull(exceptionEntrySet29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet35);
        org.junit.Assert.assertNotNull(exceptionMap36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(obj51);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, org.apache.commons.collections4.map.AbstractIterableMap<java.lang.Exception, java.lang.Object>> exceptionMap1 = org.apache.commons.collections4.map.MultiValueMap.multiValueMap(exceptionMap0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Map must not be null.");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection1 = exceptionMap0.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet2 = exceptionMap0.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap3.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet5 = exceptionMap3.entrySet();
        boolean boolean7 = exceptionMap0.remove((java.lang.Object) exceptionEntrySet5, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean10 = exceptionMap8.containsValue((java.lang.Object) exceptionMap9);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet11 = exceptionMap9.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap12 = exceptionMap9.map;
        int int13 = exceptionMap12.size();
        boolean boolean14 = exceptionMap0.containsKey((java.lang.Object) exceptionMap12);
        boolean boolean16 = exceptionMap0.equals((java.lang.Object) 0.0d);
        int int17 = exceptionMap0.size();
        exceptionMap0.clear();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean22 = exceptionMap20.containsValue((java.lang.Object) exceptionMap21);
        boolean boolean24 = exceptionMap21.containsKey((java.lang.Object) (short) 10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap26 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean27 = exceptionMap25.containsValue((java.lang.Object) exceptionMap26);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap28 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        int int32 = exceptionMap30.size();
        java.util.Collection<java.lang.Object> objCollection33 = exceptionMap30.values();
        java.util.Collection<java.lang.Object> objCollection34 = exceptionMap30.values();
        java.lang.Object obj35 = exceptionMap28.remove((java.lang.Object) objCollection34);
        java.lang.Object obj36 = exceptionMap25.get((java.lang.Object) objCollection34);
        boolean boolean37 = exceptionMap25.isEmpty();
        boolean boolean39 = exceptionMap21.containsValue((java.lang.Object) exceptionMap25, (java.lang.Object) (byte) 10);
        java.lang.Object obj40 = exceptionMap0.getOrDefault((java.lang.Object) 100.0d, (java.lang.Object) exceptionMap21);
        java.util.Iterator<java.util.Map.Entry<java.lang.Exception, java.io.Serializable>> exceptionEntryItor41 = exceptionMap21.iterator();
        java.util.Collection<java.io.Serializable> serializableCollection43 = exceptionMap21.createCollection((int) '4');
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(exceptionEntrySet2);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(exceptionEntrySet5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet11);
        org.junit.Assert.assertNotNull(exceptionMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{}");
        org.junit.Assert.assertNotNull(exceptionEntryItor41);
        org.junit.Assert.assertNotNull(serializableCollection43);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Throwable throwable13 = null;
        org.apache.commons.collections4.FunctorException functorException14 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException15 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("");
        functorException15.addSuppressed((java.lang.Throwable) functorException17);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean21 = exceptionMap19.containsValue((java.lang.Object) exceptionMap20);
        boolean boolean23 = exceptionMap20.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection25 = exceptionMap20.createCollection(10);
        boolean boolean26 = exceptionMap1.putAll((java.lang.Exception) functorException17, serializableCollection25);
        java.lang.Object obj27 = null;
        boolean boolean28 = exceptionMap1.containsValue(obj27);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet32 = exceptionMap30.entrySet();
        exceptionMap30.clear();
        boolean boolean34 = exceptionMap30.isEmpty();
        java.lang.Throwable throwable36 = null;
        org.apache.commons.collections4.FunctorException functorException37 = new org.apache.commons.collections4.FunctorException(throwable36);
        org.apache.commons.collections4.FunctorException functorException38 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException37);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap39 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap40 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean41 = exceptionMap39.containsValue((java.lang.Object) exceptionMap40);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap42 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap43 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean44 = exceptionMap42.containsValue((java.lang.Object) exceptionMap43);
        exceptionMap40.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap43);
        java.lang.Object obj46 = exceptionMap30.put((java.lang.Exception) functorException38, (java.lang.Object) exceptionMap43);
        java.lang.Object obj47 = exceptionMap1.remove(obj46);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "{}");
        org.junit.Assert.assertNull(obj47);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        exceptionMap1.clear();
        boolean boolean5 = exceptionMap1.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection7 = exceptionMap6.values();
        int int8 = exceptionMap6.size();
        boolean boolean10 = exceptionMap6.containsValue((java.lang.Object) true);
        boolean boolean11 = exceptionMap1.containsValue((java.lang.Object) boolean10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean14 = exceptionMap12.containsValue((java.lang.Object) exceptionMap13);
        int int15 = exceptionMap13.size();
        java.util.Collection<java.lang.Object> objCollection16 = exceptionMap13.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean19 = exceptionMap17.containsValue((java.lang.Object) exceptionMap18);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet20 = exceptionMap18.entrySet();
        exceptionMap13.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap18);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap22 = exceptionMap18.decorated();
        boolean boolean23 = exceptionMap1.containsKey((java.lang.Object) exceptionMap18);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean26 = exceptionMap24.containsValue((java.lang.Object) exceptionMap25);
        boolean boolean28 = exceptionMap25.containsKey((java.lang.Object) (short) 10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap33 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap34 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean35 = exceptionMap33.containsValue((java.lang.Object) exceptionMap34);
        int int36 = exceptionMap34.size();
        java.util.Collection<java.lang.Object> objCollection37 = exceptionMap34.values();
        java.util.Collection<java.lang.Object> objCollection38 = exceptionMap34.values();
        java.lang.Object obj39 = exceptionMap32.remove((java.lang.Object) objCollection38);
        java.lang.Object obj40 = exceptionMap29.get((java.lang.Object) objCollection38);
        boolean boolean41 = exceptionMap29.isEmpty();
        boolean boolean43 = exceptionMap25.containsValue((java.lang.Object) exceptionMap29, (java.lang.Object) (byte) 10);
        java.lang.Throwable throwable45 = null;
        org.apache.commons.collections4.FunctorException functorException46 = new org.apache.commons.collections4.FunctorException(throwable45);
        org.apache.commons.collections4.FunctorException functorException47 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException46);
        java.lang.Throwable throwable48 = null;
        org.apache.commons.collections4.FunctorException functorException49 = new org.apache.commons.collections4.FunctorException(throwable48);
        functorException47.addSuppressed((java.lang.Throwable) functorException49);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap51 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap52 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean53 = exceptionMap51.containsValue((java.lang.Object) exceptionMap52);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet54 = exceptionMap52.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap55 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap56 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean57 = exceptionMap55.containsValue((java.lang.Object) exceptionMap56);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet58 = exceptionMap56.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap59 = exceptionMap56.map;
        int int60 = exceptionMap59.size();
        java.lang.Object obj61 = exceptionMap52.remove((java.lang.Object) int60);
        java.lang.Exception exception62 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap63 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection64 = exceptionMap63.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet65 = exceptionMap63.entrySet();
        java.lang.Object obj66 = exceptionMap52.put(exception62, (java.lang.Object) exceptionEntrySet65);
        java.lang.Object obj67 = exceptionMap25.put((java.lang.Exception) functorException49, (java.lang.Object) exception62);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap68 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap69 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean70 = exceptionMap68.containsValue((java.lang.Object) exceptionMap69);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet71 = exceptionMap69.entrySet();
        exceptionMap69.clear();
        java.lang.Throwable throwable74 = null;
        org.apache.commons.collections4.FunctorException functorException75 = new org.apache.commons.collections4.FunctorException(throwable74);
        org.apache.commons.collections4.FunctorException functorException76 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException75);
        java.lang.Throwable throwable77 = null;
        org.apache.commons.collections4.FunctorException functorException78 = new org.apache.commons.collections4.FunctorException(throwable77);
        functorException76.addSuppressed((java.lang.Throwable) functorException78);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap80 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap81 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean82 = exceptionMap80.containsValue((java.lang.Object) exceptionMap81);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet83 = exceptionMap81.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap84 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap85 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean86 = exceptionMap84.containsValue((java.lang.Object) exceptionMap85);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet87 = exceptionMap85.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap88 = exceptionMap85.map;
        int int89 = exceptionMap88.size();
        java.lang.Object obj90 = exceptionMap81.remove((java.lang.Object) int89);
        java.lang.Exception exception91 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap92 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection93 = exceptionMap92.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet94 = exceptionMap92.entrySet();
        java.lang.Object obj95 = exceptionMap81.put(exception91, (java.lang.Object) exceptionEntrySet94);
        java.lang.Object obj96 = exceptionMap69.put((java.lang.Exception) functorException76, (java.lang.Object) exceptionEntrySet94);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap97 = exceptionMap69.decorated();
        java.lang.Object obj98 = exceptionMap1.put(exception62, (java.lang.Object) exceptionMap69);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet20);
        org.junit.Assert.assertNotNull(exceptionMap22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(objCollection37);
        org.junit.Assert.assertNotNull(objCollection38);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet58);
        org.junit.Assert.assertNotNull(exceptionMap59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNotNull(objCollection64);
        org.junit.Assert.assertNotNull(exceptionEntrySet65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "[]");
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet71);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet87);
        org.junit.Assert.assertNotNull(exceptionMap88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNotNull(objCollection93);
        org.junit.Assert.assertNotNull(exceptionEntrySet94);
        org.junit.Assert.assertNotNull(obj95);
        org.junit.Assert.assertEquals(obj95.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj95), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj95), "[]");
        org.junit.Assert.assertNotNull(obj96);
        org.junit.Assert.assertEquals(obj96.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj96), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj96), "[]");
        org.junit.Assert.assertNotNull(exceptionMap97);
        org.junit.Assert.assertNotNull(obj98);
        org.junit.Assert.assertEquals(obj98.toString(), "{org.apache.commons.collections4.FunctorException: hi!=[[]]}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj98), "{org.apache.commons.collections4.FunctorException: hi!=[[]]}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj98), "{org.apache.commons.collections4.FunctorException: hi!=[[]]}");
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.lang.Throwable throwable8 = null;
        org.apache.commons.collections4.FunctorException functorException9 = new org.apache.commons.collections4.FunctorException("", throwable8);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("", throwable16);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean20 = exceptionMap18.containsValue((java.lang.Object) exceptionMap19);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection24 = exceptionMap23.values();
        int int25 = exceptionMap23.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection28 = exceptionMap27.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean38 = exceptionMap36.containsValue((java.lang.Object) exceptionMap37);
        int int39 = exceptionMap37.size();
        java.lang.Throwable throwable48 = null;
        org.apache.commons.collections4.FunctorException functorException49 = new org.apache.commons.collections4.FunctorException("", throwable48);
        org.apache.commons.collections4.FunctorException functorException50 = new org.apache.commons.collections4.FunctorException("", throwable48);
        java.io.Serializable[] serializableArray51 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable16, exceptionMap18, 0L, 0L, exceptionMap23, 0, exceptionMap27, exceptionMap29, (short) 1, ' ', "hi!", 100.0f, int39, false, 10.0f, '4', (-1), 1L, 1, throwable48 };
        java.util.ArrayList<java.io.Serializable> serializableList52 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList52, serializableArray51);
        boolean boolean54 = exceptionMap4.putAll((java.lang.Exception) functorException9, (java.util.Collection<java.io.Serializable>) serializableList52);
        boolean boolean56 = exceptionMap1.removeMapping((java.lang.Exception) functorException9, (java.io.Serializable) (-1.0f));
        boolean boolean57 = exceptionMap1.isEmpty();
        java.util.Collection<java.lang.Object> objCollection58 = exceptionMap1.values();
        int int59 = exceptionMap1.size();
        java.util.Set<java.lang.Exception> exceptionSet60 = exceptionMap1.keySet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(serializableArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objCollection58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(exceptionSet60);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        boolean boolean4 = exceptionMap1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        java.util.Collection<java.lang.Object> objCollection5 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection7 = exceptionMap6.values();
        int int8 = exceptionMap6.size();
        java.lang.Throwable throwable10 = null;
        org.apache.commons.collections4.FunctorException functorException11 = new org.apache.commons.collections4.FunctorException("", throwable10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean14 = exceptionMap12.containsValue((java.lang.Object) exceptionMap13);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("", throwable16);
        java.lang.Throwable throwable24 = null;
        org.apache.commons.collections4.FunctorException functorException25 = new org.apache.commons.collections4.FunctorException("", throwable24);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap26 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean28 = exceptionMap26.containsValue((java.lang.Object) exceptionMap27);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection32 = exceptionMap31.values();
        int int33 = exceptionMap31.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap35 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection36 = exceptionMap35.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap38 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean39 = exceptionMap37.containsValue((java.lang.Object) exceptionMap38);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap44 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap45 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean46 = exceptionMap44.containsValue((java.lang.Object) exceptionMap45);
        int int47 = exceptionMap45.size();
        java.lang.Throwable throwable56 = null;
        org.apache.commons.collections4.FunctorException functorException57 = new org.apache.commons.collections4.FunctorException("", throwable56);
        org.apache.commons.collections4.FunctorException functorException58 = new org.apache.commons.collections4.FunctorException("", throwable56);
        java.io.Serializable[] serializableArray59 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable24, exceptionMap26, 0L, 0L, exceptionMap31, 0, exceptionMap35, exceptionMap37, (short) 1, ' ', "hi!", 100.0f, int47, false, 10.0f, '4', (-1), 1L, 1, throwable56 };
        java.util.ArrayList<java.io.Serializable> serializableList60 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList60, serializableArray59);
        boolean boolean62 = exceptionMap12.putAll((java.lang.Exception) functorException17, (java.util.Collection<java.io.Serializable>) serializableList60);
        functorException11.addSuppressed((java.lang.Throwable) functorException17);
        boolean boolean66 = exceptionMap6.replace((java.lang.Exception) functorException17, (java.lang.Object) "org.apache.commons.collections4.FunctorException: ", (java.lang.Object) 100.0f);
        java.lang.Object obj68 = exceptionMap1.put((java.lang.Exception) functorException17, (java.lang.Object) (short) -1);
        java.lang.String str69 = functorException17.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(objCollection5);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objCollection32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objCollection36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(serializableArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + obj68 + "' != '" + (short) -1 + "'", obj68, (short) -1);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "org.apache.commons.collections4.FunctorException: " + "'", str69, "org.apache.commons.collections4.FunctorException: ");
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection1 = exceptionMap0.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet2 = exceptionMap0.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap3.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet5 = exceptionMap3.entrySet();
        boolean boolean7 = exceptionMap0.remove((java.lang.Object) exceptionEntrySet5, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean10 = exceptionMap8.containsValue((java.lang.Object) exceptionMap9);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet11 = exceptionMap9.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap12 = exceptionMap9.map;
        int int13 = exceptionMap12.size();
        boolean boolean14 = exceptionMap0.containsKey((java.lang.Object) exceptionMap12);
        boolean boolean16 = exceptionMap0.equals((java.lang.Object) 0.0d);
        java.util.Iterator<java.util.Map.Entry<java.lang.Exception, java.io.Serializable>> exceptionEntryItor17 = exceptionMap0.iterator();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean20 = exceptionMap18.containsValue((java.lang.Object) exceptionMap19);
        int int21 = exceptionMap19.size();
        java.util.Collection<java.lang.Object> objCollection22 = exceptionMap19.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean25 = exceptionMap23.containsValue((java.lang.Object) exceptionMap24);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet26 = exceptionMap24.entrySet();
        exceptionMap19.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap24);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap28 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean30 = exceptionMap28.containsValue((java.lang.Object) exceptionMap29);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean33 = exceptionMap31.containsValue((java.lang.Object) exceptionMap32);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet34 = exceptionMap32.entrySet();
        exceptionMap32.clear();
        boolean boolean36 = exceptionMap32.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.lang.Class<?>> exceptionMap37 = org.apache.commons.collections4.map.MultiValueMap.multiValueMap((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap32);
        boolean boolean38 = exceptionMap28.equals((java.lang.Object) exceptionMap32);
        java.lang.Throwable throwable40 = null;
        org.apache.commons.collections4.FunctorException functorException41 = new org.apache.commons.collections4.FunctorException(throwable40);
        org.apache.commons.collections4.FunctorException functorException42 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException41);
        java.lang.Throwable throwable43 = null;
        org.apache.commons.collections4.FunctorException functorException44 = new org.apache.commons.collections4.FunctorException(throwable43);
        functorException42.addSuppressed((java.lang.Throwable) functorException44);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap46 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection47 = exceptionMap46.values();
        java.lang.Object obj48 = null;
        java.lang.Object obj49 = exceptionMap46.remove(obj48);
        java.lang.Object obj50 = exceptionMap32.put((java.lang.Exception) functorException42, obj49);
        exceptionMap24.map = exceptionMap32;
        java.lang.Object obj52 = exceptionMap0.remove((java.lang.Object) exceptionMap24);
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(exceptionEntrySet2);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(exceptionEntrySet5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet11);
        org.junit.Assert.assertNotNull(exceptionMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(exceptionEntryItor17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(objCollection22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(exceptionMap37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objCollection47);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(obj52);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj2 = exceptionMap0.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable4 = null;
        org.apache.commons.collections4.FunctorException functorException5 = new org.apache.commons.collections4.FunctorException(throwable4);
        org.apache.commons.collections4.FunctorException functorException6 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException5);
        boolean boolean8 = exceptionMap0.removeMapping((java.lang.Exception) functorException5, (java.io.Serializable) '#');
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor9 = exceptionMap0.mapIterator();
        java.lang.Exception exception10 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap11 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection12 = exceptionMap11.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet13 = exceptionMap11.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection15 = exceptionMap14.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet16 = exceptionMap14.entrySet();
        boolean boolean18 = exceptionMap11.remove((java.lang.Object) exceptionEntrySet16, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean21 = exceptionMap19.containsValue((java.lang.Object) exceptionMap20);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet22 = exceptionMap20.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap23 = exceptionMap20.map;
        int int24 = exceptionMap23.size();
        boolean boolean25 = exceptionMap11.containsKey((java.lang.Object) exceptionMap23);
        boolean boolean27 = exceptionMap11.equals((java.lang.Object) 0.0d);
        int int28 = exceptionMap11.size();
        exceptionMap11.clear();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean33 = exceptionMap31.containsValue((java.lang.Object) exceptionMap32);
        boolean boolean35 = exceptionMap32.containsKey((java.lang.Object) (short) 10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean38 = exceptionMap36.containsValue((java.lang.Object) exceptionMap37);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap39 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap40 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap41 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean42 = exceptionMap40.containsValue((java.lang.Object) exceptionMap41);
        int int43 = exceptionMap41.size();
        java.util.Collection<java.lang.Object> objCollection44 = exceptionMap41.values();
        java.util.Collection<java.lang.Object> objCollection45 = exceptionMap41.values();
        java.lang.Object obj46 = exceptionMap39.remove((java.lang.Object) objCollection45);
        java.lang.Object obj47 = exceptionMap36.get((java.lang.Object) objCollection45);
        boolean boolean48 = exceptionMap36.isEmpty();
        boolean boolean50 = exceptionMap32.containsValue((java.lang.Object) exceptionMap36, (java.lang.Object) (byte) 10);
        java.lang.Object obj51 = exceptionMap11.getOrDefault((java.lang.Object) 100.0d, (java.lang.Object) exceptionMap32);
        java.util.Collection<java.io.Serializable> serializableCollection53 = exceptionMap32.createCollection(1);
        java.lang.Object obj54 = exceptionMap0.put(exception10, (java.lang.Object) 1);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(exceptionItor9);
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertNotNull(exceptionEntrySet13);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertNotNull(exceptionEntrySet16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet22);
        org.junit.Assert.assertNotNull(exceptionMap23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertNotNull(objCollection45);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "{}");
        org.junit.Assert.assertNotNull(serializableCollection53);
        org.junit.Assert.assertEquals("'" + obj54 + "' != '" + 1 + "'", obj54, 1);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection1 = exceptionMap0.values();
        int int2 = exceptionMap0.size();
        java.lang.Throwable throwable4 = null;
        org.apache.commons.collections4.FunctorException functorException5 = new org.apache.commons.collections4.FunctorException("", throwable4);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap7 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean8 = exceptionMap6.containsValue((java.lang.Object) exceptionMap7);
        java.lang.Throwable throwable10 = null;
        org.apache.commons.collections4.FunctorException functorException11 = new org.apache.commons.collections4.FunctorException("", throwable10);
        java.lang.Throwable throwable18 = null;
        org.apache.commons.collections4.FunctorException functorException19 = new org.apache.commons.collections4.FunctorException("", throwable18);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean22 = exceptionMap20.containsValue((java.lang.Object) exceptionMap21);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection26 = exceptionMap25.values();
        int int27 = exceptionMap25.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection30 = exceptionMap29.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean33 = exceptionMap31.containsValue((java.lang.Object) exceptionMap32);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap38 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap39 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean40 = exceptionMap38.containsValue((java.lang.Object) exceptionMap39);
        int int41 = exceptionMap39.size();
        java.lang.Throwable throwable50 = null;
        org.apache.commons.collections4.FunctorException functorException51 = new org.apache.commons.collections4.FunctorException("", throwable50);
        org.apache.commons.collections4.FunctorException functorException52 = new org.apache.commons.collections4.FunctorException("", throwable50);
        java.io.Serializable[] serializableArray53 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable18, exceptionMap20, 0L, 0L, exceptionMap25, 0, exceptionMap29, exceptionMap31, (short) 1, ' ', "hi!", 100.0f, int41, false, 10.0f, '4', (-1), 1L, 1, throwable50 };
        java.util.ArrayList<java.io.Serializable> serializableList54 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList54, serializableArray53);
        boolean boolean56 = exceptionMap6.putAll((java.lang.Exception) functorException11, (java.util.Collection<java.io.Serializable>) serializableList54);
        functorException5.addSuppressed((java.lang.Throwable) functorException11);
        boolean boolean60 = exceptionMap0.replace((java.lang.Exception) functorException11, (java.lang.Object) "org.apache.commons.collections4.FunctorException: ", (java.lang.Object) 100.0f);
        int int61 = exceptionMap0.size();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objCollection26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(serializableArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Throwable throwable13 = null;
        org.apache.commons.collections4.FunctorException functorException14 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException15 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("");
        functorException15.addSuppressed((java.lang.Throwable) functorException17);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean21 = exceptionMap19.containsValue((java.lang.Object) exceptionMap20);
        boolean boolean23 = exceptionMap20.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection25 = exceptionMap20.createCollection(10);
        boolean boolean26 = exceptionMap1.putAll((java.lang.Exception) functorException17, serializableCollection25);
        java.lang.Throwable throwable29 = null;
        org.apache.commons.collections4.FunctorException functorException30 = new org.apache.commons.collections4.FunctorException("", throwable29);
        org.apache.commons.collections4.FunctorException functorException31 = new org.apache.commons.collections4.FunctorException("", throwable29);
        org.apache.commons.collections4.FunctorException functorException33 = new org.apache.commons.collections4.FunctorException("");
        functorException31.addSuppressed((java.lang.Throwable) functorException33);
        java.lang.Throwable[] throwableArray35 = functorException33.getSuppressed();
        org.apache.commons.collections4.FunctorException functorException36 = new org.apache.commons.collections4.FunctorException((java.lang.Throwable) functorException33);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap38 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap39 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean40 = exceptionMap38.containsValue((java.lang.Object) exceptionMap39);
        int int41 = exceptionMap39.size();
        java.util.Collection<java.lang.Object> objCollection42 = exceptionMap39.values();
        java.util.Collection<java.lang.Object> objCollection43 = exceptionMap39.values();
        java.lang.Object obj44 = exceptionMap37.remove((java.lang.Object) objCollection43);
        java.lang.Object obj45 = exceptionMap1.put((java.lang.Exception) functorException33, obj44);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap46 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap47 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean48 = exceptionMap46.containsValue((java.lang.Object) exceptionMap47);
        int int49 = exceptionMap47.size();
        java.util.Collection<java.lang.Object> objCollection50 = exceptionMap47.values();
        exceptionMap47.clear();
        java.lang.Throwable throwable53 = null;
        org.apache.commons.collections4.FunctorException functorException54 = new org.apache.commons.collections4.FunctorException("", throwable53);
        int int55 = exceptionMap47.size((java.lang.Object) functorException54);
        java.lang.Object obj56 = exceptionMap1.get((java.lang.Object) exceptionMap47);
        boolean boolean57 = exceptionMap1.isEmpty();
        int int58 = exceptionMap1.totalSize();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertNotNull(objCollection43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(objCollection50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj2 = exceptionMap0.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable4 = null;
        org.apache.commons.collections4.FunctorException functorException5 = new org.apache.commons.collections4.FunctorException(throwable4);
        org.apache.commons.collections4.FunctorException functorException6 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException5);
        boolean boolean8 = exceptionMap0.removeMapping((java.lang.Exception) functorException5, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet9 = exceptionMap0.keySet();
        exceptionMap0.clear();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(exceptionSet9);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        java.util.Collection<java.lang.Object> objCollection5 = exceptionMap1.values();
        int int6 = exceptionMap1.size();
        boolean boolean7 = exceptionMap1.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean10 = exceptionMap8.containsValue((java.lang.Object) exceptionMap9);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet11 = exceptionMap9.entrySet();
        exceptionMap9.clear();
        boolean boolean13 = exceptionMap9.isEmpty();
        java.lang.Throwable throwable15 = null;
        org.apache.commons.collections4.FunctorException functorException16 = new org.apache.commons.collections4.FunctorException(throwable15);
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException16);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean20 = exceptionMap18.containsValue((java.lang.Object) exceptionMap19);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap22 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean23 = exceptionMap21.containsValue((java.lang.Object) exceptionMap22);
        exceptionMap19.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap22);
        java.lang.Object obj25 = exceptionMap9.put((java.lang.Exception) functorException17, (java.lang.Object) exceptionMap22);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap28 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean29 = exceptionMap27.containsValue((java.lang.Object) exceptionMap28);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet30 = exceptionMap28.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean33 = exceptionMap31.containsValue((java.lang.Object) exceptionMap32);
        java.lang.Throwable throwable35 = null;
        org.apache.commons.collections4.FunctorException functorException36 = new org.apache.commons.collections4.FunctorException("", throwable35);
        java.lang.Throwable throwable43 = null;
        org.apache.commons.collections4.FunctorException functorException44 = new org.apache.commons.collections4.FunctorException("", throwable43);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap45 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap46 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean47 = exceptionMap45.containsValue((java.lang.Object) exceptionMap46);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap50 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection51 = exceptionMap50.values();
        int int52 = exceptionMap50.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap54 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection55 = exceptionMap54.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap56 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap57 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean58 = exceptionMap56.containsValue((java.lang.Object) exceptionMap57);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap63 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap64 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean65 = exceptionMap63.containsValue((java.lang.Object) exceptionMap64);
        int int66 = exceptionMap64.size();
        java.lang.Throwable throwable75 = null;
        org.apache.commons.collections4.FunctorException functorException76 = new org.apache.commons.collections4.FunctorException("", throwable75);
        org.apache.commons.collections4.FunctorException functorException77 = new org.apache.commons.collections4.FunctorException("", throwable75);
        java.io.Serializable[] serializableArray78 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable43, exceptionMap45, 0L, 0L, exceptionMap50, 0, exceptionMap54, exceptionMap56, (short) 1, ' ', "hi!", 100.0f, int66, false, 10.0f, '4', (-1), 1L, 1, throwable75 };
        java.util.ArrayList<java.io.Serializable> serializableList79 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList79, serializableArray78);
        boolean boolean81 = exceptionMap31.putAll((java.lang.Exception) functorException36, (java.util.Collection<java.io.Serializable>) serializableList79);
        boolean boolean83 = exceptionMap28.removeMapping((java.lang.Exception) functorException36, (java.io.Serializable) (-1.0f));
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor84 = exceptionMap28.mapIterator();
        boolean boolean85 = exceptionItor84.hasNext();
        boolean boolean86 = exceptionMap1.replace((java.lang.Exception) functorException17, (java.lang.Object) (short) 10, (java.lang.Object) exceptionItor84);
        java.lang.Object obj88 = exceptionMap1.get((java.lang.Object) 100.0d);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(objCollection5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objCollection51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(objCollection55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(serializableArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(exceptionItor84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(obj88);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj2 = exceptionMap0.get((java.lang.Object) (-1L));
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor3 = exceptionMap0.mapIterator();
        int int4 = exceptionMap0.size();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(exceptionItor3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        exceptionMap1.clear();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap7 = exceptionMap6.decorated();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean10 = exceptionMap8.containsValue((java.lang.Object) exceptionMap9);
        boolean boolean11 = exceptionMap7.containsValue((java.lang.Object) exceptionMap9);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection13 = exceptionMap12.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet14 = exceptionMap12.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap15 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection16 = exceptionMap15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet17 = exceptionMap15.entrySet();
        boolean boolean19 = exceptionMap12.remove((java.lang.Object) exceptionEntrySet17, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean22 = exceptionMap20.containsValue((java.lang.Object) exceptionMap21);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet23 = exceptionMap21.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap24 = exceptionMap21.map;
        int int25 = exceptionMap24.size();
        boolean boolean26 = exceptionMap12.containsKey((java.lang.Object) exceptionMap24);
        boolean boolean28 = exceptionMap12.equals((java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection29 = exceptionMap12.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean32 = exceptionMap30.containsValue((java.lang.Object) exceptionMap31);
        int int33 = exceptionMap31.size();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet34 = exceptionMap31.entrySet();
        java.lang.Object obj36 = exceptionMap31.get((java.lang.Object) true);
        int int37 = exceptionMap31.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap38 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap39 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean40 = exceptionMap38.containsValue((java.lang.Object) exceptionMap39);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet41 = exceptionMap39.entrySet();
        exceptionMap39.clear();
        java.lang.Throwable throwable44 = null;
        org.apache.commons.collections4.FunctorException functorException45 = new org.apache.commons.collections4.FunctorException(throwable44);
        org.apache.commons.collections4.FunctorException functorException46 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException45);
        java.lang.Throwable throwable47 = null;
        org.apache.commons.collections4.FunctorException functorException48 = new org.apache.commons.collections4.FunctorException(throwable47);
        functorException46.addSuppressed((java.lang.Throwable) functorException48);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap50 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap51 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean52 = exceptionMap50.containsValue((java.lang.Object) exceptionMap51);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet53 = exceptionMap51.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap54 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap55 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean56 = exceptionMap54.containsValue((java.lang.Object) exceptionMap55);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet57 = exceptionMap55.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap58 = exceptionMap55.map;
        int int59 = exceptionMap58.size();
        java.lang.Object obj60 = exceptionMap51.remove((java.lang.Object) int59);
        java.lang.Exception exception61 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap62 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection63 = exceptionMap62.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet64 = exceptionMap62.entrySet();
        java.lang.Object obj65 = exceptionMap51.put(exception61, (java.lang.Object) exceptionEntrySet64);
        java.lang.Object obj66 = exceptionMap39.put((java.lang.Exception) functorException46, (java.lang.Object) exceptionEntrySet64);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap67 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap68 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean69 = exceptionMap67.containsValue((java.lang.Object) exceptionMap68);
        int int70 = exceptionMap68.size();
        java.util.Collection<java.lang.Object> objCollection71 = exceptionMap68.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap72 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap73 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean74 = exceptionMap72.containsValue((java.lang.Object) exceptionMap73);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet75 = exceptionMap73.entrySet();
        exceptionMap68.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap73);
        java.util.Collection<java.io.Serializable> serializableCollection78 = exceptionMap73.createCollection(1);
        boolean boolean79 = exceptionMap39.containsKey((java.lang.Object) exceptionMap73);
        java.lang.Object obj80 = exceptionMap31.get((java.lang.Object) exceptionMap73);
        boolean boolean81 = exceptionMap7.remove((java.lang.Object) objCollection29, (java.lang.Object) exceptionMap31);
        boolean boolean82 = exceptionMap1.equals((java.lang.Object) exceptionMap31);
        java.util.Collection<java.lang.Object> objCollection83 = exceptionMap31.values();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(exceptionMap7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objCollection13);
        org.junit.Assert.assertNotNull(exceptionEntrySet14);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNotNull(exceptionEntrySet17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet23);
        org.junit.Assert.assertNotNull(exceptionMap24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objCollection29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(exceptionEntrySet34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet41);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet57);
        org.junit.Assert.assertNotNull(exceptionMap58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNotNull(objCollection63);
        org.junit.Assert.assertNotNull(exceptionEntrySet64);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "[]");
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(objCollection71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet75);
        org.junit.Assert.assertNotNull(serializableCollection78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(objCollection83);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        exceptionMap1.clear();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap6 = exceptionMap1.map;
        java.util.Collection<java.lang.Object> objCollection7 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean10 = exceptionMap8.containsValue((java.lang.Object) exceptionMap9);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet11 = exceptionMap9.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean14 = exceptionMap12.containsValue((java.lang.Object) exceptionMap13);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet15 = exceptionMap13.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap16 = exceptionMap13.map;
        int int17 = exceptionMap16.size();
        java.lang.Object obj18 = exceptionMap9.remove((java.lang.Object) int17);
        java.lang.Throwable throwable21 = null;
        org.apache.commons.collections4.FunctorException functorException22 = new org.apache.commons.collections4.FunctorException("", throwable21);
        org.apache.commons.collections4.FunctorException functorException23 = new org.apache.commons.collections4.FunctorException("", throwable21);
        org.apache.commons.collections4.FunctorException functorException25 = new org.apache.commons.collections4.FunctorException("");
        functorException23.addSuppressed((java.lang.Throwable) functorException25);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap28 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean29 = exceptionMap27.containsValue((java.lang.Object) exceptionMap28);
        boolean boolean31 = exceptionMap28.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection33 = exceptionMap28.createCollection(10);
        boolean boolean34 = exceptionMap9.putAll((java.lang.Exception) functorException25, serializableCollection33);
        java.lang.Object obj35 = null;
        boolean boolean36 = exceptionMap9.containsValue(obj35);
        java.util.Set<java.lang.Exception> exceptionSet37 = exceptionMap9.keySet();
        int int38 = exceptionMap9.size();
        boolean boolean39 = exceptionMap1.containsValue((java.lang.Object) int38);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(exceptionMap6);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet15);
        org.junit.Assert.assertNotNull(exceptionMap16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(serializableCollection33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(exceptionSet37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.lang.Throwable throwable8 = null;
        org.apache.commons.collections4.FunctorException functorException9 = new org.apache.commons.collections4.FunctorException("", throwable8);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("", throwable16);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean20 = exceptionMap18.containsValue((java.lang.Object) exceptionMap19);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection24 = exceptionMap23.values();
        int int25 = exceptionMap23.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection28 = exceptionMap27.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean38 = exceptionMap36.containsValue((java.lang.Object) exceptionMap37);
        int int39 = exceptionMap37.size();
        java.lang.Throwable throwable48 = null;
        org.apache.commons.collections4.FunctorException functorException49 = new org.apache.commons.collections4.FunctorException("", throwable48);
        org.apache.commons.collections4.FunctorException functorException50 = new org.apache.commons.collections4.FunctorException("", throwable48);
        java.io.Serializable[] serializableArray51 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable16, exceptionMap18, 0L, 0L, exceptionMap23, 0, exceptionMap27, exceptionMap29, (short) 1, ' ', "hi!", 100.0f, int39, false, 10.0f, '4', (-1), 1L, 1, throwable48 };
        java.util.ArrayList<java.io.Serializable> serializableList52 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList52, serializableArray51);
        boolean boolean54 = exceptionMap4.putAll((java.lang.Exception) functorException9, (java.util.Collection<java.io.Serializable>) serializableList52);
        boolean boolean56 = exceptionMap1.removeMapping((java.lang.Exception) functorException9, (java.io.Serializable) (-1.0f));
        boolean boolean57 = exceptionMap1.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap58 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap59 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean60 = exceptionMap58.containsValue((java.lang.Object) exceptionMap59);
        int int61 = exceptionMap59.size();
        java.util.Collection<java.lang.Object> objCollection62 = exceptionMap59.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap63 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap64 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean65 = exceptionMap63.containsValue((java.lang.Object) exceptionMap64);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet66 = exceptionMap64.entrySet();
        exceptionMap59.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap64);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap68 = exceptionMap64.decorated();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap69 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap70 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean71 = exceptionMap69.containsValue((java.lang.Object) exceptionMap70);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet72 = exceptionMap70.entrySet();
        exceptionMap70.clear();
        boolean boolean74 = exceptionMap70.isEmpty();
        java.lang.Throwable throwable76 = null;
        org.apache.commons.collections4.FunctorException functorException77 = new org.apache.commons.collections4.FunctorException(throwable76);
        org.apache.commons.collections4.FunctorException functorException78 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException77);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap79 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap80 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean81 = exceptionMap79.containsValue((java.lang.Object) exceptionMap80);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap82 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap83 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean84 = exceptionMap82.containsValue((java.lang.Object) exceptionMap83);
        exceptionMap80.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap83);
        java.lang.Object obj86 = exceptionMap70.put((java.lang.Exception) functorException78, (java.lang.Object) exceptionMap83);
        boolean boolean87 = exceptionMap1.remove((java.lang.Object) exceptionMap68, (java.lang.Object) exceptionMap83);
        java.util.Set<java.lang.Exception> exceptionSet88 = exceptionMap83.keySet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(serializableArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(objCollection62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet66);
        org.junit.Assert.assertNotNull(exceptionMap68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(obj86);
        org.junit.Assert.assertEquals(obj86.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj86), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj86), "{}");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(exceptionSet88);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        int int5 = exceptionMap1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection1 = exceptionMap0.values();
        int int2 = exceptionMap0.size();
        boolean boolean4 = exceptionMap0.containsValue((java.lang.Object) true);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap10 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean11 = exceptionMap9.containsValue((java.lang.Object) exceptionMap10);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet12 = exceptionMap10.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap13 = exceptionMap10.map;
        int int14 = exceptionMap13.size();
        java.lang.Object obj15 = exceptionMap6.remove((java.lang.Object) int14);
        java.lang.Throwable throwable18 = null;
        org.apache.commons.collections4.FunctorException functorException19 = new org.apache.commons.collections4.FunctorException("", throwable18);
        org.apache.commons.collections4.FunctorException functorException20 = new org.apache.commons.collections4.FunctorException("", throwable18);
        org.apache.commons.collections4.FunctorException functorException22 = new org.apache.commons.collections4.FunctorException("");
        functorException20.addSuppressed((java.lang.Throwable) functorException22);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean26 = exceptionMap24.containsValue((java.lang.Object) exceptionMap25);
        boolean boolean28 = exceptionMap25.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection30 = exceptionMap25.createCollection(10);
        boolean boolean31 = exceptionMap6.putAll((java.lang.Exception) functorException22, serializableCollection30);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap33 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean34 = exceptionMap32.containsValue((java.lang.Object) exceptionMap33);
        int int35 = exceptionMap33.size();
        java.util.Collection<java.lang.Object> objCollection36 = exceptionMap33.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap38 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean39 = exceptionMap37.containsValue((java.lang.Object) exceptionMap38);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet40 = exceptionMap38.entrySet();
        exceptionMap33.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap38);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap42 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap43 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean44 = exceptionMap42.containsValue((java.lang.Object) exceptionMap43);
        java.lang.Throwable throwable46 = null;
        org.apache.commons.collections4.FunctorException functorException47 = new org.apache.commons.collections4.FunctorException("", throwable46);
        java.lang.Throwable throwable54 = null;
        org.apache.commons.collections4.FunctorException functorException55 = new org.apache.commons.collections4.FunctorException("", throwable54);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap56 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap57 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean58 = exceptionMap56.containsValue((java.lang.Object) exceptionMap57);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap61 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection62 = exceptionMap61.values();
        int int63 = exceptionMap61.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap65 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection66 = exceptionMap65.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap67 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap68 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean69 = exceptionMap67.containsValue((java.lang.Object) exceptionMap68);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap74 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap75 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean76 = exceptionMap74.containsValue((java.lang.Object) exceptionMap75);
        int int77 = exceptionMap75.size();
        java.lang.Throwable throwable86 = null;
        org.apache.commons.collections4.FunctorException functorException87 = new org.apache.commons.collections4.FunctorException("", throwable86);
        org.apache.commons.collections4.FunctorException functorException88 = new org.apache.commons.collections4.FunctorException("", throwable86);
        java.io.Serializable[] serializableArray89 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable54, exceptionMap56, 0L, 0L, exceptionMap61, 0, exceptionMap65, exceptionMap67, (short) 1, ' ', "hi!", 100.0f, int77, false, 10.0f, '4', (-1), 1L, 1, throwable86 };
        java.util.ArrayList<java.io.Serializable> serializableList90 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList90, serializableArray89);
        boolean boolean92 = exceptionMap42.putAll((java.lang.Exception) functorException47, (java.util.Collection<java.io.Serializable>) serializableList90);
        java.lang.Object obj94 = exceptionMap38.put((java.lang.Exception) functorException47, (java.lang.Object) (-1.0f));
        java.util.Collection<java.lang.Object> objCollection95 = exceptionMap38.values();
        java.lang.Object obj96 = exceptionMap0.replace((java.lang.Exception) functorException22, (java.lang.Object) exceptionMap38);
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet12);
        org.junit.Assert.assertNotNull(exceptionMap13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(serializableCollection30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(objCollection36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objCollection62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(objCollection66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(serializableArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertEquals("'" + obj94 + "' != '" + (-1.0f) + "'", obj94, (-1.0f));
        org.junit.Assert.assertNotNull(objCollection95);
        org.junit.Assert.assertNull(obj96);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Object obj11 = null;
        boolean boolean12 = exceptionMap1.containsKey(obj11);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj15 = exceptionMap13.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable17 = null;
        org.apache.commons.collections4.FunctorException functorException18 = new org.apache.commons.collections4.FunctorException(throwable17);
        org.apache.commons.collections4.FunctorException functorException19 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException18);
        boolean boolean21 = exceptionMap13.removeMapping((java.lang.Exception) functorException18, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet22 = exceptionMap13.keySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean25 = exceptionMap23.containsValue((java.lang.Object) exceptionMap24);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet26 = exceptionMap24.entrySet();
        boolean boolean28 = exceptionMap24.containsKey((java.lang.Object) (byte) 1);
        int int29 = exceptionMap24.size();
        exceptionMap13.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap24);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap32 = exceptionMap31.decorated();
        boolean boolean33 = exceptionMap1.removeMapping((java.lang.Object) exceptionMap24, (java.lang.Object) exceptionMap32);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor34 = exceptionMap1.mapIterator();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap35 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection36 = exceptionMap35.values();
        java.lang.Object obj37 = null;
        java.lang.Object obj38 = exceptionMap35.remove(obj37);
        boolean boolean39 = exceptionMap35.isEmpty();
        boolean boolean40 = exceptionMap1.containsKey((java.lang.Object) boolean39);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(exceptionSet22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(exceptionMap32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(exceptionItor34);
        org.junit.Assert.assertNotNull(objCollection36);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap6);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap10 = exceptionMap6.decorated();
        java.util.Set<java.lang.Exception> exceptionSet11 = exceptionMap6.keySet();
        java.util.Collection<java.io.Serializable> serializableCollection13 = exceptionMap6.createCollection(0);
        int int14 = exceptionMap6.size();
        java.lang.Exception exception15 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap16 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj18 = exceptionMap16.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable20 = null;
        org.apache.commons.collections4.FunctorException functorException21 = new org.apache.commons.collections4.FunctorException(throwable20);
        org.apache.commons.collections4.FunctorException functorException22 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException21);
        boolean boolean24 = exceptionMap16.removeMapping((java.lang.Exception) functorException21, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet25 = exceptionMap16.keySet();
        java.util.Collection<java.lang.Object> objCollection26 = exceptionMap16.values();
        boolean boolean27 = exceptionMap6.removeMapping(exception15, (java.io.Serializable) exceptionMap16);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap28 = exceptionMap6.decorated();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertNotNull(exceptionMap10);
        org.junit.Assert.assertNotNull(exceptionSet11);
        org.junit.Assert.assertNotNull(serializableCollection13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(exceptionSet25);
        org.junit.Assert.assertNotNull(objCollection26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(exceptionMap28);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        exceptionMap1.clear();
        boolean boolean5 = exceptionMap1.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.lang.Class<?>> exceptionMap6 = org.apache.commons.collections4.map.MultiValueMap.multiValueMap((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap7 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean9 = exceptionMap7.containsValue((java.lang.Object) exceptionMap8);
        int int10 = exceptionMap8.size();
        java.util.Collection<java.lang.Object> objCollection11 = exceptionMap8.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean14 = exceptionMap12.containsValue((java.lang.Object) exceptionMap13);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet15 = exceptionMap13.entrySet();
        exceptionMap8.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap13);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean19 = exceptionMap17.containsValue((java.lang.Object) exceptionMap18);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet20 = exceptionMap18.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap22 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean23 = exceptionMap21.containsValue((java.lang.Object) exceptionMap22);
        java.lang.Throwable throwable25 = null;
        org.apache.commons.collections4.FunctorException functorException26 = new org.apache.commons.collections4.FunctorException("", throwable25);
        java.lang.Throwable throwable33 = null;
        org.apache.commons.collections4.FunctorException functorException34 = new org.apache.commons.collections4.FunctorException("", throwable33);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap35 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean37 = exceptionMap35.containsValue((java.lang.Object) exceptionMap36);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap40 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection41 = exceptionMap40.values();
        int int42 = exceptionMap40.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap44 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection45 = exceptionMap44.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap46 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap47 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean48 = exceptionMap46.containsValue((java.lang.Object) exceptionMap47);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap53 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap54 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean55 = exceptionMap53.containsValue((java.lang.Object) exceptionMap54);
        int int56 = exceptionMap54.size();
        java.lang.Throwable throwable65 = null;
        org.apache.commons.collections4.FunctorException functorException66 = new org.apache.commons.collections4.FunctorException("", throwable65);
        org.apache.commons.collections4.FunctorException functorException67 = new org.apache.commons.collections4.FunctorException("", throwable65);
        java.io.Serializable[] serializableArray68 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable33, exceptionMap35, 0L, 0L, exceptionMap40, 0, exceptionMap44, exceptionMap46, (short) 1, ' ', "hi!", 100.0f, int56, false, 10.0f, '4', (-1), 1L, 1, throwable65 };
        java.util.ArrayList<java.io.Serializable> serializableList69 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList69, serializableArray68);
        boolean boolean71 = exceptionMap21.putAll((java.lang.Exception) functorException26, (java.util.Collection<java.io.Serializable>) serializableList69);
        boolean boolean73 = exceptionMap18.removeMapping((java.lang.Exception) functorException26, (java.io.Serializable) (-1.0f));
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap75 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap76 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean77 = exceptionMap75.containsValue((java.lang.Object) exceptionMap76);
        boolean boolean78 = exceptionMap13.replace((java.lang.Exception) functorException26, (java.lang.Object) (short) 0, (java.lang.Object) exceptionMap75);
        java.lang.Object obj79 = exceptionMap1.get((java.lang.Object) (short) 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(exceptionMap6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objCollection41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(objCollection45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(serializableArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(obj79);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        exceptionMap1.clear();
        java.lang.Throwable throwable7 = null;
        org.apache.commons.collections4.FunctorException functorException8 = new org.apache.commons.collections4.FunctorException("", throwable7);
        int int9 = exceptionMap1.size((java.lang.Object) functorException8);
        java.lang.String str10 = exceptionMap1.toString();
        java.util.Collection<java.io.Serializable> serializableCollection12 = exceptionMap1.createCollection((int) '#');
        boolean boolean13 = exceptionMap1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet14 = exceptionMap1.entrySet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNotNull(serializableCollection12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(exceptionEntrySet14);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet4 = exceptionMap1.entrySet();
        java.lang.Exception exception5 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap7 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean8 = exceptionMap6.containsValue((java.lang.Object) exceptionMap7);
        int int9 = exceptionMap7.size();
        java.util.Collection<java.lang.Object> objCollection10 = exceptionMap7.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap11 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean13 = exceptionMap11.containsValue((java.lang.Object) exceptionMap12);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet14 = exceptionMap12.entrySet();
        exceptionMap7.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap12);
        java.util.Collection<java.io.Serializable> serializableCollection17 = exceptionMap12.createCollection(1);
        boolean boolean18 = exceptionMap1.putAll(exception5, serializableCollection17);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj21 = exceptionMap19.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable23 = null;
        org.apache.commons.collections4.FunctorException functorException24 = new org.apache.commons.collections4.FunctorException(throwable23);
        org.apache.commons.collections4.FunctorException functorException25 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException24);
        boolean boolean27 = exceptionMap19.removeMapping((java.lang.Exception) functorException24, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet28 = exceptionMap19.keySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet32 = exceptionMap30.entrySet();
        boolean boolean34 = exceptionMap30.containsKey((java.lang.Object) (byte) 1);
        int int35 = exceptionMap30.size();
        exceptionMap19.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap30);
        java.lang.Object obj38 = exceptionMap19.remove((java.lang.Object) 100L);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet39 = exceptionMap19.entrySet();
        boolean boolean40 = exceptionMap1.containsValue((java.lang.Object) exceptionEntrySet39);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(exceptionEntrySet4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet14);
        org.junit.Assert.assertNotNull(serializableCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(exceptionSet28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(exceptionEntrySet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        exceptionMap1.clear();
        boolean boolean5 = exceptionMap1.isEmpty();
        java.lang.Class<?> wildcardClass6 = exceptionMap1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        exceptionMap1.clear();
        java.lang.Throwable throwable7 = null;
        org.apache.commons.collections4.FunctorException functorException8 = new org.apache.commons.collections4.FunctorException("", throwable7);
        int int9 = exceptionMap1.size((java.lang.Object) functorException8);
        java.lang.Object obj10 = null;
        boolean boolean11 = exceptionMap1.containsValue(obj10);
        int int12 = exceptionMap1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        exceptionMap1.clear();
        java.util.Collection<java.lang.Object> objCollection6 = exceptionMap1.values();
        java.lang.Throwable throwable8 = null;
        org.apache.commons.collections4.FunctorException functorException9 = new org.apache.commons.collections4.FunctorException("", throwable8);
        java.lang.Class<?> wildcardClass10 = functorException9.getClass();
        boolean boolean11 = exceptionMap1.containsValue((java.lang.Object) functorException9);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        int int7 = exceptionMap5.size();
        java.util.Collection<java.lang.Object> objCollection8 = exceptionMap5.values();
        java.util.Collection<java.lang.Object> objCollection9 = exceptionMap5.values();
        java.lang.Object obj10 = exceptionMap3.remove((java.lang.Object) objCollection9);
        java.lang.Object obj11 = exceptionMap0.get((java.lang.Object) objCollection9);
        java.util.Collection<java.io.Serializable> serializableCollection13 = exceptionMap0.createCollection((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(objCollection8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(serializableCollection13);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        boolean boolean5 = exceptionMap1.containsKey((java.lang.Object) (byte) 1);
        int int6 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection7 = exceptionMap1.values();
        int int8 = exceptionMap1.size();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet9 = exceptionMap1.entrySet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(exceptionEntrySet9);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap6);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor10 = exceptionMap6.mapIterator();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap11 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection12 = exceptionMap11.values();
        java.lang.Object obj13 = null;
        java.lang.Object obj14 = exceptionMap11.remove(obj13);
        java.lang.Object obj15 = null;
        java.util.Iterator<java.io.Serializable> serializableItor16 = exceptionMap11.iterator(obj15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj17 = exceptionItor10.setValue(obj15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertNotNull(exceptionItor10);
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(serializableItor16);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        exceptionMap1.clear();
        boolean boolean5 = exceptionMap1.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap7 = exceptionMap6.decorated();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean10 = exceptionMap8.containsValue((java.lang.Object) exceptionMap9);
        boolean boolean11 = exceptionMap7.containsValue((java.lang.Object) exceptionMap9);
        java.lang.Object obj12 = exceptionMap1.get((java.lang.Object) exceptionMap9);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.collections4.FunctorException functorException15 = new org.apache.commons.collections4.FunctorException("", throwable14);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap16 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean18 = exceptionMap16.containsValue((java.lang.Object) exceptionMap17);
        java.lang.Throwable throwable20 = null;
        org.apache.commons.collections4.FunctorException functorException21 = new org.apache.commons.collections4.FunctorException("", throwable20);
        java.lang.Throwable throwable28 = null;
        org.apache.commons.collections4.FunctorException functorException29 = new org.apache.commons.collections4.FunctorException("", throwable28);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean32 = exceptionMap30.containsValue((java.lang.Object) exceptionMap31);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap35 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection36 = exceptionMap35.values();
        int int37 = exceptionMap35.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap39 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection40 = exceptionMap39.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap41 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap42 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean43 = exceptionMap41.containsValue((java.lang.Object) exceptionMap42);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap48 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap49 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean50 = exceptionMap48.containsValue((java.lang.Object) exceptionMap49);
        int int51 = exceptionMap49.size();
        java.lang.Throwable throwable60 = null;
        org.apache.commons.collections4.FunctorException functorException61 = new org.apache.commons.collections4.FunctorException("", throwable60);
        org.apache.commons.collections4.FunctorException functorException62 = new org.apache.commons.collections4.FunctorException("", throwable60);
        java.io.Serializable[] serializableArray63 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable28, exceptionMap30, 0L, 0L, exceptionMap35, 0, exceptionMap39, exceptionMap41, (short) 1, ' ', "hi!", 100.0f, int51, false, 10.0f, '4', (-1), 1L, 1, throwable60 };
        java.util.ArrayList<java.io.Serializable> serializableList64 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList64, serializableArray63);
        boolean boolean66 = exceptionMap16.putAll((java.lang.Exception) functorException21, (java.util.Collection<java.io.Serializable>) serializableList64);
        functorException15.addSuppressed((java.lang.Throwable) functorException21);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap68 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap69 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean70 = exceptionMap68.containsValue((java.lang.Object) exceptionMap69);
        int int71 = exceptionMap69.size();
        java.util.Collection<java.lang.Object> objCollection72 = exceptionMap69.values();
        java.util.Collection<java.lang.Object> objCollection73 = exceptionMap69.values();
        int int74 = exceptionMap69.size();
        boolean boolean75 = exceptionMap69.isEmpty();
        java.lang.Object obj76 = exceptionMap9.replace((java.lang.Exception) functorException15, (java.lang.Object) exceptionMap69);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap77 = exceptionMap69.decorated();
        int int78 = exceptionMap69.totalSize();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap79 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap80 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean81 = exceptionMap79.containsValue((java.lang.Object) exceptionMap80);
        int int82 = exceptionMap80.size();
        java.util.Collection<java.lang.Object> objCollection83 = exceptionMap80.values();
        exceptionMap80.clear();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap85 = exceptionMap80.map;
        boolean boolean86 = exceptionMap69.containsKey((java.lang.Object) exceptionMap80);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap87 = null;
        // The following exception was thrown during execution in test generation
        try {
            exceptionMap69.putAll(exceptionMap87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(exceptionMap7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objCollection36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(objCollection40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(serializableArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(objCollection72);
        org.junit.Assert.assertNotNull(objCollection73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(exceptionMap77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(objCollection83);
        org.junit.Assert.assertNotNull(exceptionMap85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        exceptionMap1.clear();
        java.util.Collection<java.lang.Object> objCollection6 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap7 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean9 = exceptionMap7.containsValue((java.lang.Object) exceptionMap8);
        int int10 = exceptionMap8.size();
        java.util.Collection<java.lang.Object> objCollection11 = exceptionMap8.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean14 = exceptionMap12.containsValue((java.lang.Object) exceptionMap13);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet15 = exceptionMap13.entrySet();
        exceptionMap8.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap13);
        java.util.Collection<java.io.Serializable> serializableCollection18 = exceptionMap13.createCollection(1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet19 = exceptionMap13.entrySet();
        boolean boolean20 = exceptionMap1.containsKey((java.lang.Object) exceptionMap13);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet15);
        org.junit.Assert.assertNotNull(serializableCollection18);
        org.junit.Assert.assertNotNull(exceptionEntrySet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        java.util.Collection<java.lang.Object> objCollection5 = exceptionMap1.values();
        int int6 = exceptionMap1.size();
        boolean boolean7 = exceptionMap1.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap10 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean11 = exceptionMap9.containsValue((java.lang.Object) exceptionMap10);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet12 = exceptionMap10.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean15 = exceptionMap13.containsValue((java.lang.Object) exceptionMap14);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet16 = exceptionMap14.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap17 = exceptionMap14.map;
        int int18 = exceptionMap17.size();
        java.lang.Object obj19 = exceptionMap10.remove((java.lang.Object) int18);
        java.lang.Throwable throwable22 = null;
        org.apache.commons.collections4.FunctorException functorException23 = new org.apache.commons.collections4.FunctorException("", throwable22);
        org.apache.commons.collections4.FunctorException functorException24 = new org.apache.commons.collections4.FunctorException("", throwable22);
        org.apache.commons.collections4.FunctorException functorException26 = new org.apache.commons.collections4.FunctorException("");
        functorException24.addSuppressed((java.lang.Throwable) functorException26);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap28 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean30 = exceptionMap28.containsValue((java.lang.Object) exceptionMap29);
        boolean boolean32 = exceptionMap29.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection34 = exceptionMap29.createCollection(10);
        boolean boolean35 = exceptionMap10.putAll((java.lang.Exception) functorException26, serializableCollection34);
        org.apache.commons.collections4.FunctorException functorException36 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException26);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap38 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean39 = exceptionMap37.containsValue((java.lang.Object) exceptionMap38);
        java.lang.Throwable throwable42 = null;
        org.apache.commons.collections4.FunctorException functorException43 = new org.apache.commons.collections4.FunctorException("", throwable42);
        org.apache.commons.collections4.FunctorException functorException44 = new org.apache.commons.collections4.FunctorException("", throwable42);
        java.lang.Object obj46 = exceptionMap38.put((java.lang.Exception) functorException44, (java.lang.Object) (-1));
        org.apache.commons.collections4.FunctorException functorException47 = new org.apache.commons.collections4.FunctorException((java.lang.Throwable) functorException44);
        java.lang.Object obj48 = exceptionMap1.put((java.lang.Exception) functorException36, (java.lang.Object) functorException44);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap49 = exceptionMap1.map;
        java.util.Collection<java.lang.Object> objCollection50 = exceptionMap1.values();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(objCollection5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet16);
        org.junit.Assert.assertNotNull(exceptionMap17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(serializableCollection34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + obj46 + "' != '" + (-1) + "'", obj46, (-1));
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "org.apache.commons.collections4.FunctorException: ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "org.apache.commons.collections4.FunctorException: ");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "org.apache.commons.collections4.FunctorException: ");
        org.junit.Assert.assertNotNull(exceptionMap49);
        org.junit.Assert.assertNotNull(objCollection50);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Object obj11 = null;
        boolean boolean12 = exceptionMap1.containsKey(obj11);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj15 = exceptionMap13.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable17 = null;
        org.apache.commons.collections4.FunctorException functorException18 = new org.apache.commons.collections4.FunctorException(throwable17);
        org.apache.commons.collections4.FunctorException functorException19 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException18);
        boolean boolean21 = exceptionMap13.removeMapping((java.lang.Exception) functorException18, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet22 = exceptionMap13.keySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean25 = exceptionMap23.containsValue((java.lang.Object) exceptionMap24);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet26 = exceptionMap24.entrySet();
        boolean boolean28 = exceptionMap24.containsKey((java.lang.Object) (byte) 1);
        int int29 = exceptionMap24.size();
        exceptionMap13.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap24);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap32 = exceptionMap31.decorated();
        boolean boolean33 = exceptionMap1.removeMapping((java.lang.Object) exceptionMap24, (java.lang.Object) exceptionMap32);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor34 = exceptionMap24.mapIterator();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap35 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean37 = exceptionMap35.containsValue((java.lang.Object) exceptionMap36);
        int int38 = exceptionMap36.size();
        java.util.Collection<java.lang.Object> objCollection39 = exceptionMap36.values();
        java.util.Set<java.lang.Exception> exceptionSet40 = exceptionMap36.keySet();
        boolean boolean41 = exceptionMap24.equals((java.lang.Object) exceptionMap36);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap42 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap43 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean44 = exceptionMap42.containsValue((java.lang.Object) exceptionMap43);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap45 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap46 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean47 = exceptionMap45.containsValue((java.lang.Object) exceptionMap46);
        exceptionMap43.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap46);
        int int49 = exceptionMap46.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap50 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap51 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean52 = exceptionMap50.containsValue((java.lang.Object) exceptionMap51);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap53 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap54 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean55 = exceptionMap53.containsValue((java.lang.Object) exceptionMap54);
        exceptionMap51.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap54);
        exceptionMap46.map = exceptionMap51;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap58 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap59 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean60 = exceptionMap58.containsValue((java.lang.Object) exceptionMap59);
        int int61 = exceptionMap59.size();
        java.util.Collection<java.lang.Object> objCollection62 = exceptionMap59.values();
        exceptionMap59.clear();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap64 = exceptionMap59.map;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap65 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap66 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap67 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean68 = exceptionMap66.containsValue((java.lang.Object) exceptionMap67);
        int int69 = exceptionMap67.size();
        java.util.Collection<java.lang.Object> objCollection70 = exceptionMap67.values();
        java.util.Collection<java.lang.Object> objCollection71 = exceptionMap67.values();
        java.lang.Object obj72 = exceptionMap65.remove((java.lang.Object) objCollection71);
        boolean boolean73 = exceptionMap51.remove((java.lang.Object) exceptionMap59, obj72);
        boolean boolean74 = exceptionMap24.containsKey((java.lang.Object) exceptionMap59);
        boolean boolean75 = exceptionMap24.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(exceptionSet22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(exceptionMap32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(exceptionItor34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objCollection39);
        org.junit.Assert.assertNotNull(exceptionSet40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(objCollection62);
        org.junit.Assert.assertNotNull(exceptionMap64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(objCollection70);
        org.junit.Assert.assertNotNull(objCollection71);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection1 = exceptionMap0.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet2 = exceptionMap0.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap3.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet5 = exceptionMap3.entrySet();
        boolean boolean7 = exceptionMap0.remove((java.lang.Object) exceptionEntrySet5, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean10 = exceptionMap8.containsValue((java.lang.Object) exceptionMap9);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet11 = exceptionMap9.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap12 = exceptionMap9.map;
        int int13 = exceptionMap12.size();
        boolean boolean14 = exceptionMap0.containsKey((java.lang.Object) exceptionMap12);
        boolean boolean16 = exceptionMap0.equals((java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection17 = exceptionMap0.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean21 = exceptionMap19.containsValue((java.lang.Object) exceptionMap20);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap22 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean24 = exceptionMap22.containsValue((java.lang.Object) exceptionMap23);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet25 = exceptionMap23.entrySet();
        exceptionMap23.clear();
        boolean boolean27 = exceptionMap23.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.lang.Class<?>> exceptionMap28 = org.apache.commons.collections4.map.MultiValueMap.multiValueMap((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap23);
        boolean boolean29 = exceptionMap19.equals((java.lang.Object) exceptionMap23);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.collections4.FunctorException functorException32 = new org.apache.commons.collections4.FunctorException(throwable31);
        org.apache.commons.collections4.FunctorException functorException33 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException32);
        java.lang.Throwable throwable34 = null;
        org.apache.commons.collections4.FunctorException functorException35 = new org.apache.commons.collections4.FunctorException(throwable34);
        functorException33.addSuppressed((java.lang.Throwable) functorException35);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection38 = exceptionMap37.values();
        java.lang.Object obj39 = null;
        java.lang.Object obj40 = exceptionMap37.remove(obj39);
        java.lang.Object obj41 = exceptionMap23.put((java.lang.Exception) functorException33, obj40);
        int int42 = exceptionMap23.size();
        boolean boolean43 = exceptionMap0.containsValue((java.lang.Object) 0.0d, (java.lang.Object) exceptionMap23);
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(exceptionEntrySet2);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(exceptionEntrySet5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet11);
        org.junit.Assert.assertNotNull(exceptionMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(exceptionMap28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objCollection38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap6);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor10 = exceptionMap6.mapIterator();
        boolean boolean11 = exceptionItor10.hasNext();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection13 = exceptionMap12.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet14 = exceptionMap12.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap15 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection16 = exceptionMap15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet17 = exceptionMap15.entrySet();
        boolean boolean19 = exceptionMap12.remove((java.lang.Object) exceptionEntrySet17, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean22 = exceptionMap20.containsValue((java.lang.Object) exceptionMap21);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet23 = exceptionMap21.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap24 = exceptionMap21.map;
        int int25 = exceptionMap24.size();
        boolean boolean26 = exceptionMap12.containsKey((java.lang.Object) exceptionMap24);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.util.List<java.io.Serializable>> exceptionMap27 = org.apache.commons.collections4.map.MultiValueMap.multiValueMap(exceptionMap24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj28 = exceptionItor10.setValue((java.lang.Object) exceptionMap24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertNotNull(exceptionItor10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objCollection13);
        org.junit.Assert.assertNotNull(exceptionEntrySet14);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNotNull(exceptionEntrySet17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet23);
        org.junit.Assert.assertNotNull(exceptionMap24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(exceptionMap27);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.lang.Throwable throwable5 = null;
        org.apache.commons.collections4.FunctorException functorException6 = new org.apache.commons.collections4.FunctorException("", throwable5);
        org.apache.commons.collections4.FunctorException functorException7 = new org.apache.commons.collections4.FunctorException("", throwable5);
        org.apache.commons.collections4.FunctorException functorException9 = new org.apache.commons.collections4.FunctorException("");
        functorException7.addSuppressed((java.lang.Throwable) functorException9);
        java.lang.Object obj11 = exceptionMap1.remove((java.lang.Object) functorException7);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Throwable throwable13 = null;
        org.apache.commons.collections4.FunctorException functorException14 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException15 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("");
        functorException15.addSuppressed((java.lang.Throwable) functorException17);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean21 = exceptionMap19.containsValue((java.lang.Object) exceptionMap20);
        boolean boolean23 = exceptionMap20.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection25 = exceptionMap20.createCollection(10);
        boolean boolean26 = exceptionMap1.putAll((java.lang.Exception) functorException17, serializableCollection25);
        java.lang.Object obj27 = null;
        boolean boolean28 = exceptionMap1.containsValue(obj27);
        java.util.Set<java.lang.Exception> exceptionSet29 = exceptionMap1.keySet();
        java.lang.Object obj30 = null;
        boolean boolean31 = exceptionMap1.containsKey(obj30);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap33 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean34 = exceptionMap32.containsValue((java.lang.Object) exceptionMap33);
        int int35 = exceptionMap33.size();
        java.util.Collection<java.lang.Object> objCollection36 = exceptionMap33.values();
        java.util.Collection<java.lang.Object> objCollection37 = exceptionMap33.values();
        int int38 = exceptionMap33.size();
        exceptionMap33.clear();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap33);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap41 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap42 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean43 = exceptionMap41.containsValue((java.lang.Object) exceptionMap42);
        int int44 = exceptionMap42.size();
        java.util.Collection<java.lang.Object> objCollection45 = exceptionMap42.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap46 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap47 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean48 = exceptionMap46.containsValue((java.lang.Object) exceptionMap47);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet49 = exceptionMap47.entrySet();
        exceptionMap42.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap47);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor51 = exceptionMap47.mapIterator();
        java.lang.Object obj52 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap53 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection54 = exceptionMap53.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet55 = exceptionMap53.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap56 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection57 = exceptionMap56.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet58 = exceptionMap56.entrySet();
        boolean boolean60 = exceptionMap53.remove((java.lang.Object) exceptionEntrySet58, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap61 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap62 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean63 = exceptionMap61.containsValue((java.lang.Object) exceptionMap62);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet64 = exceptionMap62.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap65 = exceptionMap62.map;
        int int66 = exceptionMap65.size();
        boolean boolean67 = exceptionMap53.containsKey((java.lang.Object) exceptionMap65);
        boolean boolean69 = exceptionMap53.equals((java.lang.Object) 0.0d);
        boolean boolean70 = exceptionMap47.remove(obj52, (java.lang.Object) boolean69);
        java.lang.Object obj71 = exceptionMap33.get(obj52);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(exceptionSet29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(objCollection36);
        org.junit.Assert.assertNotNull(objCollection37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objCollection45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet49);
        org.junit.Assert.assertNotNull(exceptionItor51);
        org.junit.Assert.assertNotNull(objCollection54);
        org.junit.Assert.assertNotNull(exceptionEntrySet55);
        org.junit.Assert.assertNotNull(objCollection57);
        org.junit.Assert.assertNotNull(exceptionEntrySet58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet64);
        org.junit.Assert.assertNotNull(exceptionMap65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(obj71);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap6);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor10 = exceptionMap6.mapIterator();
        java.lang.Object obj11 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection13 = exceptionMap12.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet14 = exceptionMap12.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap15 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection16 = exceptionMap15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet17 = exceptionMap15.entrySet();
        boolean boolean19 = exceptionMap12.remove((java.lang.Object) exceptionEntrySet17, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean22 = exceptionMap20.containsValue((java.lang.Object) exceptionMap21);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet23 = exceptionMap21.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap24 = exceptionMap21.map;
        int int25 = exceptionMap24.size();
        boolean boolean26 = exceptionMap12.containsKey((java.lang.Object) exceptionMap24);
        boolean boolean28 = exceptionMap12.equals((java.lang.Object) 0.0d);
        boolean boolean29 = exceptionMap6.remove(obj11, (java.lang.Object) boolean28);
        java.lang.Throwable throwable31 = null;
        org.apache.commons.collections4.FunctorException functorException32 = new org.apache.commons.collections4.FunctorException(throwable31);
        org.apache.commons.collections4.FunctorException functorException33 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException32);
        java.lang.Throwable throwable34 = null;
        org.apache.commons.collections4.FunctorException functorException35 = new org.apache.commons.collections4.FunctorException(throwable34);
        functorException33.addSuppressed((java.lang.Throwable) functorException35);
        java.util.Collection<java.io.Serializable> serializableCollection37 = null;
        boolean boolean38 = exceptionMap6.putAll((java.lang.Exception) functorException35, serializableCollection37);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap39 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap40 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean41 = exceptionMap39.containsValue((java.lang.Object) exceptionMap40);
        int int42 = exceptionMap40.size();
        java.util.Collection<java.lang.Object> objCollection43 = exceptionMap40.values();
        exceptionMap40.clear();
        java.lang.Throwable throwable46 = null;
        org.apache.commons.collections4.FunctorException functorException47 = new org.apache.commons.collections4.FunctorException("", throwable46);
        int int48 = exceptionMap40.size((java.lang.Object) functorException47);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap49 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap50 = exceptionMap49.decorated();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap51 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap52 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean53 = exceptionMap51.containsValue((java.lang.Object) exceptionMap52);
        boolean boolean54 = exceptionMap50.containsValue((java.lang.Object) exceptionMap52);
        java.lang.Object obj55 = exceptionMap6.putIfAbsent((java.lang.Exception) functorException47, (java.lang.Object) boolean54);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet56 = exceptionMap6.entrySet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertNotNull(exceptionItor10);
        org.junit.Assert.assertNotNull(objCollection13);
        org.junit.Assert.assertNotNull(exceptionEntrySet14);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNotNull(exceptionEntrySet17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet23);
        org.junit.Assert.assertNotNull(exceptionMap24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(objCollection43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(exceptionMap50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + obj55 + "' != '" + false + "'", obj55, false);
        org.junit.Assert.assertNotNull(exceptionEntrySet56);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.lang.Throwable throwable8 = null;
        org.apache.commons.collections4.FunctorException functorException9 = new org.apache.commons.collections4.FunctorException("", throwable8);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("", throwable16);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean20 = exceptionMap18.containsValue((java.lang.Object) exceptionMap19);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection24 = exceptionMap23.values();
        int int25 = exceptionMap23.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection28 = exceptionMap27.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean38 = exceptionMap36.containsValue((java.lang.Object) exceptionMap37);
        int int39 = exceptionMap37.size();
        java.lang.Throwable throwable48 = null;
        org.apache.commons.collections4.FunctorException functorException49 = new org.apache.commons.collections4.FunctorException("", throwable48);
        org.apache.commons.collections4.FunctorException functorException50 = new org.apache.commons.collections4.FunctorException("", throwable48);
        java.io.Serializable[] serializableArray51 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable16, exceptionMap18, 0L, 0L, exceptionMap23, 0, exceptionMap27, exceptionMap29, (short) 1, ' ', "hi!", 100.0f, int39, false, 10.0f, '4', (-1), 1L, 1, throwable48 };
        java.util.ArrayList<java.io.Serializable> serializableList52 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList52, serializableArray51);
        boolean boolean54 = exceptionMap4.putAll((java.lang.Exception) functorException9, (java.util.Collection<java.io.Serializable>) serializableList52);
        boolean boolean56 = exceptionMap1.removeMapping((java.lang.Exception) functorException9, (java.io.Serializable) (-1.0f));
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor57 = exceptionMap1.mapIterator();
        boolean boolean58 = exceptionItor57.hasNext();
        boolean boolean59 = exceptionItor57.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Exception exception60 = exceptionItor57.getKey();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(serializableArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(exceptionItor57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap6);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor10 = exceptionMap6.mapIterator();
        boolean boolean11 = exceptionItor10.hasNext();
        boolean boolean12 = exceptionItor10.hasNext();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertNotNull(exceptionItor10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj2 = exceptionMap0.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable4 = null;
        org.apache.commons.collections4.FunctorException functorException5 = new org.apache.commons.collections4.FunctorException(throwable4);
        org.apache.commons.collections4.FunctorException functorException6 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException5);
        boolean boolean8 = exceptionMap0.removeMapping((java.lang.Exception) functorException5, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet9 = exceptionMap0.keySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap10 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap11 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean12 = exceptionMap10.containsValue((java.lang.Object) exceptionMap11);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet13 = exceptionMap11.entrySet();
        boolean boolean15 = exceptionMap11.containsKey((java.lang.Object) (byte) 1);
        int int16 = exceptionMap11.size();
        exceptionMap0.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap11);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap18 = exceptionMap0.decorated();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(exceptionSet9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(exceptionMap18);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        exceptionMap1.clear();
        boolean boolean5 = exceptionMap1.isEmpty();
        java.lang.Throwable throwable7 = null;
        org.apache.commons.collections4.FunctorException functorException8 = new org.apache.commons.collections4.FunctorException(throwable7);
        org.apache.commons.collections4.FunctorException functorException9 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException8);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap10 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap11 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean12 = exceptionMap10.containsValue((java.lang.Object) exceptionMap11);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean15 = exceptionMap13.containsValue((java.lang.Object) exceptionMap14);
        exceptionMap11.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap14);
        java.lang.Object obj17 = exceptionMap1.put((java.lang.Exception) functorException9, (java.lang.Object) exceptionMap14);
        java.lang.String str18 = exceptionMap14.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "{}");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{}" + "'", str18, "{}");
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj2 = exceptionMap0.get((java.lang.Object) (-1L));
        boolean boolean3 = exceptionMap0.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        int int7 = exceptionMap5.size();
        java.util.Collection<java.lang.Object> objCollection8 = exceptionMap5.values();
        exceptionMap5.clear();
        java.lang.Throwable throwable11 = null;
        org.apache.commons.collections4.FunctorException functorException12 = new org.apache.commons.collections4.FunctorException("", throwable11);
        int int13 = exceptionMap5.size((java.lang.Object) functorException12);
        java.lang.String str14 = exceptionMap5.toString();
        java.util.Collection<java.io.Serializable> serializableCollection16 = exceptionMap5.createCollection((int) '#');
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean19 = exceptionMap17.containsValue((java.lang.Object) exceptionMap18);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet20 = exceptionMap18.entrySet();
        exceptionMap18.clear();
        java.lang.Throwable throwable23 = null;
        org.apache.commons.collections4.FunctorException functorException24 = new org.apache.commons.collections4.FunctorException(throwable23);
        org.apache.commons.collections4.FunctorException functorException25 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException24);
        java.lang.Throwable throwable26 = null;
        org.apache.commons.collections4.FunctorException functorException27 = new org.apache.commons.collections4.FunctorException(throwable26);
        functorException25.addSuppressed((java.lang.Throwable) functorException27);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet32 = exceptionMap30.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap33 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap34 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean35 = exceptionMap33.containsValue((java.lang.Object) exceptionMap34);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet36 = exceptionMap34.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap37 = exceptionMap34.map;
        int int38 = exceptionMap37.size();
        java.lang.Object obj39 = exceptionMap30.remove((java.lang.Object) int38);
        java.lang.Exception exception40 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap41 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection42 = exceptionMap41.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet43 = exceptionMap41.entrySet();
        java.lang.Object obj44 = exceptionMap30.put(exception40, (java.lang.Object) exceptionEntrySet43);
        java.lang.Object obj45 = exceptionMap18.put((java.lang.Exception) functorException25, (java.lang.Object) exceptionEntrySet43);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap46 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap47 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean48 = exceptionMap46.containsValue((java.lang.Object) exceptionMap47);
        int int49 = exceptionMap47.size();
        java.util.Collection<java.lang.Object> objCollection50 = exceptionMap47.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap51 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap52 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean53 = exceptionMap51.containsValue((java.lang.Object) exceptionMap52);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet54 = exceptionMap52.entrySet();
        exceptionMap47.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap52);
        java.util.Collection<java.io.Serializable> serializableCollection57 = exceptionMap52.createCollection(1);
        boolean boolean58 = exceptionMap18.containsKey((java.lang.Object) exceptionMap52);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor59 = exceptionMap52.mapIterator();
        boolean boolean60 = exceptionMap5.containsValue((java.lang.Object) exceptionItor59);
        exceptionMap0.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap5);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(objCollection8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{}" + "'", str14, "{}");
        org.junit.Assert.assertNotNull(serializableCollection16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet20);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet36);
        org.junit.Assert.assertNotNull(exceptionMap37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertNotNull(exceptionEntrySet43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "[]");
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(objCollection50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet54);
        org.junit.Assert.assertNotNull(serializableCollection57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(exceptionItor59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection1 = exceptionMap0.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet2 = exceptionMap0.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap3.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet5 = exceptionMap3.entrySet();
        boolean boolean7 = exceptionMap0.remove((java.lang.Object) exceptionEntrySet5, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean10 = exceptionMap8.containsValue((java.lang.Object) exceptionMap9);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet11 = exceptionMap9.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap12 = exceptionMap9.map;
        int int13 = exceptionMap12.size();
        boolean boolean14 = exceptionMap0.containsKey((java.lang.Object) exceptionMap12);
        boolean boolean16 = exceptionMap0.equals((java.lang.Object) 0.0d);
        java.util.Iterator<java.util.Map.Entry<java.lang.Exception, java.io.Serializable>> exceptionEntryItor17 = exceptionMap0.iterator();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection19 = exceptionMap18.values();
        int int20 = exceptionMap18.size();
        boolean boolean22 = exceptionMap18.containsValue((java.lang.Object) true);
        java.lang.Throwable throwable24 = null;
        org.apache.commons.collections4.FunctorException functorException25 = new org.apache.commons.collections4.FunctorException("", throwable24);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap26 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean28 = exceptionMap26.containsValue((java.lang.Object) exceptionMap27);
        java.lang.Throwable throwable30 = null;
        org.apache.commons.collections4.FunctorException functorException31 = new org.apache.commons.collections4.FunctorException("", throwable30);
        java.lang.Throwable throwable38 = null;
        org.apache.commons.collections4.FunctorException functorException39 = new org.apache.commons.collections4.FunctorException("", throwable38);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap40 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap41 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean42 = exceptionMap40.containsValue((java.lang.Object) exceptionMap41);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap45 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection46 = exceptionMap45.values();
        int int47 = exceptionMap45.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap49 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection50 = exceptionMap49.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap51 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap52 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean53 = exceptionMap51.containsValue((java.lang.Object) exceptionMap52);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap58 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap59 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean60 = exceptionMap58.containsValue((java.lang.Object) exceptionMap59);
        int int61 = exceptionMap59.size();
        java.lang.Throwable throwable70 = null;
        org.apache.commons.collections4.FunctorException functorException71 = new org.apache.commons.collections4.FunctorException("", throwable70);
        org.apache.commons.collections4.FunctorException functorException72 = new org.apache.commons.collections4.FunctorException("", throwable70);
        java.io.Serializable[] serializableArray73 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable38, exceptionMap40, 0L, 0L, exceptionMap45, 0, exceptionMap49, exceptionMap51, (short) 1, ' ', "hi!", 100.0f, int61, false, 10.0f, '4', (-1), 1L, 1, throwable70 };
        java.util.ArrayList<java.io.Serializable> serializableList74 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList74, serializableArray73);
        boolean boolean76 = exceptionMap26.putAll((java.lang.Exception) functorException31, (java.util.Collection<java.io.Serializable>) serializableList74);
        functorException25.addSuppressed((java.lang.Throwable) functorException31);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap78 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap79 = exceptionMap78.decorated();
        boolean boolean80 = exceptionMap18.removeMapping((java.lang.Exception) functorException25, (java.io.Serializable) exceptionMap78);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap81 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj83 = exceptionMap81.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable85 = null;
        org.apache.commons.collections4.FunctorException functorException86 = new org.apache.commons.collections4.FunctorException(throwable85);
        org.apache.commons.collections4.FunctorException functorException87 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException86);
        boolean boolean89 = exceptionMap81.removeMapping((java.lang.Exception) functorException86, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet90 = exceptionMap81.keySet();
        java.lang.Object obj91 = exceptionMap0.replace((java.lang.Exception) functorException25, (java.lang.Object) exceptionSet90);
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(exceptionEntrySet2);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(exceptionEntrySet5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet11);
        org.junit.Assert.assertNotNull(exceptionMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(exceptionEntryItor17);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objCollection46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(objCollection50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(serializableArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(exceptionMap79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(exceptionSet90);
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        exceptionMap1.clear();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap6 = exceptionMap1.map;
        java.util.Collection<java.lang.Object> objCollection7 = exceptionMap1.values();
        java.util.Collection<java.lang.Object> objCollection8 = exceptionMap1.values();
        java.lang.Throwable throwable11 = null;
        org.apache.commons.collections4.FunctorException functorException12 = new org.apache.commons.collections4.FunctorException("", throwable11);
        org.apache.commons.collections4.FunctorException functorException13 = new org.apache.commons.collections4.FunctorException("", throwable11);
        org.apache.commons.collections4.FunctorException functorException15 = new org.apache.commons.collections4.FunctorException("");
        functorException13.addSuppressed((java.lang.Throwable) functorException15);
        java.lang.Throwable[] throwableArray17 = functorException15.getSuppressed();
        org.apache.commons.collections4.FunctorException functorException18 = new org.apache.commons.collections4.FunctorException((java.lang.Throwable) functorException15);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean21 = exceptionMap19.containsValue((java.lang.Object) exceptionMap20);
        int int22 = exceptionMap20.size();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet23 = exceptionMap20.entrySet();
        java.lang.Object obj25 = exceptionMap20.get((java.lang.Object) true);
        int int26 = exceptionMap20.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap28 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean29 = exceptionMap27.containsValue((java.lang.Object) exceptionMap28);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet30 = exceptionMap28.entrySet();
        exceptionMap28.clear();
        java.lang.Throwable throwable33 = null;
        org.apache.commons.collections4.FunctorException functorException34 = new org.apache.commons.collections4.FunctorException(throwable33);
        org.apache.commons.collections4.FunctorException functorException35 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException34);
        java.lang.Throwable throwable36 = null;
        org.apache.commons.collections4.FunctorException functorException37 = new org.apache.commons.collections4.FunctorException(throwable36);
        functorException35.addSuppressed((java.lang.Throwable) functorException37);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap39 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap40 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean41 = exceptionMap39.containsValue((java.lang.Object) exceptionMap40);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet42 = exceptionMap40.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap43 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap44 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean45 = exceptionMap43.containsValue((java.lang.Object) exceptionMap44);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet46 = exceptionMap44.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap47 = exceptionMap44.map;
        int int48 = exceptionMap47.size();
        java.lang.Object obj49 = exceptionMap40.remove((java.lang.Object) int48);
        java.lang.Exception exception50 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap51 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection52 = exceptionMap51.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet53 = exceptionMap51.entrySet();
        java.lang.Object obj54 = exceptionMap40.put(exception50, (java.lang.Object) exceptionEntrySet53);
        java.lang.Object obj55 = exceptionMap28.put((java.lang.Exception) functorException35, (java.lang.Object) exceptionEntrySet53);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap56 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap57 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean58 = exceptionMap56.containsValue((java.lang.Object) exceptionMap57);
        int int59 = exceptionMap57.size();
        java.util.Collection<java.lang.Object> objCollection60 = exceptionMap57.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap61 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap62 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean63 = exceptionMap61.containsValue((java.lang.Object) exceptionMap62);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet64 = exceptionMap62.entrySet();
        exceptionMap57.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap62);
        java.util.Collection<java.io.Serializable> serializableCollection67 = exceptionMap62.createCollection(1);
        boolean boolean68 = exceptionMap28.containsKey((java.lang.Object) exceptionMap62);
        java.lang.Object obj69 = exceptionMap20.get((java.lang.Object) exceptionMap62);
        java.lang.Object obj70 = exceptionMap1.put((java.lang.Exception) functorException15, obj69);
        boolean boolean71 = exceptionMap1.isEmpty();
        java.lang.Class<?> wildcardClass72 = exceptionMap1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(exceptionMap6);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertNotNull(objCollection8);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(exceptionEntrySet23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet30);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet46);
        org.junit.Assert.assertNotNull(exceptionMap47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(objCollection52);
        org.junit.Assert.assertNotNull(exceptionEntrySet53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "[]");
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(objCollection60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet64);
        org.junit.Assert.assertNotNull(serializableCollection67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection1 = exceptionMap0.values();
        int int2 = exceptionMap0.size();
        boolean boolean4 = exceptionMap0.containsValue((java.lang.Object) true);
        java.lang.Object obj6 = exceptionMap0.remove((java.lang.Object) 0.0f);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap7 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean9 = exceptionMap7.containsValue((java.lang.Object) exceptionMap8);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap10 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap11 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean13 = exceptionMap11.containsValue((java.lang.Object) exceptionMap12);
        int int14 = exceptionMap12.size();
        java.util.Collection<java.lang.Object> objCollection15 = exceptionMap12.values();
        java.util.Collection<java.lang.Object> objCollection16 = exceptionMap12.values();
        java.lang.Object obj17 = exceptionMap10.remove((java.lang.Object) objCollection16);
        java.lang.Object obj18 = exceptionMap7.get((java.lang.Object) objCollection16);
        java.lang.Object obj20 = exceptionMap7.remove((java.lang.Object) (short) 0);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap22 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean23 = exceptionMap21.containsValue((java.lang.Object) exceptionMap22);
        int int24 = exceptionMap22.size();
        java.util.Collection<java.lang.Object> objCollection25 = exceptionMap22.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap26 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean28 = exceptionMap26.containsValue((java.lang.Object) exceptionMap27);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet29 = exceptionMap27.entrySet();
        exceptionMap22.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap27);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean33 = exceptionMap31.containsValue((java.lang.Object) exceptionMap32);
        java.lang.Throwable throwable35 = null;
        org.apache.commons.collections4.FunctorException functorException36 = new org.apache.commons.collections4.FunctorException("", throwable35);
        java.lang.Throwable throwable43 = null;
        org.apache.commons.collections4.FunctorException functorException44 = new org.apache.commons.collections4.FunctorException("", throwable43);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap45 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap46 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean47 = exceptionMap45.containsValue((java.lang.Object) exceptionMap46);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap50 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection51 = exceptionMap50.values();
        int int52 = exceptionMap50.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap54 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection55 = exceptionMap54.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap56 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap57 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean58 = exceptionMap56.containsValue((java.lang.Object) exceptionMap57);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap63 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap64 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean65 = exceptionMap63.containsValue((java.lang.Object) exceptionMap64);
        int int66 = exceptionMap64.size();
        java.lang.Throwable throwable75 = null;
        org.apache.commons.collections4.FunctorException functorException76 = new org.apache.commons.collections4.FunctorException("", throwable75);
        org.apache.commons.collections4.FunctorException functorException77 = new org.apache.commons.collections4.FunctorException("", throwable75);
        java.io.Serializable[] serializableArray78 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable43, exceptionMap45, 0L, 0L, exceptionMap50, 0, exceptionMap54, exceptionMap56, (short) 1, ' ', "hi!", 100.0f, int66, false, 10.0f, '4', (-1), 1L, 1, throwable75 };
        java.util.ArrayList<java.io.Serializable> serializableList79 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList79, serializableArray78);
        boolean boolean81 = exceptionMap31.putAll((java.lang.Exception) functorException36, (java.util.Collection<java.io.Serializable>) serializableList79);
        java.lang.Object obj83 = exceptionMap27.put((java.lang.Exception) functorException36, (java.lang.Object) (-1.0f));
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap84 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap85 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean86 = exceptionMap84.containsValue((java.lang.Object) exceptionMap85);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet87 = exceptionMap85.entrySet();
        java.lang.Object obj88 = exceptionMap7.put((java.lang.Exception) functorException36, (java.lang.Object) exceptionEntrySet87);
        java.lang.Object obj89 = exceptionMap0.remove((java.lang.Object) exceptionEntrySet87);
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objCollection25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objCollection51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(objCollection55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(serializableArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertEquals("'" + obj83 + "' != '" + (-1.0f) + "'", obj83, (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet87);
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertEquals(obj88.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "[]");
        org.junit.Assert.assertNull(obj89);
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.util.AbstractCollection<java.io.Serializable>> exceptionMap4 = org.apache.commons.collections4.map.MultiValueMap.multiValueMap((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertNotNull(exceptionMap4);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Throwable throwable13 = null;
        org.apache.commons.collections4.FunctorException functorException14 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException15 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("");
        functorException15.addSuppressed((java.lang.Throwable) functorException17);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean21 = exceptionMap19.containsValue((java.lang.Object) exceptionMap20);
        boolean boolean23 = exceptionMap20.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection25 = exceptionMap20.createCollection(10);
        boolean boolean26 = exceptionMap1.putAll((java.lang.Exception) functorException17, serializableCollection25);
        java.lang.Object obj27 = null;
        boolean boolean28 = exceptionMap1.containsValue(obj27);
        java.util.Set<java.lang.Exception> exceptionSet29 = exceptionMap1.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet30 = exceptionMap1.entrySet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(exceptionSet29);
        org.junit.Assert.assertNotNull(exceptionEntrySet30);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection1 = exceptionMap0.values();
        int int2 = exceptionMap0.size();
        boolean boolean4 = exceptionMap0.containsValue((java.lang.Object) true);
        java.lang.Throwable throwable6 = null;
        org.apache.commons.collections4.FunctorException functorException7 = new org.apache.commons.collections4.FunctorException("", throwable6);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean10 = exceptionMap8.containsValue((java.lang.Object) exceptionMap9);
        java.lang.Throwable throwable12 = null;
        org.apache.commons.collections4.FunctorException functorException13 = new org.apache.commons.collections4.FunctorException("", throwable12);
        java.lang.Throwable throwable20 = null;
        org.apache.commons.collections4.FunctorException functorException21 = new org.apache.commons.collections4.FunctorException("", throwable20);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap22 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean24 = exceptionMap22.containsValue((java.lang.Object) exceptionMap23);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection28 = exceptionMap27.values();
        int int29 = exceptionMap27.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection32 = exceptionMap31.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap33 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap34 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean35 = exceptionMap33.containsValue((java.lang.Object) exceptionMap34);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap40 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap41 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean42 = exceptionMap40.containsValue((java.lang.Object) exceptionMap41);
        int int43 = exceptionMap41.size();
        java.lang.Throwable throwable52 = null;
        org.apache.commons.collections4.FunctorException functorException53 = new org.apache.commons.collections4.FunctorException("", throwable52);
        org.apache.commons.collections4.FunctorException functorException54 = new org.apache.commons.collections4.FunctorException("", throwable52);
        java.io.Serializable[] serializableArray55 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable20, exceptionMap22, 0L, 0L, exceptionMap27, 0, exceptionMap31, exceptionMap33, (short) 1, ' ', "hi!", 100.0f, int43, false, 10.0f, '4', (-1), 1L, 1, throwable52 };
        java.util.ArrayList<java.io.Serializable> serializableList56 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList56, serializableArray55);
        boolean boolean58 = exceptionMap8.putAll((java.lang.Exception) functorException13, (java.util.Collection<java.io.Serializable>) serializableList56);
        functorException7.addSuppressed((java.lang.Throwable) functorException13);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap60 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap61 = exceptionMap60.decorated();
        boolean boolean62 = exceptionMap0.removeMapping((java.lang.Exception) functorException7, (java.io.Serializable) exceptionMap60);
        org.apache.commons.collections4.map.MultiValueMap<org.apache.commons.collections4.FunctorException, java.lang.RuntimeException> functorExceptionMap63 = new org.apache.commons.collections4.map.MultiValueMap<org.apache.commons.collections4.FunctorException, java.lang.RuntimeException>();
        boolean boolean65 = exceptionMap0.containsValue((java.lang.Object) functorExceptionMap63, (java.lang.Object) (short) 1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap66 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap67 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean68 = exceptionMap66.containsValue((java.lang.Object) exceptionMap67);
        java.util.Collection<java.lang.Object> objCollection69 = exceptionMap66.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet70 = exceptionMap66.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap71 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap72 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean73 = exceptionMap71.containsValue((java.lang.Object) exceptionMap72);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet74 = exceptionMap72.entrySet();
        exceptionMap72.clear();
        boolean boolean76 = exceptionMap72.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap77 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection78 = exceptionMap77.values();
        int int79 = exceptionMap77.size();
        boolean boolean81 = exceptionMap77.containsValue((java.lang.Object) true);
        boolean boolean82 = exceptionMap72.containsValue((java.lang.Object) boolean81);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap83 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap84 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean85 = exceptionMap83.containsValue((java.lang.Object) exceptionMap84);
        int int86 = exceptionMap84.size();
        java.util.Collection<java.lang.Object> objCollection87 = exceptionMap84.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap88 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap89 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean90 = exceptionMap88.containsValue((java.lang.Object) exceptionMap89);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet91 = exceptionMap89.entrySet();
        exceptionMap84.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap89);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap93 = exceptionMap89.decorated();
        boolean boolean94 = exceptionMap72.containsKey((java.lang.Object) exceptionMap89);
        java.util.Collection<java.lang.Object> objCollection95 = exceptionMap89.values();
        boolean boolean96 = exceptionMap0.remove((java.lang.Object) exceptionEntrySet70, (java.lang.Object) exceptionMap89);
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objCollection32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(serializableArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(exceptionMap61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objCollection69);
        org.junit.Assert.assertNotNull(exceptionEntrySet70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(objCollection78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objCollection87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet91);
        org.junit.Assert.assertNotNull(exceptionMap93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(objCollection95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection1 = exceptionMap0.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet2 = exceptionMap0.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap3.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet5 = exceptionMap3.entrySet();
        boolean boolean7 = exceptionMap0.remove((java.lang.Object) exceptionEntrySet5, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean10 = exceptionMap8.containsValue((java.lang.Object) exceptionMap9);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet11 = exceptionMap9.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap12 = exceptionMap9.map;
        int int13 = exceptionMap12.size();
        boolean boolean14 = exceptionMap0.containsKey((java.lang.Object) exceptionMap12);
        boolean boolean16 = exceptionMap0.equals((java.lang.Object) 0.0d);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean19 = exceptionMap17.containsValue((java.lang.Object) exceptionMap18);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet20 = exceptionMap18.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap22 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean23 = exceptionMap21.containsValue((java.lang.Object) exceptionMap22);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet24 = exceptionMap22.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap25 = exceptionMap22.map;
        int int26 = exceptionMap25.size();
        java.lang.Object obj27 = exceptionMap18.remove((java.lang.Object) int26);
        java.lang.Throwable throwable30 = null;
        org.apache.commons.collections4.FunctorException functorException31 = new org.apache.commons.collections4.FunctorException("", throwable30);
        org.apache.commons.collections4.FunctorException functorException32 = new org.apache.commons.collections4.FunctorException("", throwable30);
        org.apache.commons.collections4.FunctorException functorException34 = new org.apache.commons.collections4.FunctorException("");
        functorException32.addSuppressed((java.lang.Throwable) functorException34);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean38 = exceptionMap36.containsValue((java.lang.Object) exceptionMap37);
        boolean boolean40 = exceptionMap37.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection42 = exceptionMap37.createCollection(10);
        boolean boolean43 = exceptionMap18.putAll((java.lang.Exception) functorException34, serializableCollection42);
        boolean boolean44 = exceptionMap0.containsValue((java.lang.Object) serializableCollection42);
        org.apache.commons.collections4.FunctorException functorException46 = new org.apache.commons.collections4.FunctorException("");
        org.apache.commons.collections4.FunctorException functorException47 = new org.apache.commons.collections4.FunctorException((java.lang.Throwable) functorException46);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap48 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap49 = exceptionMap48.decorated();
        java.util.Set<java.lang.Exception> exceptionSet50 = exceptionMap48.keySet();
        boolean boolean52 = exceptionMap0.replace((java.lang.Exception) functorException46, (java.lang.Object) exceptionMap48, (java.lang.Object) "");
        boolean boolean53 = exceptionMap0.isEmpty();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(exceptionEntrySet2);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(exceptionEntrySet5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet11);
        org.junit.Assert.assertNotNull(exceptionMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet24);
        org.junit.Assert.assertNotNull(exceptionMap25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(serializableCollection42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(exceptionMap49);
        org.junit.Assert.assertNotNull(exceptionSet50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        exceptionMap1.clear();
        java.util.Collection<java.lang.Object> objCollection5 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj8 = exceptionMap6.get((java.lang.Object) (-1L));
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor9 = exceptionMap6.mapIterator();
        exceptionMap6.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet11 = exceptionMap6.entrySet();
        boolean boolean12 = exceptionMap1.containsKey((java.lang.Object) exceptionMap6);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean15 = exceptionMap13.containsValue((java.lang.Object) exceptionMap14);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet16 = exceptionMap14.entrySet();
        exceptionMap14.clear();
        java.lang.Throwable throwable19 = null;
        org.apache.commons.collections4.FunctorException functorException20 = new org.apache.commons.collections4.FunctorException(throwable19);
        org.apache.commons.collections4.FunctorException functorException21 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException20);
        java.lang.Throwable throwable22 = null;
        org.apache.commons.collections4.FunctorException functorException23 = new org.apache.commons.collections4.FunctorException(throwable22);
        functorException21.addSuppressed((java.lang.Throwable) functorException23);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap26 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean27 = exceptionMap25.containsValue((java.lang.Object) exceptionMap26);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet28 = exceptionMap26.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet32 = exceptionMap30.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap33 = exceptionMap30.map;
        int int34 = exceptionMap33.size();
        java.lang.Object obj35 = exceptionMap26.remove((java.lang.Object) int34);
        java.lang.Exception exception36 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection38 = exceptionMap37.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet39 = exceptionMap37.entrySet();
        java.lang.Object obj40 = exceptionMap26.put(exception36, (java.lang.Object) exceptionEntrySet39);
        java.lang.Object obj41 = exceptionMap14.put((java.lang.Exception) functorException21, (java.lang.Object) exceptionEntrySet39);
        int int42 = exceptionMap14.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap43 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap44 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean45 = exceptionMap43.containsValue((java.lang.Object) exceptionMap44);
        int int46 = exceptionMap44.size();
        java.util.Collection<java.lang.Object> objCollection47 = exceptionMap44.values();
        java.util.Set<java.lang.Exception> exceptionSet48 = exceptionMap44.keySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap49 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj51 = exceptionMap49.get((java.lang.Object) (-1L));
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor52 = exceptionMap49.mapIterator();
        exceptionMap49.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet54 = exceptionMap49.entrySet();
        java.lang.Object obj55 = exceptionMap44.get((java.lang.Object) exceptionMap49);
        boolean boolean56 = exceptionMap14.containsValue((java.lang.Object) exceptionMap49);
        java.lang.Object obj57 = exceptionMap1.get((java.lang.Object) exceptionMap14);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertNotNull(objCollection5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(exceptionItor9);
        org.junit.Assert.assertNotNull(exceptionEntrySet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet16);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet32);
        org.junit.Assert.assertNotNull(exceptionMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(objCollection38);
        org.junit.Assert.assertNotNull(exceptionEntrySet39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "[]");
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(objCollection47);
        org.junit.Assert.assertNotNull(exceptionSet48);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(exceptionItor52);
        org.junit.Assert.assertNotNull(exceptionEntrySet54);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(obj57);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        int int7 = exceptionMap5.size();
        java.util.Collection<java.lang.Object> objCollection8 = exceptionMap5.values();
        java.util.Collection<java.lang.Object> objCollection9 = exceptionMap5.values();
        java.lang.Object obj10 = exceptionMap3.remove((java.lang.Object) objCollection9);
        java.lang.Object obj11 = exceptionMap0.get((java.lang.Object) objCollection9);
        boolean boolean12 = exceptionMap0.isEmpty();
        int int13 = exceptionMap0.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap15 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean16 = exceptionMap14.containsValue((java.lang.Object) exceptionMap15);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet17 = exceptionMap15.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean20 = exceptionMap18.containsValue((java.lang.Object) exceptionMap19);
        java.lang.Throwable throwable22 = null;
        org.apache.commons.collections4.FunctorException functorException23 = new org.apache.commons.collections4.FunctorException("", throwable22);
        java.lang.Throwable throwable30 = null;
        org.apache.commons.collections4.FunctorException functorException31 = new org.apache.commons.collections4.FunctorException("", throwable30);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap33 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean34 = exceptionMap32.containsValue((java.lang.Object) exceptionMap33);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection38 = exceptionMap37.values();
        int int39 = exceptionMap37.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap41 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection42 = exceptionMap41.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap43 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap44 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean45 = exceptionMap43.containsValue((java.lang.Object) exceptionMap44);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap50 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap51 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean52 = exceptionMap50.containsValue((java.lang.Object) exceptionMap51);
        int int53 = exceptionMap51.size();
        java.lang.Throwable throwable62 = null;
        org.apache.commons.collections4.FunctorException functorException63 = new org.apache.commons.collections4.FunctorException("", throwable62);
        org.apache.commons.collections4.FunctorException functorException64 = new org.apache.commons.collections4.FunctorException("", throwable62);
        java.io.Serializable[] serializableArray65 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable30, exceptionMap32, 0L, 0L, exceptionMap37, 0, exceptionMap41, exceptionMap43, (short) 1, ' ', "hi!", 100.0f, int53, false, 10.0f, '4', (-1), 1L, 1, throwable62 };
        java.util.ArrayList<java.io.Serializable> serializableList66 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList66, serializableArray65);
        boolean boolean68 = exceptionMap18.putAll((java.lang.Exception) functorException23, (java.util.Collection<java.io.Serializable>) serializableList66);
        boolean boolean70 = exceptionMap15.removeMapping((java.lang.Exception) functorException23, (java.io.Serializable) (-1.0f));
        int int71 = exceptionMap15.size();
        boolean boolean72 = exceptionMap0.containsValue((java.lang.Object) exceptionMap15);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(objCollection8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objCollection38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(serializableArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean5 = exceptionMap3.containsValue((java.lang.Object) exceptionMap4);
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap4);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap7 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean9 = exceptionMap7.containsValue((java.lang.Object) exceptionMap8);
        java.lang.Throwable throwable12 = null;
        org.apache.commons.collections4.FunctorException functorException13 = new org.apache.commons.collections4.FunctorException("", throwable12);
        org.apache.commons.collections4.FunctorException functorException14 = new org.apache.commons.collections4.FunctorException("", throwable12);
        java.lang.Object obj16 = exceptionMap8.put((java.lang.Exception) functorException14, (java.lang.Object) (-1));
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException((java.lang.Throwable) functorException14);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection19 = exceptionMap18.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet20 = exceptionMap18.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection22 = exceptionMap21.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet23 = exceptionMap21.entrySet();
        boolean boolean25 = exceptionMap18.remove((java.lang.Object) exceptionEntrySet23, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap26 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean28 = exceptionMap26.containsValue((java.lang.Object) exceptionMap27);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet29 = exceptionMap27.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap30 = exceptionMap27.map;
        int int31 = exceptionMap30.size();
        boolean boolean32 = exceptionMap18.containsKey((java.lang.Object) exceptionMap30);
        boolean boolean34 = exceptionMap18.equals((java.lang.Object) 0.0d);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap35 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean37 = exceptionMap35.containsValue((java.lang.Object) exceptionMap36);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet38 = exceptionMap36.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap39 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap40 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean41 = exceptionMap39.containsValue((java.lang.Object) exceptionMap40);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet42 = exceptionMap40.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap43 = exceptionMap40.map;
        int int44 = exceptionMap43.size();
        java.lang.Object obj45 = exceptionMap36.remove((java.lang.Object) int44);
        java.lang.Throwable throwable48 = null;
        org.apache.commons.collections4.FunctorException functorException49 = new org.apache.commons.collections4.FunctorException("", throwable48);
        org.apache.commons.collections4.FunctorException functorException50 = new org.apache.commons.collections4.FunctorException("", throwable48);
        org.apache.commons.collections4.FunctorException functorException52 = new org.apache.commons.collections4.FunctorException("");
        functorException50.addSuppressed((java.lang.Throwable) functorException52);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap54 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap55 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean56 = exceptionMap54.containsValue((java.lang.Object) exceptionMap55);
        boolean boolean58 = exceptionMap55.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection60 = exceptionMap55.createCollection(10);
        boolean boolean61 = exceptionMap36.putAll((java.lang.Exception) functorException52, serializableCollection60);
        boolean boolean62 = exceptionMap18.containsValue((java.lang.Object) serializableCollection60);
        org.apache.commons.collections4.FunctorException functorException64 = new org.apache.commons.collections4.FunctorException("");
        org.apache.commons.collections4.FunctorException functorException65 = new org.apache.commons.collections4.FunctorException((java.lang.Throwable) functorException64);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap66 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap67 = exceptionMap66.decorated();
        java.util.Set<java.lang.Exception> exceptionSet68 = exceptionMap66.keySet();
        boolean boolean70 = exceptionMap18.replace((java.lang.Exception) functorException64, (java.lang.Object) exceptionMap66, (java.lang.Object) "");
        java.lang.Object obj71 = exceptionMap1.put((java.lang.Exception) functorException17, (java.lang.Object) "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + (-1) + "'", obj16, (-1));
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertNotNull(exceptionEntrySet20);
        org.junit.Assert.assertNotNull(objCollection22);
        org.junit.Assert.assertNotNull(exceptionEntrySet23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet29);
        org.junit.Assert.assertNotNull(exceptionMap30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet42);
        org.junit.Assert.assertNotNull(exceptionMap43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(serializableCollection60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(exceptionMap67);
        org.junit.Assert.assertNotNull(exceptionSet68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + obj71 + "' != '" + "" + "'", obj71, "");
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection1 = exceptionMap0.values();
        java.lang.Object obj2 = null;
        java.lang.Object obj3 = exceptionMap0.remove(obj2);
        boolean boolean4 = exceptionMap0.isEmpty();
        int int5 = exceptionMap0.totalSize();
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        boolean boolean5 = exceptionMap1.containsKey((java.lang.Object) (byte) 1);
        int int6 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection7 = exceptionMap1.values();
        java.util.Collection<java.lang.Object> objCollection8 = exceptionMap1.values();
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor9 = exceptionMap1.mapIterator();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertNotNull(objCollection8);
        org.junit.Assert.assertNotNull(exceptionItor9);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Object obj11 = null;
        boolean boolean12 = exceptionMap1.containsKey(obj11);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean15 = exceptionMap13.containsValue((java.lang.Object) exceptionMap14);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet16 = exceptionMap14.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean19 = exceptionMap17.containsValue((java.lang.Object) exceptionMap18);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet20 = exceptionMap18.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap21 = exceptionMap18.map;
        int int22 = exceptionMap21.size();
        java.lang.Object obj23 = exceptionMap14.remove((java.lang.Object) int22);
        java.lang.Throwable throwable26 = null;
        org.apache.commons.collections4.FunctorException functorException27 = new org.apache.commons.collections4.FunctorException("", throwable26);
        org.apache.commons.collections4.FunctorException functorException28 = new org.apache.commons.collections4.FunctorException("", throwable26);
        org.apache.commons.collections4.FunctorException functorException30 = new org.apache.commons.collections4.FunctorException("");
        functorException28.addSuppressed((java.lang.Throwable) functorException30);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap33 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean34 = exceptionMap32.containsValue((java.lang.Object) exceptionMap33);
        boolean boolean36 = exceptionMap33.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection38 = exceptionMap33.createCollection(10);
        boolean boolean39 = exceptionMap14.putAll((java.lang.Exception) functorException30, serializableCollection38);
        boolean boolean40 = exceptionMap1.containsKey((java.lang.Object) serializableCollection38);
        java.lang.Exception exception41 = null;
        java.lang.Throwable throwable43 = null;
        org.apache.commons.collections4.FunctorException functorException44 = new org.apache.commons.collections4.FunctorException(throwable43);
        org.apache.commons.collections4.FunctorException functorException45 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException44);
        java.lang.Throwable throwable46 = null;
        org.apache.commons.collections4.FunctorException functorException47 = new org.apache.commons.collections4.FunctorException(throwable46);
        functorException45.addSuppressed((java.lang.Throwable) functorException47);
        boolean boolean49 = exceptionMap1.removeMapping(exception41, (java.io.Serializable) functorException45);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet20);
        org.junit.Assert.assertNotNull(exceptionMap21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(serializableCollection38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        exceptionMap1.clear();
        java.util.Collection<java.lang.Object> objCollection5 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj8 = exceptionMap6.get((java.lang.Object) (-1L));
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor9 = exceptionMap6.mapIterator();
        exceptionMap6.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet11 = exceptionMap6.entrySet();
        boolean boolean12 = exceptionMap1.containsKey((java.lang.Object) exceptionMap6);
        int int13 = exceptionMap6.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertNotNull(objCollection5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(exceptionItor9);
        org.junit.Assert.assertNotNull(exceptionEntrySet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Object obj11 = null;
        boolean boolean12 = exceptionMap1.containsKey(obj11);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean15 = exceptionMap13.containsValue((java.lang.Object) exceptionMap14);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet16 = exceptionMap14.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean19 = exceptionMap17.containsValue((java.lang.Object) exceptionMap18);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet20 = exceptionMap18.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap21 = exceptionMap18.map;
        int int22 = exceptionMap21.size();
        java.lang.Object obj23 = exceptionMap14.remove((java.lang.Object) int22);
        java.lang.Throwable throwable26 = null;
        org.apache.commons.collections4.FunctorException functorException27 = new org.apache.commons.collections4.FunctorException("", throwable26);
        org.apache.commons.collections4.FunctorException functorException28 = new org.apache.commons.collections4.FunctorException("", throwable26);
        org.apache.commons.collections4.FunctorException functorException30 = new org.apache.commons.collections4.FunctorException("");
        functorException28.addSuppressed((java.lang.Throwable) functorException30);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap33 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean34 = exceptionMap32.containsValue((java.lang.Object) exceptionMap33);
        boolean boolean36 = exceptionMap33.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection38 = exceptionMap33.createCollection(10);
        boolean boolean39 = exceptionMap14.putAll((java.lang.Exception) functorException30, serializableCollection38);
        boolean boolean40 = exceptionMap1.containsKey((java.lang.Object) serializableCollection38);
        int int41 = exceptionMap1.size();
        java.util.Set<java.lang.Exception> exceptionSet42 = exceptionMap1.keySet();
        java.util.Set<java.lang.Exception> exceptionSet43 = exceptionMap1.keySet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet20);
        org.junit.Assert.assertNotNull(exceptionMap21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(serializableCollection38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(exceptionSet42);
        org.junit.Assert.assertNotNull(exceptionSet43);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean5 = exceptionMap3.containsValue((java.lang.Object) exceptionMap4);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet6 = exceptionMap4.entrySet();
        exceptionMap4.clear();
        boolean boolean8 = exceptionMap4.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.lang.Class<?>> exceptionMap9 = org.apache.commons.collections4.map.MultiValueMap.multiValueMap((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap4);
        boolean boolean10 = exceptionMap0.equals((java.lang.Object) exceptionMap4);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap11 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean13 = exceptionMap11.containsValue((java.lang.Object) exceptionMap12);
        int int14 = exceptionMap12.size();
        java.util.Collection<java.lang.Object> objCollection15 = exceptionMap12.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap16 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean18 = exceptionMap16.containsValue((java.lang.Object) exceptionMap17);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet19 = exceptionMap17.entrySet();
        exceptionMap12.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap17);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap21 = exceptionMap17.decorated();
        java.lang.Object obj22 = exceptionMap4.get((java.lang.Object) exceptionMap17);
        java.util.Collection<java.lang.Object> objCollection23 = exceptionMap4.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean26 = exceptionMap24.containsValue((java.lang.Object) exceptionMap25);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet27 = exceptionMap25.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap28 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean30 = exceptionMap28.containsValue((java.lang.Object) exceptionMap29);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet31 = exceptionMap29.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap32 = exceptionMap29.map;
        int int33 = exceptionMap32.size();
        java.lang.Object obj34 = exceptionMap25.remove((java.lang.Object) int33);
        java.lang.Exception exception35 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection37 = exceptionMap36.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet38 = exceptionMap36.entrySet();
        java.lang.Object obj39 = exceptionMap25.put(exception35, (java.lang.Object) exceptionEntrySet38);
        boolean boolean40 = exceptionMap4.containsValue((java.lang.Object) exceptionMap25);
        java.lang.Object obj41 = null;
        boolean boolean42 = exceptionMap4.containsValue(obj41);
        java.util.Collection<java.lang.Object> objCollection43 = exceptionMap4.values();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(exceptionMap9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet19);
        org.junit.Assert.assertNotNull(exceptionMap21);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet31);
        org.junit.Assert.assertNotNull(exceptionMap32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(objCollection37);
        org.junit.Assert.assertNotNull(exceptionEntrySet38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objCollection43);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet4 = exceptionMap1.entrySet();
        java.lang.Object obj6 = exceptionMap1.get((java.lang.Object) true);
        int int7 = exceptionMap1.size();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap1.map;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(exceptionEntrySet4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(exceptionMap8);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet4 = exceptionMap1.entrySet();
        java.lang.Object obj6 = exceptionMap1.get((java.lang.Object) true);
        int int7 = exceptionMap1.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean10 = exceptionMap8.containsValue((java.lang.Object) exceptionMap9);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet11 = exceptionMap9.entrySet();
        exceptionMap9.clear();
        java.lang.Throwable throwable14 = null;
        org.apache.commons.collections4.FunctorException functorException15 = new org.apache.commons.collections4.FunctorException(throwable14);
        org.apache.commons.collections4.FunctorException functorException16 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException15);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.collections4.FunctorException functorException18 = new org.apache.commons.collections4.FunctorException(throwable17);
        functorException16.addSuppressed((java.lang.Throwable) functorException18);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean22 = exceptionMap20.containsValue((java.lang.Object) exceptionMap21);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet23 = exceptionMap21.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean26 = exceptionMap24.containsValue((java.lang.Object) exceptionMap25);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet27 = exceptionMap25.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap28 = exceptionMap25.map;
        int int29 = exceptionMap28.size();
        java.lang.Object obj30 = exceptionMap21.remove((java.lang.Object) int29);
        java.lang.Exception exception31 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection33 = exceptionMap32.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet34 = exceptionMap32.entrySet();
        java.lang.Object obj35 = exceptionMap21.put(exception31, (java.lang.Object) exceptionEntrySet34);
        java.lang.Object obj36 = exceptionMap9.put((java.lang.Exception) functorException16, (java.lang.Object) exceptionEntrySet34);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap38 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean39 = exceptionMap37.containsValue((java.lang.Object) exceptionMap38);
        int int40 = exceptionMap38.size();
        java.util.Collection<java.lang.Object> objCollection41 = exceptionMap38.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap42 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap43 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean44 = exceptionMap42.containsValue((java.lang.Object) exceptionMap43);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet45 = exceptionMap43.entrySet();
        exceptionMap38.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap43);
        java.util.Collection<java.io.Serializable> serializableCollection48 = exceptionMap43.createCollection(1);
        boolean boolean49 = exceptionMap9.containsKey((java.lang.Object) exceptionMap43);
        java.lang.Object obj50 = exceptionMap1.get((java.lang.Object) exceptionMap43);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object>> exceptionMap51 = org.apache.commons.collections4.map.MultiValueMap.multiValueMap((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(exceptionEntrySet4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet11);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet27);
        org.junit.Assert.assertNotNull(exceptionMap28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertNotNull(exceptionEntrySet34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "[]");
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objCollection41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet45);
        org.junit.Assert.assertNotNull(serializableCollection48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(exceptionMap51);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        boolean boolean5 = exceptionMap1.containsKey((java.lang.Object) (byte) 1);
        int int6 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection7 = exceptionMap1.values();
        java.util.Collection<java.lang.Object> objCollection8 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap10 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean11 = exceptionMap9.containsValue((java.lang.Object) exceptionMap10);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet12 = exceptionMap10.entrySet();
        exceptionMap10.clear();
        java.lang.Throwable throwable15 = null;
        org.apache.commons.collections4.FunctorException functorException16 = new org.apache.commons.collections4.FunctorException(throwable15);
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException16);
        java.lang.Throwable throwable18 = null;
        org.apache.commons.collections4.FunctorException functorException19 = new org.apache.commons.collections4.FunctorException(throwable18);
        functorException17.addSuppressed((java.lang.Throwable) functorException19);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap22 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean23 = exceptionMap21.containsValue((java.lang.Object) exceptionMap22);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet24 = exceptionMap22.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap26 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean27 = exceptionMap25.containsValue((java.lang.Object) exceptionMap26);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet28 = exceptionMap26.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap29 = exceptionMap26.map;
        int int30 = exceptionMap29.size();
        java.lang.Object obj31 = exceptionMap22.remove((java.lang.Object) int30);
        java.lang.Exception exception32 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap33 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection34 = exceptionMap33.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet35 = exceptionMap33.entrySet();
        java.lang.Object obj36 = exceptionMap22.put(exception32, (java.lang.Object) exceptionEntrySet35);
        java.lang.Object obj37 = exceptionMap10.put((java.lang.Exception) functorException17, (java.lang.Object) exceptionEntrySet35);
        boolean boolean38 = exceptionMap10.isEmpty();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap10);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertNotNull(objCollection8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet12);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet28);
        org.junit.Assert.assertNotNull(exceptionMap29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertNotNull(exceptionEntrySet35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "[]");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap2 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj4 = exceptionMap2.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable6 = null;
        org.apache.commons.collections4.FunctorException functorException7 = new org.apache.commons.collections4.FunctorException(throwable6);
        org.apache.commons.collections4.FunctorException functorException8 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException7);
        boolean boolean10 = exceptionMap2.removeMapping((java.lang.Exception) functorException7, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet11 = exceptionMap2.keySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean14 = exceptionMap12.containsValue((java.lang.Object) exceptionMap13);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet15 = exceptionMap13.entrySet();
        boolean boolean17 = exceptionMap13.containsKey((java.lang.Object) (byte) 1);
        int int18 = exceptionMap13.size();
        exceptionMap2.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap13);
        java.lang.Throwable throwable21 = null;
        org.apache.commons.collections4.FunctorException functorException22 = new org.apache.commons.collections4.FunctorException(throwable21);
        org.apache.commons.collections4.FunctorException functorException23 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException22);
        java.lang.Throwable throwable24 = null;
        org.apache.commons.collections4.FunctorException functorException25 = new org.apache.commons.collections4.FunctorException(throwable24);
        functorException23.addSuppressed((java.lang.Throwable) functorException25);
        java.lang.Object obj28 = exceptionMap13.replace((java.lang.Exception) functorException23, (java.lang.Object) "org.apache.commons.collections4.FunctorException");
        org.apache.commons.collections4.FunctorException functorException29 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException23);
        org.apache.commons.collections4.FunctorException functorException30 = new org.apache.commons.collections4.FunctorException("org.apache.commons.collections4.FunctorException: ", (java.lang.Throwable) functorException23);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(exceptionSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(obj28);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap7 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean8 = exceptionMap6.containsValue((java.lang.Object) exceptionMap7);
        boolean boolean10 = exceptionMap7.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection12 = exceptionMap7.createCollection(10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj15 = exceptionMap13.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable17 = null;
        org.apache.commons.collections4.FunctorException functorException18 = new org.apache.commons.collections4.FunctorException(throwable17);
        org.apache.commons.collections4.FunctorException functorException19 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException18);
        boolean boolean21 = exceptionMap13.removeMapping((java.lang.Exception) functorException18, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet22 = exceptionMap13.keySet();
        java.util.Collection<java.lang.Object> objCollection23 = exceptionMap13.values();
        boolean boolean24 = exceptionMap7.containsValue((java.lang.Object) exceptionMap13);
        boolean boolean25 = exceptionMap1.remove((java.lang.Object) "", (java.lang.Object) exceptionMap7);
        java.lang.String str26 = exceptionMap1.toString();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap28 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean29 = exceptionMap27.containsValue((java.lang.Object) exceptionMap28);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet30 = exceptionMap28.entrySet();
        boolean boolean32 = exceptionMap28.containsKey((java.lang.Object) (byte) 1);
        int int33 = exceptionMap28.size();
        java.util.Collection<java.lang.Object> objCollection34 = exceptionMap28.values();
        int int35 = exceptionMap1.size((java.lang.Object) exceptionMap28);
        java.lang.Object obj36 = null;
        boolean boolean38 = exceptionMap1.removeMapping(obj36, (java.lang.Object) (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(serializableCollection12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(exceptionSet22);
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{}" + "'", str26, "{}");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        exceptionMap1.clear();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap7 = exceptionMap6.decorated();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean10 = exceptionMap8.containsValue((java.lang.Object) exceptionMap9);
        boolean boolean11 = exceptionMap7.containsValue((java.lang.Object) exceptionMap9);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection13 = exceptionMap12.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet14 = exceptionMap12.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap15 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection16 = exceptionMap15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet17 = exceptionMap15.entrySet();
        boolean boolean19 = exceptionMap12.remove((java.lang.Object) exceptionEntrySet17, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean22 = exceptionMap20.containsValue((java.lang.Object) exceptionMap21);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet23 = exceptionMap21.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap24 = exceptionMap21.map;
        int int25 = exceptionMap24.size();
        boolean boolean26 = exceptionMap12.containsKey((java.lang.Object) exceptionMap24);
        boolean boolean28 = exceptionMap12.equals((java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection29 = exceptionMap12.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap31 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean32 = exceptionMap30.containsValue((java.lang.Object) exceptionMap31);
        int int33 = exceptionMap31.size();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet34 = exceptionMap31.entrySet();
        java.lang.Object obj36 = exceptionMap31.get((java.lang.Object) true);
        int int37 = exceptionMap31.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap38 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap39 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean40 = exceptionMap38.containsValue((java.lang.Object) exceptionMap39);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet41 = exceptionMap39.entrySet();
        exceptionMap39.clear();
        java.lang.Throwable throwable44 = null;
        org.apache.commons.collections4.FunctorException functorException45 = new org.apache.commons.collections4.FunctorException(throwable44);
        org.apache.commons.collections4.FunctorException functorException46 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException45);
        java.lang.Throwable throwable47 = null;
        org.apache.commons.collections4.FunctorException functorException48 = new org.apache.commons.collections4.FunctorException(throwable47);
        functorException46.addSuppressed((java.lang.Throwable) functorException48);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap50 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap51 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean52 = exceptionMap50.containsValue((java.lang.Object) exceptionMap51);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet53 = exceptionMap51.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap54 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap55 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean56 = exceptionMap54.containsValue((java.lang.Object) exceptionMap55);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet57 = exceptionMap55.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap58 = exceptionMap55.map;
        int int59 = exceptionMap58.size();
        java.lang.Object obj60 = exceptionMap51.remove((java.lang.Object) int59);
        java.lang.Exception exception61 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap62 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection63 = exceptionMap62.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet64 = exceptionMap62.entrySet();
        java.lang.Object obj65 = exceptionMap51.put(exception61, (java.lang.Object) exceptionEntrySet64);
        java.lang.Object obj66 = exceptionMap39.put((java.lang.Exception) functorException46, (java.lang.Object) exceptionEntrySet64);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap67 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap68 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean69 = exceptionMap67.containsValue((java.lang.Object) exceptionMap68);
        int int70 = exceptionMap68.size();
        java.util.Collection<java.lang.Object> objCollection71 = exceptionMap68.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap72 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap73 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean74 = exceptionMap72.containsValue((java.lang.Object) exceptionMap73);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet75 = exceptionMap73.entrySet();
        exceptionMap68.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap73);
        java.util.Collection<java.io.Serializable> serializableCollection78 = exceptionMap73.createCollection(1);
        boolean boolean79 = exceptionMap39.containsKey((java.lang.Object) exceptionMap73);
        java.lang.Object obj80 = exceptionMap31.get((java.lang.Object) exceptionMap73);
        boolean boolean81 = exceptionMap7.remove((java.lang.Object) objCollection29, (java.lang.Object) exceptionMap31);
        boolean boolean82 = exceptionMap1.equals((java.lang.Object) exceptionMap31);
        boolean boolean83 = exceptionMap1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(exceptionMap7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objCollection13);
        org.junit.Assert.assertNotNull(exceptionEntrySet14);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNotNull(exceptionEntrySet17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet23);
        org.junit.Assert.assertNotNull(exceptionMap24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objCollection29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(exceptionEntrySet34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet41);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet57);
        org.junit.Assert.assertNotNull(exceptionMap58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNotNull(objCollection63);
        org.junit.Assert.assertNotNull(exceptionEntrySet64);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "[]");
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(objCollection71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet75);
        org.junit.Assert.assertNotNull(serializableCollection78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean5 = exceptionMap3.containsValue((java.lang.Object) exceptionMap4);
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap4);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap7 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection8 = exceptionMap7.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet9 = exceptionMap7.entrySet();
        java.lang.Object obj10 = null;
        boolean boolean11 = exceptionMap4.containsValue((java.lang.Object) exceptionEntrySet9, obj10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean14 = exceptionMap12.containsValue((java.lang.Object) exceptionMap13);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet15 = exceptionMap13.entrySet();
        exceptionMap13.clear();
        boolean boolean17 = exceptionMap13.isEmpty();
        exceptionMap4.map = exceptionMap13;
        int int19 = exceptionMap4.size();
        java.util.Collection<java.lang.Object> objCollection20 = exceptionMap4.values();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objCollection8);
        org.junit.Assert.assertNotNull(exceptionEntrySet9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(objCollection20);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap7 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean8 = exceptionMap6.containsValue((java.lang.Object) exceptionMap7);
        boolean boolean10 = exceptionMap7.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection12 = exceptionMap7.createCollection(10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj15 = exceptionMap13.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable17 = null;
        org.apache.commons.collections4.FunctorException functorException18 = new org.apache.commons.collections4.FunctorException(throwable17);
        org.apache.commons.collections4.FunctorException functorException19 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException18);
        boolean boolean21 = exceptionMap13.removeMapping((java.lang.Exception) functorException18, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet22 = exceptionMap13.keySet();
        java.util.Collection<java.lang.Object> objCollection23 = exceptionMap13.values();
        boolean boolean24 = exceptionMap7.containsValue((java.lang.Object) exceptionMap13);
        boolean boolean25 = exceptionMap1.remove((java.lang.Object) "", (java.lang.Object) exceptionMap7);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap26 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection27 = exceptionMap26.values();
        int int28 = exceptionMap26.size();
        boolean boolean30 = exceptionMap26.containsValue((java.lang.Object) true);
        java.lang.Throwable throwable32 = null;
        org.apache.commons.collections4.FunctorException functorException33 = new org.apache.commons.collections4.FunctorException("", throwable32);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap34 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap35 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean36 = exceptionMap34.containsValue((java.lang.Object) exceptionMap35);
        java.lang.Throwable throwable38 = null;
        org.apache.commons.collections4.FunctorException functorException39 = new org.apache.commons.collections4.FunctorException("", throwable38);
        java.lang.Throwable throwable46 = null;
        org.apache.commons.collections4.FunctorException functorException47 = new org.apache.commons.collections4.FunctorException("", throwable46);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap48 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap49 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean50 = exceptionMap48.containsValue((java.lang.Object) exceptionMap49);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap53 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection54 = exceptionMap53.values();
        int int55 = exceptionMap53.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap57 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection58 = exceptionMap57.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap59 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap60 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean61 = exceptionMap59.containsValue((java.lang.Object) exceptionMap60);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap66 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap67 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean68 = exceptionMap66.containsValue((java.lang.Object) exceptionMap67);
        int int69 = exceptionMap67.size();
        java.lang.Throwable throwable78 = null;
        org.apache.commons.collections4.FunctorException functorException79 = new org.apache.commons.collections4.FunctorException("", throwable78);
        org.apache.commons.collections4.FunctorException functorException80 = new org.apache.commons.collections4.FunctorException("", throwable78);
        java.io.Serializable[] serializableArray81 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable46, exceptionMap48, 0L, 0L, exceptionMap53, 0, exceptionMap57, exceptionMap59, (short) 1, ' ', "hi!", 100.0f, int69, false, 10.0f, '4', (-1), 1L, 1, throwable78 };
        java.util.ArrayList<java.io.Serializable> serializableList82 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList82, serializableArray81);
        boolean boolean84 = exceptionMap34.putAll((java.lang.Exception) functorException39, (java.util.Collection<java.io.Serializable>) serializableList82);
        functorException33.addSuppressed((java.lang.Throwable) functorException39);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap86 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap87 = exceptionMap86.decorated();
        boolean boolean88 = exceptionMap26.removeMapping((java.lang.Exception) functorException33, (java.io.Serializable) exceptionMap86);
        java.util.Collection<java.io.Serializable> serializableCollection89 = exceptionMap7.getCollection((java.lang.Object) exceptionMap86);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(serializableCollection12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(exceptionSet22);
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objCollection27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objCollection54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(objCollection58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(serializableArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(exceptionMap87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(serializableCollection89);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean5 = exceptionMap3.containsValue((java.lang.Object) exceptionMap4);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet6 = exceptionMap4.entrySet();
        exceptionMap4.clear();
        boolean boolean8 = exceptionMap4.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.lang.Class<?>> exceptionMap9 = org.apache.commons.collections4.map.MultiValueMap.multiValueMap((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap4);
        boolean boolean10 = exceptionMap0.equals((java.lang.Object) exceptionMap4);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap11 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean13 = exceptionMap11.containsValue((java.lang.Object) exceptionMap12);
        int int14 = exceptionMap12.size();
        java.util.Collection<java.lang.Object> objCollection15 = exceptionMap12.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap16 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean18 = exceptionMap16.containsValue((java.lang.Object) exceptionMap17);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet19 = exceptionMap17.entrySet();
        exceptionMap12.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap17);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap21 = exceptionMap17.decorated();
        java.lang.Object obj22 = exceptionMap4.get((java.lang.Object) exceptionMap17);
        java.util.Collection<java.lang.Object> objCollection23 = exceptionMap4.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean26 = exceptionMap24.containsValue((java.lang.Object) exceptionMap25);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet27 = exceptionMap25.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap28 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean30 = exceptionMap28.containsValue((java.lang.Object) exceptionMap29);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet31 = exceptionMap29.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap32 = exceptionMap29.map;
        int int33 = exceptionMap32.size();
        java.lang.Object obj34 = exceptionMap25.remove((java.lang.Object) int33);
        java.lang.Exception exception35 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection37 = exceptionMap36.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet38 = exceptionMap36.entrySet();
        java.lang.Object obj39 = exceptionMap25.put(exception35, (java.lang.Object) exceptionEntrySet38);
        boolean boolean40 = exceptionMap4.containsValue((java.lang.Object) exceptionMap25);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap41 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap42 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean43 = exceptionMap41.containsValue((java.lang.Object) exceptionMap42);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet44 = exceptionMap42.entrySet();
        exceptionMap42.clear();
        boolean boolean46 = exceptionMap42.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap47 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap48 = exceptionMap47.decorated();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap49 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap50 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean51 = exceptionMap49.containsValue((java.lang.Object) exceptionMap50);
        boolean boolean52 = exceptionMap48.containsValue((java.lang.Object) exceptionMap50);
        java.lang.Object obj53 = exceptionMap42.get((java.lang.Object) exceptionMap50);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap54 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap55 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean56 = exceptionMap54.containsValue((java.lang.Object) exceptionMap55);
        int int57 = exceptionMap55.size();
        java.util.Collection<java.lang.Object> objCollection58 = exceptionMap55.values();
        exceptionMap55.clear();
        java.lang.Throwable throwable61 = null;
        org.apache.commons.collections4.FunctorException functorException62 = new org.apache.commons.collections4.FunctorException("", throwable61);
        int int63 = exceptionMap55.size((java.lang.Object) functorException62);
        java.lang.String str64 = exceptionMap55.toString();
        boolean boolean65 = exceptionMap50.equals((java.lang.Object) str64);
        boolean boolean66 = exceptionMap4.containsValue((java.lang.Object) exceptionMap50);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(exceptionMap9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet19);
        org.junit.Assert.assertNotNull(exceptionMap21);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet31);
        org.junit.Assert.assertNotNull(exceptionMap32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(objCollection37);
        org.junit.Assert.assertNotNull(exceptionEntrySet38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(exceptionMap48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(objCollection58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "{}" + "'", str64, "{}");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        exceptionMap1.clear();
        java.lang.Throwable throwable6 = null;
        org.apache.commons.collections4.FunctorException functorException7 = new org.apache.commons.collections4.FunctorException(throwable6);
        org.apache.commons.collections4.FunctorException functorException8 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException7);
        java.lang.Throwable throwable9 = null;
        org.apache.commons.collections4.FunctorException functorException10 = new org.apache.commons.collections4.FunctorException(throwable9);
        functorException8.addSuppressed((java.lang.Throwable) functorException10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean14 = exceptionMap12.containsValue((java.lang.Object) exceptionMap13);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet15 = exceptionMap13.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap16 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean18 = exceptionMap16.containsValue((java.lang.Object) exceptionMap17);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet19 = exceptionMap17.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap20 = exceptionMap17.map;
        int int21 = exceptionMap20.size();
        java.lang.Object obj22 = exceptionMap13.remove((java.lang.Object) int21);
        java.lang.Exception exception23 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection25 = exceptionMap24.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet26 = exceptionMap24.entrySet();
        java.lang.Object obj27 = exceptionMap13.put(exception23, (java.lang.Object) exceptionEntrySet26);
        java.lang.Object obj28 = exceptionMap1.put((java.lang.Exception) functorException8, (java.lang.Object) exceptionEntrySet26);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap29 = exceptionMap1.decorated();
        boolean boolean30 = exceptionMap1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet19);
        org.junit.Assert.assertNotNull(exceptionMap20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(objCollection25);
        org.junit.Assert.assertNotNull(exceptionEntrySet26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "[]");
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "[]");
        org.junit.Assert.assertNotNull(exceptionMap29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Object obj11 = null;
        boolean boolean12 = exceptionMap1.containsKey(obj11);
        boolean boolean13 = exceptionMap1.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet14 = exceptionMap1.entrySet();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(exceptionEntrySet14);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.lang.Throwable throwable8 = null;
        org.apache.commons.collections4.FunctorException functorException9 = new org.apache.commons.collections4.FunctorException("", throwable8);
        java.lang.Throwable throwable16 = null;
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("", throwable16);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap18 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean20 = exceptionMap18.containsValue((java.lang.Object) exceptionMap19);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection24 = exceptionMap23.values();
        int int25 = exceptionMap23.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection28 = exceptionMap27.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean38 = exceptionMap36.containsValue((java.lang.Object) exceptionMap37);
        int int39 = exceptionMap37.size();
        java.lang.Throwable throwable48 = null;
        org.apache.commons.collections4.FunctorException functorException49 = new org.apache.commons.collections4.FunctorException("", throwable48);
        org.apache.commons.collections4.FunctorException functorException50 = new org.apache.commons.collections4.FunctorException("", throwable48);
        java.io.Serializable[] serializableArray51 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable16, exceptionMap18, 0L, 0L, exceptionMap23, 0, exceptionMap27, exceptionMap29, (short) 1, ' ', "hi!", 100.0f, int39, false, 10.0f, '4', (-1), 1L, 1, throwable48 };
        java.util.ArrayList<java.io.Serializable> serializableList52 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList52, serializableArray51);
        boolean boolean54 = exceptionMap4.putAll((java.lang.Exception) functorException9, (java.util.Collection<java.io.Serializable>) serializableList52);
        boolean boolean56 = exceptionMap1.removeMapping((java.lang.Exception) functorException9, (java.io.Serializable) (-1.0f));
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap57 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap58 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean59 = exceptionMap57.containsValue((java.lang.Object) exceptionMap58);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet60 = exceptionMap58.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap61 = exceptionMap58.map;
        boolean boolean62 = exceptionMap1.containsValue((java.lang.Object) exceptionMap58);
        java.lang.String str63 = exceptionMap58.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(serializableArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet60);
        org.junit.Assert.assertNotNull(exceptionMap61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "{}" + "'", str63, "{}");
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj2 = exceptionMap0.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable4 = null;
        org.apache.commons.collections4.FunctorException functorException5 = new org.apache.commons.collections4.FunctorException(throwable4);
        org.apache.commons.collections4.FunctorException functorException6 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException5);
        boolean boolean8 = exceptionMap0.removeMapping((java.lang.Exception) functorException5, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet9 = exceptionMap0.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet10 = exceptionMap0.entrySet();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(exceptionSet9);
        org.junit.Assert.assertNotNull(exceptionEntrySet10);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.lang.Throwable throwable4 = null;
        org.apache.commons.collections4.FunctorException functorException5 = new org.apache.commons.collections4.FunctorException("", throwable4);
        java.lang.Throwable throwable12 = null;
        org.apache.commons.collections4.FunctorException functorException13 = new org.apache.commons.collections4.FunctorException("", throwable12);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap15 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean16 = exceptionMap14.containsValue((java.lang.Object) exceptionMap15);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection20 = exceptionMap19.values();
        int int21 = exceptionMap19.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection24 = exceptionMap23.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap26 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean27 = exceptionMap25.containsValue((java.lang.Object) exceptionMap26);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap33 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean34 = exceptionMap32.containsValue((java.lang.Object) exceptionMap33);
        int int35 = exceptionMap33.size();
        java.lang.Throwable throwable44 = null;
        org.apache.commons.collections4.FunctorException functorException45 = new org.apache.commons.collections4.FunctorException("", throwable44);
        org.apache.commons.collections4.FunctorException functorException46 = new org.apache.commons.collections4.FunctorException("", throwable44);
        java.io.Serializable[] serializableArray47 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable12, exceptionMap14, 0L, 0L, exceptionMap19, 0, exceptionMap23, exceptionMap25, (short) 1, ' ', "hi!", 100.0f, int35, false, 10.0f, '4', (-1), 1L, 1, throwable44 };
        java.util.ArrayList<java.io.Serializable> serializableList48 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList48, serializableArray47);
        boolean boolean50 = exceptionMap0.putAll((java.lang.Exception) functorException5, (java.util.Collection<java.io.Serializable>) serializableList48);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet51 = exceptionMap0.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap52 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap53 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean54 = exceptionMap52.containsValue((java.lang.Object) exceptionMap53);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap55 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap56 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean57 = exceptionMap55.containsValue((java.lang.Object) exceptionMap56);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet58 = exceptionMap56.entrySet();
        exceptionMap56.clear();
        boolean boolean60 = exceptionMap56.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.lang.Class<?>> exceptionMap61 = org.apache.commons.collections4.map.MultiValueMap.multiValueMap((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap56);
        boolean boolean62 = exceptionMap52.equals((java.lang.Object) exceptionMap56);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap63 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap64 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean65 = exceptionMap63.containsValue((java.lang.Object) exceptionMap64);
        int int66 = exceptionMap64.size();
        java.util.Collection<java.lang.Object> objCollection67 = exceptionMap64.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap68 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap69 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean70 = exceptionMap68.containsValue((java.lang.Object) exceptionMap69);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet71 = exceptionMap69.entrySet();
        exceptionMap64.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap69);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap73 = exceptionMap69.decorated();
        java.lang.Object obj74 = exceptionMap56.get((java.lang.Object) exceptionMap69);
        java.util.Collection<java.lang.Object> objCollection75 = exceptionMap56.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap76 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap77 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean78 = exceptionMap76.containsValue((java.lang.Object) exceptionMap77);
        int int79 = exceptionMap77.size();
        java.util.Collection<java.lang.Object> objCollection80 = exceptionMap77.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap81 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap82 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean83 = exceptionMap81.containsValue((java.lang.Object) exceptionMap82);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet84 = exceptionMap82.entrySet();
        exceptionMap77.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap82);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap86 = exceptionMap77.decorated();
        boolean boolean87 = exceptionMap56.containsKey((java.lang.Object) exceptionMap86);
        boolean boolean88 = exceptionMap0.containsValue((java.lang.Object) boolean87);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(serializableArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(exceptionEntrySet51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(exceptionMap61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(objCollection67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet71);
        org.junit.Assert.assertNotNull(exceptionMap73);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(objCollection75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(objCollection80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet84);
        org.junit.Assert.assertNotNull(exceptionMap86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        exceptionMap1.clear();
        java.lang.Throwable throwable7 = null;
        org.apache.commons.collections4.FunctorException functorException8 = new org.apache.commons.collections4.FunctorException("", throwable7);
        int int9 = exceptionMap1.size((java.lang.Object) functorException8);
        java.lang.String str10 = exceptionMap1.toString();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap11 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean13 = exceptionMap11.containsValue((java.lang.Object) exceptionMap12);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet14 = exceptionMap12.entrySet();
        exceptionMap12.clear();
        boolean boolean16 = exceptionMap12.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.lang.Class<?>> exceptionMap17 = org.apache.commons.collections4.map.MultiValueMap.multiValueMap((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap12);
        java.util.Collection<java.lang.Object> objCollection18 = exceptionMap12.values();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap12);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(exceptionMap17);
        org.junit.Assert.assertNotNull(objCollection18);
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        int int7 = exceptionMap5.size();
        java.util.Collection<java.lang.Object> objCollection8 = exceptionMap5.values();
        java.util.Collection<java.lang.Object> objCollection9 = exceptionMap5.values();
        java.lang.Object obj10 = exceptionMap3.remove((java.lang.Object) objCollection9);
        java.lang.Object obj11 = exceptionMap0.get((java.lang.Object) objCollection9);
        java.lang.Object obj13 = exceptionMap0.remove((java.lang.Object) (short) 0);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap15 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean16 = exceptionMap14.containsValue((java.lang.Object) exceptionMap15);
        int int17 = exceptionMap15.size();
        java.util.Collection<java.lang.Object> objCollection18 = exceptionMap15.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean21 = exceptionMap19.containsValue((java.lang.Object) exceptionMap20);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet22 = exceptionMap20.entrySet();
        exceptionMap15.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap20);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean26 = exceptionMap24.containsValue((java.lang.Object) exceptionMap25);
        java.lang.Throwable throwable28 = null;
        org.apache.commons.collections4.FunctorException functorException29 = new org.apache.commons.collections4.FunctorException("", throwable28);
        java.lang.Throwable throwable36 = null;
        org.apache.commons.collections4.FunctorException functorException37 = new org.apache.commons.collections4.FunctorException("", throwable36);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap38 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap39 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean40 = exceptionMap38.containsValue((java.lang.Object) exceptionMap39);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap43 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection44 = exceptionMap43.values();
        int int45 = exceptionMap43.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap47 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection48 = exceptionMap47.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap49 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap50 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean51 = exceptionMap49.containsValue((java.lang.Object) exceptionMap50);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap56 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap57 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean58 = exceptionMap56.containsValue((java.lang.Object) exceptionMap57);
        int int59 = exceptionMap57.size();
        java.lang.Throwable throwable68 = null;
        org.apache.commons.collections4.FunctorException functorException69 = new org.apache.commons.collections4.FunctorException("", throwable68);
        org.apache.commons.collections4.FunctorException functorException70 = new org.apache.commons.collections4.FunctorException("", throwable68);
        java.io.Serializable[] serializableArray71 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable36, exceptionMap38, 0L, 0L, exceptionMap43, 0, exceptionMap47, exceptionMap49, (short) 1, ' ', "hi!", 100.0f, int59, false, 10.0f, '4', (-1), 1L, 1, throwable68 };
        java.util.ArrayList<java.io.Serializable> serializableList72 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList72, serializableArray71);
        boolean boolean74 = exceptionMap24.putAll((java.lang.Exception) functorException29, (java.util.Collection<java.io.Serializable>) serializableList72);
        java.lang.Object obj76 = exceptionMap20.put((java.lang.Exception) functorException29, (java.lang.Object) (-1.0f));
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap77 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap78 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean79 = exceptionMap77.containsValue((java.lang.Object) exceptionMap78);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet80 = exceptionMap78.entrySet();
        java.lang.Object obj81 = exceptionMap0.put((java.lang.Exception) functorException29, (java.lang.Object) exceptionEntrySet80);
        boolean boolean82 = exceptionMap0.isEmpty();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap83 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection84 = exceptionMap83.values();
        int int85 = exceptionMap0.size((java.lang.Object) objCollection84);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap86 = exceptionMap0.decorated();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(objCollection8);
        org.junit.Assert.assertNotNull(objCollection9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objCollection48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(serializableArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertEquals("'" + obj76 + "' != '" + (-1.0f) + "'", obj76, (-1.0f));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet80);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertEquals(obj81.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "[]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objCollection84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(exceptionMap86);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap4 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean6 = exceptionMap4.containsValue((java.lang.Object) exceptionMap5);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet7 = exceptionMap5.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap8 = exceptionMap5.map;
        int int9 = exceptionMap8.size();
        java.lang.Object obj10 = exceptionMap1.remove((java.lang.Object) int9);
        java.lang.Throwable throwable13 = null;
        org.apache.commons.collections4.FunctorException functorException14 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException15 = new org.apache.commons.collections4.FunctorException("", throwable13);
        org.apache.commons.collections4.FunctorException functorException17 = new org.apache.commons.collections4.FunctorException("");
        functorException15.addSuppressed((java.lang.Throwable) functorException17);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean21 = exceptionMap19.containsValue((java.lang.Object) exceptionMap20);
        boolean boolean23 = exceptionMap20.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection25 = exceptionMap20.createCollection(10);
        boolean boolean26 = exceptionMap1.putAll((java.lang.Exception) functorException17, serializableCollection25);
        java.lang.Throwable throwable29 = null;
        org.apache.commons.collections4.FunctorException functorException30 = new org.apache.commons.collections4.FunctorException("", throwable29);
        org.apache.commons.collections4.FunctorException functorException31 = new org.apache.commons.collections4.FunctorException("", throwable29);
        org.apache.commons.collections4.FunctorException functorException33 = new org.apache.commons.collections4.FunctorException("");
        functorException31.addSuppressed((java.lang.Throwable) functorException33);
        java.lang.Throwable[] throwableArray35 = functorException33.getSuppressed();
        org.apache.commons.collections4.FunctorException functorException36 = new org.apache.commons.collections4.FunctorException((java.lang.Throwable) functorException33);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap38 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap39 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean40 = exceptionMap38.containsValue((java.lang.Object) exceptionMap39);
        int int41 = exceptionMap39.size();
        java.util.Collection<java.lang.Object> objCollection42 = exceptionMap39.values();
        java.util.Collection<java.lang.Object> objCollection43 = exceptionMap39.values();
        java.lang.Object obj44 = exceptionMap37.remove((java.lang.Object) objCollection43);
        java.lang.Object obj45 = exceptionMap1.put((java.lang.Exception) functorException33, obj44);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet46 = exceptionMap1.entrySet();
        java.lang.Object obj47 = null;
        java.lang.Object obj48 = exceptionMap1.get(obj47);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet7);
        org.junit.Assert.assertNotNull(exceptionMap8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertNotNull(objCollection43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(exceptionEntrySet46);
        org.junit.Assert.assertNull(obj48);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet8 = exceptionMap6.entrySet();
        exceptionMap1.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap6);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor10 = exceptionMap6.mapIterator();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap11 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean13 = exceptionMap11.containsValue((java.lang.Object) exceptionMap12);
        int int14 = exceptionMap12.size();
        java.util.Collection<java.lang.Object> objCollection15 = exceptionMap12.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap16 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean18 = exceptionMap16.containsValue((java.lang.Object) exceptionMap17);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet19 = exceptionMap17.entrySet();
        exceptionMap12.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap17);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap22 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean23 = exceptionMap21.containsValue((java.lang.Object) exceptionMap22);
        java.lang.Throwable throwable25 = null;
        org.apache.commons.collections4.FunctorException functorException26 = new org.apache.commons.collections4.FunctorException("", throwable25);
        java.lang.Throwable throwable33 = null;
        org.apache.commons.collections4.FunctorException functorException34 = new org.apache.commons.collections4.FunctorException("", throwable33);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap35 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean37 = exceptionMap35.containsValue((java.lang.Object) exceptionMap36);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap40 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection41 = exceptionMap40.values();
        int int42 = exceptionMap40.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap44 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection45 = exceptionMap44.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap46 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap47 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean48 = exceptionMap46.containsValue((java.lang.Object) exceptionMap47);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap53 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap54 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean55 = exceptionMap53.containsValue((java.lang.Object) exceptionMap54);
        int int56 = exceptionMap54.size();
        java.lang.Throwable throwable65 = null;
        org.apache.commons.collections4.FunctorException functorException66 = new org.apache.commons.collections4.FunctorException("", throwable65);
        org.apache.commons.collections4.FunctorException functorException67 = new org.apache.commons.collections4.FunctorException("", throwable65);
        java.io.Serializable[] serializableArray68 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable33, exceptionMap35, 0L, 0L, exceptionMap40, 0, exceptionMap44, exceptionMap46, (short) 1, ' ', "hi!", 100.0f, int56, false, 10.0f, '4', (-1), 1L, 1, throwable65 };
        java.util.ArrayList<java.io.Serializable> serializableList69 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList69, serializableArray68);
        boolean boolean71 = exceptionMap21.putAll((java.lang.Exception) functorException26, (java.util.Collection<java.io.Serializable>) serializableList69);
        java.lang.Object obj73 = exceptionMap17.put((java.lang.Exception) functorException26, (java.lang.Object) (-1.0f));
        java.util.Collection<java.lang.Object> objCollection74 = exceptionMap17.values();
        java.lang.Object obj75 = exceptionMap6.get((java.lang.Object) objCollection74);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap76 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap77 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean78 = exceptionMap76.containsValue((java.lang.Object) exceptionMap77);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap79 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap80 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean81 = exceptionMap79.containsValue((java.lang.Object) exceptionMap80);
        exceptionMap77.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap80);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap83 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection84 = exceptionMap83.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet85 = exceptionMap83.entrySet();
        java.lang.Object obj86 = null;
        boolean boolean87 = exceptionMap80.containsValue((java.lang.Object) exceptionEntrySet85, obj86);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap88 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap89 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean90 = exceptionMap88.containsValue((java.lang.Object) exceptionMap89);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet91 = exceptionMap89.entrySet();
        exceptionMap89.clear();
        boolean boolean93 = exceptionMap89.isEmpty();
        exceptionMap80.map = exceptionMap89;
        java.util.Collection<java.lang.Object> objCollection95 = exceptionMap80.values();
        exceptionMap6.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap80);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet8);
        org.junit.Assert.assertNotNull(exceptionItor10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objCollection41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(objCollection45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(serializableArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertEquals("'" + obj73 + "' != '" + (-1.0f) + "'", obj73, (-1.0f));
        org.junit.Assert.assertNotNull(objCollection74);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objCollection84);
        org.junit.Assert.assertNotNull(exceptionEntrySet85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(objCollection95);
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        boolean boolean4 = exceptionMap1.containsKey((java.lang.Object) (short) 10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap5 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean7 = exceptionMap5.containsValue((java.lang.Object) exceptionMap6);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap10 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean11 = exceptionMap9.containsValue((java.lang.Object) exceptionMap10);
        int int12 = exceptionMap10.size();
        java.util.Collection<java.lang.Object> objCollection13 = exceptionMap10.values();
        java.util.Collection<java.lang.Object> objCollection14 = exceptionMap10.values();
        java.lang.Object obj15 = exceptionMap8.remove((java.lang.Object) objCollection14);
        java.lang.Object obj16 = exceptionMap5.get((java.lang.Object) objCollection14);
        boolean boolean17 = exceptionMap5.isEmpty();
        boolean boolean19 = exceptionMap1.containsValue((java.lang.Object) exceptionMap5, (java.lang.Object) (byte) 10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean22 = exceptionMap20.containsValue((java.lang.Object) exceptionMap21);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet23 = exceptionMap21.entrySet();
        exceptionMap21.clear();
        java.lang.Throwable throwable26 = null;
        org.apache.commons.collections4.FunctorException functorException27 = new org.apache.commons.collections4.FunctorException(throwable26);
        org.apache.commons.collections4.FunctorException functorException28 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException27);
        java.lang.Throwable throwable29 = null;
        org.apache.commons.collections4.FunctorException functorException30 = new org.apache.commons.collections4.FunctorException(throwable29);
        functorException28.addSuppressed((java.lang.Throwable) functorException30);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap33 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean34 = exceptionMap32.containsValue((java.lang.Object) exceptionMap33);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet35 = exceptionMap33.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap36 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean38 = exceptionMap36.containsValue((java.lang.Object) exceptionMap37);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet39 = exceptionMap37.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap40 = exceptionMap37.map;
        int int41 = exceptionMap40.size();
        java.lang.Object obj42 = exceptionMap33.remove((java.lang.Object) int41);
        java.lang.Exception exception43 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap44 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection45 = exceptionMap44.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet46 = exceptionMap44.entrySet();
        java.lang.Object obj47 = exceptionMap33.put(exception43, (java.lang.Object) exceptionEntrySet46);
        java.lang.Object obj48 = exceptionMap21.put((java.lang.Exception) functorException28, (java.lang.Object) exceptionEntrySet46);
        int int49 = exceptionMap21.size();
        exceptionMap5.map = exceptionMap21;
        java.util.Iterator<java.util.Map.Entry<java.lang.Exception, java.io.Serializable>> exceptionEntryItor51 = exceptionMap5.iterator();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objCollection13);
        org.junit.Assert.assertNotNull(objCollection14);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet23);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet39);
        org.junit.Assert.assertNotNull(exceptionMap40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(objCollection45);
        org.junit.Assert.assertNotNull(exceptionEntrySet46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "[]");
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(exceptionEntryItor51);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        exceptionMap1.clear();
        java.lang.Throwable throwable7 = null;
        org.apache.commons.collections4.FunctorException functorException8 = new org.apache.commons.collections4.FunctorException("", throwable7);
        int int9 = exceptionMap1.size((java.lang.Object) functorException8);
        java.lang.String str10 = exceptionMap1.toString();
        java.util.Collection<java.io.Serializable> serializableCollection12 = exceptionMap1.createCollection((int) '#');
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean15 = exceptionMap13.containsValue((java.lang.Object) exceptionMap14);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet16 = exceptionMap14.entrySet();
        exceptionMap14.clear();
        java.lang.Throwable throwable19 = null;
        org.apache.commons.collections4.FunctorException functorException20 = new org.apache.commons.collections4.FunctorException(throwable19);
        org.apache.commons.collections4.FunctorException functorException21 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException20);
        java.lang.Throwable throwable22 = null;
        org.apache.commons.collections4.FunctorException functorException23 = new org.apache.commons.collections4.FunctorException(throwable22);
        functorException21.addSuppressed((java.lang.Throwable) functorException23);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap26 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean27 = exceptionMap25.containsValue((java.lang.Object) exceptionMap26);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet28 = exceptionMap26.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet32 = exceptionMap30.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap33 = exceptionMap30.map;
        int int34 = exceptionMap33.size();
        java.lang.Object obj35 = exceptionMap26.remove((java.lang.Object) int34);
        java.lang.Exception exception36 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap37 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection38 = exceptionMap37.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet39 = exceptionMap37.entrySet();
        java.lang.Object obj40 = exceptionMap26.put(exception36, (java.lang.Object) exceptionEntrySet39);
        java.lang.Object obj41 = exceptionMap14.put((java.lang.Exception) functorException21, (java.lang.Object) exceptionEntrySet39);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap42 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap43 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean44 = exceptionMap42.containsValue((java.lang.Object) exceptionMap43);
        int int45 = exceptionMap43.size();
        java.util.Collection<java.lang.Object> objCollection46 = exceptionMap43.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap47 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap48 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean49 = exceptionMap47.containsValue((java.lang.Object) exceptionMap48);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet50 = exceptionMap48.entrySet();
        exceptionMap43.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap48);
        java.util.Collection<java.io.Serializable> serializableCollection53 = exceptionMap48.createCollection(1);
        boolean boolean54 = exceptionMap14.containsKey((java.lang.Object) exceptionMap48);
        org.apache.commons.collections4.MapIterator<java.lang.Exception, java.lang.Object> exceptionItor55 = exceptionMap48.mapIterator();
        boolean boolean56 = exceptionMap1.containsValue((java.lang.Object) exceptionItor55);
        java.lang.Object obj57 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj58 = exceptionItor55.setValue(obj57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{}" + "'", str10, "{}");
        org.junit.Assert.assertNotNull(serializableCollection12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet16);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet32);
        org.junit.Assert.assertNotNull(exceptionMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(objCollection38);
        org.junit.Assert.assertNotNull(exceptionEntrySet39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "[]");
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objCollection46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet50);
        org.junit.Assert.assertNotNull(serializableCollection53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(exceptionItor55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection1 = exceptionMap0.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet2 = exceptionMap0.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap3 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap3.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet5 = exceptionMap3.entrySet();
        boolean boolean7 = exceptionMap0.remove((java.lang.Object) exceptionEntrySet5, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap8 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap9 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean10 = exceptionMap8.containsValue((java.lang.Object) exceptionMap9);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet11 = exceptionMap9.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap12 = exceptionMap9.map;
        int int13 = exceptionMap12.size();
        boolean boolean14 = exceptionMap0.containsKey((java.lang.Object) exceptionMap12);
        boolean boolean16 = exceptionMap0.equals((java.lang.Object) 0.0d);
        int int17 = exceptionMap0.size();
        exceptionMap0.clear();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap20 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap21 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean22 = exceptionMap20.containsValue((java.lang.Object) exceptionMap21);
        boolean boolean24 = exceptionMap21.containsKey((java.lang.Object) (short) 10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap26 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean27 = exceptionMap25.containsValue((java.lang.Object) exceptionMap26);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap28 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap29 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean31 = exceptionMap29.containsValue((java.lang.Object) exceptionMap30);
        int int32 = exceptionMap30.size();
        java.util.Collection<java.lang.Object> objCollection33 = exceptionMap30.values();
        java.util.Collection<java.lang.Object> objCollection34 = exceptionMap30.values();
        java.lang.Object obj35 = exceptionMap28.remove((java.lang.Object) objCollection34);
        java.lang.Object obj36 = exceptionMap25.get((java.lang.Object) objCollection34);
        boolean boolean37 = exceptionMap25.isEmpty();
        boolean boolean39 = exceptionMap21.containsValue((java.lang.Object) exceptionMap25, (java.lang.Object) (byte) 10);
        java.lang.Object obj40 = exceptionMap0.getOrDefault((java.lang.Object) 100.0d, (java.lang.Object) exceptionMap21);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap41 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection42 = exceptionMap41.values();
        int int43 = exceptionMap41.size();
        exceptionMap21.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap41);
        org.junit.Assert.assertNotNull(objCollection1);
        org.junit.Assert.assertNotNull(exceptionEntrySet2);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(exceptionEntrySet5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet11);
        org.junit.Assert.assertNotNull(exceptionMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{}");
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.lang.Throwable throwable4 = null;
        org.apache.commons.collections4.FunctorException functorException5 = new org.apache.commons.collections4.FunctorException("", throwable4);
        java.lang.Throwable throwable12 = null;
        org.apache.commons.collections4.FunctorException functorException13 = new org.apache.commons.collections4.FunctorException("", throwable12);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap14 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap15 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean16 = exceptionMap14.containsValue((java.lang.Object) exceptionMap15);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap19 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection20 = exceptionMap19.values();
        int int21 = exceptionMap19.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap23 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection24 = exceptionMap23.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap25 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap26 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean27 = exceptionMap25.containsValue((java.lang.Object) exceptionMap26);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap33 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean34 = exceptionMap32.containsValue((java.lang.Object) exceptionMap33);
        int int35 = exceptionMap33.size();
        java.lang.Throwable throwable44 = null;
        org.apache.commons.collections4.FunctorException functorException45 = new org.apache.commons.collections4.FunctorException("", throwable44);
        org.apache.commons.collections4.FunctorException functorException46 = new org.apache.commons.collections4.FunctorException("", throwable44);
        java.io.Serializable[] serializableArray47 = new java.io.Serializable[] { (short) -1, 10L, 10.0d, (short) 100, (-1), throwable12, exceptionMap14, 0L, 0L, exceptionMap19, 0, exceptionMap23, exceptionMap25, (short) 1, ' ', "hi!", 100.0f, int35, false, 10.0f, '4', (-1), 1L, 1, throwable44 };
        java.util.ArrayList<java.io.Serializable> serializableList48 = new java.util.ArrayList<java.io.Serializable>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.io.Serializable>) serializableList48, serializableArray47);
        boolean boolean50 = exceptionMap0.putAll((java.lang.Exception) functorException5, (java.util.Collection<java.io.Serializable>) serializableList48);
        boolean boolean51 = exceptionMap0.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(serializableArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet3 = exceptionMap1.entrySet();
        exceptionMap1.clear();
        java.lang.Throwable throwable6 = null;
        org.apache.commons.collections4.FunctorException functorException7 = new org.apache.commons.collections4.FunctorException(throwable6);
        org.apache.commons.collections4.FunctorException functorException8 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException7);
        java.lang.Throwable throwable9 = null;
        org.apache.commons.collections4.FunctorException functorException10 = new org.apache.commons.collections4.FunctorException(throwable9);
        functorException8.addSuppressed((java.lang.Throwable) functorException10);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap12 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap13 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean14 = exceptionMap12.containsValue((java.lang.Object) exceptionMap13);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet15 = exceptionMap13.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap16 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean18 = exceptionMap16.containsValue((java.lang.Object) exceptionMap17);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet19 = exceptionMap17.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap20 = exceptionMap17.map;
        int int21 = exceptionMap20.size();
        java.lang.Object obj22 = exceptionMap13.remove((java.lang.Object) int21);
        java.lang.Exception exception23 = null;
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap24 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection25 = exceptionMap24.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet26 = exceptionMap24.entrySet();
        java.lang.Object obj27 = exceptionMap13.put(exception23, (java.lang.Object) exceptionEntrySet26);
        java.lang.Object obj28 = exceptionMap1.put((java.lang.Exception) functorException8, (java.lang.Object) exceptionEntrySet26);
        int int29 = exceptionMap1.size();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap30 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection31 = exceptionMap30.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet32 = exceptionMap30.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap33 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.util.Collection<java.lang.Object> objCollection34 = exceptionMap33.values();
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet35 = exceptionMap33.entrySet();
        boolean boolean37 = exceptionMap30.remove((java.lang.Object) exceptionEntrySet35, (java.lang.Object) (byte) -1);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap38 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap39 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean40 = exceptionMap38.containsValue((java.lang.Object) exceptionMap39);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet41 = exceptionMap39.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap42 = exceptionMap39.map;
        int int43 = exceptionMap42.size();
        boolean boolean44 = exceptionMap30.containsKey((java.lang.Object) exceptionMap42);
        boolean boolean46 = exceptionMap30.equals((java.lang.Object) 0.0d);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap47 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap48 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean49 = exceptionMap47.containsValue((java.lang.Object) exceptionMap48);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet50 = exceptionMap48.entrySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap51 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap52 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean53 = exceptionMap51.containsValue((java.lang.Object) exceptionMap52);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet54 = exceptionMap52.entrySet();
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap55 = exceptionMap52.map;
        int int56 = exceptionMap55.size();
        java.lang.Object obj57 = exceptionMap48.remove((java.lang.Object) int56);
        java.lang.Throwable throwable60 = null;
        org.apache.commons.collections4.FunctorException functorException61 = new org.apache.commons.collections4.FunctorException("", throwable60);
        org.apache.commons.collections4.FunctorException functorException62 = new org.apache.commons.collections4.FunctorException("", throwable60);
        org.apache.commons.collections4.FunctorException functorException64 = new org.apache.commons.collections4.FunctorException("");
        functorException62.addSuppressed((java.lang.Throwable) functorException64);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap66 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap67 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean68 = exceptionMap66.containsValue((java.lang.Object) exceptionMap67);
        boolean boolean70 = exceptionMap67.containsKey((java.lang.Object) (short) 10);
        java.util.Collection<java.io.Serializable> serializableCollection72 = exceptionMap67.createCollection(10);
        boolean boolean73 = exceptionMap48.putAll((java.lang.Exception) functorException64, serializableCollection72);
        boolean boolean74 = exceptionMap30.containsValue((java.lang.Object) serializableCollection72);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap75 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap76 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap77 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean78 = exceptionMap76.containsValue((java.lang.Object) exceptionMap77);
        int int79 = exceptionMap77.size();
        java.util.Collection<java.lang.Object> objCollection80 = exceptionMap77.values();
        java.util.Collection<java.lang.Object> objCollection81 = exceptionMap77.values();
        java.lang.Object obj82 = exceptionMap75.remove((java.lang.Object) objCollection81);
        org.apache.commons.collections4.map.MultiValueMap<org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>, java.lang.Throwable> exceptionMapMap83 = new org.apache.commons.collections4.map.MultiValueMap<org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>, java.lang.Throwable>();
        java.lang.Object obj84 = exceptionMap75.remove((java.lang.Object) exceptionMapMap83);
        boolean boolean85 = exceptionMap30.containsKey((java.lang.Object) exceptionMapMap83);
        exceptionMap1.map = exceptionMap30;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet3);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet19);
        org.junit.Assert.assertNotNull(exceptionMap20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(objCollection25);
        org.junit.Assert.assertNotNull(exceptionEntrySet26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "[]");
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(exceptionEntrySet32);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertNotNull(exceptionEntrySet35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet41);
        org.junit.Assert.assertNotNull(exceptionMap42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet54);
        org.junit.Assert.assertNotNull(exceptionMap55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(serializableCollection72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(objCollection80);
        org.junit.Assert.assertNotNull(objCollection81);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap0 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap1 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean2 = exceptionMap0.containsValue((java.lang.Object) exceptionMap1);
        int int3 = exceptionMap1.size();
        java.util.Collection<java.lang.Object> objCollection4 = exceptionMap1.values();
        java.util.Set<java.lang.Exception> exceptionSet5 = exceptionMap1.keySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap6 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        java.lang.Object obj8 = exceptionMap6.get((java.lang.Object) (-1L));
        java.lang.Throwable throwable10 = null;
        org.apache.commons.collections4.FunctorException functorException11 = new org.apache.commons.collections4.FunctorException(throwable10);
        org.apache.commons.collections4.FunctorException functorException12 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException11);
        boolean boolean14 = exceptionMap6.removeMapping((java.lang.Exception) functorException11, (java.io.Serializable) '#');
        java.util.Set<java.lang.Exception> exceptionSet15 = exceptionMap6.keySet();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap16 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap17 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean18 = exceptionMap16.containsValue((java.lang.Object) exceptionMap17);
        java.lang.Throwable throwable21 = null;
        org.apache.commons.collections4.FunctorException functorException22 = new org.apache.commons.collections4.FunctorException("", throwable21);
        org.apache.commons.collections4.FunctorException functorException23 = new org.apache.commons.collections4.FunctorException("", throwable21);
        java.lang.Object obj25 = exceptionMap17.put((java.lang.Exception) functorException23, (java.lang.Object) (-1));
        org.apache.commons.collections4.FunctorException functorException26 = new org.apache.commons.collections4.FunctorException((java.lang.Throwable) functorException23);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap27 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap28 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean29 = exceptionMap27.containsValue((java.lang.Object) exceptionMap28);
        int int30 = exceptionMap28.size();
        java.util.Collection<java.lang.Object> objCollection31 = exceptionMap28.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap32 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap33 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean34 = exceptionMap32.containsValue((java.lang.Object) exceptionMap33);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet35 = exceptionMap33.entrySet();
        exceptionMap28.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap33);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap37 = exceptionMap33.decorated();
        java.util.Set<java.lang.Exception> exceptionSet38 = exceptionMap33.keySet();
        java.lang.Object obj39 = exceptionMap6.put((java.lang.Exception) functorException26, (java.lang.Object) exceptionSet38);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap40 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap41 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean42 = exceptionMap40.containsValue((java.lang.Object) exceptionMap41);
        int int43 = exceptionMap41.size();
        java.util.Collection<java.lang.Object> objCollection44 = exceptionMap41.values();
        exceptionMap41.clear();
        java.lang.Throwable throwable47 = null;
        org.apache.commons.collections4.FunctorException functorException48 = new org.apache.commons.collections4.FunctorException("", throwable47);
        int int49 = exceptionMap41.size((java.lang.Object) functorException48);
        java.lang.String str50 = exceptionMap41.toString();
        boolean boolean52 = exceptionMap41.containsValue((java.lang.Object) (short) 0);
        boolean boolean53 = exceptionMap1.containsValue(obj39, (java.lang.Object) (short) 0);
        java.lang.Throwable throwable56 = null;
        org.apache.commons.collections4.FunctorException functorException57 = new org.apache.commons.collections4.FunctorException("", throwable56);
        org.apache.commons.collections4.FunctorException functorException58 = new org.apache.commons.collections4.FunctorException("", throwable56);
        org.apache.commons.collections4.FunctorException functorException60 = new org.apache.commons.collections4.FunctorException("");
        functorException58.addSuppressed((java.lang.Throwable) functorException60);
        boolean boolean62 = exceptionMap1.containsValue((java.lang.Object) functorException58);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap63 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap64 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean65 = exceptionMap63.containsValue((java.lang.Object) exceptionMap64);
        int int66 = exceptionMap64.size();
        java.util.Collection<java.lang.Object> objCollection67 = exceptionMap64.values();
        exceptionMap64.clear();
        java.util.Collection<java.lang.Object> objCollection69 = exceptionMap64.values();
        java.lang.Throwable throwable71 = null;
        org.apache.commons.collections4.FunctorException functorException72 = new org.apache.commons.collections4.FunctorException(throwable71);
        org.apache.commons.collections4.FunctorException functorException73 = new org.apache.commons.collections4.FunctorException("hi!", (java.lang.Throwable) functorException72);
        java.lang.Throwable throwable74 = null;
        org.apache.commons.collections4.FunctorException functorException75 = new org.apache.commons.collections4.FunctorException(throwable74);
        functorException73.addSuppressed((java.lang.Throwable) functorException75);
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap77 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap78 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean79 = exceptionMap77.containsValue((java.lang.Object) exceptionMap78);
        int int80 = exceptionMap78.size();
        java.util.Collection<java.lang.Object> objCollection81 = exceptionMap78.values();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap82 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable> exceptionMap83 = new org.apache.commons.collections4.map.MultiValueMap<java.lang.Exception, java.io.Serializable>();
        boolean boolean84 = exceptionMap82.containsValue((java.lang.Object) exceptionMap83);
        java.util.Set<java.util.Map.Entry<java.lang.Exception, java.lang.Object>> exceptionEntrySet85 = exceptionMap83.entrySet();
        exceptionMap78.putAll((java.util.Map<java.lang.Exception, java.lang.Object>) exceptionMap83);
        java.util.Map<java.lang.Exception, java.lang.Object> exceptionMap87 = exceptionMap83.decorated();
        java.util.Set<java.lang.Exception> exceptionSet88 = exceptionMap83.keySet();
        java.util.Collection<java.io.Serializable> serializableCollection90 = exceptionMap83.createCollection(0);
        java.lang.Object obj91 = exceptionMap64.put((java.lang.Exception) functorException73, (java.lang.Object) exceptionMap83);
        java.util.Iterator<java.util.Map.Entry<java.lang.Exception, java.io.Serializable>> exceptionEntryItor92 = exceptionMap64.iterator();
        java.lang.Object obj93 = exceptionMap1.remove((java.lang.Object) exceptionMap64);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(objCollection4);
        org.junit.Assert.assertNotNull(exceptionSet5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(exceptionSet15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + obj25 + "' != '" + (-1) + "'", obj25, (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet35);
        org.junit.Assert.assertNotNull(exceptionMap37);
        org.junit.Assert.assertNotNull(exceptionSet38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "{}" + "'", str50, "{}");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(objCollection67);
        org.junit.Assert.assertNotNull(objCollection69);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(objCollection81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(exceptionEntrySet85);
        org.junit.Assert.assertNotNull(exceptionMap87);
        org.junit.Assert.assertNotNull(exceptionSet88);
        org.junit.Assert.assertNotNull(serializableCollection90);
        org.junit.Assert.assertNotNull(obj91);
        org.junit.Assert.assertEquals(obj91.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj91), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj91), "{}");
        org.junit.Assert.assertNotNull(exceptionEntryItor92);
        org.junit.Assert.assertNull(obj93);
    }
}

