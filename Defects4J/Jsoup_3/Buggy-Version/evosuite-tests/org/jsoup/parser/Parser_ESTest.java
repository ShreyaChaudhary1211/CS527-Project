/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 12:33:32 GMT 2024
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<!-D", "<!-D");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Parser.parse("<![CDATA[", "<![CDATA[");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Parser.parse("<SbPa:*bg=ZdqS]::\n<html>\n<head>\n <title>&lt;SbPa:*bg=ZdqS]::</title>\n</head>\n<body>\n <sbpa :=\"\" b=\"\" g=\"ZdqS]::\">\n </sbpa>\n</body>\n</html>", "<SbPa:*bg=ZdqS]::\n<html>\n<head>\n <title>&lt;SbPa:*bg=ZdqS]::</title>\n</head>\n<body>\n <sbpa :=\"\" b=\"\" g=\"ZdqS]::\">\n </sbpa>\n</body>\n</html>");
      assertEquals("<SbPa:*bg=ZdqS]::\n<html>\n<head>\n <title>&lt;SbPa:*bg=ZdqS]::</title>\n</head>\n<body>\n <sbpa :=\"\" b=\"\" g=\"ZdqS]::\">\n </sbpa>\n</body>\n</html>", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Parser.parse("<!--", "\"9=c.xXS");
      assertEquals("\"9=c.xXS", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Parser.parse("<?", "<?");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Parser.parse("<!---->\n<html>\n<head>\n</head>\n<body>\n</body>\n</html>", "\"9=c.xXS");
      assertEquals("\"9=c.xXS", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Parser.parse("bU4xUz</@fIKE", "bU4xUz</@fIKE");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Parser.parse("<DbQ<:xz<g=[S<", "<DbQ<:xz<g=[S<");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parser.parse("<DbQd*='/dS]:\"", "<DbQd*='/dS]:\"");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Parser.parse("<SbPa:*bg=ZdqS]::", "<SbPa:*bg=ZdqS]::");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bU4xUz</nfIKE", "bU4xUz</nfIKE");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Parser.parse("<html>\n<head>\n <title>&lt;DbQb:*g=dS]:&quot;</title>\n</head>\n<body>\n <dbqb :=\"\" g=\"dS]:&quot;\">\n </dbqb>\n</body>\n</html>\n<html>\n</html>", "<DbQb:*g=dS]:\"");
      assertEquals("<DbQb:*g=dS]:\"", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Parser.parse("<html>\n<head>\n <title>9&lt;SbPa:*bg=ZdqS]:&quot;</title>\n</head>\n<body>\n 9 <sbpa :=\"\" bg=\"ZdqS]:&quot;\">\n </sbpa>\n</body>\n</html><9<sbpa:*bg=zdqs]:\">\n</9<sbpa:*bg=zdqs]:\">", "9<SbPa:*bg=ZdqS]:\"");
      assertEquals("9<SbPa:*bg=ZdqS]:\"", document0.baseUri());
  }
}
