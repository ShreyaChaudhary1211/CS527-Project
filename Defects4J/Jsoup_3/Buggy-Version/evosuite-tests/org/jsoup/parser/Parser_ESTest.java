/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 31 01:57:46 GMT 2024
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Parser.parse("<HbW# p:zP*+_=zd*]08", "<HbW# p:zP*+_=zd*]08");
      Element element0 = document0.prepend("base");
      assertEquals("#document", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<!-D", "<!-D");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Parser.parse("<![CDATA[", "<![CDATA[");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Parser.parse("<!--", "<!--");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Parser.parse("<?", "<?");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Parser.parse("base<v<e{>\n</v<e{><base />\n<html>\n<head>\n</head>\n<body>\n <hbw p:zp=\"\" _=\"zd*]08\">\n </hbw>\n</body>\n</html>", "/G=Lr^5hl");
      assertEquals("/G=Lr^5hl", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Parser.parse("<!---->\n<html>\n<head>\n</head>\n<body>\n</body>\n</html>", "");
      assertEquals("", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Parser.parse("oo</@4j9P35\"", "oo</@4j9P35\"");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<HbWb j:zP*+U=zd<]oZ", "<HbWb j:zP*+U=zd<]oZ");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Parser.parse("0V<Jk,W/>isn:j8", "0V<Jk,W/>isn:j8");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Parser.parse("<html>\n<head>\n <title>&lt;jbWp:pP*+_=Adl]0Z</title>\n</head>\n<body>\n <jbwp :pp=\"\" _=\"Adl]0Z\">\n </jbwp>\n</body>\n</html>", "<html>\n<head>\n <title>&lt;jbWp:pP*+_=Adl]0Z</title>\n</head>\n<body>\n <jbwp :pp=\"\" _=\"Adl]0Z\">\n </jbwp>\n</body>\n</html>");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Parser.parse("<textarea></textarea>\n<html>\n<head>\n</head>\n<body>\n LN7l)#v \n</body>\n</html>", "LN7l)#v");
      assertEquals("LN7l)#v", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Parser.parse("<base />\n<html>\n<head>\n</head>\n<body>\n</body>\n</html>", "<HbWb p:zP*+_=zd*]0Z");
      assertEquals("<HbWb p:zP*+_=zd*]0Z", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("oo(</4(j9/P3\"", "oo(</4(j9/P3\"");
      assertEquals("#root", document0.tagName());
  }
}
