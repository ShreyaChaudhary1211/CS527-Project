/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 31 01:59:32 GMT 2024
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedHashSet;
import java.util.NoSuchElementException;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EvosuiteElement_ESTest extends EvosuiteElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("#SGp(:\"O&%xI9Cpp");
      document0.appendText("#SGp(:\"O&%xI9Cpp");
      Element element0 = document0.getElementById("#SGp(:\"O&%xI9Cpp");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = new Document("The validated collection is empty");
      Element element0 = document0.val("The validated collection is empty");
      assertEquals("#document", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = new Document("hs(aH:GO");
      Elements elements0 = document0.getElementsByAttributeValueEnding("hs(aH:GO", "hs(aH:GO");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = new Document("hs(aH:GO");
      Elements elements0 = document0.getElementsByClass("hs(aH:GO");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("+K");
      // Undeclared exception!
      try { 
        document0.child((-1880776845));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("U[uSo?");
      Elements elements0 = document0.getElementsByAttributeValueContaining("U[uSo?", "U[uSo?");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document(">:(WA88'zmU5");
      Element element0 = document0.appendElement(">:(WA88'zmU5");
      element0.text(">:(WA88'zmU5");
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document(">:(WA88'zmU5");
      Elements elements0 = document0.getElementsByAttributeValueNot(">:(WA88'zmU5", ">:(WA88'zmU5");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document(";c4,F$J YG\"^S<5$");
      String string0 = document0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("920");
      Elements elements0 = document0.getElementsByAttribute("920");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = new Document(".dd\"2eYh^T\"{Dt|&k");
      Element element0 = document0.addClass(".dd\"2eYh^T\"{Dt|&k");
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("m9YS`sJU5c.ui%Jf}E");
      // Undeclared exception!
      try { 
        document0.html("m9YS`sJU5c.ui%Jf}E");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = new Document(">:WAF88'zU5");
      Elements elements0 = document0.getElementsByAttributeValue(">:WAF88'zU5", ">:WAF88'zU5");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document(";dW rCM`UI@k(v[-");
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document(";c4,F$J YG\"^S<5$");
      Elements elements0 = document0.getElementsByAttributeValueStarting(";c4,F$J YG\"^S<5$", ";c4,F$J YG\"^S<5$");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document(";dW rCM`UI@k(v[-");
      Element element0 = document0.appendElement(";dW rCM`UI@k(v[-");
      String string0 = element0.nodeName();
      assertEquals(";dw rcm`ui@k(v[-", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document(";dW rCM`UI@k(v[-");
      Element element0 = document0.removeClass(";dW rCM`UI@k(v[-");
      assertEquals("#root", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document("2:(WA88'zmU5");
      // Undeclared exception!
      try { 
        document0.normalise();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("UuSo?");
      Elements elements0 = document0.getAllElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document(";dW rCM`UI@k(v[-");
      Elements elements0 = document0.getElementsByIndexLessThan((-1835));
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("bK");
      Elements elements0 = document0.parents();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("b");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-792));
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("MZ");
      Elements elements0 = document0.getElementsByIndexEquals(2075);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document(">:WAF88'zU5");
      Element element0 = document0.getElementById(">:WAF88'zU5");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document(";dW rCM`UI@k(v[-");
      Element element0 = document0.appendElement(";dW rCM`UI@k(v[-");
      Elements elements0 = element0.parents();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document(";dW rCM`UI@k(v[-");
      Element element0 = document0.appendElement(";dW rCM`UI@k(v[-");
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = new Document("946");
      document0.appendChild(document0);
      document0.appendElement("946");
      Element element0 = document0.nextElementSibling();
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document(">:WA88'zU5");
      Element element0 = document0.prependChild(document0);
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = new Document(">:WA88'zU5");
      document0.prependChild(document0);
      Element element0 = document0.appendElement(">:WA88'zU5");
      Element element1 = element0.previousElementSibling();
      assertFalse(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = new Document(")u!So?");
      Element element0 = document0.appendElement(")u!So?");
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("nNPUT");
      Element element0 = document0.appendElement("nNPUT");
      Integer integer0 = element0.elementSiblingIndex();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = new Document(";dW rCM`UI@k(v[-");
      Element element0 = document0.appendElement(";dW rCM`UI@k(v[-");
      Element element1 = element0.lastElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("KTWI!'?tp:3H7i$");
      Element element0 = document0.appendElement("KTWI!'?tp:3H7i$");
      Element element1 = document0.createElement("KTWI!'?tp:3H7i$");
      document0.appendChild(element1);
      Element element2 = element0.lastElementSibling();
      assertNotNull(element2);
      assertSame(element2, element1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("U[uSo?");
      document0.appendElement("U[uSo?");
      String string0 = document0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = new Document("U[uSo?");
      document0.prependText("U[uSo?");
      document0.appendElement("U[uSo?");
      String string0 = document0.text();
      assertEquals("U[uSo?", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = new Document("bK");
      Element element0 = document0.appendElement("textarea");
      boolean boolean0 = element0.preserveWhitespace();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = new Document("</");
      Element element0 = document0.appendElement("</");
      boolean boolean0 = element0.preserveWhitespace();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("nNPUT");
      document0.appendElement("nNPUT");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = new Document(";dW rCM`UI@k(v[-");
      document0.appendText(" ");
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("hs(aH:GO");
      Element element0 = document0.appendElement("hs(aH:GO");
      Element element1 = element0.text("hs(aH:GO");
      String string0 = element1.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = new Document(";dW rCM`UI@k(v[-");
      document0.appendElement(";dW rCM`UI@k(v[-");
      String string0 = document0.data();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("K.So?");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Element element0 = document0.classNames((Set<String>) linkedHashSet0);
      boolean boolean0 = element0.hasClass("3Q--5q6&Vk~d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = new Document(";dW rCM`UI@k(v[-");
      document0.toggleClass(";dW rCM`UI@k(v[-");
      Set<String> set0 = document0.classNames();
      assertTrue(set0.contains(";dW rCM`UI@k(v[-"));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = new Document(">:WAF88'zU5");
      boolean boolean0 = document0.hasClass("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.toggleClass("");
      assertEquals("#document", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = new Document(";dW rCM`UI@k(v[-");
      String string0 = document0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "textarea");
      String string0 = element0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Element element0 = new Element(tag0, "textarea");
      Element element1 = element0.val("forall");
      assertEquals("textarea", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = new Document("TABLE");
      Element element0 = document0.appendElement("TABLE");
      String string0 = element0.outerHtml();
      assertEquals("\n<table>\n</table>", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Document document0 = new Document("U[uSo?");
      Element element0 = document0.prependText("U[uSo?");
      document0.appendElement("U[uSo?");
      String string0 = element0.outerHtml();
      assertEquals("U[uSo?<u[uso?>\n</u[uso?>", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = new Document(")u!So?");
      document0.appendElement(")u!So?");
      StringBuilder stringBuilder0 = new StringBuilder();
      document0.outerHtml(stringBuilder0);
      assertEquals("<#root>\n<)u!so?>\n</)u!so?>\n</#root>", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("#root");
      document0.appendElement("INPUT");
      String string0 = document0.html();
      assertEquals("<input />", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.appendElement("textarea");
      String string0 = element0.outerHtml();
      assertEquals("\n<textarea></textarea>", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = new Document(">:(WA88'zmU5");
      boolean boolean0 = document0.equals(">:(WA88'zmU5");
      assertFalse(boolean0);
  }
}
