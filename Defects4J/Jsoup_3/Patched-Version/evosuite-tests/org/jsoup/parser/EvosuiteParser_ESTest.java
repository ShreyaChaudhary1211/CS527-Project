/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 12:40:34 GMT 2024
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EvosuiteParser_ESTest extends EvosuiteParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<SbwlPb7=(C+7OF ", "<SbwlPb7=(C+7OF ");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<!-", "<!-");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Parser.parse("<![CDATA[", "<![CDATA[");
      assertEquals("<![CDATA[", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Parser.parse("I26[/-stK<H4F[x=o", "I26[/-stK<H4F[x=o");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("I26[/-stK<PH4F[x=o", "I26[/-stK<PH4F[x=o");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Parser.parse("<!--", "<!--");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<?", "<?");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Parser.parse("&@;8fIJ(~4</hDWO`)", "&@;8fIJ(~4</hDWO`)");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Parser.parse("<!--%s-->", "<!--%s-->");
      assertEquals("<!--%s-->", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5+-tW&<)9/NNz", "5+-tW&<)9/NNz");
      assertEquals("5+-tW&<)9/NNz", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parser.parse("E<6=\"K2#9<r@JmzN0XY", "u;@{,8+5Z#");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("<KbnS3Pbg=3d>KZ", "&OI~</D4;{O@)");
      assertEquals("&OI~</D4;{O@)", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<X<39", "<X<39");
      assertFalse(document0.isBlock());
  }
}
