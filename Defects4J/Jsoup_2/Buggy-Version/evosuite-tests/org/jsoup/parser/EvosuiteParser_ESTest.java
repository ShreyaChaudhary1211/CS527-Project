/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 11:12:19 GMT 2024
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EvosuiteParser_ESTest extends EvosuiteParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<html>\n</html>\n<html>\n<head>\n</head>\n<body>\n</body>\n</html>", "<html>\n</html>\n<html>\n<head>\n</head>\n<body>\n</body>\n</html>");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Parser.parse("<!-x3-", "<!-x3-");
      assertEquals("<!-x3-", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Parser.parse("<![CDATA[", "<![CDATA[");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<!--", "<!--");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Parser.parse("<?", "<?");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Parser.parse("<html>\n<head>\n</head>\n<body>\n <!---->\n</body>\n</html>", "<!--");
      assertEquals("<!--", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      assertEquals("</", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Parser.parse("LV< 0LK2O*qLq/+", "LV< 0LK2O*qLq/+");
      assertEquals("LV< 0LK2O*qLq/+", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Parser.parse("<html>\n<head>\n</head>\n<body> ~~So${FQ\n <hr f=\"\" />\n</body>\n</html>", "~~So${FQ<Hr+F");
      assertEquals("~~So${FQ<Hr+F", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<textarea></textarea>\n<html>\n<head>\n</head>\n<body> textarea\n</body>\n</html>", "<textarea></textarea>\n<html>\n<head>\n</head>\n<body> textarea\n</body>\n</html>");
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Parser.parse("<html>\n<head>\n <title>Uacute</title>\n</head>\n<body> Uacute\n</body>\n</html>", "<html>\n<head>\n <title>Uacute</title>\n</head>\n<body> Uacute\n</body>\n</html>");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Parser.parse("<base />", "<base />");
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rextAr", "Jk!e3F]z{CQ$#='}m52");
      Element element0 = document0.html("<html>\n<head>\n</head>\n<body>\n rextAr\n</body>\n</html><jk!e3f]z{cq$#='}m52>\n</jk!e3f]z{cq$#='}m52>");
      assertEquals("Jk!e3F]z{CQ$#='}m52", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3X<xj&?]rAM=u<Q6t", "3X<xj&?]rAM=u<Q6t");
      assertEquals("3X<xj&?]rAM=u<Q6t", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Parser.parse("<wb=1V@B\"i\u0004:X} `", "929");
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Parser.parse("NX<xj&?]#AM=um6t", "NX<xj&?]#AM=um6t");
      assertEquals("NX<xj&?]#AM=um6t", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Parser.parse("gO)==}U1;$\"</l", "gO)==}U1;$\"</l");
      assertFalse(document0.isBlock());
  }
}
