package org.apache.commons.codec.binary;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RandoopRegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test501");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray18);
        base64_0.encode(byteArray22, 0, 10);
        boolean boolean26 = base64_0.isUrlSafe();
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34);
        base64_0.decode(byteArray34, (int) (short) -1, (int) (byte) 10);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray43 = base64_41.decode("");
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray46 = new byte[] {};
        base64_45.decode(byteArray46, (int) 'a', (-1));
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, true, true, (int) (byte) 100);
        boolean boolean54 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray53);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray53);
        byte[] byteArray56 = base64_41.encode(byteArray55);
        java.lang.String str57 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray55);
        java.lang.String str58 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray55);
        byte[] byteArray59 = base64_0.encode(byteArray55);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
    }

    @Test
    public void test502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test502");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        byte[] byteArray11 = base64_3.decode("");
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_3.decode(byteArray16);
        base64_1.setInitialBuffer(byteArray17, 1, 0);
        int int21 = base64_1.avail();
        byte[] byteArray22 = null;
        byte[] byteArray23 = base64_1.encode(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray26 = new byte[] {};
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, false, 10);
        byte[] byteArray31 = base64_25.decode(byteArray30);
        byte[] byteArray33 = base64_25.decode("");
        byte[] byteArray34 = new byte[] {};
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false, false, 10);
        byte[] byteArray39 = base64_25.decode(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray42 = new byte[] {};
        base64_41.decode(byteArray42, (int) 'a', (-1));
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, true, (int) (byte) 100);
        boolean boolean50 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray49);
        byte[] byteArray51 = base64_25.encode(byteArray49);
        java.lang.String str52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray51);
        byte[] byteArray53 = base64_1.encode(byteArray51);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
    }

    @Test
    public void test503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test503");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(100, byteArray8);
        boolean boolean10 = base64_9.hasData();
        byte[] byteArray12 = base64_9.decode("QUdRQkFBPT0=\r\n");
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray20);
        byte[] byteArray22 = base64_9.encode(byteArray21);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false, false);
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger31);
        boolean boolean33 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray32);
        byte[] byteArray34 = base64_9.decode(byteArray32);
        boolean boolean35 = base64_9.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray40 = new byte[] {};
        base64_39.decode(byteArray40, (int) 'a', (-1));
        byte[] byteArray45 = base64_39.decode("QUdRQkFBPT0");
        byte[] byteArray47 = null;
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64(10, byteArray47);
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray55 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray55, false, false);
        java.math.BigInteger bigInteger59 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray58);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger59);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger59);
        java.lang.Object obj62 = base64_49.encode((java.lang.Object) byteArray61);
        java.lang.Object obj63 = base64_48.encode((java.lang.Object) byteArray61);
        java.lang.Object obj64 = base64_39.encode((java.lang.Object) byteArray61);
        byte[] byteArray65 = base64_37.decode(byteArray61);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj66 = base64_9.decode((java.lang.Object) base64_37);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger59);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-1, 100, 10, -1, 100]");
    }

    @Test
    public void test504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test504");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        byte[] byteArray21 = base64_1.encode(byteArray20);
        int int22 = base64_1.avail();
        boolean boolean23 = base64_1.hasData();
        byte[] byteArray25 = base64_1.decode("QUE=\r\n");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[65, 65]");
    }

    @Test
    public void test505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test505");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false);
        base64_1.setInitialBuffer(byteArray10, (int) '#', (int) (byte) -1);
        byte[] byteArray14 = new byte[] {};
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false, false, 10);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false, false);
        int int25 = base64_1.readResults(byteArray22, (int) (short) -1, (int) (byte) 100);
        byte[] byteArray26 = new byte[] {};
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, false, 10);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, false, false, 100);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray30);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false, false, (int) 'a');
        byte[] byteArray40 = base64_1.decode(byteArray35);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray35);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
    }

    @Test
    public void test506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test506");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray18);
        base64_0.encode(byteArray22, 0, 10);
        byte[] byteArray27 = new byte[] { (byte) 0 };
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false, true);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray30);
        byte[] byteArray32 = base64_0.decode(byteArray30);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false, true, (int) '4');
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, true, false, 76);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[81, 85, 69, 61, 13, 10]");
    }

    @Test
    public void test507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test507");
        byte[] byteArray0 = new byte[] {};
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray0, false, false, 10);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray4);
        boolean boolean7 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
    }

    @Test
    public void test508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test508");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        java.lang.Object obj30 = base64_1.encode((java.lang.Object) byteArray29);
        byte[] byteArray31 = new byte[] {};
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false, 10);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray35);
        java.lang.Object obj37 = base64_1.encode((java.lang.Object) byteArray35);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray35);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray35);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray35);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
    }

    @Test
    public void test509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test509");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(100, byteArray8);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false, false, 10);
        byte[] byteArray18 = base64_12.decode(byteArray17);
        byte[] byteArray20 = base64_12.decode("");
        byte[] byteArray21 = new byte[] {};
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, false, 10);
        byte[] byteArray26 = base64_12.decode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        byte[] byteArray38 = base64_12.encode(byteArray36);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray40);
        java.lang.Object obj42 = base64_9.encode((java.lang.Object) byteArray40);
        int int43 = base64_9.avail();
        byte[] byteArray44 = null;
        base64_9.setInitialBuffer(byteArray44, 0, 0);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test510");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        java.lang.Object obj30 = base64_1.encode((java.lang.Object) byteArray29);
        byte[] byteArray31 = new byte[] {};
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false, 10);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray35);
        java.lang.Object obj37 = base64_1.encode((java.lang.Object) byteArray35);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray40 = new byte[] {};
        base64_39.decode(byteArray40, (int) 'a', (-1));
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40, true, true, (int) (byte) 100);
        boolean boolean48 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray47);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, false, true, (int) (short) 10);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52);
        base64_1.setInitialBuffer(byteArray52, (int) 'a', (int) (short) 100);
        java.math.BigInteger bigInteger57 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray52);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(bigInteger57);
    }

    @Test
    public void test511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test511");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray4 = base64_2.decode("");
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] {};
        base64_6.decode(byteArray7, (int) 'a', (-1));
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, true, true, (int) (byte) 100);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        byte[] byteArray17 = base64_2.encode(byteArray16);
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray16);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray22 = new byte[] {};
        base64_21.decode(byteArray22, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray28 = new byte[] {};
        base64_27.decode(byteArray28, (int) 'a', (-1));
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, true, true, (int) (byte) 100);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, true, false, 1);
        base64_21.setInitialBuffer(byteArray39, (int) (byte) 10, 100);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, false, true, 0);
        byte[] byteArray47 = base64_19.decode(byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray46);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, true, false);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, true, true, (int) (short) 10);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
    }

    @Test
    public void test512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test512");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        java.lang.Object obj30 = base64_1.encode((java.lang.Object) byteArray29);
        byte[] byteArray31 = new byte[] {};
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false, 10);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray35);
        java.lang.Object obj37 = base64_1.encode((java.lang.Object) byteArray35);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        int int42 = base64_1.readResults(byteArray39, (int) (byte) 0, 10);
        boolean boolean43 = base64_1.isUrlSafe();
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray49, false, false);
        java.math.BigInteger bigInteger53 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray52);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray52);
        boolean boolean55 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray54);
        // The following exception was thrown during execution in test generation
        try {
            base64_1.decode(byteArray54, (-1), (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94, 122, 43, -127, -86, 90, 114, 23, -100, -94, 105, -88, -98, -57, 40, 117, -25, 4, -99, -54, 29, 122, -79, 49, 113, -22, 109, -118, -119]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger53);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test513");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) 10);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray6 = new byte[] {};
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false, 10);
        byte[] byteArray11 = base64_5.decode(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray11, false);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64(76, byteArray11, true);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, true, true, (int) (byte) 100);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray20);
        java.lang.Object obj22 = base64_1.decode((java.lang.Object) byteArray20);
        int int23 = base64_1.avail();
        byte[] byteArray28 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, false, false);
        java.lang.String str32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray31);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        base64_1.setInitialBuffer(byteArray31, 10, 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "QUdRQkFBPT0" + "'", str32, "QUdRQkFBPT0");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48]");
    }

    @Test
    public void test514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test514");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 0);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray6 = new byte[] {};
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false, 10);
        byte[] byteArray11 = base64_5.decode(byteArray10);
        byte[] byteArray13 = base64_5.decode("");
        byte[] byteArray14 = new byte[] {};
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false, false, 10);
        byte[] byteArray19 = base64_5.decode(byteArray18);
        base64_3.setInitialBuffer(byteArray19, 1, 0);
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        base64_1.setInitialBuffer(byteArray19, (int) 'a', (int) (short) 10);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, false, 10);
        byte[] byteArray34 = base64_28.decode(byteArray33);
        byte[] byteArray36 = base64_28.decode("");
        byte[] byteArray37 = new byte[] {};
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, false, 10);
        byte[] byteArray42 = base64_28.decode(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray45 = new byte[] {};
        base64_44.decode(byteArray45, (int) 'a', (-1));
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, true, true, (int) (byte) 100);
        boolean boolean53 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray52);
        byte[] byteArray54 = base64_28.encode(byteArray52);
        byte[] byteArray55 = base64_1.decode(byteArray54);
        boolean boolean56 = base64_1.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test515");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        byte[] byteArray21 = base64_1.encode(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray24 = new byte[] {};
        base64_23.decode(byteArray24, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray30 = new byte[] {};
        base64_29.decode(byteArray30, (int) 'a', (-1));
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, true, true, (int) (byte) 100);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, true, false, 1);
        base64_23.setInitialBuffer(byteArray41, (int) (byte) 10, 100);
        byte[] byteArray45 = new byte[] {};
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, false, false, 10);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray49);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray49);
        java.lang.String str52 = base64_23.encodeToString(byteArray51);
        boolean boolean53 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray51);
        java.lang.String str54 = base64_1.encodeToString(byteArray51);
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray57 = new byte[] {};
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57, false, false, 10);
        byte[] byteArray62 = base64_56.decode(byteArray61);
        byte[] byteArray64 = base64_56.decode("");
        byte[] byteArray65 = new byte[] {};
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray65, false, false, 10);
        byte[] byteArray70 = base64_56.decode(byteArray69);
        org.apache.commons.codec.binary.Base64 base64_72 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray73 = new byte[] {};
        base64_72.decode(byteArray73, (int) 'a', (-1));
        byte[] byteArray80 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray73, true, true, (int) (byte) 100);
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray80, true, false, 1);
        java.lang.Object obj85 = base64_56.encode((java.lang.Object) byteArray84);
        byte[] byteArray86 = new byte[] {};
        byte[] byteArray90 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray86, false, false, 10);
        byte[] byteArray91 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray90);
        java.lang.Object obj92 = base64_56.encode((java.lang.Object) byteArray90);
        byte[] byteArray93 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray90);
        byte[] byteArray94 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray90);
        byte[] byteArray95 = base64_1.decode(byteArray94);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertNotNull(obj85);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[]");
        org.junit.Assert.assertNotNull(obj92);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[]");
    }

    @Test
    public void test516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test516");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray23 = new byte[] {};
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false, 10);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.String str30 = base64_1.encodeToString(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_32.decode(byteArray37);
        byte[] byteArray40 = base64_32.decode("");
        byte[] byteArray41 = new byte[] {};
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, false, false, 10);
        byte[] byteArray46 = base64_32.decode(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray46);
        byte[] byteArray48 = base64_1.decode(byteArray46);
        boolean boolean49 = base64_1.hasData();
        byte[] byteArray51 = base64_1.decode("org.apache.commons.codec.DecoderException: ");
        byte[] byteArray53 = base64_1.decode("");
        boolean boolean54 = base64_1.hasData();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test517");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray9 = base64_3.decode("QUdRQkFBPT0");
        java.lang.String str10 = base64_1.encodeToString(byteArray9);
        boolean boolean11 = base64_1.hasData();
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray14 = new byte[] {};
        base64_13.decode(byteArray14, (int) 'a', (-1));
        byte[] byteArray19 = base64_13.decode("QUdRQkFBPT0");
        base64_1.decode(byteArray19, 0, (int) (short) 0);
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray19);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str10, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "QUdRQkFBPT0" + "'", str23, "QUdRQkFBPT0");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61, 13, 10]");
    }

    @Test
    public void test518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test518");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = new byte[] {};
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false, 10);
        byte[] byteArray22 = base64_2.encode(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray27 = new byte[] {};
        base64_26.decode(byteArray27, (int) 'a', (-1));
        byte[] byteArray32 = base64_26.decode("QUdRQkFBPT0");
        java.lang.String str33 = base64_24.encodeToString(byteArray32);
        boolean boolean34 = base64_24.hasData();
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray37 = new byte[] {};
        base64_36.decode(byteArray37, (int) 'a', (-1));
        byte[] byteArray42 = base64_36.decode("QUdRQkFBPT0");
        base64_24.decode(byteArray42, 0, (int) (short) 0);
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray48 = new byte[] {};
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, false, false, 10);
        byte[] byteArray53 = base64_47.decode(byteArray52);
        byte[] byteArray55 = base64_47.decode("");
        byte[] byteArray56 = new byte[] {};
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray56, false, false, 10);
        byte[] byteArray61 = base64_47.decode(byteArray60);
        org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray64 = new byte[] {};
        base64_63.decode(byteArray64, (int) 'a', (-1));
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray64, true, true, (int) (byte) 100);
        boolean boolean72 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray71);
        byte[] byteArray73 = base64_47.encode(byteArray71);
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray71, false);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray75, true, true, (int) '#');
        byte[] byteArray80 = base64_24.decode(byteArray75);
        base64_2.encode(byteArray75, (int) '#', 0);
        org.apache.commons.codec.binary.Base64 base64_84 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray75);
        byte[] byteArray85 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray75);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str33, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
    }

    @Test
    public void test519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test519");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray19 = new byte[] {};
        base64_18.decode(byteArray19, (int) 'a', (-1));
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, true, true, (int) (byte) 100);
        boolean boolean27 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray26);
        byte[] byteArray28 = base64_2.encode(byteArray26);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray26);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray26);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
    }

    @Test
    public void test520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test520");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, false);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger13);
        java.lang.Object obj16 = base64_3.encode((java.lang.Object) byteArray15);
        java.lang.Object obj17 = base64_2.encode((java.lang.Object) byteArray15);
        byte[] byteArray18 = null;
        base64_2.encode(byteArray18, (-1), 0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, false);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray31 = base64_2.decode(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray36 = new byte[] {};
        base64_35.decode(byteArray36, (int) 'a', (-1));
        byte[] byteArray41 = base64_35.decode("QUdRQkFBPT0");
        java.lang.String str42 = base64_33.encodeToString(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray45 = new byte[] {};
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, false, false, 10);
        byte[] byteArray50 = base64_44.decode(byteArray49);
        byte[] byteArray52 = base64_44.decode("");
        byte[] byteArray53 = new byte[] {};
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, false, false, 10);
        byte[] byteArray58 = base64_44.decode(byteArray57);
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray61 = new byte[] {};
        base64_60.decode(byteArray61, (int) 'a', (-1));
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, true, true, (int) (byte) 100);
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray68, true, false, 1);
        java.lang.Object obj73 = base64_44.encode((java.lang.Object) byteArray72);
        byte[] byteArray74 = base64_33.encode(byteArray72);
        org.apache.commons.codec.binary.Base64 base64_77 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray79 = base64_77.decode("");
        org.apache.commons.codec.binary.Base64 base64_81 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray82 = new byte[] {};
        base64_81.decode(byteArray82, (int) 'a', (-1));
        byte[] byteArray89 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray82, true, true, (int) (byte) 100);
        boolean boolean90 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray89);
        byte[] byteArray91 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray89);
        byte[] byteArray92 = base64_77.encode(byteArray91);
        java.lang.String str93 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray91);
        org.apache.commons.codec.binary.Base64 base64_94 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray91);
        byte[] byteArray95 = base64_33.decode(byteArray91);
        int int98 = base64_2.readResults(byteArray95, (int) (short) 1, 76);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str42, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[]");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
    }

    @Test
    public void test521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test521");
        byte[] byteArray0 = new byte[] {};
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray0, false, false, 10);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 100);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray11);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, true, true);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray15);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(bigInteger16);
    }

    @Test
    public void test522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test522");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        java.lang.String str21 = base64_1.encodeToString(byteArray16);
        boolean boolean22 = base64_1.isUrlSafe();
        byte[] byteArray23 = null;
        int int26 = base64_1.readResults(byteArray23, (int) (byte) 1, 76);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        byte[] byteArray37 = base64_1.decode(byteArray29);
        byte[] byteArray38 = null;
        byte[] byteArray39 = base64_1.decode(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray42 = new byte[] {};
        base64_41.decode(byteArray42, (int) 'a', (-1));
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, true, (int) (byte) 100);
        byte[] byteArray50 = base64_1.encode(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray54 = new byte[] {};
        base64_53.decode(byteArray54, (int) 'a', (-1));
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54, true, true, (int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64(100, byteArray61, true);
        byte[] byteArray64 = base64_1.encode(byteArray61);
        org.apache.commons.codec.binary.Base64 base64_66 = new org.apache.commons.codec.binary.Base64(0);
        boolean boolean67 = base64_66.hasData();
        byte[] byteArray68 = new byte[] {};
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray68, false, false, 10);
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray72, false, false, 100);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray72);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray77, true);
        byte[] byteArray80 = base64_66.encode(byteArray77);
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray77);
        int int84 = base64_1.readResults(byteArray81, 0, (int) (short) 1);
        org.apache.commons.codec.DecoderException decoderException86 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.EncoderException encoderException87 = new org.apache.commons.codec.EncoderException((java.lang.Throwable) decoderException86);
        java.lang.Throwable[] throwableArray88 = decoderException86.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj89 = base64_1.encode((java.lang.Object) throwableArray88);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(throwableArray88);
    }

    @Test
    public void test523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test523");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        boolean boolean26 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray25);
        byte[] byteArray27 = base64_1.encode(byteArray25);
        byte[] byteArray29 = base64_1.decode("QUE");
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) (short) 0);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray37 = new byte[] {};
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, false, 10);
        byte[] byteArray42 = base64_36.decode(byteArray41);
        byte[] byteArray44 = base64_36.decode("");
        byte[] byteArray45 = new byte[] {};
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, false, false, 10);
        byte[] byteArray50 = base64_36.decode(byteArray49);
        base64_34.setInitialBuffer(byteArray50, 1, 0);
        java.lang.String str54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray50);
        base64_32.setInitialBuffer(byteArray50, (int) 'a', (int) (short) 10);
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray50);
        base64_1.setInitialBuffer(byteArray50, (int) '4', (int) '#');
        org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_65 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray66 = new byte[] {};
        base64_65.decode(byteArray66, (int) 'a', (-1));
        byte[] byteArray71 = base64_65.decode("QUdRQkFBPT0");
        byte[] byteArray73 = null;
        org.apache.commons.codec.binary.Base64 base64_74 = new org.apache.commons.codec.binary.Base64(10, byteArray73);
        org.apache.commons.codec.binary.Base64 base64_75 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray81 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray81, false, false);
        java.math.BigInteger bigInteger85 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray84);
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger85);
        byte[] byteArray87 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger85);
        java.lang.Object obj88 = base64_75.encode((java.lang.Object) byteArray87);
        java.lang.Object obj89 = base64_74.encode((java.lang.Object) byteArray87);
        java.lang.Object obj90 = base64_65.encode((java.lang.Object) byteArray87);
        byte[] byteArray91 = base64_63.decode(byteArray87);
        java.lang.Object obj92 = base64_1.decode((java.lang.Object) byteArray87);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger85);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertNotNull(obj90);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(obj92);
    }

    @Test
    public void test524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test524");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        int int8 = base64_1.avail();
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_11.decode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64(100, byteArray17);
        byte[] byteArray19 = base64_1.encode(byteArray17);
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray17);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22);
        boolean boolean24 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray22);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test525");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(1, byteArray13, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [?d??d]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100, 10, -1, 100]");
    }

    @Test
    public void test526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test526");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray9 = base64_3.decode("QUdRQkFBPT0");
        java.lang.String str10 = base64_1.encodeToString(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false, false, 10);
        byte[] byteArray18 = base64_12.decode(byteArray17);
        byte[] byteArray20 = base64_12.decode("");
        byte[] byteArray21 = new byte[] {};
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, false, 10);
        byte[] byteArray26 = base64_12.decode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        byte[] byteArray38 = base64_12.encode(byteArray36);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38);
        base64_1.decode(byteArray38, (int) (short) 10, (int) 'a');
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray45 = new byte[] {};
        base64_44.decode(byteArray45, (int) 'a', (-1));
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, true, true, (int) (byte) 100);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray52);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, false, false, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int60 = base64_1.readResults(byteArray53, 100, 76);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str10, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
    }

    @Test
    public void test527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test527");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        base64_2.decode(byteArray3, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray9 = new byte[] {};
        base64_8.decode(byteArray9, (int) 'a', (-1));
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true, true, (int) (byte) 100);
        boolean boolean17 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray16);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, true, (int) (short) 10);
        byte[] byteArray22 = base64_2.encode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) (short) 10, byteArray16, false);
        byte[] byteArray25 = null;
        byte[] byteArray26 = base64_24.decode(byteArray25);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNull(byteArray26);
    }

    @Test
    public void test528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test528");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        java.lang.String str21 = base64_1.encodeToString(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray26 = base64_24.decode("");
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray36);
        byte[] byteArray39 = base64_24.encode(byteArray38);
        java.lang.String str40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray38);
        java.lang.String str42 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray38);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, false);
        byte[] byteArray45 = base64_1.encode(byteArray44);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
    }

    @Test
    public void test529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test529");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        java.lang.String str21 = base64_1.encodeToString(byteArray16);
        boolean boolean22 = base64_1.isUrlSafe();
        byte[] byteArray23 = null;
        int int26 = base64_1.readResults(byteArray23, (int) (byte) 1, 76);
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray31);
        java.lang.String str36 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray31);
        byte[] byteArray37 = base64_1.decode(byteArray31);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, true, true, (int) (byte) 1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 100, 1, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "AGQBAA==\r\n" + "'", str36, "AGQBAA==\r\n");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
    }

    @Test
    public void test530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test530");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, false, false);
        base64_2.setInitialBuffer(byteArray11, (int) '#', (int) (byte) -1);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray18 = base64_16.decode("");
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray21 = new byte[] {};
        base64_20.decode(byteArray21, (int) 'a', (-1));
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, true, true, (int) (byte) 100);
        boolean boolean29 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray28);
        byte[] byteArray31 = base64_16.encode(byteArray30);
        byte[] byteArray32 = base64_2.decode(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray32, false);
        byte[] byteArray36 = new byte[] { (byte) 0 };
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false, true);
        boolean boolean40 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray39);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, true, false, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj45 = base64_34.decode((java.lang.Object) true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[65, 65]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[81, 85, 69, 61, 13, 10]");
    }

    @Test
    public void test531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test531");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray14);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray14);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
    }

    @Test
    public void test532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test532");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        java.lang.Object obj30 = base64_1.encode((java.lang.Object) byteArray29);
        byte[] byteArray31 = new byte[] {};
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false, 10);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray35);
        java.lang.Object obj37 = base64_1.encode((java.lang.Object) byteArray35);
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false, false);
        java.math.BigInteger bigInteger47 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray46);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        byte[] byteArray50 = base64_1.encode(byteArray46);
        java.lang.String str51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray46);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "LzJRSy8yUT0" + "'", str51, "LzJRSy8yUT0");
    }

    @Test
    public void test533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test533");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        int int23 = base64_1.avail();
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray26 = new byte[] {};
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, false, 10);
        byte[] byteArray31 = base64_25.decode(byteArray30);
        byte[] byteArray33 = base64_25.decode("");
        byte[] byteArray34 = new byte[] {};
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false, false, 10);
        byte[] byteArray39 = base64_25.decode(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray42 = new byte[] {};
        base64_41.decode(byteArray42, (int) 'a', (-1));
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, true, (int) (byte) 100);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray49, true, false, 1);
        java.lang.Object obj54 = base64_25.encode((java.lang.Object) byteArray53);
        byte[] byteArray56 = new byte[] { (byte) 0 };
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray56, false, true);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray59);
        int int63 = base64_25.readResults(byteArray59, 1, (int) (short) -1);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59, true, false);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray59);
        base64_1.setInitialBuffer(byteArray67, (int) (short) -1, 14);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[81, 85, 69]");
    }

    @Test
    public void test534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test534");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false, false);
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        java.lang.Object obj29 = base64_0.decode((java.lang.Object) byteArray28);
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false, false);
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        byte[] byteArray40 = base64_0.encode(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray43 = new byte[] {};
        base64_42.decode(byteArray43, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray49 = new byte[] {};
        base64_48.decode(byteArray49, (int) 'a', (-1));
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray49, true, true, (int) (byte) 100);
        boolean boolean57 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray56);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray56, false, true, (int) (short) 10);
        byte[] byteArray62 = base64_42.encode(byteArray56);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj63 = base64_0.encode((java.lang.Object) base64_42);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "QUdRQkFBPT0" + "'", str38, "QUdRQkFBPT0");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
    }

    @Test
    public void test535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test535");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        byte[] byteArray9 = null;
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(10, byteArray9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger21);
        java.lang.Object obj24 = base64_11.encode((java.lang.Object) byteArray23);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray23);
        java.lang.Object obj26 = base64_1.encode((java.lang.Object) byteArray23);
        byte[] byteArray28 = base64_1.decode("org.apache.commons.codec.EncoderException");
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray28);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 73, -36, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 69, 110, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger30);
    }

    @Test
    public void test536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test536");
        byte[] byteArray2 = new byte[] { (byte) 0 };
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, true);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray7, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [UVVFPQ0K]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[85, 86, 86, 70, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[86, 86, 90, 87, 82, 108, 66, 82, 77, 69, 115, 61]");
    }

    @Test
    public void test537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test537");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -63, 39, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-54, -70, 123, -114, 60, -85, 47, 54]");
    }

    @Test
    public void test538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test538");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        byte[] byteArray9 = null;
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(10, byteArray9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger21);
        java.lang.Object obj24 = base64_11.encode((java.lang.Object) byteArray23);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray23);
        java.lang.Object obj26 = base64_1.encode((java.lang.Object) byteArray23);
        byte[] byteArray28 = base64_1.decode("org.apache.commons.codec.EncoderException");
        byte[] byteArray30 = base64_1.decode("");
        byte[] byteArray31 = null;
        int int34 = base64_1.readResults(byteArray31, 76, (int) (short) 1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 73, -36, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test539");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        int int23 = base64_1.avail();
        byte[] byteArray29 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, false);
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger33);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger33);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger33);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger33);
        byte[] byteArray38 = base64_1.encode(byteArray37);
        byte[] byteArray43 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false, false);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray43);
        java.lang.String str48 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray43);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray43);
        base64_1.encode(byteArray49, (int) (short) 10, 0);
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray55 = new byte[] {};
        base64_54.decode(byteArray55, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray61 = new byte[] {};
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, false, false, 10);
        byte[] byteArray66 = base64_60.decode(byteArray65);
        byte[] byteArray68 = base64_60.decode("");
        byte[] byteArray69 = new byte[] {};
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray69, false, false, 10);
        byte[] byteArray74 = base64_60.decode(byteArray73);
        org.apache.commons.codec.binary.Base64 base64_76 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray77 = new byte[] {};
        base64_76.decode(byteArray77, (int) 'a', (-1));
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray77, true, true, (int) (byte) 100);
        byte[] byteArray88 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray84, true, false, 1);
        java.lang.Object obj89 = base64_60.encode((java.lang.Object) byteArray88);
        byte[] byteArray90 = new byte[] {};
        byte[] byteArray94 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray90, false, false, 10);
        byte[] byteArray95 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray94);
        java.lang.Object obj96 = base64_60.encode((java.lang.Object) byteArray94);
        java.lang.Object obj97 = base64_54.encode((java.lang.Object) byteArray94);
        java.lang.String str98 = base64_1.encodeToString(byteArray94);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[47, 50, 81, 75, 47, 50, 81, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 100, 1, 0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "AGQBAA==\r\n" + "'", str48, "AGQBAA==\r\n");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[]");
        org.junit.Assert.assertNotNull(obj96);
        org.junit.Assert.assertNotNull(obj97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "" + "'", str98, "");
    }

    @Test
    public void test540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test540");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray9 = base64_3.decode("QUdRQkFBPT0");
        java.lang.String str10 = base64_1.encodeToString(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false, false, 10);
        byte[] byteArray18 = base64_12.decode(byteArray17);
        byte[] byteArray20 = base64_12.decode("");
        byte[] byteArray21 = new byte[] {};
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, false, 10);
        byte[] byteArray26 = base64_12.decode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, true, false, 1);
        java.lang.Object obj41 = base64_12.encode((java.lang.Object) byteArray40);
        byte[] byteArray42 = base64_1.encode(byteArray40);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray47 = base64_45.decode("");
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray50 = new byte[] {};
        base64_49.decode(byteArray50, (int) 'a', (-1));
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, true, true, (int) (byte) 100);
        boolean boolean58 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray57);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray57);
        byte[] byteArray60 = base64_45.encode(byteArray59);
        java.lang.String str61 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray59);
        org.apache.commons.codec.binary.Base64 base64_62 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray59);
        byte[] byteArray63 = base64_1.decode(byteArray59);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59, false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str10, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
    }

    @Test
    public void test541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test541");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        base64_2.decode(byteArray3, (int) 'a', (-1));
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray3, true);
        byte[] byteArray10 = null;
        int int13 = base64_9.readResults(byteArray10, (int) (byte) 10, 0);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test542");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("VVZWRg==");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[85, 86, 86, 70]");
    }

    @Test
    public void test543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test543");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        java.lang.Object obj30 = base64_1.encode((java.lang.Object) byteArray29);
        byte[] byteArray31 = new byte[] {};
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false, 10);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray35);
        java.lang.Object obj37 = base64_1.encode((java.lang.Object) byteArray35);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.EncoderException: org.apache.commons.codec.DecoderException: ");
        java.lang.String str40 = base64_1.encodeToString(byteArray39);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 73, -36, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "orgapachecommonscodecEncoderExceptionorgapachecommonscodecDecoderExceptiog==\r\n" + "'", str40, "orgapachecommonscodecEncoderExceptionorgapachecommonscodecDecoderExceptiog==\r\n");
    }

    @Test
    public void test544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test544");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray8, false);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        base64_12.decode(byteArray13, (int) 'a', (-1));
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, true, true, (int) (byte) 100);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, true, false, 1);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray20);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray27);
        base64_10.decode(byteArray28, 76, 1);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray34 = new byte[] {};
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false, false, 10);
        byte[] byteArray39 = base64_33.decode(byteArray38);
        int int40 = base64_33.avail();
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray44 = new byte[] {};
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false, false, 10);
        byte[] byteArray49 = base64_43.decode(byteArray48);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64(100, byteArray49);
        byte[] byteArray51 = base64_33.encode(byteArray49);
        java.math.BigInteger bigInteger52 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray49);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray49);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray53);
        byte[] byteArray55 = base64_10.decode(byteArray53);
        byte[] byteArray57 = new byte[] { (byte) 0 };
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57, false, true);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray60);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray60);
        java.lang.Object obj63 = base64_10.decode((java.lang.Object) byteArray60);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94, 122, 43, -127, -86, 90, 114, 23, -100, -94, 105, -88, -98, -57, 40, 117, -25, 4, -99, -54, 29, 122, -79, 49, 113, -22, 109, -118, -119]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 111, 114, 13, 10, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 69, 110, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 107, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(bigInteger52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[0]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0]");
        org.junit.Assert.assertNotNull(obj63);
    }

    @Test
    public void test545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test545");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        boolean boolean8 = base64_1.isUrlSafe();
        boolean boolean9 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray14 = new byte[] {};
        base64_13.decode(byteArray14, (int) 'a', (-1));
        byte[] byteArray19 = base64_13.decode("QUdRQkFBPT0");
        java.lang.String str20 = base64_11.encodeToString(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray19);
        base64_1.setInitialBuffer(byteArray19, (int) ' ', (int) (byte) 0);
        byte[] byteArray26 = new byte[] { (byte) 0 };
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, true);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray29);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, true, true);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false, false);
        base64_1.decode(byteArray38, (int) (short) 10, (int) (byte) 1);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray45 = new byte[] {};
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, false, false, 10);
        byte[] byteArray50 = base64_44.decode(byteArray49);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64(100, byteArray50);
        boolean boolean52 = base64_51.hasData();
        byte[] byteArray54 = base64_51.decode("QUdRQkFBPT0=\r\n");
        byte[] byteArray59 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59, false, false);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray62);
        byte[] byteArray64 = base64_51.encode(byteArray63);
        byte[] byteArray66 = base64_51.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.DecoderException: ");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj67 = base64_1.encode((java.lang.Object) "org.apache.commons.codec.EncoderException: org.apache.commons.codec.DecoderException: ");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str20, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[85, 86, 86, 70, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[85, 86, 86, 70, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 73, -36, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94]");
    }

    @Test
    public void test546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test546");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, false);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger13);
        java.lang.Object obj16 = base64_3.encode((java.lang.Object) byteArray15);
        java.lang.Object obj17 = base64_2.encode((java.lang.Object) byteArray15);
        byte[] byteArray18 = null;
        base64_2.encode(byteArray18, (-1), 0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, false);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray31 = base64_2.decode(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray37 = new byte[] {};
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, false, 10);
        byte[] byteArray42 = base64_36.decode(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray42, false);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64(76, byteArray42, true);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, true, (int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64((-1), byteArray51);
        int int55 = base64_2.readResults(byteArray51, 100, (int) (short) 10);
        byte[] byteArray56 = null;
        int int59 = base64_2.readResults(byteArray56, (int) (short) 1, (int) (byte) 1);
        boolean boolean60 = base64_2.isUrlSafe();
        boolean boolean61 = base64_2.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test547");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray3 = base64_1.decode("");
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray6 = new byte[] {};
        base64_5.decode(byteArray6, (int) 'a', (-1));
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, true, true, (int) (byte) 100);
        boolean boolean14 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        byte[] byteArray16 = base64_1.encode(byteArray15);
        byte[] byteArray17 = new byte[] {};
        int int20 = base64_1.readResults(byteArray17, 1, (int) '4');
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray23 = new byte[] {};
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false, 10);
        byte[] byteArray28 = base64_22.decode(byteArray27);
        byte[] byteArray30 = base64_22.decode("");
        byte[] byteArray31 = new byte[] {};
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false, 10);
        byte[] byteArray36 = base64_22.decode(byteArray35);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray39 = new byte[] {};
        base64_38.decode(byteArray39, (int) 'a', (-1));
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, true, true, (int) (byte) 100);
        boolean boolean47 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray46);
        byte[] byteArray48 = base64_22.encode(byteArray46);
        byte[] byteArray49 = base64_1.decode(byteArray46);
        byte[] byteArray51 = new byte[] { (byte) 0 };
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, false, true);
        boolean boolean55 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray54);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54, true, false, (int) '#');
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59, false, true);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray62);
        java.math.BigInteger bigInteger64 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray62);
        java.lang.Object obj65 = base64_1.encode((java.lang.Object) byteArray62);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[65, 65]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[85, 86, 86, 70, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger64);
        org.junit.Assert.assertNotNull(obj65);
    }

    @Test
    public void test548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test548");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100, 10, -1, 100]");
    }

    @Test
    public void test549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test549");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        java.lang.Object obj30 = base64_1.encode((java.lang.Object) byteArray29);
        byte[] byteArray32 = new byte[] { (byte) 0 };
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false, true);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray35);
        int int39 = base64_1.readResults(byteArray35, 1, (int) (short) -1);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray42 = new byte[] {};
        base64_41.decode(byteArray42, (int) 'a', (-1));
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, false, false);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray50);
        byte[] byteArray55 = base64_41.encode(byteArray50);
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray58 = new byte[] {};
        base64_57.decode(byteArray58, (int) 'a', (-1));
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray58, true, true, (int) (byte) 100);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray65, true, false, 1);
        byte[] byteArray70 = base64_41.encode(byteArray69);
        byte[] byteArray71 = base64_1.decode(byteArray70);
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray76, false, false);
        java.math.BigInteger bigInteger80 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray76);
        java.lang.Object obj81 = base64_1.encode((java.lang.Object) byteArray76);
        byte[] byteArray83 = base64_1.decode("QUE");
        int int84 = base64_1.avail();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger80);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[65, 65]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test550");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        int int8 = base64_1.avail();
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_11.decode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64(100, byteArray17);
        byte[] byteArray19 = base64_1.encode(byteArray17);
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray17);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
    }

    @Test
    public void test551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test551");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(100, byteArray8);
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false, false);
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray17);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray17);
        byte[] byteArray21 = base64_9.decode(byteArray17);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "QUdRQkFBPT0" + "'", str18, "QUdRQkFBPT0");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 100, 1, 0]");
    }

    @Test
    public void test552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test552");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("AGQBAA==\r\n");
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, true);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61, 13, 10]");
    }

    @Test
    public void test553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test553");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(100, byteArray8);
        boolean boolean10 = base64_9.hasData();
        byte[] byteArray12 = base64_9.decode("QUdRQkFBPT0=\r\n");
        byte[] byteArray13 = null;
        base64_9.encode(byteArray13, (int) '4', 10);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray19 = new byte[] {};
        base64_18.decode(byteArray19, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray25 = new byte[] {};
        base64_24.decode(byteArray25, (int) 'a', (-1));
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, true, (int) (byte) 100);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, true, false, 1);
        base64_18.setInitialBuffer(byteArray36, (int) (byte) 10, 100);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false, false);
        base64_18.setInitialBuffer(byteArray44, 100, 1);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray53 = new byte[] {};
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, false, false, 10);
        byte[] byteArray58 = base64_52.decode(byteArray57);
        base64_18.encode(byteArray58, (-1), 76);
        java.lang.String str62 = base64_9.encodeToString(byteArray58);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test554");
        byte[] byteArray0 = new byte[] {};
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray0, false, false, 10);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 100);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, false, (int) 'a');
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray13);
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray14);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
    }

    @Test
    public void test555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test555");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        boolean boolean16 = base64_1.isUrlSafe();
        byte[] byteArray18 = new byte[] {};
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false, 10);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64(0, byteArray25);
        java.lang.String str27 = base64_1.encodeToString(byteArray25);
        boolean boolean28 = base64_1.hasData();
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray31 = new byte[] {};
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false, 10);
        byte[] byteArray36 = base64_30.decode(byteArray35);
        byte[] byteArray38 = base64_30.decode("");
        byte[] byteArray39 = new byte[] {};
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, false, false, 10);
        byte[] byteArray44 = base64_30.decode(byteArray43);
        boolean boolean45 = base64_30.isUrlSafe();
        byte[] byteArray47 = new byte[] {};
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, false, false, 10);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray51);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray51);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53);
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64(0, byteArray54);
        java.lang.String str56 = base64_30.encodeToString(byteArray54);
        byte[] byteArray58 = new byte[] { (byte) 0 };
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray58, false, true);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray61);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, true);
        int int67 = base64_30.readResults(byteArray61, 0, (int) (short) 100);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray61);
        java.lang.String str69 = base64_1.encodeToString(byteArray68);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[65, 65]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "QUE=\r\n" + "'", str69, "QUE=\r\n");
    }

    @Test
    public void test556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test556");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        boolean boolean2 = base64_1.isUrlSafe();
        boolean boolean3 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] {};
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false, 10);
        byte[] byteArray12 = base64_6.decode(byteArray11);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64(100, byteArray12);
        int int16 = base64_1.readResults(byteArray12, 1, (int) (byte) 1);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, 0);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray22);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
    }

    @Test
    public void test557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test557");
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray6);
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray6);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray6);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray6);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64(10, byteArray6);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
    }

    @Test
    public void test558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test558");
        byte[] byteArray1 = new byte[] {};
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, false, 10);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false, 100);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray5, false);
        java.lang.Class<?> wildcardClass12 = byteArray5.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test559");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        boolean boolean16 = base64_1.isUrlSafe();
        byte[] byteArray18 = new byte[] {};
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false, 10);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64(0, byteArray25);
        java.lang.String str27 = base64_1.encodeToString(byteArray25);
        byte[] byteArray29 = new byte[] { (byte) 0 };
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, true);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray32);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, true);
        int int38 = base64_1.readResults(byteArray32, 0, (int) (short) 100);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray43 = new byte[] {};
        base64_42.decode(byteArray43, (int) 'a', (-1));
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, false, false);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray51);
        byte[] byteArray56 = base64_42.encode(byteArray51);
        java.lang.Object obj57 = base64_40.encode((java.lang.Object) byteArray51);
        byte[] byteArray59 = base64_40.decode("LzJRSy8yUT0");
        org.apache.commons.codec.binary.Base64 base64_62 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray63 = new byte[] {};
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray63, false, false, 10);
        byte[] byteArray68 = base64_62.decode(byteArray67);
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64(100, byteArray68);
        boolean boolean70 = base64_69.hasData();
        byte[] byteArray72 = base64_69.decode("QUdRQkFBPT0=\r\n");
        byte[] byteArray73 = base64_40.decode(byteArray72);
        java.lang.String str74 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray72);
        byte[] byteArray75 = base64_1.encode(byteArray72);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray72, false);
        java.lang.String str78 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray77);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 100, 1, 0]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str74, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "UVVkUlFrRkJQVDA9" + "'", str78, "UVVkUlFrRkJQVDA9");
    }

    @Test
    public void test560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test560");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 0);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray6 = new byte[] {};
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false, 10);
        byte[] byteArray11 = base64_5.decode(byteArray10);
        byte[] byteArray13 = base64_5.decode("");
        byte[] byteArray14 = new byte[] {};
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false, false, 10);
        byte[] byteArray19 = base64_5.decode(byteArray18);
        base64_3.setInitialBuffer(byteArray19, 1, 0);
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        base64_1.setInitialBuffer(byteArray19, (int) 'a', (int) (short) 10);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        boolean boolean29 = base64_28.isUrlSafe();
        boolean boolean30 = base64_28.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray34 = new byte[] {};
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false, false, 10);
        byte[] byteArray39 = base64_33.decode(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64(100, byteArray39);
        int int43 = base64_28.readResults(byteArray39, 1, (int) (byte) 1);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, false);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, true, true, 0);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray45);
        byte[] byteArray51 = base64_1.encode(byteArray50);
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray55 = new byte[] {};
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray55, false, false, 10);
        byte[] byteArray60 = base64_54.decode(byteArray59);
        byte[] byteArray62 = base64_54.decode("");
        byte[] byteArray63 = new byte[] {};
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray63, false, false, 10);
        byte[] byteArray68 = base64_54.decode(byteArray67);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray68);
        org.apache.commons.codec.binary.Base64 base64_71 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray69, false);
        byte[] byteArray72 = new byte[] {};
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray72);
        byte[] byteArray74 = base64_71.decode(byteArray72);
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray74);
        java.lang.Object obj76 = base64_1.decode((java.lang.Object) byteArray74);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(obj76);
    }

    @Test
    public void test561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test561");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger11);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger11);
        java.lang.Object obj14 = base64_1.encode((java.lang.Object) byteArray13);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false, false);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray19);
        base64_1.encode(byteArray23, 0, 10);
        byte[] byteArray28 = new byte[] { (byte) 0 };
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, false, true);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray31);
        byte[] byteArray33 = base64_1.decode(byteArray31);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, true, (int) '4');
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64(10, byteArray33, true);
        int int40 = base64_39.avail();
        boolean boolean41 = base64_39.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray44 = new byte[] {};
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false, false, 10);
        byte[] byteArray49 = base64_43.decode(byteArray48);
        byte[] byteArray51 = base64_43.decode("");
        byte[] byteArray52 = new byte[] {};
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52, false, false, 10);
        byte[] byteArray57 = base64_43.decode(byteArray56);
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray60 = new byte[] {};
        base64_59.decode(byteArray60, (int) 'a', (-1));
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray60, true, true, (int) (byte) 100);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray67, true, false, 1);
        java.lang.Object obj72 = base64_43.encode((java.lang.Object) byteArray71);
        byte[] byteArray73 = new byte[] {};
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray73, false, false, 10);
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray77);
        java.lang.Object obj79 = base64_43.encode((java.lang.Object) byteArray77);
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray77, false);
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray81, false, false);
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray84, false);
        // The following exception was thrown during execution in test generation
        try {
            base64_39.encode(byteArray84, (int) (byte) 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[65, 65]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
    }

    @Test
    public void test562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test562");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray18);
        base64_0.encode(byteArray22, 0, 10);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray30 = new byte[] {};
        base64_29.decode(byteArray30, (int) 'a', (-1));
        byte[] byteArray38 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, false, false);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray38);
        byte[] byteArray43 = base64_29.encode(byteArray38);
        java.lang.Object obj44 = base64_27.encode((java.lang.Object) byteArray38);
        byte[] byteArray50 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, false, false);
        java.math.BigInteger bigInteger54 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray53);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray53);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray53);
        byte[] byteArray57 = base64_27.encode(byteArray53);
        byte[] byteArray58 = base64_0.encode(byteArray57);
        org.apache.commons.codec.EncoderException encoderException61 = new org.apache.commons.codec.EncoderException();
        java.lang.Throwable[] throwableArray62 = encoderException61.getSuppressed();
        org.apache.commons.codec.DecoderException decoderException63 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) encoderException61);
        org.apache.commons.codec.EncoderException encoderException64 = new org.apache.commons.codec.EncoderException("QUE", (java.lang.Throwable) decoderException63);
        org.apache.commons.codec.EncoderException encoderException65 = new org.apache.commons.codec.EncoderException("org.apache.commons.codec.DecoderException: ", (java.lang.Throwable) encoderException64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj66 = base64_0.decode((java.lang.Object) encoderException64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[84, 72, 112, 75, 85, 108, 78, 53, 79, 72, 108, 86, 86, 68, 65, 57, 68, 81, 111, 61, 13, 10]");
        org.junit.Assert.assertNotNull(throwableArray62);
    }

    @Test
    public void test563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test563");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, false);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger13);
        java.lang.Object obj16 = base64_3.encode((java.lang.Object) byteArray15);
        java.lang.Object obj17 = base64_2.encode((java.lang.Object) byteArray15);
        byte[] byteArray18 = null;
        base64_2.encode(byteArray18, (-1), 0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, false);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray31 = base64_2.decode(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray37 = new byte[] {};
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, false, 10);
        byte[] byteArray42 = base64_36.decode(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray42, false);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64(76, byteArray42, true);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, true, (int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64((-1), byteArray51);
        int int55 = base64_2.readResults(byteArray51, 100, (int) (short) 10);
        byte[] byteArray57 = new byte[] { (byte) 0 };
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57, false, true);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray60);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray61);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, false);
        byte[] byteArray65 = base64_2.encode(byteArray62);
        int int66 = base64_2.avail();
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray74 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray74, false, false);
        base64_68.setInitialBuffer(byteArray77, (int) '#', (int) (byte) -1);
        org.apache.commons.codec.binary.Base64 base64_82 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray84 = base64_82.decode("");
        org.apache.commons.codec.binary.Base64 base64_86 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray87 = new byte[] {};
        base64_86.decode(byteArray87, (int) 'a', (-1));
        byte[] byteArray94 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray87, true, true, (int) (byte) 100);
        boolean boolean95 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray94);
        byte[] byteArray96 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray94);
        byte[] byteArray97 = base64_82.encode(byteArray96);
        byte[] byteArray98 = base64_68.decode(byteArray97);
        java.lang.String str99 = base64_2.encodeToString(byteArray97);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[85, 86, 86, 70, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[86, 86, 90, 87, 82, 108, 66, 82, 77, 69, 115, 61]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[86, 86, 90, 87, 82, 108, 66, 82, 77, 69, 115, 61]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 12 + "'", int66 == 12);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[]");
        org.junit.Assert.assertNotNull(byteArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray97), "[]");
        org.junit.Assert.assertNotNull(byteArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray98), "[]");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test564");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, false);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger13);
        java.lang.Object obj16 = base64_3.encode((java.lang.Object) byteArray15);
        java.lang.Object obj17 = base64_2.encode((java.lang.Object) byteArray15);
        byte[] byteArray18 = null;
        base64_2.encode(byteArray18, (-1), 0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, false);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray31 = base64_2.decode(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray38 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, false, false);
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger42);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger42);
        java.lang.Object obj45 = base64_32.encode((java.lang.Object) byteArray44);
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, false, false);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray50);
        base64_32.encode(byteArray54, 0, 10);
        byte[] byteArray59 = new byte[] { (byte) 0 };
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59, false, true);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray62);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, true);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray65, true, true);
        base64_32.encode(byteArray68, (int) (short) -1, (int) (byte) 0);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: ");
        base64_32.decode(byteArray73, 10, 1);
        java.lang.String str77 = base64_2.encodeToString(byteArray73);
        java.lang.String str78 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray73);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[85, 86, 86, 70, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "orgapachecommonscodecDecoderExceptionorgapachecommonscodecDecoderExceptiog==" + "'", str77, "orgapachecommonscodecDecoderExceptionorgapachecommonscodecDecoderExceptiog==");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "orgapachecommonscodecDecoderExceptionorgapachecommonscodecDecoderExceptiog" + "'", str78, "orgapachecommonscodecDecoderExceptionorgapachecommonscodecDecoderExceptiog");
    }

    @Test
    public void test565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test565");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray8, false);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        base64_12.decode(byteArray13, (int) 'a', (-1));
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, true, true, (int) (byte) 100);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, true, false, 1);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray20);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray20);
        boolean boolean27 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray20);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test566");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray8, false);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        base64_12.decode(byteArray13, (int) 'a', (-1));
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, true, true, (int) (byte) 100);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, true, false, 1);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray20);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray27);
        base64_10.decode(byteArray28, 76, 1);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray35 = new byte[] {};
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false, false, 10);
        byte[] byteArray40 = base64_34.decode(byteArray39);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64(100, byteArray40);
        boolean boolean42 = base64_41.hasData();
        byte[] byteArray44 = base64_41.decode("QUdRQkFBPT0=\r\n");
        java.lang.String str45 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray44);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray44);
        byte[] byteArray47 = base64_10.encode(byteArray46);
        org.apache.commons.codec.binary.Base64 base64_49 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray50 = new byte[] {};
        base64_49.decode(byteArray50, (int) 'a', (-1));
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, true, true, (int) (byte) 100);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57, true, false, 1);
        java.lang.String str62 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray57);
        java.lang.String str63 = base64_10.encodeToString(byteArray57);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94, 122, 43, -127, -86, 90, 114, 23, -100, -94, 105, -88, -98, -57, 40, 117, -25, 4, -99, -54, 29, 122, -79, 49, 113, -22, 109, -118, -119]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 111, 114, 13, 10, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 69, 110, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 107, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str45, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[85, 86, 86, 107, 85, 108, 70, 114, 82, 107, 74, 81, 86, 68, 65, 61]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
    }

    @Test
    public void test567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test567");
        byte[] byteArray4 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false);
        java.math.BigInteger bigInteger8 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger8);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
    }

    @Test
    public void test568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test568");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        base64_2.decode(byteArray3, (int) 'a', (-1));
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, true, true, (int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64(100, byteArray10, true);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray15 = new byte[] {};
        base64_14.decode(byteArray15, (int) 'a', (-1));
        byte[] byteArray20 = base64_14.decode("QUdRQkFBPT0");
        byte[] byteArray22 = null;
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64(10, byteArray22);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, false, false);
        java.math.BigInteger bigInteger34 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray33);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger34);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger34);
        java.lang.Object obj37 = base64_24.encode((java.lang.Object) byteArray36);
        java.lang.Object obj38 = base64_23.encode((java.lang.Object) byteArray36);
        java.lang.Object obj39 = base64_14.encode((java.lang.Object) byteArray36);
        byte[] byteArray41 = base64_14.decode("org.apache.commons.codec.EncoderException");
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray41);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray41);
        base64_12.encode(byteArray41, 10, (int) (byte) -1);
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64(true);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray51 = new byte[] {};
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, false, false, 10);
        byte[] byteArray56 = base64_50.decode(byteArray55);
        byte[] byteArray58 = base64_50.decode("");
        byte[] byteArray59 = new byte[] {};
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59, false, false, 10);
        byte[] byteArray64 = base64_50.decode(byteArray63);
        org.apache.commons.codec.binary.Base64 base64_66 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray67 = new byte[] {};
        base64_66.decode(byteArray67, (int) 'a', (-1));
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray67, true, true, (int) (byte) 100);
        boolean boolean75 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray74);
        byte[] byteArray76 = base64_50.encode(byteArray74);
        byte[] byteArray77 = base64_48.decode(byteArray74);
        java.lang.String str78 = base64_12.encodeToString(byteArray77);
        byte[] byteArray79 = new byte[] {};
        byte[] byteArray83 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray79, false, false, 10);
        byte[] byteArray87 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray83, false, false, 100);
        byte[] byteArray88 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray83);
        byte[] byteArray90 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray88, true);
        base64_12.encode(byteArray88, 0, (-1));
        byte[] byteArray94 = null;
        byte[] byteArray95 = base64_12.encode(byteArray94);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 73, -36, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 69, 110, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 69, 110, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertNull(byteArray95);
    }

    @Test
    public void test569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test569");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, false);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger13);
        java.lang.Object obj16 = base64_3.encode((java.lang.Object) byteArray15);
        java.lang.Object obj17 = base64_2.encode((java.lang.Object) byteArray15);
        byte[] byteArray18 = null;
        base64_2.encode(byteArray18, (-1), 0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, false);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray31 = base64_2.decode(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray38 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, false, false);
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger42);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger42);
        java.lang.Object obj45 = base64_32.encode((java.lang.Object) byteArray44);
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, false, false);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray50);
        base64_32.encode(byteArray54, 0, 10);
        byte[] byteArray59 = new byte[] { (byte) 0 };
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59, false, true);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray62);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, true);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray65, true, true);
        base64_32.encode(byteArray68, (int) (short) -1, (int) (byte) 0);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: ");
        base64_32.decode(byteArray73, 10, 1);
        java.lang.String str77 = base64_2.encodeToString(byteArray73);
        byte[] byteArray79 = new byte[] { (byte) 0 };
        byte[] byteArray82 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray79, false, true);
        byte[] byteArray83 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray82);
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray83);
        byte[] byteArray85 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray84);
        byte[] byteArray88 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray85, false, false);
        // The following exception was thrown during execution in test generation
        try {
            int int91 = base64_2.readResults(byteArray85, 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[85, 86, 86, 70, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "orgapachecommonscodecDecoderExceptionorgapachecommonscodecDecoderExceptiog==" + "'", str77, "orgapachecommonscodecDecoderExceptionorgapachecommonscodecDecoderExceptiog==");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[0]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[85, 86, 86, 70, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[86, 86, 90, 87, 82, 108, 66, 82, 77, 69, 115, 61]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[86, 108, 90, 97, 86, 49, 74, 115, 81, 108, 74, 78, 82, 88, 77, 57]");
    }

    @Test
    public void test570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test570");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger11);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100, 81, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100, 81, 61, 61]");
    }

    @Test
    public void test571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test571");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, false);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger13);
        java.lang.Object obj16 = base64_3.encode((java.lang.Object) byteArray15);
        java.lang.Object obj17 = base64_2.encode((java.lang.Object) byteArray15);
        byte[] byteArray18 = null;
        base64_2.encode(byteArray18, (-1), 0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, false);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray31 = base64_2.decode(byteArray26);
        boolean boolean32 = base64_2.isUrlSafe();
        boolean boolean33 = base64_2.hasData();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test572");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        byte[] byteArray11 = base64_3.decode("");
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_3.decode(byteArray16);
        base64_1.setInitialBuffer(byteArray17, 1, 0);
        int int21 = base64_1.avail();
        byte[] byteArray22 = null;
        byte[] byteArray23 = base64_1.encode(byteArray22);
        byte[] byteArray24 = null;
        int int27 = base64_1.readResults(byteArray24, (int) (short) 10, (int) (short) 1);
        boolean boolean28 = base64_1.hasData();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test573");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray19 = new byte[] {};
        base64_18.decode(byteArray19, (int) 'a', (-1));
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, true, true, (int) (byte) 100);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, true, false, 1);
        java.lang.Object obj31 = base64_2.encode((java.lang.Object) byteArray30);
        byte[] byteArray32 = new byte[] {};
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false, false, 10);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray36);
        java.lang.Object obj38 = base64_2.encode((java.lang.Object) byteArray36);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64(0, byteArray36);
        byte[] byteArray41 = null;
        byte[] byteArray42 = base64_40.encode(byteArray41);
        boolean boolean43 = base64_40.hasData();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test574");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        int int23 = base64_1.avail();
        byte[] byteArray29 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, false);
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger33);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger33);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger33);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger33);
        byte[] byteArray38 = base64_1.encode(byteArray37);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, true, true, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (10) than the specified maxium size of -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[47, 50, 81, 75, 47, 50, 81, 61, 13, 10]");
    }

    @Test
    public void test575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test575");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        java.lang.Object obj2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj3 = base64_1.encode(obj2);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
    }

    @Test
    public void test576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test576");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        boolean boolean16 = base64_1.isUrlSafe();
        byte[] byteArray18 = new byte[] {};
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false, 10);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64(0, byteArray25);
        java.lang.String str27 = base64_1.encodeToString(byteArray25);
        byte[] byteArray29 = new byte[] { (byte) 0 };
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, true);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray32);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, true);
        int int38 = base64_1.readResults(byteArray32, 0, (int) (short) 100);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray43 = new byte[] {};
        base64_42.decode(byteArray43, (int) 'a', (-1));
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, false, false);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray51);
        byte[] byteArray56 = base64_42.encode(byteArray51);
        java.lang.Object obj57 = base64_40.encode((java.lang.Object) byteArray51);
        byte[] byteArray59 = base64_40.decode("LzJRSy8yUT0");
        org.apache.commons.codec.binary.Base64 base64_62 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray63 = new byte[] {};
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray63, false, false, 10);
        byte[] byteArray68 = base64_62.decode(byteArray67);
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64(100, byteArray68);
        boolean boolean70 = base64_69.hasData();
        byte[] byteArray72 = base64_69.decode("QUdRQkFBPT0=\r\n");
        byte[] byteArray73 = base64_40.decode(byteArray72);
        java.lang.String str74 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray72);
        byte[] byteArray75 = base64_1.encode(byteArray72);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray72, false);
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray72);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0, 100, 1, 0]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str74, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[65, 71, 81, 66, 65, 65, 61, 61]");
    }

    @Test
    public void test577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test577");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) 10);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray6 = new byte[] {};
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false, 10);
        byte[] byteArray11 = base64_5.decode(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray11, false);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64(76, byteArray11, true);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, true, true, (int) (byte) 100);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray20);
        java.lang.Object obj22 = base64_1.decode((java.lang.Object) byteArray20);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray20);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
    }

    @Test
    public void test578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test578");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        base64_2.decode(byteArray3, (int) 'a', (-1));
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray3, true);
        byte[] byteArray10 = null;
        byte[] byteArray11 = base64_9.encode(byteArray10);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNull(byteArray11);
    }

    @Test
    public void test579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test579");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true, true, (int) (byte) 100);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true, false, 1);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false, false, (int) (byte) 0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
    }

    @Test
    public void test580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test580");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        java.lang.Object obj30 = base64_1.encode((java.lang.Object) byteArray29);
        byte[] byteArray32 = new byte[] { (byte) 0 };
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false, true);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray35);
        int int39 = base64_1.readResults(byteArray35, 1, (int) (short) -1);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray42 = new byte[] {};
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, false, false, 10);
        byte[] byteArray47 = base64_41.decode(byteArray46);
        byte[] byteArray49 = base64_41.decode("");
        byte[] byteArray50 = new byte[] {};
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, false, false, 10);
        byte[] byteArray55 = base64_41.decode(byteArray54);
        byte[] byteArray56 = new byte[] {};
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray56, false, false, 10);
        java.lang.String str61 = base64_41.encodeToString(byteArray56);
        boolean boolean62 = base64_41.isUrlSafe();
        byte[] byteArray63 = null;
        int int66 = base64_41.readResults(byteArray63, (int) (byte) 1, 76);
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray69 = new byte[] {};
        base64_68.decode(byteArray69, (int) 'a', (-1));
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray69, true, true, (int) (byte) 100);
        byte[] byteArray77 = base64_41.decode(byteArray69);
        java.lang.Object obj78 = base64_1.decode((java.lang.Object) byteArray77);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray77);
        byte[] byteArray80 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray79);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
    }

    @Test
    public void test581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test581");
        byte[] byteArray1 = new byte[] {};
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, false, 10);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false, (int) (short) 0);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray11, false);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
    }

    @Test
    public void test582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test582");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, false);
        base64_3.setInitialBuffer(byteArray12, (int) '#', (int) (byte) -1);
        byte[] byteArray16 = null;
        base64_3.setInitialBuffer(byteArray16, (int) (short) 100, (int) (short) 100);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, false);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray29);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger30);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger30);
        java.lang.Object obj33 = base64_20.encode((java.lang.Object) byteArray32);
        byte[] byteArray38 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, false, false);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray38);
        base64_20.encode(byteArray42, 0, 10);
        byte[] byteArray47 = new byte[] { (byte) 0 };
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, false, true);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray50);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, true);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, true, true);
        base64_20.encode(byteArray56, (int) (short) -1, (int) (byte) 0);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: ");
        base64_20.decode(byteArray61, 10, 1);
        byte[] byteArray65 = base64_3.decode(byteArray61);
        byte[] byteArray66 = base64_1.decode(byteArray65);
        java.lang.String str67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray66);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[85, 86, 86, 70, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -70, 123, -114, 60, -85, 47, 54]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "_w" + "'", str67, "_w");
    }

    @Test
    public void test583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test583");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false, false);
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        java.lang.Object obj29 = base64_0.decode((java.lang.Object) byteArray28);
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false, false);
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        byte[] byteArray40 = base64_0.encode(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray43 = new byte[] {};
        base64_42.decode(byteArray43, (int) 'a', (-1));
        byte[] byteArray48 = base64_42.decode("QUdRQkFBPT0");
        java.math.BigInteger bigInteger49 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray48);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, true);
        java.lang.Object obj52 = base64_0.encode((java.lang.Object) byteArray51);
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray56 = new byte[] {};
        base64_55.decode(byteArray56, (int) 'a', (-1));
        java.math.BigInteger bigInteger60 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray56);
        org.apache.commons.codec.binary.Base64 base64_62 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray56, true);
        base64_0.decode(byteArray56, (-1), 10);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "QUdRQkFBPT0" + "'", str38, "QUdRQkFBPT0");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger49);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(bigInteger60);
    }

    @Test
    public void test584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test584");
        byte[] byteArray0 = new byte[] {};
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray0, false, false, 10);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test585");
        byte[] byteArray5 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64(0, byteArray10);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray15 = new byte[] {};
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, false, false, 10);
        byte[] byteArray20 = base64_14.decode(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64(100, byteArray20);
        boolean boolean22 = base64_21.hasData();
        byte[] byteArray24 = base64_21.decode("QUdRQkFBPT0=\r\n");
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray24);
        byte[] byteArray26 = base64_11.decode(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray35 = new byte[] {};
        base64_34.decode(byteArray35, (int) 'a', (-1));
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, true, true, (int) (byte) 100);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, false, 1);
        base64_28.setInitialBuffer(byteArray46, (int) (byte) 10, 100);
        byte[] byteArray54 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54, false, false);
        base64_28.setInitialBuffer(byteArray54, 100, 1);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray54);
        java.lang.String str62 = base64_11.encodeToString(byteArray61);
        org.apache.commons.codec.binary.Base64 base64_64 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_66 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray67 = new byte[] {};
        base64_66.decode(byteArray67, (int) 'a', (-1));
        byte[] byteArray72 = base64_66.decode("QUdRQkFBPT0");
        java.lang.String str73 = base64_64.encodeToString(byteArray72);
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray72, true, false);
        base64_11.setInitialBuffer(byteArray72, 1, (int) (byte) -1);
        byte[] byteArray81 = base64_11.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.DecoderException: LzJRSy8yUT0");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str25, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str73, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 73, -36, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94, 114, -13, 37, 20, -78, -13, 37, 19]");
    }

    @Test
    public void test586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test586");
        byte[] byteArray1 = new byte[] { (byte) 0 };
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, true);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, true, false, (int) '#');
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[65, 65]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[85, 86, 86, 70, 80, 81, 48, 75]");
    }

    @Test
    public void test587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test587");
        byte[] byteArray5 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64(0, byteArray10);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray14 = new byte[] {};
        base64_13.decode(byteArray14, (int) 'a', (-1));
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, true, true, (int) (byte) 100);
        boolean boolean22 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        byte[] byteArray24 = base64_11.decode(byteArray23);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
    }

    @Test
    public void test588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test588");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray18);
        base64_0.encode(byteArray22, 0, 10);
        byte[] byteArray27 = new byte[] { (byte) 0 };
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false, true);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray30);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, true);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, true, true);
        base64_0.encode(byteArray36, (int) (short) -1, (int) (byte) 0);
        byte[] byteArray40 = null;
        byte[] byteArray41 = base64_0.decode(byteArray40);
        int int42 = base64_0.avail();
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray45 = new byte[] {};
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, false, false, 10);
        byte[] byteArray50 = base64_44.decode(byteArray49);
        byte[] byteArray52 = base64_44.decode("");
        byte[] byteArray53 = new byte[] {};
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, false, false, 10);
        byte[] byteArray58 = base64_44.decode(byteArray57);
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray61 = new byte[] {};
        base64_60.decode(byteArray61, (int) 'a', (-1));
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, true, true, (int) (byte) 100);
        boolean boolean69 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray68);
        byte[] byteArray70 = base64_44.encode(byteArray68);
        byte[] byteArray72 = base64_44.decode("QUE");
        byte[] byteArray78 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray78, false, false);
        java.math.BigInteger bigInteger82 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray81);
        byte[] byteArray83 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger82);
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger82);
        java.lang.Object obj85 = base64_44.encode((java.lang.Object) byteArray84);
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray84);
        byte[] byteArray87 = base64_0.encode(byteArray84);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[85, 86, 86, 70, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger82);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj85);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
    }

    @Test
    public void test589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test589");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        boolean boolean2 = base64_1.isUrlSafe();
        boolean boolean3 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] {};
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false, 10);
        byte[] byteArray12 = base64_6.decode(byteArray11);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64(100, byteArray12);
        int int16 = base64_1.readResults(byteArray12, 1, (int) (byte) 1);
        boolean boolean17 = base64_1.hasData();
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray20 = new byte[] {};
        base64_19.decode(byteArray20, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray26 = new byte[] {};
        base64_25.decode(byteArray26, (int) 'a', (-1));
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, true, true, (int) (byte) 100);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, true, false, 1);
        base64_19.setInitialBuffer(byteArray37, (int) (byte) 10, 100);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, true, 0);
        byte[] byteArray45 = base64_1.encode(byteArray44);
        byte[] byteArray47 = new byte[] { (byte) 0 };
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, false, true);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray50);
        byte[] byteArray52 = base64_1.encode(byteArray50);
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64((int) ' ');
        boolean boolean55 = base64_54.hasData();
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray58 = new byte[] {};
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray58, false, false, 10);
        byte[] byteArray63 = base64_57.decode(byteArray62);
        byte[] byteArray65 = base64_57.decode("");
        byte[] byteArray66 = new byte[] {};
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66, false, false, 10);
        byte[] byteArray71 = base64_57.decode(byteArray70);
        java.lang.String str72 = base64_54.encodeToString(byteArray70);
        byte[] byteArray78 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray78, false, false);
        java.math.BigInteger bigInteger82 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray81);
        byte[] byteArray83 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger82);
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger82);
        byte[] byteArray85 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger82);
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray85);
        byte[] byteArray87 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray86);
        byte[] byteArray88 = base64_54.decode(byteArray87);
        byte[] byteArray89 = base64_1.decode(byteArray87);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[81, 85, 69]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger82);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[84, 72, 112, 75, 85, 108, 78, 53, 79, 72, 108, 86, 86, 68, 65, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48]");
    }

    @Test
    public void test590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test590");
        byte[] byteArray4 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray4);
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray4);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray4);
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray4);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray4);
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 100, 1, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AGQBAA==\r\n" + "'", str9, "AGQBAA==\r\n");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 100, 1, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AGQBAA==\r\n" + "'", str11, "AGQBAA==\r\n");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 100, 1, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "AGQBAA" + "'", str13, "AGQBAA");
    }

    @Test
    public void test591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test591");
        byte[] byteArray4 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray4);
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray4);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray4);
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray4);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 100, 1, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AGQBAA==\r\n" + "'", str9, "AGQBAA==\r\n");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 100, 1, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AGQBAA==\r\n" + "'", str11, "AGQBAA==\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[65, 71, 81, 66, 65, 65, 61, 61]");
    }

    @Test
    public void test592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test592");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray17, false);
        byte[] byteArray20 = new byte[] {};
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray20);
        byte[] byteArray22 = base64_19.decode(byteArray20);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException");
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray24);
        byte[] byteArray26 = base64_19.encode(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, false, 10);
        byte[] byteArray34 = base64_28.decode(byteArray33);
        byte[] byteArray36 = base64_28.decode("");
        byte[] byteArray37 = new byte[] {};
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, false, 10);
        byte[] byteArray42 = base64_28.decode(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray45 = new byte[] {};
        base64_44.decode(byteArray45, (int) 'a', (-1));
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, true, true, (int) (byte) 100);
        boolean boolean53 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray52);
        byte[] byteArray54 = base64_28.encode(byteArray52);
        byte[] byteArray56 = base64_28.decode("QUE");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj57 = base64_19.encode((java.lang.Object) base64_28);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "orgapachecommonscodecDecoderExceptio\r\n" + "'", str25, "orgapachecommonscodecDecoderExceptio\r\n");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[65, 65]");
    }

    @Test
    public void test593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test593");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray4 = base64_2.decode("");
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] {};
        base64_6.decode(byteArray7, (int) 'a', (-1));
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, true, true, (int) (byte) 100);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        byte[] byteArray17 = base64_2.encode(byteArray16);
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray16);
        byte[] byteArray20 = new byte[] {};
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, false, false, 10);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray24);
        java.lang.String str26 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray24);
        boolean boolean27 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray24);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, true);
        java.lang.String str31 = base64_19.encodeToString(byteArray24);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test594");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(100, byteArray9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) (short) 1, byteArray9);
        byte[] byteArray12 = null;
        byte[] byteArray13 = base64_11.decode(byteArray12);
        boolean boolean14 = base64_11.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNull(byteArray13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test595");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false);
        base64_1.setInitialBuffer(byteArray10, (int) '#', (int) (byte) -1);
        byte[] byteArray15 = base64_1.decode("orgapachecommonscodecDecoderExceptio");
        byte[] byteArray16 = null;
        base64_1.encode(byteArray16, (int) (byte) 10, 100);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
    }

    @Test
    public void test596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test596");
        byte[] byteArray1 = new byte[] { (byte) 0 };
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, true);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[81, 85, 69, 61]");
    }

    @Test
    public void test597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test597");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, false);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger13);
        java.lang.Object obj16 = base64_3.encode((java.lang.Object) byteArray15);
        java.lang.Object obj17 = base64_2.encode((java.lang.Object) byteArray15);
        byte[] byteArray18 = null;
        base64_2.encode(byteArray18, (-1), 0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, false);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray31 = base64_2.decode(byteArray26);
        boolean boolean32 = base64_2.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray36 = new byte[] {};
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false, false, 10);
        byte[] byteArray41 = base64_35.decode(byteArray40);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray41, false);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray46 = new byte[] {};
        base64_45.decode(byteArray46, (int) 'a', (-1));
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, true, true, (int) (byte) 100);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, true, false, 1);
        java.lang.Object obj58 = base64_43.encode((java.lang.Object) byteArray53);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray53);
        byte[] byteArray60 = base64_2.decode(byteArray53);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
    }

    @Test
    public void test598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test598");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        java.lang.Object obj30 = base64_1.encode((java.lang.Object) byteArray29);
        byte[] byteArray31 = new byte[] {};
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false, 10);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray35);
        java.lang.Object obj37 = base64_1.encode((java.lang.Object) byteArray35);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        int int42 = base64_1.readResults(byteArray39, (int) (byte) 0, 10);
        byte[] byteArray47 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, false, false);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray47);
        java.lang.String str52 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray47);
        java.lang.String str53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray47);
        boolean boolean54 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray47);
        java.lang.String str55 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray47);
        // The following exception was thrown during execution in test generation
        try {
            base64_1.decode(byteArray47, (int) (short) 0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94, 122, 43, -127, -86, 90, 114, 23, -100, -94, 105, -88, -98, -57, 40, 117, -25, 4, -99, -54, 29, 122, -79, 49, 113, -22, 109, -118, -119]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 100, 1, 0]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "AGQBAA==\r\n" + "'", str52, "AGQBAA==\r\n");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "AGQBAA" + "'", str53, "AGQBAA");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "AGQBAA" + "'", str55, "AGQBAA");
    }

    @Test
    public void test599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test599");
        byte[] byteArray4 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray4);
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray4);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray4);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, (int) 'a');
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 100, 1, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AGQBAA==\r\n" + "'", str9, "AGQBAA==\r\n");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test600");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        boolean boolean26 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray25);
        byte[] byteArray27 = base64_1.encode(byteArray25);
        byte[] byteArray29 = base64_1.decode("QUE");
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray32 = new byte[] {};
        base64_31.decode(byteArray32, (int) 'a', (-1));
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, true, true, (int) (byte) 100);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, true, false, 1);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray39);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44);
        boolean boolean46 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray44);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray48);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray48);
        byte[] byteArray51 = base64_1.encode(byteArray48);
        java.lang.String str52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray51);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
    }

    @Test
    public void test601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test601");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = new byte[] {};
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false, 10);
        java.lang.String str22 = base64_2.encodeToString(byteArray17);
        boolean boolean23 = base64_2.isUrlSafe();
        byte[] byteArray25 = base64_2.decode("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        byte[] byteArray26 = null;
        base64_2.setInitialBuffer(byteArray26, 0, (int) (short) 0);
        byte[] byteArray31 = new byte[] { (byte) 0 };
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, true);
        boolean boolean35 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray34);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, true, false, (int) '#');
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, false, true);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray42);
        byte[] byteArray44 = base64_2.decode(byteArray43);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64(1, byteArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [QUE=??]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94, 122, 43, -127, -86, 90, 114, 23, -100, -94, 105, -88, -98, -57, 40, 117, -25, 4, -99, -54, 29, 122, -79, 49, 113, -22, 109, -118, -119]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[65, 65]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[85, 86, 86, 70, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[65, 65]");
    }

    @Test
    public void test602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test602");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray1);
        java.lang.String str3 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray2);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -63, 39, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 69, 110, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 103]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "b3JnYXBhY2hlY29tbW9uc2NvZGVjRGVjb2RlckV4Y2VwdGlvbm9yZ2FwYWNoZWNvbW1vbnNjb2Rl\r\nY0VuY29kZXJFeGNlcHRpb2c=\r\n" + "'", str3, "b3JnYXBhY2hlY29tbW9uc2NvZGVjRGVjb2RlckV4Y2VwdGlvbm9yZ2FwYWNoZWNvbW1vbnNjb2Rl\r\nY0VuY29kZXJFeGNlcHRpb2c=\r\n");
    }

    @Test
    public void test603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test603");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray9 = base64_3.decode("QUdRQkFBPT0");
        java.lang.String str10 = base64_1.encodeToString(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false, false, 10);
        byte[] byteArray18 = base64_12.decode(byteArray17);
        byte[] byteArray20 = base64_12.decode("");
        byte[] byteArray21 = new byte[] {};
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, false, 10);
        byte[] byteArray26 = base64_12.decode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        byte[] byteArray38 = base64_12.encode(byteArray36);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38);
        base64_1.decode(byteArray38, (int) (short) 10, (int) 'a');
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64(1);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray47 = new byte[] {};
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, false, false, 10);
        byte[] byteArray52 = base64_46.decode(byteArray51);
        byte[] byteArray53 = base64_44.encode(byteArray52);
        base64_1.decode(byteArray52, 76, 1);
        java.lang.String str57 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray52);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str10, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
    }

    @Test
    public void test604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test604");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        base64_2.decode(byteArray3, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray9 = new byte[] {};
        base64_8.decode(byteArray9, (int) 'a', (-1));
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true, true, (int) (byte) 100);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, true, false, 1);
        base64_2.setInitialBuffer(byteArray20, (int) (byte) 10, 100);
        byte[] byteArray24 = new byte[] {};
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, false, 10);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray28);
        java.lang.String str31 = base64_2.encodeToString(byteArray30);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray34 = new byte[] {};
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false, false, 10);
        byte[] byteArray39 = base64_33.decode(byteArray38);
        byte[] byteArray41 = base64_33.decode("");
        byte[] byteArray42 = new byte[] {};
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, false, false, 10);
        byte[] byteArray47 = base64_33.decode(byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray47);
        byte[] byteArray49 = base64_2.decode(byteArray47);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray52 = new byte[] {};
        base64_51.decode(byteArray52, (int) 'a', (-1));
        byte[] byteArray57 = base64_51.decode("QUdRQkFBPT0");
        byte[] byteArray59 = null;
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64(10, byteArray59);
        org.apache.commons.codec.binary.Base64 base64_61 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray67 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray67, false, false);
        java.math.BigInteger bigInteger71 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray70);
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger71);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger71);
        java.lang.Object obj74 = base64_61.encode((java.lang.Object) byteArray73);
        java.lang.Object obj75 = base64_60.encode((java.lang.Object) byteArray73);
        java.lang.Object obj76 = base64_51.encode((java.lang.Object) byteArray73);
        byte[] byteArray77 = base64_2.encode(byteArray73);
        boolean boolean78 = base64_2.hasData();
        byte[] byteArray84 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray87 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray84, false, false);
        java.math.BigInteger bigInteger88 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray87);
        byte[] byteArray89 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray87);
        byte[] byteArray90 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray89);
        base64_2.setInitialBuffer(byteArray89, 0, (int) '#');
        byte[] byteArray94 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray89);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_95 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [/2QK/2Q=]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger88);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
    }

    @Test
    public void test605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test605");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray18);
        base64_0.encode(byteArray22, 0, 10);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, true, false, 12);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
    }

    @Test
    public void test606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test606");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        byte[] byteArray4 = base64_1.decode(byteArray3);
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test607");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray23 = new byte[] {};
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false, 10);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.String str30 = base64_1.encodeToString(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_32.decode(byteArray37);
        byte[] byteArray40 = base64_32.decode("");
        byte[] byteArray41 = new byte[] {};
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, false, false, 10);
        byte[] byteArray46 = base64_32.decode(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray46);
        byte[] byteArray48 = base64_1.decode(byteArray46);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray51 = new byte[] {};
        base64_50.decode(byteArray51, (int) 'a', (-1));
        byte[] byteArray56 = base64_50.decode("QUdRQkFBPT0");
        byte[] byteArray58 = null;
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64(10, byteArray58);
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray66 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66, false, false);
        java.math.BigInteger bigInteger70 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray69);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger70);
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger70);
        java.lang.Object obj73 = base64_60.encode((java.lang.Object) byteArray72);
        java.lang.Object obj74 = base64_59.encode((java.lang.Object) byteArray72);
        java.lang.Object obj75 = base64_50.encode((java.lang.Object) byteArray72);
        byte[] byteArray76 = base64_1.encode(byteArray72);
        boolean boolean77 = base64_1.hasData();
        org.apache.commons.codec.binary.Base64 base64_79 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray80 = new byte[] {};
        base64_79.decode(byteArray80, (int) 'a', (-1));
        byte[] byteArray87 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray80, true, true, (int) (byte) 100);
        byte[] byteArray91 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray87, true, false, 1);
        byte[] byteArray92 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray87);
        byte[] byteArray93 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray92);
        byte[] byteArray94 = base64_1.decode(byteArray92);
        java.lang.String str95 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray92);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
    }

    @Test
    public void test608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test608");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray12 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray12);
        byte[] byteArray17 = base64_3.encode(byteArray12);
        java.lang.Object obj18 = base64_1.encode((java.lang.Object) byteArray12);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, false);
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray27);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray27);
        byte[] byteArray31 = base64_1.encode(byteArray27);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray34 = new byte[] {};
        base64_33.decode(byteArray34, (int) 'a', (-1));
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, true, true, (int) (byte) 100);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray41);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41);
        base64_1.encode(byteArray41, (int) ' ', (int) (short) 10);
        byte[] byteArray52 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52, false, false);
        boolean boolean56 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray52);
        java.lang.String str57 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray52);
        boolean boolean58 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray52);
        int int61 = base64_1.readResults(byteArray52, (int) (short) 0, 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[76, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "/2QK/2Q=\r\n" + "'", str57, "/2QK/2Q=\r\n");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test609");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1);
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
    }

    @Test
    public void test610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test610");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray12 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray12);
        byte[] byteArray17 = base64_3.encode(byteArray12);
        java.lang.Object obj18 = base64_1.encode((java.lang.Object) byteArray12);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, false);
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray27);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray27);
        byte[] byteArray31 = base64_1.encode(byteArray27);
        int int32 = base64_1.avail();
        boolean boolean33 = base64_1.hasData();
        boolean boolean34 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray37 = new byte[] {};
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, false, 10);
        byte[] byteArray42 = base64_36.decode(byteArray41);
        byte[] byteArray44 = base64_36.decode("");
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.decodeBase64("orgapachecommonscodecDecoderExceptionorgapachecommonscodecDecoderExceptionorgapachecommonscodecEncoderExceptiok");
        byte[] byteArray47 = base64_36.decode(byteArray46);
        boolean boolean48 = base64_36.isUrlSafe();
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, false, false);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray53);
        java.lang.String str58 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray53);
        java.lang.String str59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray53);
        boolean boolean60 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray53);
        java.lang.String str61 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray53);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53);
        byte[] byteArray63 = base64_36.decode(byteArray62);
        base64_1.decode(byteArray62, 10, (int) 'a');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 14 + "'", int32 == 14);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94, 122, 43, -127, -86, 90, 114, 23, -100, -94, 105, -88, -98, -57, 40, 117, -25, 4, -99, -54, 29, 122, -79, 49, 113, -22, 109, -118, -119]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -70, 123, -114, 60, -85, 47, 54, -13, -7, -102, -30, -69, 61, 106]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 100, 1, 0]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "AGQBAA==\r\n" + "'", str58, "AGQBAA==\r\n");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "AGQBAA" + "'", str59, "AGQBAA");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "AGQBAA" + "'", str61, "AGQBAA");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[0, 100, 1, 0]");
    }

    @Test
    public void test611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test611");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        byte[] byteArray9 = null;
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(10, byteArray9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger21);
        java.lang.Object obj24 = base64_11.encode((java.lang.Object) byteArray23);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray23);
        java.lang.Object obj26 = base64_1.encode((java.lang.Object) byteArray23);
        byte[] byteArray28 = base64_1.decode("org.apache.commons.codec.EncoderException");
        byte[] byteArray30 = base64_1.decode("");
        java.lang.Class<?> wildcardClass31 = byteArray30.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 73, -36, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test612");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray6 = new byte[] {};
        base64_5.decode(byteArray6, (int) 'a', (-1));
        byte[] byteArray11 = base64_5.decode("QUdRQkFBPT0");
        java.lang.String str12 = base64_3.encodeToString(byteArray11);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray15 = new byte[] {};
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, false, false, 10);
        byte[] byteArray20 = base64_14.decode(byteArray19);
        byte[] byteArray22 = base64_14.decode("");
        byte[] byteArray23 = new byte[] {};
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false, 10);
        byte[] byteArray28 = base64_14.decode(byteArray27);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray31 = new byte[] {};
        base64_30.decode(byteArray31, (int) 'a', (-1));
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, true, true, (int) (byte) 100);
        boolean boolean39 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray38);
        byte[] byteArray40 = base64_14.encode(byteArray38);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40);
        base64_3.decode(byteArray40, (int) (short) 10, (int) 'a');
        byte[] byteArray45 = new byte[] {};
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, false, false, 10);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray45);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45);
        base64_3.decode(byteArray51, (int) (short) 1, 1);
        byte[] byteArray55 = new byte[] {};
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray55, false, false, 10);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59, false, false, 100);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray59);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray64, true);
        base64_3.setInitialBuffer(byteArray64, (int) (byte) 10, (int) (short) 0);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray64);
        java.lang.String str71 = base64_1.encodeToString(byteArray70);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str12, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
    }

    @Test
    public void test613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test613");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        byte[] byteArray21 = base64_1.encode(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray24 = new byte[] {};
        base64_23.decode(byteArray24, (int) 'a', (-1));
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, true, (int) (byte) 100);
        java.lang.String str32 = base64_1.encodeToString(byteArray31);
        byte[] byteArray34 = new byte[] { (byte) 0 };
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false, true);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray37);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, true);
        base64_1.setInitialBuffer(byteArray40, (int) (byte) -1, 0);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray46 = new byte[] {};
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, false, false, 10);
        byte[] byteArray51 = base64_45.decode(byteArray50);
        byte[] byteArray53 = base64_45.decode("");
        byte[] byteArray54 = new byte[] {};
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54, false, false, 10);
        byte[] byteArray59 = base64_45.decode(byteArray58);
        byte[] byteArray60 = new byte[] {};
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray60, false, false, 10);
        byte[] byteArray65 = base64_45.encode(byteArray64);
        org.apache.commons.codec.binary.Base64 base64_67 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray68 = new byte[] {};
        base64_67.decode(byteArray68, (int) 'a', (-1));
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray68, true, true, (int) (byte) 100);
        java.lang.String str76 = base64_45.encodeToString(byteArray75);
        byte[] byteArray78 = new byte[] { (byte) 0 };
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray78, false, true);
        byte[] byteArray82 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray81);
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray81, true);
        base64_45.setInitialBuffer(byteArray84, (int) (byte) -1, 0);
        int int90 = base64_1.readResults(byteArray84, 76, (int) 'a');
        byte[] byteArray92 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: ");
        // The following exception was thrown during execution in test generation
        try {
            base64_1.decode(byteArray92, (int) 'a', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[0]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94]");
    }

    @Test
    public void test614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test614");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = new byte[] {};
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false, 10);
        byte[] byteArray22 = base64_2.encode(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64(100, byteArray22, false);
        byte[] byteArray25 = null;
        base64_24.setInitialBuffer(byteArray25, (int) (short) 1, (int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray31 = new byte[] {};
        base64_30.decode(byteArray31, (int) 'a', (-1));
        byte[] byteArray36 = base64_30.decode("QUdRQkFBPT0");
        byte[] byteArray38 = null;
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64(10, byteArray38);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, false, false);
        java.math.BigInteger bigInteger50 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray49);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger50);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger50);
        java.lang.Object obj53 = base64_40.encode((java.lang.Object) byteArray52);
        java.lang.Object obj54 = base64_39.encode((java.lang.Object) byteArray52);
        java.lang.Object obj55 = base64_30.encode((java.lang.Object) byteArray52);
        java.lang.Object obj56 = base64_24.encode(obj55);
        byte[] byteArray62 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, false, false);
        java.math.BigInteger bigInteger66 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray65);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger66);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger66);
        base64_24.decode(byteArray68, (int) (byte) -1, (int) ' ');
        boolean boolean72 = base64_24.hasData();
        int int73 = base64_24.avail();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 20 + "'", int73 == 20);
    }

    @Test
    public void test615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test615");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray9 = base64_3.decode("QUdRQkFBPT0");
        java.lang.String str10 = base64_1.encodeToString(byteArray9);
        boolean boolean11 = base64_1.hasData();
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: hi!");
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger14);
        byte[] byteArray16 = base64_1.encode(byteArray15);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str10, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[121, 114, 112, 55]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[101, 88, 74, 119, 78, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[90, 86, 104, 75, 100, 48, 53, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[90, 86, 104, 75, 100, 48, 53, 51, 80, 84, 48, 78, 67, 103, 61, 61, 13, 10]");
    }

    @Test
    public void test616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test616");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, false);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger13);
        java.lang.Object obj16 = base64_3.encode((java.lang.Object) byteArray15);
        java.lang.Object obj17 = base64_2.encode((java.lang.Object) byteArray15);
        byte[] byteArray18 = null;
        base64_2.encode(byteArray18, (-1), 0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, false);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray31 = base64_2.decode(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray37 = new byte[] {};
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, false, 10);
        byte[] byteArray42 = base64_36.decode(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray42, false);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64(76, byteArray42, true);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, true, (int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64((-1), byteArray51);
        int int55 = base64_2.readResults(byteArray51, 100, (int) (short) 10);
        byte[] byteArray56 = null;
        int int59 = base64_2.readResults(byteArray56, (int) (short) 1, (int) (byte) 1);
        java.lang.Class<?> wildcardClass60 = base64_2.getClass();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test617");
        byte[] byteArray1 = new byte[] { (byte) 0 };
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, true);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, true, false, (int) '#');
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, true);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray12);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[65, 65]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[85, 86, 86, 70, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[85, 86, 86, 70, 80, 81, 48, 75]");
    }

    @Test
    public void test618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test618");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray18);
        base64_0.encode(byteArray22, 0, 10);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray28 = new byte[] {};
        base64_27.decode(byteArray28, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray34 = new byte[] {};
        base64_33.decode(byteArray34, (int) 'a', (-1));
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, true, true, (int) (byte) 100);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, true, false, 1);
        base64_27.setInitialBuffer(byteArray45, (int) (byte) 10, 100);
        byte[] byteArray49 = new byte[] {};
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray49, false, false, 10);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray53);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray53);
        java.lang.String str56 = base64_27.encodeToString(byteArray55);
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray59 = new byte[] {};
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59, false, false, 10);
        byte[] byteArray64 = base64_58.decode(byteArray63);
        byte[] byteArray66 = base64_58.decode("");
        byte[] byteArray67 = new byte[] {};
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray67, false, false, 10);
        byte[] byteArray72 = base64_58.decode(byteArray71);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray72);
        byte[] byteArray74 = base64_27.decode(byteArray72);
        java.lang.Object obj75 = base64_0.decode((java.lang.Object) byteArray72);
        byte[] byteArray76 = new byte[] {};
        byte[] byteArray80 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray76, false, false, 10);
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray80);
        byte[] byteArray82 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray80);
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray82, false, false, (int) (short) 0);
        base64_0.setInitialBuffer(byteArray82, (int) (byte) 100, (int) ' ');
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
    }

    @Test
    public void test619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test619");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray10);
        byte[] byteArray15 = base64_1.encode(byteArray10);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, false, false, 100);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray20);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false, (int) 'a');
        base64_1.decode(byteArray25, (int) (byte) 10, (int) (byte) -1);
        boolean boolean33 = base64_1.isUrlSafe();
        boolean boolean34 = base64_1.hasData();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test620");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray24 = new byte[] { (byte) 0 };
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, true);
        boolean boolean28 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray27);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, true, false, (int) '#');
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        byte[] byteArray34 = base64_1.decode(byteArray33);
        boolean boolean35 = base64_1.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[65, 65]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[85, 86, 86, 70, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test621");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = new byte[] {};
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false, 10);
        byte[] byteArray22 = base64_2.encode(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray22, false);
        byte[] byteArray26 = base64_24.decode("QUdRQkFBPT0");
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray34 = base64_28.decode("QUdRQkFBPT0");
        byte[] byteArray36 = null;
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64(10, byteArray36);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false, false);
        java.math.BigInteger bigInteger48 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray47);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger48);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger48);
        java.lang.Object obj51 = base64_38.encode((java.lang.Object) byteArray50);
        java.lang.Object obj52 = base64_37.encode((java.lang.Object) byteArray50);
        java.lang.Object obj53 = base64_28.encode((java.lang.Object) byteArray50);
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray58 = new byte[] {};
        base64_57.decode(byteArray58, (int) 'a', (-1));
        byte[] byteArray66 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66, false, false);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray66);
        byte[] byteArray71 = base64_57.encode(byteArray66);
        java.lang.Object obj72 = base64_55.encode((java.lang.Object) byteArray66);
        byte[] byteArray74 = base64_55.decode("LzJRSy8yUT0");
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray74);
        byte[] byteArray76 = base64_28.decode(byteArray75);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj77 = base64_24.decode((java.lang.Object) base64_28);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[47, 50, 81, 75, 47, 50, 81, 61]");
    }

    @Test
    public void test622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test622");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray18);
        base64_0.encode(byteArray22, 0, 10);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray30 = new byte[] {};
        base64_29.decode(byteArray30, (int) 'a', (-1));
        byte[] byteArray38 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, false, false);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray38);
        byte[] byteArray43 = base64_29.encode(byteArray38);
        java.lang.Object obj44 = base64_27.encode((java.lang.Object) byteArray38);
        byte[] byteArray50 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, false, false);
        java.math.BigInteger bigInteger54 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray53);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray53);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray53);
        byte[] byteArray57 = base64_27.encode(byteArray53);
        byte[] byteArray58 = base64_0.encode(byteArray57);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray58);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[84, 72, 112, 75, 85, 108, 78, 53, 79, 72, 108, 86, 86, 68, 65, 57, 68, 81, 111, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
    }

    @Test
    public void test623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test623");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray9 = base64_3.decode("QUdRQkFBPT0");
        java.lang.String str10 = base64_1.encodeToString(byteArray9);
        boolean boolean11 = base64_1.hasData();
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray14 = new byte[] {};
        base64_13.decode(byteArray14, (int) 'a', (-1));
        byte[] byteArray19 = base64_13.decode("QUdRQkFBPT0");
        base64_1.decode(byteArray19, 0, (int) (short) 0);
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str10, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "QUdRQkFBPT0" + "'", str23, "QUdRQkFBPT0");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "QUdRQkFBPT0" + "'", str24, "QUdRQkFBPT0");
    }

    @Test
    public void test624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test624");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray9 = base64_3.decode("QUdRQkFBPT0");
        java.lang.String str10 = base64_1.encodeToString(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false, false, 10);
        byte[] byteArray18 = base64_12.decode(byteArray17);
        byte[] byteArray20 = base64_12.decode("");
        byte[] byteArray21 = new byte[] {};
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, false, 10);
        byte[] byteArray26 = base64_12.decode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        byte[] byteArray38 = base64_12.encode(byteArray36);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38);
        base64_1.decode(byteArray38, (int) (short) 10, (int) 'a');
        byte[] byteArray43 = new byte[] {};
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false, false, 10);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray43);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43);
        base64_1.decode(byteArray49, (int) (short) 1, 1);
        java.lang.String str53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray49);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str10, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test625");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 0);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray6 = new byte[] {};
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false, 10);
        byte[] byteArray11 = base64_5.decode(byteArray10);
        byte[] byteArray13 = base64_5.decode("");
        byte[] byteArray14 = new byte[] {};
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false, false, 10);
        byte[] byteArray19 = base64_5.decode(byteArray18);
        base64_3.setInitialBuffer(byteArray19, 1, 0);
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        base64_1.setInitialBuffer(byteArray19, (int) 'a', (int) (short) 10);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        boolean boolean29 = base64_28.isUrlSafe();
        boolean boolean30 = base64_28.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray34 = new byte[] {};
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false, false, 10);
        byte[] byteArray39 = base64_33.decode(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64(100, byteArray39);
        int int43 = base64_28.readResults(byteArray39, 1, (int) (byte) 1);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, false);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, true, true, 0);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray45);
        byte[] byteArray51 = base64_1.encode(byteArray50);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray50);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
    }

    @Test
    public void test626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test626");
        byte[] byteArray0 = null;
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray0, false, true, (int) (short) 100);
        org.junit.Assert.assertNull(byteArray4);
    }

    @Test
    public void test627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test627");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray8, false);
        byte[] byteArray12 = base64_10.decode("");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
    }

    @Test
    public void test628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test628");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        int int2 = base64_1.avail();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test629");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) -1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray6 = new byte[] {};
        base64_5.decode(byteArray6, (int) 'a', (-1));
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false, false);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray14);
        byte[] byteArray19 = base64_5.encode(byteArray14);
        java.lang.Object obj20 = base64_3.encode((java.lang.Object) byteArray14);
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, false);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray29);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray29);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        byte[] byteArray33 = base64_3.encode(byteArray29);
        byte[] byteArray34 = base64_1.decode(byteArray29);
        int int35 = base64_1.avail();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test630");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray14 = null;
        java.lang.String str15 = base64_0.encodeToString(byteArray14);
        boolean boolean16 = base64_0.hasData();
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray19 = new byte[] {};
        base64_18.decode(byteArray19, (int) 'a', (-1));
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, true, true, (int) (byte) 100);
        boolean boolean27 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray26);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray29);
        base64_0.setInitialBuffer(byteArray29, (int) (short) 100, (int) '#');
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray36 = new byte[] {};
        base64_35.decode(byteArray36, (int) 'a', (-1));
        byte[] byteArray41 = base64_35.decode("QUdRQkFBPT0");
        byte[] byteArray43 = null;
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64(10, byteArray43);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray51 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, false, false);
        java.math.BigInteger bigInteger55 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray54);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger55);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger55);
        java.lang.Object obj58 = base64_45.encode((java.lang.Object) byteArray57);
        java.lang.Object obj59 = base64_44.encode((java.lang.Object) byteArray57);
        java.lang.Object obj60 = base64_35.encode((java.lang.Object) byteArray57);
        java.lang.String str61 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray57);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray57);
        // The following exception was thrown during execution in test generation
        try {
            base64_0.encode(byteArray62, (int) (byte) 0, 20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "LzJRSy8yUT0" + "'", str61, "LzJRSy8yUT0");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
    }

    @Test
    public void test631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test631");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        boolean boolean26 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray25);
        byte[] byteArray27 = base64_1.encode(byteArray25);
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, true, false, (int) (short) 100);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
    }

    @Test
    public void test632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test632");
        byte[] byteArray4 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray4);
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray4);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray4);
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray4);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray4);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray12);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 100, 1, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AGQBAA==\r\n" + "'", str9, "AGQBAA==\r\n");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 100, 1, 0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AGQBAA==\r\n" + "'", str11, "AGQBAA==\r\n");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
    }

    @Test
    public void test633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test633");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(true);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        byte[] byteArray11 = base64_3.decode("");
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_3.decode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray20 = new byte[] {};
        base64_19.decode(byteArray20, (int) 'a', (-1));
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, true, true, (int) (byte) 100);
        boolean boolean28 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray27);
        byte[] byteArray29 = base64_3.encode(byteArray27);
        byte[] byteArray30 = base64_1.decode(byteArray27);
        int int31 = base64_1.avail();
        boolean boolean32 = base64_1.hasData();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test634");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray23 = new byte[] {};
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false, 10);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.String str30 = base64_1.encodeToString(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_32.decode(byteArray37);
        byte[] byteArray40 = base64_32.decode("");
        byte[] byteArray41 = new byte[] {};
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, false, false, 10);
        byte[] byteArray46 = base64_32.decode(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray46);
        byte[] byteArray48 = base64_1.decode(byteArray46);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
    }

    @Test
    public void test635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test635");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray17, false);
        byte[] byteArray20 = new byte[] {};
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray20);
        byte[] byteArray22 = base64_19.decode(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray25 = new byte[] {};
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false, 10);
        byte[] byteArray30 = base64_24.decode(byteArray29);
        byte[] byteArray32 = base64_24.decode("");
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_24.decode(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray41 = new byte[] {};
        base64_40.decode(byteArray41, (int) 'a', (-1));
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, true, true, (int) (byte) 100);
        boolean boolean49 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray48);
        byte[] byteArray50 = base64_24.encode(byteArray48);
        base64_19.encode(byteArray50, (int) ' ', 0);
        byte[] byteArray55 = new byte[] { (byte) 0 };
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray55, false, true);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray58);
        java.math.BigInteger bigInteger60 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray58);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger60);
        java.lang.String str62 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray61);
        base64_19.encode(byteArray61, (int) (short) 1, 0);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0]");
        org.junit.Assert.assertNotNull(bigInteger60);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test636");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false);
        base64_1.setInitialBuffer(byteArray10, (int) '#', (int) (byte) -1);
        byte[] byteArray15 = base64_1.decode("orgapachecommonscodecDecoderExceptio");
        byte[] byteArray17 = base64_1.decode("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException");
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, true);
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94, 122, 43, -127, -86, 90, 114, 23, -100, -94, 105, -88, -98, -57, 40, 117, -25, 3, 121, -54, 29, 122, -79, 49, 113, -22, 109, -118, -119]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 111, 114, 13, 10, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 107, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "b3JnYXBhY2hlY29tbW9uc2NvZGVjRGVjb2RlckV4Y2VwdGlvbm9yZ2FwYWNoZWNvbW1vbnNjb2RlY0RlY29kZXJFeGNlcHRpb25vcg0KZ2FwYWNoZWNvbW1vbnNjb2RlY0RlY29kZXJFeGNlcHRpb2s9DQo" + "'", str20, "b3JnYXBhY2hlY29tbW9uc2NvZGVjRGVjb2RlckV4Y2VwdGlvbm9yZ2FwYWNoZWNvbW1vbnNjb2RlY0RlY29kZXJFeGNlcHRpb25vcg0KZ2FwYWNoZWNvbW1vbnNjb2RlY0RlY29kZXJFeGNlcHRpb2s9DQo");
    }

    @Test
    public void test637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test637");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        java.lang.String str31 = base64_1.encodeToString(byteArray30);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.CHUNK_SEPARATOR;
        base64_1.decode(byteArray32, 76, (int) (byte) 0);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray32);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[68, 81, 111]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "DQo=\r\n" + "'", str37, "DQo=\r\n");
    }

    @Test
    public void test638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test638");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray23 = new byte[] {};
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false, 10);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.String str30 = base64_1.encodeToString(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_32.decode(byteArray37);
        byte[] byteArray40 = base64_32.decode("");
        byte[] byteArray41 = new byte[] {};
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, false, false, 10);
        byte[] byteArray46 = base64_32.decode(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray46);
        byte[] byteArray48 = base64_1.decode(byteArray46);
        boolean boolean49 = base64_1.hasData();
        byte[] byteArray51 = base64_1.decode("org.apache.commons.codec.DecoderException: ");
        byte[] byteArray53 = base64_1.decode("");
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: hi!");
        java.math.BigInteger bigInteger56 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray55);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger56);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57, false);
        base64_1.encode(byteArray57, 100, 0);
        org.apache.commons.codec.binary.Base64 base64_64 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray65 = new byte[] {};
        base64_64.decode(byteArray65, (int) 'a', (-1));
        byte[] byteArray70 = base64_64.decode("QUdRQkFBPT0");
        byte[] byteArray72 = null;
        org.apache.commons.codec.binary.Base64 base64_73 = new org.apache.commons.codec.binary.Base64(10, byteArray72);
        org.apache.commons.codec.binary.Base64 base64_74 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray80 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray83 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray80, false, false);
        java.math.BigInteger bigInteger84 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray83);
        byte[] byteArray85 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger84);
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger84);
        java.lang.Object obj87 = base64_74.encode((java.lang.Object) byteArray86);
        java.lang.Object obj88 = base64_73.encode((java.lang.Object) byteArray86);
        java.lang.Object obj89 = base64_64.encode((java.lang.Object) byteArray86);
        byte[] byteArray91 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray86, true);
        byte[] byteArray92 = base64_1.encode(byteArray86);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertNotNull(bigInteger56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[121, 114, 112, 55]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[101, 88, 74, 119, 78, 119, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger84);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
    }

    @Test
    public void test639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test639");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        java.lang.Object obj3 = base64_1.decode((java.lang.Object) "org.apache.commons.codec.EncoderException");
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10);
        java.lang.Object obj12 = base64_1.encode((java.lang.Object) byteArray10);
        byte[] byteArray14 = base64_1.decode("QUdRQkFBPT0=\r\n");
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger15);
    }

    @Test
    public void test640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test640");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray9 = base64_3.decode("QUdRQkFBPT0");
        java.lang.String str10 = base64_1.encodeToString(byteArray9);
        boolean boolean11 = base64_1.hasData();
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray14 = new byte[] {};
        base64_13.decode(byteArray14, (int) 'a', (-1));
        byte[] byteArray19 = base64_13.decode("QUdRQkFBPT0");
        base64_1.decode(byteArray19, 0, (int) (short) 0);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray25 = new byte[] {};
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false, 10);
        byte[] byteArray30 = base64_24.decode(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray34 = new byte[] {};
        base64_33.decode(byteArray34, (int) 'a', (-1));
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, true, true, (int) (byte) 100);
        boolean boolean42 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray34);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray34, true);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray52 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52, false, false);
        base64_46.setInitialBuffer(byteArray55, (int) '#', (int) (byte) -1);
        byte[] byteArray60 = base64_46.decode("orgapachecommonscodecDecoderExceptio");
        byte[] byteArray62 = new byte[] { (byte) 0 };
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, false, true);
        boolean boolean66 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray65);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray65, true, false, (int) '#');
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray70, false, true);
        byte[] byteArray74 = base64_46.encode(byteArray70);
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.EncoderException: org.apache.commons.codec.DecoderException: ");
        byte[] byteArray77 = base64_46.encode(byteArray76);
        java.lang.Object obj78 = base64_44.decode((java.lang.Object) byteArray76);
        java.lang.Object obj79 = base64_24.decode(obj78);
        byte[] byteArray81 = new byte[] { (byte) 0 };
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray81, false, true);
        byte[] byteArray85 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray84);
        byte[] byteArray86 = base64_24.decode(byteArray84);
        byte[] byteArray87 = base64_1.decode(byteArray84);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str10, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[65, 65]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[85, 86, 86, 70, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[85, 86, 86, 70, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 73, -36, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 69, 110, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 103, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[0]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[81, 85, 69]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[0]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[0]");
    }

    @Test
    public void test641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test641");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '4', byteArray1);
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, false, false);
        java.math.BigInteger bigInteger12 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger12);
        // The following exception was thrown during execution in test generation
        try {
            base64_2.encode(byteArray14, (int) '4', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100, 10, -1, 100]");
    }

    @Test
    public void test642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test642");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray4 = base64_2.decode("");
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] {};
        base64_6.decode(byteArray7, (int) 'a', (-1));
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, true, true, (int) (byte) 100);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        byte[] byteArray17 = base64_2.encode(byteArray16);
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray16);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray16);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
    }

    @Test
    public void test643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test643");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray23 = new byte[] {};
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false, 10);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.String str30 = base64_1.encodeToString(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_32.decode(byteArray37);
        byte[] byteArray40 = base64_32.decode("");
        byte[] byteArray41 = new byte[] {};
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, false, false, 10);
        byte[] byteArray46 = base64_32.decode(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray46);
        byte[] byteArray48 = base64_1.decode(byteArray46);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray51 = new byte[] {};
        base64_50.decode(byteArray51, (int) 'a', (-1));
        byte[] byteArray56 = base64_50.decode("QUdRQkFBPT0");
        byte[] byteArray58 = null;
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64(10, byteArray58);
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray66 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66, false, false);
        java.math.BigInteger bigInteger70 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray69);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger70);
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger70);
        java.lang.Object obj73 = base64_60.encode((java.lang.Object) byteArray72);
        java.lang.Object obj74 = base64_59.encode((java.lang.Object) byteArray72);
        java.lang.Object obj75 = base64_50.encode((java.lang.Object) byteArray72);
        byte[] byteArray76 = base64_1.encode(byteArray72);
        boolean boolean77 = base64_1.hasData();
        org.apache.commons.codec.binary.Base64 base64_79 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray80 = new byte[] {};
        base64_79.decode(byteArray80, (int) 'a', (-1));
        byte[] byteArray87 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray80, true, true, (int) (byte) 100);
        byte[] byteArray91 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray87, true, false, 1);
        byte[] byteArray92 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray87);
        byte[] byteArray93 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray92);
        byte[] byteArray94 = base64_1.decode(byteArray92);
        byte[] byteArray97 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray94, true, false);
        byte[] byteArray98 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray94);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
        org.junit.Assert.assertNotNull(byteArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray97), "[]");
        org.junit.Assert.assertNotNull(byteArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray98), "[]");
    }

    @Test
    public void test644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test644");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) -1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        byte[] byteArray11 = base64_3.decode("");
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_3.decode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray20 = new byte[] {};
        base64_19.decode(byteArray20, (int) 'a', (-1));
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, true, true, (int) (byte) 100);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, true, false, 1);
        java.lang.Object obj32 = base64_3.encode((java.lang.Object) byteArray31);
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray37);
        java.lang.Object obj39 = base64_3.encode((java.lang.Object) byteArray37);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        java.lang.Object obj41 = base64_1.decode((java.lang.Object) byteArray40);
        boolean boolean42 = base64_1.hasData();
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        java.lang.String str45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray44);
        base64_1.decode(byteArray44, (int) (short) 0, 0);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false);
        boolean boolean51 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray50);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test645");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray19 = new byte[] {};
        base64_18.decode(byteArray19, (int) 'a', (-1));
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, true, true, (int) (byte) 100);
        boolean boolean27 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray26);
        byte[] byteArray28 = base64_2.encode(byteArray26);
        byte[] byteArray30 = base64_2.decode("QUE");
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false, false);
        java.math.BigInteger bigInteger40 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray39);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger40);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger40);
        java.lang.Object obj43 = base64_2.encode((java.lang.Object) byteArray42);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray42);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64(0, byteArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [/2QK/2Q=]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[47, 50, 81, 75, 47, 50, 81, 61]");
    }

    @Test
    public void test646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test646");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger11);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger11);
        java.lang.Object obj14 = base64_1.encode((java.lang.Object) byteArray13);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false, false);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray19);
        base64_1.encode(byteArray23, 0, 10);
        byte[] byteArray28 = new byte[] { (byte) 0 };
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, false, true);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray31);
        byte[] byteArray33 = base64_1.decode(byteArray31);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, true, (int) '4');
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64(10, byteArray33, true);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray42 = new byte[] {};
        base64_41.decode(byteArray42, (int) 'a', (-1));
        byte[] byteArray47 = base64_41.decode("QUdRQkFBPT0");
        byte[] byteArray49 = null;
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64(10, byteArray49);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray57 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57, false, false);
        java.math.BigInteger bigInteger61 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray60);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger61);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger61);
        java.lang.Object obj64 = base64_51.encode((java.lang.Object) byteArray63);
        java.lang.Object obj65 = base64_50.encode((java.lang.Object) byteArray63);
        java.lang.Object obj66 = base64_41.encode((java.lang.Object) byteArray63);
        java.lang.String str67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray63);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray63, false, false);
        base64_39.decode(byteArray63, 0, 0);
        boolean boolean74 = base64_39.hasData();
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.decodeBase64("/2QK/2Q=\r\n");
        boolean boolean77 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray76);
        // The following exception was thrown during execution in test generation
        try {
            base64_39.decode(byteArray76, (int) 'a', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger61);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "LzJRSy8yUT0" + "'", str67, "LzJRSy8yUT0");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test647");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, false, false);
        base64_2.setInitialBuffer(byteArray11, (int) '#', (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray11, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [/2QK/2Q=]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[47, 50, 81, 75, 47, 50, 81, 61]");
    }

    @Test
    public void test648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test648");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        java.lang.String str21 = base64_1.encodeToString(byteArray16);
        boolean boolean22 = base64_1.isUrlSafe();
        byte[] byteArray23 = null;
        int int26 = base64_1.readResults(byteArray23, (int) (byte) 1, 76);
        byte[] byteArray27 = null;
        base64_1.setInitialBuffer(byteArray27, 0, (int) (byte) 10);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray35 = new byte[] {};
        base64_34.decode(byteArray35, (int) 'a', (-1));
        byte[] byteArray40 = base64_34.decode("QUdRQkFBPT0");
        java.lang.String str41 = base64_32.encodeToString(byteArray40);
        boolean boolean42 = base64_32.hasData();
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: hi!");
        java.math.BigInteger bigInteger45 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray44);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger45);
        byte[] byteArray47 = base64_32.encode(byteArray46);
        java.lang.Object obj48 = base64_1.encode((java.lang.Object) byteArray46);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.EncoderException");
        byte[] byteArray51 = base64_1.decode(byteArray50);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str41, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertNotNull(bigInteger45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[121, 114, 112, 55]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[101, 88, 74, 119, 78, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 73, -36, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-54, -70, 72]");
    }

    @Test
    public void test649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test649");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray4 = base64_2.decode("");
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] {};
        base64_6.decode(byteArray7, (int) 'a', (-1));
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, true, true, (int) (byte) 100);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        byte[] byteArray17 = base64_2.encode(byteArray16);
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray16);
        boolean boolean20 = base64_19.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray23 = new byte[] {};
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false, 10);
        byte[] byteArray28 = base64_22.decode(byteArray27);
        byte[] byteArray30 = base64_22.decode("");
        byte[] byteArray31 = new byte[] {};
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false, 10);
        byte[] byteArray36 = base64_22.decode(byteArray35);
        boolean boolean37 = base64_22.isUrlSafe();
        byte[] byteArray39 = new byte[] {};
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, false, false, 10);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray43);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray43);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45);
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64(0, byteArray46);
        java.lang.String str48 = base64_22.encodeToString(byteArray46);
        byte[] byteArray50 = new byte[] { (byte) 0 };
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, false, true);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray53);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, true);
        int int59 = base64_22.readResults(byteArray53, 0, (int) (short) 100);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray53);
        java.lang.String str61 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray60);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray60);
        int int65 = base64_19.readResults(byteArray60, (-1), (int) (byte) 0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[65, 65]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "QUE=\r\n" + "'", str61, "QUE=\r\n");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test650");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) (short) -1);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] {};
        base64_6.decode(byteArray7, (int) 'a', (-1));
        byte[] byteArray15 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, false, false);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray15);
        byte[] byteArray20 = base64_6.encode(byteArray15);
        java.lang.Object obj21 = base64_4.encode((java.lang.Object) byteArray15);
        byte[] byteArray27 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false, false);
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray30);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray30);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray30);
        byte[] byteArray34 = base64_4.encode(byteArray30);
        byte[] byteArray35 = base64_2.decode(byteArray30);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray30);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64(0, byteArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [/2QK/2Q=]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 50, 81, 75, 47, 50, 81, 61]");
    }

    @Test
    public void test651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test651");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray14 = null;
        java.lang.String str15 = base64_0.encodeToString(byteArray14);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.EncoderException");
        java.lang.Object obj18 = base64_0.decode((java.lang.Object) "org.apache.commons.codec.EncoderException");
        boolean boolean19 = base64_0.isUrlSafe();
        byte[] byteArray20 = null;
        byte[] byteArray21 = base64_0.encode(byteArray20);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 73, -36, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(byteArray21);
    }

    @Test
    public void test652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test652");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray9 = base64_3.decode("QUdRQkFBPT0");
        java.lang.String str10 = base64_1.encodeToString(byteArray9);
        boolean boolean11 = base64_1.hasData();
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: hi!");
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger14);
        byte[] byteArray16 = base64_1.encode(byteArray15);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str10, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[121, 114, 112, 55]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[101, 88, 74, 119, 78, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[90, 86, 104, 75, 100, 48, 53, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[90, 86, 104, 75, 100, 48, 53, 51, 80, 84, 48, 78, 67, 103, 61, 61]");
    }

    @Test
    public void test653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test653");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray5 = new byte[] {};
        base64_4.decode(byteArray5, (int) 'a', (-1));
        byte[] byteArray10 = base64_4.decode("QUdRQkFBPT0");
        java.lang.String str11 = base64_2.encodeToString(byteArray10);
        boolean boolean12 = base64_2.hasData();
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray15 = new byte[] {};
        base64_14.decode(byteArray15, (int) 'a', (-1));
        byte[] byteArray20 = base64_14.decode("QUdRQkFBPT0");
        base64_2.decode(byteArray20, 0, (int) (short) 0);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray26 = new byte[] {};
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, false, 10);
        byte[] byteArray31 = base64_25.decode(byteArray30);
        byte[] byteArray33 = base64_25.decode("");
        byte[] byteArray34 = new byte[] {};
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false, false, 10);
        byte[] byteArray39 = base64_25.decode(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray42 = new byte[] {};
        base64_41.decode(byteArray42, (int) 'a', (-1));
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, true, (int) (byte) 100);
        boolean boolean50 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray49);
        byte[] byteArray51 = base64_25.encode(byteArray49);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray49, false);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, true, true, (int) '#');
        byte[] byteArray58 = base64_2.decode(byteArray53);
        java.lang.String str59 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray58);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray58);
        java.lang.String str61 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray60);
        org.apache.commons.codec.binary.Base64 base64_62 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray60);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str11, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
    }

    @Test
    public void test654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test654");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray1, false);
    }

    @Test
    public void test655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test655");
        byte[] byteArray0 = new byte[] {};
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray0, false, false, 10);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 100);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, false, (int) 'a');
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, true);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
    }

    @Test
    public void test656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test656");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray10 = new byte[] {};
        base64_9.decode(byteArray10, (int) 'a', (-1));
        byte[] byteArray15 = base64_9.decode("QUdRQkFBPT0");
        byte[] byteArray17 = null;
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64(10, byteArray17);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false);
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger29);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger29);
        java.lang.Object obj32 = base64_19.encode((java.lang.Object) byteArray31);
        java.lang.Object obj33 = base64_18.encode((java.lang.Object) byteArray31);
        java.lang.Object obj34 = base64_9.encode((java.lang.Object) byteArray31);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        byte[] byteArray36 = base64_1.decode(byteArray31);
        byte[] byteArray38 = null;
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64(10, byteArray38);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, false, false);
        java.math.BigInteger bigInteger50 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray49);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger50);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger50);
        java.lang.Object obj53 = base64_40.encode((java.lang.Object) byteArray52);
        java.lang.Object obj54 = base64_39.encode((java.lang.Object) byteArray52);
        byte[] byteArray55 = null;
        base64_39.encode(byteArray55, (-1), 0);
        byte[] byteArray63 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray63, false, false);
        java.math.BigInteger bigInteger67 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray63);
        byte[] byteArray68 = base64_39.decode(byteArray63);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray68);
        base64_1.encode(byteArray69, 0, (int) ' ');
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
    }

    @Test
    public void test657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test657");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        boolean boolean16 = base64_1.isUrlSafe();
        byte[] byteArray18 = new byte[] {};
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false, 10);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64(0, byteArray25);
        java.lang.String str27 = base64_1.encodeToString(byteArray25);
        boolean boolean28 = base64_1.hasData();
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray35 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false, false);
        java.math.BigInteger bigInteger39 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray38);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger39);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger39);
        java.lang.Object obj42 = base64_29.encode((java.lang.Object) byteArray41);
        byte[] byteArray48 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, false, false);
        java.math.BigInteger bigInteger52 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray51);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger52);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger52);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger52);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger52);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger52);
        java.lang.Object obj58 = base64_29.decode((java.lang.Object) byteArray57);
        byte[] byteArray63 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray63, false, false);
        java.lang.String str67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray66);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray66);
        byte[] byteArray69 = base64_29.encode(byteArray66);
        org.apache.commons.codec.binary.Base64 base64_71 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray72 = new byte[] {};
        base64_71.decode(byteArray72, (int) 'a', (-1));
        byte[] byteArray77 = base64_71.decode("QUdRQkFBPT0");
        java.math.BigInteger bigInteger78 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray77);
        byte[] byteArray80 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray77, true);
        java.lang.Object obj81 = base64_29.encode((java.lang.Object) byteArray80);
        byte[] byteArray82 = base64_1.encode(byteArray80);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "QUdRQkFBPT0" + "'", str67, "QUdRQkFBPT0");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger78);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[85, 86, 86, 107, 85, 108, 70, 114, 82, 107, 74, 81, 86, 68, 65, 57, 68, 81, 111, 61, 13, 10]");
    }

    @Test
    public void test658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test658");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        boolean boolean2 = base64_1.isUrlSafe();
        boolean boolean3 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] {};
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false, 10);
        byte[] byteArray12 = base64_6.decode(byteArray11);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64(100, byteArray12);
        int int16 = base64_1.readResults(byteArray12, 1, (int) (byte) 1);
        boolean boolean17 = base64_1.hasData();
        byte[] byteArray18 = null;
        base64_1.encode(byteArray18, 0, (int) (short) -1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test659");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray10 = new byte[] {};
        base64_9.decode(byteArray10, (int) 'a', (-1));
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, true, true, (int) (byte) 100);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, true, false, 1);
        base64_3.setInitialBuffer(byteArray21, (int) (byte) 10, 100);
        byte[] byteArray25 = new byte[] {};
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false, 10);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray29);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray29);
        java.lang.String str32 = base64_3.encodeToString(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray35 = new byte[] {};
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false, false, 10);
        byte[] byteArray40 = base64_34.decode(byteArray39);
        byte[] byteArray42 = base64_34.decode("");
        byte[] byteArray43 = new byte[] {};
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false, false, 10);
        byte[] byteArray48 = base64_34.decode(byteArray47);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray48);
        byte[] byteArray50 = base64_3.decode(byteArray48);
        byte[] byteArray51 = base64_1.decode(byteArray48);
        byte[] byteArray52 = null;
        byte[] byteArray53 = base64_1.decode(byteArray52);
        boolean boolean54 = base64_1.isUrlSafe();
        byte[] byteArray56 = base64_1.decode("");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNull(byteArray53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
    }

    @Test
    public void test660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test660");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray18);
        base64_0.encode(byteArray22, 0, 10);
        byte[] byteArray27 = new byte[] { (byte) 0 };
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false, true);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray30);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, true);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, true, true);
        base64_0.encode(byteArray36, (int) (short) -1, (int) (byte) 0);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) (byte) 0);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray44 = new byte[] {};
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false, false, 10);
        byte[] byteArray49 = base64_43.decode(byteArray48);
        byte[] byteArray51 = base64_43.decode("");
        byte[] byteArray52 = new byte[] {};
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52, false, false, 10);
        byte[] byteArray57 = base64_43.decode(byteArray56);
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray60 = new byte[] {};
        base64_59.decode(byteArray60, (int) 'a', (-1));
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray60, true, true, (int) (byte) 100);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray67, true, false, 1);
        java.lang.Object obj72 = base64_43.encode((java.lang.Object) byteArray71);
        byte[] byteArray73 = new byte[] {};
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray73, false, false, 10);
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray77);
        java.lang.Object obj79 = base64_43.encode((java.lang.Object) byteArray77);
        byte[] byteArray80 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray77);
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray77);
        base64_41.setInitialBuffer(byteArray81, 10, 14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj85 = base64_0.encode((java.lang.Object) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[85, 86, 86, 70, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
    }

    @Test
    public void test661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test661");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger11);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger11);
        java.lang.Object obj14 = base64_1.encode((java.lang.Object) byteArray13);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false, false);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray19);
        base64_1.encode(byteArray23, 0, 10);
        byte[] byteArray28 = new byte[] { (byte) 0 };
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, false, true);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray31);
        byte[] byteArray33 = base64_1.decode(byteArray31);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, true, (int) '4');
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64(10, byteArray33, true);
        int int40 = base64_39.avail();
        boolean boolean41 = base64_39.isUrlSafe();
        byte[] byteArray43 = base64_39.decode("LzJRSy8yUT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[65, 65]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[47, 50, 81, 75, 47, 50, 81, 61]");
    }

    @Test
    public void test662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test662");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 50, 81, 75, 47, 50, 81, 61]");
    }

    @Test
    public void test663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test663");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        java.lang.String str21 = base64_1.encodeToString(byteArray16);
        boolean boolean22 = base64_1.isUrlSafe();
        byte[] byteArray23 = null;
        int int26 = base64_1.readResults(byteArray23, (int) (byte) 1, 76);
        byte[] byteArray27 = null;
        base64_1.setInitialBuffer(byteArray27, 0, (int) (byte) 10);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray35 = new byte[] {};
        base64_34.decode(byteArray35, (int) 'a', (-1));
        byte[] byteArray40 = base64_34.decode("QUdRQkFBPT0");
        java.lang.String str41 = base64_32.encodeToString(byteArray40);
        boolean boolean42 = base64_32.hasData();
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: hi!");
        java.math.BigInteger bigInteger45 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray44);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger45);
        byte[] byteArray47 = base64_32.encode(byteArray46);
        java.lang.Object obj48 = base64_1.encode((java.lang.Object) byteArray46);
        byte[] byteArray49 = null;
        base64_1.encode(byteArray49, 76, 76);
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray56 = new byte[] {};
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray56, false, false, 10);
        byte[] byteArray61 = base64_55.decode(byteArray60);
        byte[] byteArray63 = base64_55.decode("");
        byte[] byteArray64 = new byte[] {};
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray64, false, false, 10);
        byte[] byteArray69 = base64_55.decode(byteArray68);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray69);
        org.apache.commons.codec.binary.Base64 base64_72 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray70, false);
        byte[] byteArray73 = new byte[] {};
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray73);
        byte[] byteArray75 = base64_72.decode(byteArray73);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException");
        java.lang.String str78 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray77);
        byte[] byteArray79 = base64_72.encode(byteArray77);
        byte[] byteArray80 = base64_1.decode(byteArray79);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str41, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertNotNull(bigInteger45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[121, 114, 112, 55]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[101, 88, 74, 119, 78, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "orgapachecommonscodecDecoderExceptio\r\n" + "'", str78, "orgapachecommonscodecDecoderExceptio\r\n");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
    }

    @Test
    public void test664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test664");
        byte[] byteArray5 = new byte[] { (byte) 0, (byte) 10, (byte) 1, (byte) 0, (byte) 10 };
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray6);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 10, 1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
    }

    @Test
    public void test665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test665");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        base64_2.decode(byteArray3, (int) 'a', (-1));
        byte[] byteArray11 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray11);
        byte[] byteArray16 = base64_2.encode(byteArray11);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray19 = new byte[] {};
        base64_18.decode(byteArray19, (int) 'a', (-1));
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, true, true, (int) (byte) 100);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, true, false, 1);
        byte[] byteArray31 = base64_2.encode(byteArray30);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray36 = new byte[] {};
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false, false, 10);
        byte[] byteArray41 = base64_35.decode(byteArray40);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64(100, byteArray41);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64((int) (short) 1, byteArray41);
        byte[] byteArray44 = base64_2.decode(byteArray41);
        byte[] byteArray46 = base64_2.decode("org.apache.commons.codec.DecoderException: ");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray46, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [?????!y?&???r?^p7????????]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
    }

    @Test
    public void test666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test666");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        boolean boolean2 = base64_1.isUrlSafe();
        byte[] byteArray4 = new byte[] { (byte) 0 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, true);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray7);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        int int12 = base64_1.readResults(byteArray9, (int) (byte) -1, (int) (short) 100);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[85, 86, 86, 70, 80, 81, 48, 75]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test667");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray24 = new byte[] { (byte) 0 };
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, true);
        boolean boolean28 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray27);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, true, false, (int) '#');
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        byte[] byteArray34 = base64_1.decode(byteArray33);
        byte[] byteArray35 = null;
        byte[] byteArray36 = base64_1.encode(byteArray35);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[65, 65]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[85, 86, 86, 70, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNull(byteArray36);
    }

    @Test
    public void test668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test668");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, false);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger13);
        java.lang.Object obj16 = base64_3.encode((java.lang.Object) byteArray15);
        java.lang.Object obj17 = base64_2.encode((java.lang.Object) byteArray15);
        byte[] byteArray18 = null;
        base64_2.encode(byteArray18, (-1), 0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, false);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray31 = base64_2.decode(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray37 = new byte[] {};
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, false, 10);
        byte[] byteArray42 = base64_36.decode(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray42, false);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64(76, byteArray42, true);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, true, (int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64((-1), byteArray51);
        int int55 = base64_2.readResults(byteArray51, 100, (int) (short) 10);
        byte[] byteArray56 = null;
        int int59 = base64_2.readResults(byteArray56, (int) (short) 1, (int) (byte) 1);
        org.apache.commons.codec.binary.Base64 base64_61 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray64 = new byte[] {};
        base64_63.decode(byteArray64, (int) 'a', (-1));
        byte[] byteArray69 = base64_63.decode("QUdRQkFBPT0");
        java.lang.String str70 = base64_61.encodeToString(byteArray69);
        boolean boolean71 = base64_61.hasData();
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: hi!");
        java.math.BigInteger bigInteger74 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray73);
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger74);
        byte[] byteArray76 = base64_61.encode(byteArray75);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray75);
        java.lang.Object obj78 = base64_2.decode((java.lang.Object) byteArray77);
        int int79 = base64_2.avail();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str70, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertNotNull(bigInteger74);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[121, 114, 112, 55]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[101, 88, 74, 119, 78, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[101, 88, 74, 119, 78, 119, 61, 61]");
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test669");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = new byte[] {};
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false, 10);
        java.lang.String str22 = base64_2.encodeToString(byteArray17);
        boolean boolean23 = base64_2.isUrlSafe();
        byte[] byteArray24 = null;
        int int27 = base64_2.readResults(byteArray24, (int) (byte) 1, 76);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray30 = new byte[] {};
        base64_29.decode(byteArray30, (int) 'a', (-1));
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, true, true, (int) (byte) 100);
        byte[] byteArray38 = base64_2.decode(byteArray30);
        byte[] byteArray39 = null;
        byte[] byteArray40 = base64_2.decode(byteArray39);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray43 = new byte[] {};
        base64_42.decode(byteArray43, (int) 'a', (-1));
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, true, true, (int) (byte) 100);
        byte[] byteArray51 = base64_2.encode(byteArray43);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64((int) ' ', byteArray51);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
    }

    @Test
    public void test670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test670");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        byte[] byteArray9 = null;
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(10, byteArray9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger21);
        java.lang.Object obj24 = base64_11.encode((java.lang.Object) byteArray23);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray23);
        java.lang.Object obj26 = base64_1.encode((java.lang.Object) byteArray23);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, false, 10);
        byte[] byteArray34 = base64_28.decode(byteArray33);
        byte[] byteArray36 = base64_28.decode("");
        byte[] byteArray37 = new byte[] {};
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, false, 10);
        byte[] byteArray42 = base64_28.decode(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray45 = new byte[] {};
        base64_44.decode(byteArray45, (int) 'a', (-1));
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, true, true, (int) (byte) 100);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52, true, false, 1);
        java.lang.Object obj57 = base64_28.encode((java.lang.Object) byteArray56);
        byte[] byteArray58 = new byte[] {};
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray58, false, false, 10);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray62);
        java.lang.Object obj64 = base64_28.encode((java.lang.Object) byteArray62);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        int int69 = base64_28.readResults(byteArray66, (int) (byte) 0, 10);
        java.lang.Object obj70 = base64_1.decode((java.lang.Object) byteArray66);
        java.math.BigInteger bigInteger71 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray66);
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger71);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94, 122, 43, -127, -86, 90, 114, 23, -100, -94, 105, -88, -98, -57, 40, 117, -25, 4, -99, -54, 29, 122, -79, 49, 113, -22, 109, -118, -119]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertNotNull(bigInteger71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -70, 123, -114, 60, -85, 47, 54, -13, -7, -102, -30, -69, 61, 106]");
    }

    @Test
    public void test671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test671");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 0);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray6 = new byte[] {};
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false, 10);
        byte[] byteArray11 = base64_5.decode(byteArray10);
        byte[] byteArray13 = base64_5.decode("");
        byte[] byteArray14 = new byte[] {};
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false, false, 10);
        byte[] byteArray19 = base64_5.decode(byteArray18);
        base64_3.setInitialBuffer(byteArray19, 1, 0);
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        base64_1.setInitialBuffer(byteArray19, (int) 'a', (int) (short) 10);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        boolean boolean29 = base64_28.isUrlSafe();
        boolean boolean30 = base64_28.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray34 = new byte[] {};
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false, false, 10);
        byte[] byteArray39 = base64_33.decode(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64(100, byteArray39);
        int int43 = base64_28.readResults(byteArray39, 1, (int) (byte) 1);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, false);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, true, true, 0);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray45);
        byte[] byteArray51 = base64_1.encode(byteArray50);
        java.lang.String str52 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray51);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
    }

    @Test
    public void test672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test672");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        byte[] byteArray21 = base64_1.encode(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray24 = new byte[] {};
        base64_23.decode(byteArray24, (int) 'a', (-1));
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, true, (int) (byte) 100);
        java.lang.String str32 = base64_1.encodeToString(byteArray31);
        byte[] byteArray34 = base64_1.decode("ZFE=\r\n");
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34);
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100, 81]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[90, 70, 69, 61]");
        org.junit.Assert.assertNotNull(bigInteger36);
    }

    @Test
    public void test673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test673");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64("AGQBAA==\r\n");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray24);
        byte[] byteArray26 = base64_1.encode(byteArray25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray27);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
    }

    @Test
    public void test674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test674");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(100, byteArray8);
        boolean boolean10 = base64_9.hasData();
        byte[] byteArray12 = base64_9.decode("QUdRQkFBPT0=\r\n");
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray20);
        byte[] byteArray22 = base64_9.encode(byteArray21);
        byte[] byteArray24 = base64_9.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.DecoderException: ");
        boolean boolean25 = base64_9.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 73, -36, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test675");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        base64_2.decode(byteArray3, (int) 'a', (-1));
        byte[] byteArray8 = base64_2.decode("QUdRQkFBPT0");
        byte[] byteArray10 = null;
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64(10, byteArray10);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger22);
        java.lang.Object obj25 = base64_12.encode((java.lang.Object) byteArray24);
        java.lang.Object obj26 = base64_11.encode((java.lang.Object) byteArray24);
        java.lang.Object obj27 = base64_2.encode((java.lang.Object) byteArray24);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray30 = new byte[] {};
        base64_29.decode(byteArray30, (int) 'a', (-1));
        byte[] byteArray35 = base64_29.decode("QUdRQkFBPT0");
        base64_2.encode(byteArray35, 10, 10);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray42 = base64_40.decode("");
        java.lang.Object obj43 = base64_2.decode((java.lang.Object) byteArray42);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray46 = new byte[] {};
        base64_45.decode(byteArray46, (int) 'a', (-1));
        byte[] byteArray54 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54, false, false);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray54);
        byte[] byteArray59 = base64_45.encode(byteArray54);
        org.apache.commons.codec.binary.Base64 base64_61 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray62 = new byte[] {};
        base64_61.decode(byteArray62, (int) 'a', (-1));
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, true, true, (int) (byte) 100);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray69, true, false, 1);
        byte[] byteArray74 = base64_45.encode(byteArray73);
        org.apache.commons.codec.binary.Base64 base64_78 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray79 = new byte[] {};
        byte[] byteArray83 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray79, false, false, 10);
        byte[] byteArray84 = base64_78.decode(byteArray83);
        org.apache.commons.codec.binary.Base64 base64_85 = new org.apache.commons.codec.binary.Base64(100, byteArray84);
        org.apache.commons.codec.binary.Base64 base64_86 = new org.apache.commons.codec.binary.Base64((int) (short) 1, byteArray84);
        byte[] byteArray87 = base64_45.decode(byteArray84);
        java.math.BigInteger bigInteger88 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray84);
        byte[] byteArray89 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger88);
        java.lang.String str90 = base64_2.encodeToString(byteArray89);
        org.apache.commons.codec.binary.Base64 base64_91 = new org.apache.commons.codec.binary.Base64((int) '4', byteArray89);
        boolean boolean92 = base64_91.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertNotNull(bigInteger88);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test676");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) 0);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        byte[] byteArray11 = base64_3.decode("");
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_3.decode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray20 = new byte[] {};
        base64_19.decode(byteArray20, (int) 'a', (-1));
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, true, true, (int) (byte) 100);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, true, false, 1);
        java.lang.Object obj32 = base64_3.encode((java.lang.Object) byteArray31);
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray37);
        java.lang.Object obj39 = base64_3.encode((java.lang.Object) byteArray37);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray37);
        base64_1.setInitialBuffer(byteArray41, 10, 14);
        byte[] byteArray46 = base64_1.decode("org.apache.commons.codec.EncoderException: QUE=\r\n");
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray49 = new byte[] {};
        base64_48.decode(byteArray49, (int) 'a', (-1));
        byte[] byteArray54 = base64_48.decode("QUdRQkFBPT0");
        byte[] byteArray56 = null;
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64(10, byteArray56);
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray64 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray64, false, false);
        java.math.BigInteger bigInteger68 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray67);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger68);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger68);
        java.lang.Object obj71 = base64_58.encode((java.lang.Object) byteArray70);
        java.lang.Object obj72 = base64_57.encode((java.lang.Object) byteArray70);
        java.lang.Object obj73 = base64_48.encode((java.lang.Object) byteArray70);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj74 = base64_1.decode((java.lang.Object) base64_48);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 73, -36, -95, -41, -85, 19, 23, 30, -90, -40, -88, -99, 5, 4]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger68);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertNotNull(obj73);
    }

    @Test
    public void test677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test677");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, false);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger13);
        java.lang.Object obj16 = base64_3.encode((java.lang.Object) byteArray15);
        java.lang.Object obj17 = base64_2.encode((java.lang.Object) byteArray15);
        byte[] byteArray18 = null;
        base64_2.encode(byteArray18, (-1), 0);
        int int22 = base64_2.avail();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12);
    }

    @Test
    public void test678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test678");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        java.lang.Object obj3 = base64_1.decode((java.lang.Object) "org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray13 = base64_7.decode("QUdRQkFBPT0");
        java.lang.String str14 = base64_5.encodeToString(byteArray13);
        boolean boolean15 = base64_5.hasData();
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: hi!");
        java.math.BigInteger bigInteger18 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger18);
        byte[] byteArray20 = base64_5.encode(byteArray19);
        base64_1.decode(byteArray20, 0, (-1));
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray20);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str14, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[121, 114, 112, 55]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[101, 88, 74, 119, 78, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[121, 114, 112, 55]");
    }

    @Test
    public void test679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test679");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LzJRSy8yUT0" + "'", str14, "LzJRSy8yUT0");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "LzJRSy8yUT0" + "'", str15, "LzJRSy8yUT0");
    }

    @Test
    public void test680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test680");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) -1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray10 = new byte[] {};
        base64_9.decode(byteArray10, (int) 'a', (-1));
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, true, true, (int) (byte) 100);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, true, false, 1);
        base64_3.setInitialBuffer(byteArray21, (int) (byte) 10, 100);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64("AGQBAA==\r\n");
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        byte[] byteArray28 = base64_3.encode(byteArray27);
        byte[] byteArray29 = base64_1.encode(byteArray27);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray29);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(bigInteger30);
    }

    @Test
    public void test681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test681");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(14);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray6 = new byte[] {};
        base64_5.decode(byteArray6, (int) 'a', (-1));
        byte[] byteArray11 = base64_5.decode("QUdRQkFBPT0");
        java.lang.String str12 = base64_3.encodeToString(byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray11);
        base64_1.encode(byteArray13, (-1), (int) (byte) -1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str12, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[65, 71, 81, 66, 65, 65, 61, 61]");
    }

    @Test
    public void test682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test682");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray5 = new byte[] {};
        base64_4.decode(byteArray5, (int) 'a', (-1));
        byte[] byteArray10 = base64_4.decode("QUdRQkFBPT0");
        java.lang.String str11 = base64_2.encodeToString(byteArray10);
        boolean boolean12 = base64_2.hasData();
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: hi!");
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger15);
        byte[] byteArray17 = base64_2.encode(byteArray16);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64(20, byteArray16, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [yrp7]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str11, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[121, 114, 112, 55]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[101, 88, 74, 119, 78, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[101, 88, 74, 119, 78, 119, 61, 61]");
    }

    @Test
    public void test683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test683");
        byte[] byteArray0 = null;
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray0, false, false);
        org.junit.Assert.assertNull(byteArray3);
    }

    @Test
    public void test684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test684");
        byte[] byteArray1 = new byte[] {};
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, false, 10);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false, (int) (short) 0);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64(0, byteArray11, true);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
    }

    @Test
    public void test685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test685");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false);
        base64_1.setInitialBuffer(byteArray10, (int) '#', (int) (byte) -1);
        byte[] byteArray15 = new byte[] {};
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, false, false, 10);
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64(0, byteArray19);
        java.lang.String str22 = base64_1.encodeToString(byteArray19);
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(bigInteger23);
    }

    @Test
    public void test686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test686");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(false);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) (short) -1);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray6 = new byte[] {};
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false, 10);
        byte[] byteArray11 = base64_5.decode(byteArray10);
        byte[] byteArray13 = base64_5.decode("");
        byte[] byteArray14 = new byte[] {};
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false, false, 10);
        byte[] byteArray19 = base64_5.decode(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray22 = new byte[] {};
        base64_21.decode(byteArray22, (int) 'a', (-1));
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, true, true, (int) (byte) 100);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, false, 1);
        java.lang.Object obj34 = base64_5.encode((java.lang.Object) byteArray33);
        byte[] byteArray35 = new byte[] {};
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false, false, 10);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray39);
        java.lang.Object obj41 = base64_5.encode((java.lang.Object) byteArray39);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray39);
        java.lang.Object obj43 = base64_3.decode((java.lang.Object) byteArray42);
        boolean boolean44 = base64_3.hasData();
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        java.lang.String str47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray46);
        base64_3.decode(byteArray46, (int) (short) 0, 0);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray53 = new byte[] {};
        base64_52.decode(byteArray53, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray59 = new byte[] {};
        base64_58.decode(byteArray59, (int) 'a', (-1));
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59, true, true, (int) (byte) 100);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66, true, false, 1);
        base64_52.setInitialBuffer(byteArray70, (int) (byte) 10, 100);
        byte[] byteArray74 = new byte[] {};
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray74, false, false, 10);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray78);
        byte[] byteArray80 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray78);
        java.lang.String str81 = base64_52.encodeToString(byteArray80);
        base64_3.decode(byteArray80, (int) ' ', 0);
        java.lang.String str85 = base64_1.encodeToString(byteArray80);
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray80);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
    }

    @Test
    public void test687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test687");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray9 = base64_3.decode("QUdRQkFBPT0");
        java.lang.String str10 = base64_1.encodeToString(byteArray9);
        boolean boolean11 = base64_1.hasData();
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray16);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false);
        base64_1.encode(byteArray20, 0, 0);
        byte[] byteArray29 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, false);
        byte[] byteArray33 = base64_1.decode(byteArray29);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, true, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (10) than the specified maxium size of -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str10, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[117]");
    }

    @Test
    public void test688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test688");
        byte[] byteArray0 = new byte[] {};
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray0, false, false, 10);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray4);
        boolean boolean7 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, true);
        boolean boolean11 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray10);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 20);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
    }

    @Test
    public void test689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test689");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        java.lang.String str31 = base64_1.encodeToString(byteArray30);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray34 = new byte[] {};
        base64_33.decode(byteArray34, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray40 = new byte[] {};
        base64_39.decode(byteArray40, (int) 'a', (-1));
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40, true, true, (int) (byte) 100);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, true, false, 1);
        base64_33.setInitialBuffer(byteArray51, (int) (byte) 10, 100);
        byte[] byteArray55 = new byte[] {};
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray55, false, false, 10);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray59);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray59);
        java.lang.String str62 = base64_33.encodeToString(byteArray61);
        org.apache.commons.codec.binary.Base64 base64_64 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray65 = new byte[] {};
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray65, false, false, 10);
        byte[] byteArray70 = base64_64.decode(byteArray69);
        byte[] byteArray72 = base64_64.decode("");
        byte[] byteArray73 = new byte[] {};
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray73, false, false, 10);
        byte[] byteArray78 = base64_64.decode(byteArray77);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray78);
        byte[] byteArray80 = base64_33.decode(byteArray78);
        boolean boolean81 = base64_33.hasData();
        byte[] byteArray83 = base64_33.decode("org.apache.commons.codec.DecoderException: ");
        byte[] byteArray85 = base64_33.decode("");
        java.lang.String str86 = base64_1.encodeToString(byteArray85);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
    }

    @Test
    public void test690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test690");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray17);
        java.math.BigInteger bigInteger19 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray17);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger19);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(bigInteger19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
    }

    @Test
    public void test691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test691");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray18);
        base64_0.encode(byteArray22, 0, 10);
        byte[] byteArray27 = new byte[] { (byte) 0 };
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false, true);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray30);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, true);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, true, true);
        base64_0.encode(byteArray36, (int) (short) -1, (int) (byte) 0);
        byte[] byteArray40 = null;
        byte[] byteArray41 = base64_0.decode(byteArray40);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray48 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, false, false);
        java.math.BigInteger bigInteger52 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray51);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger52);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger52);
        java.lang.Object obj55 = base64_42.encode((java.lang.Object) byteArray54);
        byte[] byteArray60 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray60, false, false);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray60);
        base64_42.encode(byteArray64, 0, 10);
        byte[] byteArray69 = new byte[] { (byte) 0 };
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray69, false, true);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray72);
        byte[] byteArray74 = base64_42.decode(byteArray72);
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray74, false, true, (int) '4');
        java.math.BigInteger bigInteger79 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray74);
        byte[] byteArray80 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger79);
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger79);
        java.lang.Object obj82 = base64_0.decode((java.lang.Object) byteArray81);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[85, 86, 86, 70, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[0]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[0]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[65, 65]");
        org.junit.Assert.assertNotNull(bigInteger79);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNotNull(obj82);
    }

    @Test
    public void test692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test692");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray14 = null;
        java.lang.String str15 = base64_0.encodeToString(byteArray14);
        boolean boolean16 = base64_0.hasData();
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray19 = new byte[] {};
        base64_18.decode(byteArray19, (int) 'a', (-1));
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, true, true, (int) (byte) 100);
        boolean boolean27 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray26);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray29);
        base64_0.setInitialBuffer(byteArray29, (int) (short) 100, (int) '#');
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray36 = new byte[] {};
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false, false, 10);
        byte[] byteArray41 = base64_35.decode(byteArray40);
        byte[] byteArray43 = base64_35.decode("");
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, true);
        byte[] byteArray46 = base64_0.encode(byteArray43);
        java.math.BigInteger bigInteger47 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray46);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(bigInteger47);
    }

    @Test
    public void test693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test693");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray19 = new byte[] {};
        base64_18.decode(byteArray19, (int) 'a', (-1));
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, true, true, (int) (byte) 100);
        boolean boolean27 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray26);
        byte[] byteArray28 = base64_2.encode(byteArray26);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray31, true);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
    }

    @Test
    public void test694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test694");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray19 = new byte[] {};
        base64_18.decode(byteArray19, (int) 'a', (-1));
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, true, true, (int) (byte) 100);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, true, false, 1);
        java.lang.Object obj31 = base64_2.encode((java.lang.Object) byteArray30);
        byte[] byteArray33 = new byte[] { (byte) 0 };
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, true);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray36);
        int int40 = base64_2.readResults(byteArray36, 1, (int) (short) -1);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray43 = new byte[] {};
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false, false, 10);
        byte[] byteArray48 = base64_42.decode(byteArray47);
        byte[] byteArray50 = base64_42.decode("");
        byte[] byteArray51 = new byte[] {};
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, false, false, 10);
        byte[] byteArray56 = base64_42.decode(byteArray55);
        byte[] byteArray57 = new byte[] {};
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57, false, false, 10);
        java.lang.String str62 = base64_42.encodeToString(byteArray57);
        boolean boolean63 = base64_42.isUrlSafe();
        byte[] byteArray64 = null;
        int int67 = base64_42.readResults(byteArray64, (int) (byte) 1, 76);
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray70 = new byte[] {};
        base64_69.decode(byteArray70, (int) 'a', (-1));
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray70, true, true, (int) (byte) 100);
        byte[] byteArray78 = base64_42.decode(byteArray70);
        java.lang.Object obj79 = base64_2.decode((java.lang.Object) byteArray78);
        org.apache.commons.codec.binary.Base64 base64_80 = new org.apache.commons.codec.binary.Base64(14, byteArray78);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertNotNull(obj79);
    }

    @Test
    public void test695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test695");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        int int8 = base64_1.avail();
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_11.decode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64(100, byteArray17);
        byte[] byteArray19 = base64_1.encode(byteArray17);
        int int20 = base64_1.avail();
        byte[] byteArray22 = new byte[] {};
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, false, false, 10);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64(0, byteArray29);
        byte[] byteArray32 = base64_30.decode("org.apache.commons.codec.DecoderException: hi!");
        boolean boolean33 = base64_30.hasData();
        byte[] byteArray35 = new byte[] { (byte) 0 };
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false, true);
        boolean boolean39 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray38);
        int int42 = base64_30.readResults(byteArray38, (int) (byte) 100, (int) 'a');
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray45 = new byte[] {};
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, false, false, 10);
        byte[] byteArray50 = base64_44.decode(byteArray49);
        byte[] byteArray52 = base64_44.decode("");
        byte[] byteArray53 = new byte[] {};
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, false, false, 10);
        byte[] byteArray58 = base64_44.decode(byteArray57);
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray61 = new byte[] {};
        base64_60.decode(byteArray61, (int) 'a', (-1));
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, true, true, (int) (byte) 100);
        boolean boolean69 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray68);
        byte[] byteArray70 = base64_44.encode(byteArray68);
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray68, false);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray72);
        java.lang.String str74 = base64_30.encodeToString(byteArray73);
        org.apache.commons.codec.binary.Base64 base64_76 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray77 = new byte[] {};
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray77, false, false, 10);
        byte[] byteArray82 = base64_76.decode(byteArray81);
        byte[] byteArray84 = base64_76.decode("");
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.decodeBase64("orgapachecommonscodecDecoderExceptionorgapachecommonscodecDecoderExceptionorgapachecommonscodecEncoderExceptiok");
        byte[] byteArray87 = base64_76.decode(byteArray86);
        java.lang.Object obj88 = base64_30.encode((java.lang.Object) byteArray86);
        java.lang.Object obj89 = base64_1.decode((java.lang.Object) byteArray86);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[65, 65]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94, 122, 43, -127, -86, 90, 114, 23, -100, -94, 105, -88, -98, -57, 40, 117, -25, 4, -99, -54, 29, 122, -79, 49, 113, -22, 109, -118, -119]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-54, -70, 123, -114, 60, -85, 47, 54, -13, -7, -102, -30, -69, 61, 106]");
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertNotNull(obj89);
    }

    @Test
    public void test696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test696");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray10);
        byte[] byteArray15 = base64_1.encode(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        byte[] byteArray30 = base64_1.encode(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray35 = new byte[] {};
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false, false, 10);
        byte[] byteArray40 = base64_34.decode(byteArray39);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64(100, byteArray40);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((int) (short) 1, byteArray40);
        byte[] byteArray43 = base64_1.decode(byteArray40);
        java.math.BigInteger bigInteger44 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger44);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger44);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
    }

    @Test
    public void test697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test697");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray12 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray12);
        byte[] byteArray17 = base64_3.encode(byteArray12);
        java.lang.Object obj18 = base64_1.encode((java.lang.Object) byteArray12);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, false);
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray27);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray27);
        byte[] byteArray31 = base64_1.encode(byteArray27);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray34 = new byte[] {};
        base64_33.decode(byteArray34, (int) 'a', (-1));
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, true, true, (int) (byte) 100);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray41);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41);
        base64_1.encode(byteArray41, (int) ' ', (int) (short) 10);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray41);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
    }

    @Test
    public void test698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test698");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(true);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        byte[] byteArray11 = base64_3.decode("");
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_3.decode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray20 = new byte[] {};
        base64_19.decode(byteArray20, (int) 'a', (-1));
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, true, true, (int) (byte) 100);
        boolean boolean28 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray27);
        byte[] byteArray29 = base64_3.encode(byteArray27);
        byte[] byteArray30 = base64_1.decode(byteArray27);
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        boolean boolean32 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray27);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray27);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
    }

    @Test
    public void test699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test699");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray17);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: hi!");
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = base64_18.encode(byteArray20);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray24);
        base64_18.encode(byteArray24, (int) (byte) 1, (int) (byte) 1);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray31 = new byte[] {};
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false, 10);
        byte[] byteArray36 = base64_30.decode(byteArray35);
        byte[] byteArray38 = base64_30.decode("");
        byte[] byteArray39 = new byte[] {};
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, false, false, 10);
        byte[] byteArray44 = base64_30.decode(byteArray43);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray47 = new byte[] {};
        base64_46.decode(byteArray47, (int) 'a', (-1));
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, true, true, (int) (byte) 100);
        boolean boolean55 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray54);
        byte[] byteArray56 = base64_30.encode(byteArray54);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54, false);
        java.lang.Object obj59 = base64_18.encode((java.lang.Object) byteArray58);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 104, 103, 61]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(obj59);
    }

    @Test
    public void test700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test700");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        byte[] byteArray9 = null;
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(10, byteArray9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger21);
        java.lang.Object obj24 = base64_11.encode((java.lang.Object) byteArray23);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray23);
        java.lang.Object obj26 = base64_1.encode((java.lang.Object) byteArray23);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray34 = base64_28.decode("QUdRQkFBPT0");
        base64_1.encode(byteArray34, 10, 10);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray41 = base64_39.decode("");
        java.lang.Object obj42 = base64_1.decode((java.lang.Object) byteArray41);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray45 = new byte[] {};
        base64_44.decode(byteArray45, (int) 'a', (-1));
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, false, false);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray53);
        byte[] byteArray58 = base64_44.encode(byteArray53);
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray61 = new byte[] {};
        base64_60.decode(byteArray61, (int) 'a', (-1));
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, true, true, (int) (byte) 100);
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray68, true, false, 1);
        byte[] byteArray73 = base64_44.encode(byteArray72);
        org.apache.commons.codec.binary.Base64 base64_77 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray78 = new byte[] {};
        byte[] byteArray82 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray78, false, false, 10);
        byte[] byteArray83 = base64_77.decode(byteArray82);
        org.apache.commons.codec.binary.Base64 base64_84 = new org.apache.commons.codec.binary.Base64(100, byteArray83);
        org.apache.commons.codec.binary.Base64 base64_85 = new org.apache.commons.codec.binary.Base64((int) (short) 1, byteArray83);
        byte[] byteArray86 = base64_44.decode(byteArray83);
        java.math.BigInteger bigInteger87 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray83);
        byte[] byteArray88 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger87);
        java.lang.String str89 = base64_1.encodeToString(byteArray88);
        byte[] byteArray91 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray88, false);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertNotNull(bigInteger87);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[]");
    }

    @Test
    public void test701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test701");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        int int8 = base64_1.avail();
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_11.decode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64(100, byteArray17);
        byte[] byteArray19 = base64_1.encode(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray22 = new byte[] {};
        base64_21.decode(byteArray22, (int) 'a', (-1));
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, true, true, (int) (byte) 100);
        base64_1.setInitialBuffer(byteArray29, (int) (byte) 100, (int) (byte) 0);
        java.lang.String str33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray29);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray29);
        boolean boolean35 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray34);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test702");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        boolean boolean2 = base64_1.isUrlSafe();
        boolean boolean3 = base64_1.hasData();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test703");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, false);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger13);
        java.lang.Object obj16 = base64_3.encode((java.lang.Object) byteArray15);
        java.lang.Object obj17 = base64_2.encode((java.lang.Object) byteArray15);
        byte[] byteArray18 = null;
        base64_2.encode(byteArray18, (-1), 0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, false);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray31 = base64_2.decode(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray37 = new byte[] {};
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, false, 10);
        byte[] byteArray42 = base64_36.decode(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray42, false);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64(76, byteArray42, true);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, true, (int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64((-1), byteArray51);
        int int55 = base64_2.readResults(byteArray51, 100, (int) (short) 10);
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray62 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, false, false);
        java.math.BigInteger bigInteger66 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray65);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger66);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger66);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger66);
        byte[] byteArray70 = base64_56.decode(byteArray69);
        base64_2.encode(byteArray69, 0, 10);
        int int74 = base64_2.avail();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[117]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test704");
        byte[] byteArray2 = new byte[] { (byte) 0 };
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, true);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(14, byteArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [UVVFPQ0K]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[85, 86, 86, 70, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[86, 86, 90, 87, 82, 108, 66, 82, 77, 69, 115, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
    }

    @Test
    public void test705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test705");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray3 = base64_1.decode("");
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray6 = new byte[] {};
        base64_5.decode(byteArray6, (int) 'a', (-1));
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, true, true, (int) (byte) 100);
        boolean boolean14 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        byte[] byteArray16 = base64_1.encode(byteArray15);
        byte[] byteArray17 = new byte[] {};
        int int20 = base64_1.readResults(byteArray17, 1, (int) '4');
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray23 = new byte[] {};
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false, 10);
        byte[] byteArray28 = base64_22.decode(byteArray27);
        byte[] byteArray30 = base64_22.decode("");
        byte[] byteArray31 = new byte[] {};
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false, 10);
        byte[] byteArray36 = base64_22.decode(byteArray35);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray39 = new byte[] {};
        base64_38.decode(byteArray39, (int) 'a', (-1));
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, true, true, (int) (byte) 100);
        boolean boolean47 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray46);
        byte[] byteArray48 = base64_22.encode(byteArray46);
        byte[] byteArray49 = base64_1.decode(byteArray46);
        byte[] byteArray55 = new byte[] { (byte) 0, (byte) 10, (byte) 1, (byte) 0, (byte) 10 };
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray55);
        byte[] byteArray57 = base64_1.encode(byteArray56);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray56);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray58, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 10, 1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
    }

    @Test
    public void test706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test706");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false, true, 0);
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test707");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray18);
        base64_0.encode(byteArray22, 0, 10);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray28 = new byte[] {};
        base64_27.decode(byteArray28, (int) 'a', (-1));
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, true, true, (int) (byte) 100);
        boolean boolean36 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray35);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray35);
        java.lang.Object obj38 = base64_0.decode((java.lang.Object) byteArray37);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64(true);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray43 = new byte[] {};
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false, false, 10);
        byte[] byteArray48 = base64_42.decode(byteArray47);
        byte[] byteArray50 = base64_42.decode("");
        byte[] byteArray51 = new byte[] {};
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, false, false, 10);
        byte[] byteArray56 = base64_42.decode(byteArray55);
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray59 = new byte[] {};
        base64_58.decode(byteArray59, (int) 'a', (-1));
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59, true, true, (int) (byte) 100);
        boolean boolean67 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray66);
        byte[] byteArray68 = base64_42.encode(byteArray66);
        byte[] byteArray69 = base64_40.decode(byteArray66);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray66);
        java.lang.Object obj71 = base64_0.decode((java.lang.Object) byteArray66);
        org.apache.commons.codec.binary.Base64 base64_73 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray74 = new byte[] {};
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray74, false, false, 10);
        byte[] byteArray79 = base64_73.decode(byteArray78);
        int int80 = base64_73.avail();
        org.apache.commons.codec.binary.Base64 base64_83 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray84 = new byte[] {};
        byte[] byteArray88 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray84, false, false, 10);
        byte[] byteArray89 = base64_83.decode(byteArray88);
        org.apache.commons.codec.binary.Base64 base64_90 = new org.apache.commons.codec.binary.Base64(100, byteArray89);
        byte[] byteArray91 = base64_73.encode(byteArray89);
        // The following exception was thrown during execution in test generation
        try {
            base64_0.encode(byteArray91, (int) (short) 10, 20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[]");
    }

    @Test
    public void test708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test708");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = new byte[] {};
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false, 10);
        byte[] byteArray22 = base64_2.encode(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray22, false);
        byte[] byteArray26 = base64_24.decode("QUdRQkFBPT0");
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 100, 1, 0]");
    }

    @Test
    public void test709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test709");
        byte[] byteArray5 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64(0, byteArray10);
        int int12 = base64_11.avail();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test710");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray23 = new byte[] {};
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false, 10);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.String str30 = base64_1.encodeToString(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_32.decode(byteArray37);
        byte[] byteArray40 = base64_32.decode("");
        byte[] byteArray41 = new byte[] {};
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, false, false, 10);
        byte[] byteArray46 = base64_32.decode(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray46);
        byte[] byteArray48 = base64_1.decode(byteArray46);
        boolean boolean49 = base64_1.hasData();
        byte[] byteArray51 = base64_1.decode("org.apache.commons.codec.DecoderException: ");
        byte[] byteArray53 = base64_1.decode("");
        org.apache.commons.codec.binary.Base64 base64_54 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray60 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray60, false, false);
        java.math.BigInteger bigInteger64 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray63);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger64);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger64);
        java.lang.Object obj67 = base64_54.encode((java.lang.Object) byteArray66);
        byte[] byteArray72 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray72, false, false);
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray72);
        base64_54.encode(byteArray76, 0, 10);
        byte[] byteArray81 = new byte[] { (byte) 0 };
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray81, false, true);
        byte[] byteArray85 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray84);
        byte[] byteArray86 = base64_54.decode(byteArray84);
        byte[] byteArray90 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray86, false, true, (int) '4');
        java.math.BigInteger bigInteger91 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray86);
        byte[] byteArray92 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger91);
        byte[] byteArray93 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger91);
        byte[] byteArray94 = base64_1.encode(byteArray93);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger64);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[0]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[0]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[0]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[65, 65]");
        org.junit.Assert.assertNotNull(bigInteger91);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
    }

    @Test
    public void test711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test711");
        byte[] byteArray5 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64(0, byteArray10);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray15 = new byte[] {};
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, false, false, 10);
        byte[] byteArray20 = base64_14.decode(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64(100, byteArray20);
        boolean boolean22 = base64_21.hasData();
        byte[] byteArray24 = base64_21.decode("QUdRQkFBPT0=\r\n");
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray24);
        byte[] byteArray26 = base64_11.decode(byteArray24);
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray26);
        java.lang.Class<?> wildcardClass28 = byteArray26.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str25, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 100, 1, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "AGQBAA" + "'", str27, "AGQBAA");
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test712");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        byte[] byteArray21 = base64_1.encode(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray24 = new byte[] {};
        base64_23.decode(byteArray24, (int) 'a', (-1));
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        java.lang.Object obj29 = base64_1.encode((java.lang.Object) byteArray24);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(obj29);
    }

    @Test
    public void test713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test713");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.EncoderException: org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: ");
        java.lang.String str2 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 73, -36, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94, 122, 43, -127, -86, 90, 114, 23, -100, -94, 105, -88, -98, -57, 40, 117, -25, 3, 121, -54, 29, 122, -79, 49, 113, -22, 109, -118, -119]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "orgapachecommonscodecEncoderExceptionorgapachecommonscodecDecoderExceptionorgapachecommonscodecDecoderExceptiok" + "'", str2, "orgapachecommonscodecEncoderExceptionorgapachecommonscodecDecoderExceptionorgapachecommonscodecDecoderExceptiok");
    }

    @Test
    public void test714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test714");
        byte[] byteArray1 = new byte[] { (byte) 0 };
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, true);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0]");
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
    }

    @Test
    public void test715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test715");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        java.lang.Object obj30 = base64_1.encode((java.lang.Object) byteArray29);
        byte[] byteArray31 = new byte[] {};
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false, 10);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray35);
        java.lang.Object obj37 = base64_1.encode((java.lang.Object) byteArray35);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, true);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray39);
        boolean boolean43 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray42);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test716");
        byte[] byteArray1 = new byte[] {};
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, false, 10);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray5);
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray5);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray5);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false, false, 10);
        byte[] byteArray18 = base64_12.decode(byteArray17);
        byte[] byteArray20 = base64_12.decode("");
        byte[] byteArray21 = new byte[] {};
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, false, 10);
        byte[] byteArray26 = base64_12.decode(byteArray25);
        boolean boolean27 = base64_12.isUrlSafe();
        byte[] byteArray29 = new byte[] {};
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, false, 10);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray33);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray33);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64(0, byteArray36);
        java.lang.String str38 = base64_12.encodeToString(byteArray36);
        byte[] byteArray40 = new byte[] { (byte) 0 };
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40, false, true);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray43);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, true);
        int int49 = base64_12.readResults(byteArray43, 0, (int) (short) 100);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray54 = new byte[] {};
        base64_53.decode(byteArray54, (int) 'a', (-1));
        byte[] byteArray62 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, false, false);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray62);
        byte[] byteArray67 = base64_53.encode(byteArray62);
        java.lang.Object obj68 = base64_51.encode((java.lang.Object) byteArray62);
        byte[] byteArray70 = base64_51.decode("LzJRSy8yUT0");
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray70);
        java.lang.Object obj72 = base64_12.encode((java.lang.Object) byteArray71);
        java.lang.Object obj73 = base64_10.encode((java.lang.Object) byteArray71);
        byte[] byteArray79 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray82 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray79, false, false);
        java.math.BigInteger bigInteger83 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray82);
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray82);
        byte[] byteArray85 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray82);
        byte[] byteArray86 = base64_10.encode(byteArray82);
        java.lang.String str87 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray86);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61]");
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger83);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "THpKUlN5OHlVVDA9" + "'", str87, "THpKUlN5OHlVVDA9");
    }

    @Test
    public void test717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test717");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        byte[] byteArray21 = base64_1.encode(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray26 = new byte[] {};
        base64_25.decode(byteArray26, (int) 'a', (-1));
        byte[] byteArray31 = base64_25.decode("QUdRQkFBPT0");
        java.lang.String str32 = base64_23.encodeToString(byteArray31);
        boolean boolean33 = base64_23.hasData();
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray36 = new byte[] {};
        base64_35.decode(byteArray36, (int) 'a', (-1));
        byte[] byteArray41 = base64_35.decode("QUdRQkFBPT0");
        base64_23.decode(byteArray41, 0, (int) (short) 0);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray47 = new byte[] {};
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, false, false, 10);
        byte[] byteArray52 = base64_46.decode(byteArray51);
        byte[] byteArray54 = base64_46.decode("");
        byte[] byteArray55 = new byte[] {};
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray55, false, false, 10);
        byte[] byteArray60 = base64_46.decode(byteArray59);
        org.apache.commons.codec.binary.Base64 base64_62 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray63 = new byte[] {};
        base64_62.decode(byteArray63, (int) 'a', (-1));
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray63, true, true, (int) (byte) 100);
        boolean boolean71 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray70);
        byte[] byteArray72 = base64_46.encode(byteArray70);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray70, false);
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray74, true, true, (int) '#');
        byte[] byteArray79 = base64_23.decode(byteArray74);
        base64_1.encode(byteArray74, (int) '#', 0);
        org.apache.commons.codec.EncoderException encoderException84 = new org.apache.commons.codec.EncoderException("LzJRSy8yUT0");
        org.apache.commons.codec.DecoderException decoderException85 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) encoderException84);
        org.apache.commons.codec.DecoderException decoderException86 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) decoderException85);
        org.apache.commons.codec.EncoderException encoderException87 = new org.apache.commons.codec.EncoderException((java.lang.Throwable) decoderException86);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj88 = base64_1.decode((java.lang.Object) decoderException86);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str32, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
    }

    @Test
    public void test718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test718");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray12 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray12);
        byte[] byteArray17 = base64_3.encode(byteArray12);
        java.lang.Object obj18 = base64_1.encode((java.lang.Object) byteArray12);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, false);
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray27);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray27);
        byte[] byteArray31 = base64_1.encode(byteArray27);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[84, 72, 112, 75, 85, 108, 78, 53, 79, 72, 108, 86, 86, 68, 65, 57, 68, 81, 111, 61]");
    }

    @Test
    public void test719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test719");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        base64_2.decode(byteArray3, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray9 = new byte[] {};
        base64_8.decode(byteArray9, (int) 'a', (-1));
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true, true, (int) (byte) 100);
        boolean boolean17 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray16);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, true, (int) (short) 10);
        byte[] byteArray22 = base64_2.encode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) (short) 10, byteArray16, false);
        int int25 = base64_24.avail();
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false, false);
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray35);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger36);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger36);
        java.lang.Object obj39 = base64_26.encode((java.lang.Object) byteArray38);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false, false);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray44);
        base64_26.encode(byteArray48, 0, 10);
        boolean boolean52 = base64_26.isUrlSafe();
        byte[] byteArray57 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57, false, false);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray60);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray60);
        base64_26.decode(byteArray60, (int) (short) -1, (int) (byte) 10);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray60);
        base64_24.setInitialBuffer(byteArray60, 0, 0);
        java.lang.String str70 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray60);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 100, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[0, 100, 1, 0]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "QUdRQkFBPT0" + "'", str70, "QUdRQkFBPT0");
    }

    @Test
    public void test720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test720");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64(14, byteArray1, false);
    }

    @Test
    public void test721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test721");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        java.lang.String str21 = base64_1.encodeToString(byteArray16);
        boolean boolean22 = base64_1.isUrlSafe();
        byte[] byteArray24 = base64_1.decode("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        int int25 = base64_1.avail();
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, false, 10);
        byte[] byteArray34 = base64_28.decode(byteArray33);
        byte[] byteArray36 = base64_28.decode("");
        byte[] byteArray37 = new byte[] {};
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, false, 10);
        byte[] byteArray42 = base64_28.decode(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray45 = new byte[] {};
        base64_44.decode(byteArray45, (int) 'a', (-1));
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, true, true, (int) (byte) 100);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52, true, false, 1);
        java.lang.Object obj57 = base64_28.encode((java.lang.Object) byteArray56);
        byte[] byteArray58 = new byte[] {};
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray58, false, false, 10);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray62);
        java.lang.Object obj64 = base64_28.encode((java.lang.Object) byteArray62);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, false);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66, false, false);
        java.lang.String str70 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray69);
        org.apache.commons.codec.binary.Base64 base64_72 = new org.apache.commons.codec.binary.Base64((-1), byteArray69, true);
        java.lang.String str73 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray69);
        java.lang.Object obj74 = base64_1.decode((java.lang.Object) str73);
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: LzJRSy8yUT0");
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray76, false);
        byte[] byteArray79 = base64_1.encode(byteArray76);
        int int80 = base64_1.avail();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94, 122, 43, -127, -86, 90, 114, 23, -100, -94, 105, -88, -98, -57, 40, 117, -25, 4, -99, -54, 29, 122, -79, 49, 113, -22, 109, -118, -119]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -100, -68, -55, 69, 44, -68, -55, 68, -12]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 13, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test722");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        boolean boolean2 = base64_1.hasData();
        int int3 = base64_1.avail();
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: hi!");
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, true);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        base64_1.setInitialBuffer(byteArray8, (int) 'a', (int) (short) -1);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        byte[] byteArray21 = base64_15.decode(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray21, false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj24 = base64_1.decode((java.lang.Object) base64_23);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 104, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[98, 51, 74, 110, 89, 88, 66, 104, 89, 50, 104, 108, 89, 50, 57, 116, 98, 87, 57, 117, 99, 50, 78, 118, 90, 71, 86, 106, 82, 71, 86, 106, 98, 50, 82, 108, 99, 107, 86, 52, 89, 50, 86, 119, 100, 71, 108, 118, 98, 109, 104, 110]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
    }

    @Test
    public void test723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test723");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1);
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
    }

    @Test
    public void test724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test724");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        base64_2.decode(byteArray3, (int) 'a', (-1));
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, true, true, (int) (byte) 100);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, true);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((int) (byte) 10, byteArray13);
        java.math.BigInteger bigInteger16 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray13);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(bigInteger16);
    }

    @Test
    public void test725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test725");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 0);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray6 = new byte[] {};
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false, 10);
        byte[] byteArray11 = base64_5.decode(byteArray10);
        byte[] byteArray13 = base64_5.decode("");
        byte[] byteArray14 = new byte[] {};
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false, false, 10);
        byte[] byteArray19 = base64_5.decode(byteArray18);
        base64_3.setInitialBuffer(byteArray19, 1, 0);
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        base64_1.setInitialBuffer(byteArray19, (int) 'a', (int) (short) 10);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, false, 10);
        byte[] byteArray34 = base64_28.decode(byteArray33);
        byte[] byteArray36 = base64_28.decode("");
        byte[] byteArray37 = new byte[] {};
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, false, 10);
        byte[] byteArray42 = base64_28.decode(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray45 = new byte[] {};
        base64_44.decode(byteArray45, (int) 'a', (-1));
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, true, true, (int) (byte) 100);
        boolean boolean53 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray52);
        byte[] byteArray54 = base64_28.encode(byteArray52);
        byte[] byteArray55 = base64_1.decode(byteArray54);
        boolean boolean56 = base64_1.hasData();
        byte[] byteArray57 = new byte[] {};
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57, false, false, 10);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, false, false, 100);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray61);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66, false, false, (int) 'a');
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray70);
        base64_1.setInitialBuffer(byteArray71, (int) (byte) -1, 14);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
    }

    @Test
    public void test726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test726");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        base64_2.decode(byteArray3, (int) 'a', (-1));
        byte[] byteArray11 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray11);
        byte[] byteArray16 = base64_2.encode(byteArray11);
        byte[] byteArray17 = new byte[] {};
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false, 10);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, false, 100);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray21);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, false, (int) 'a');
        base64_2.decode(byteArray26, (int) (byte) 10, (int) (byte) -1);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64(20, byteArray26);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
    }

    @Test
    public void test727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test727");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray14);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray17);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61]");
    }

    @Test
    public void test728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test728");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: hi!");
        java.math.BigInteger bigInteger2 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray1);
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger2);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger2);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[121, 114, 112, 55]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[121, 114, 112, 55]");
    }

    @Test
    public void test729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test729");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger11);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger11);
        java.lang.Object obj14 = base64_1.encode((java.lang.Object) byteArray13);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false, false);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray19);
        base64_1.encode(byteArray23, 0, 10);
        byte[] byteArray28 = new byte[] { (byte) 0 };
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, false, true);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray31);
        byte[] byteArray33 = base64_1.decode(byteArray31);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, true, (int) '4');
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64(10, byteArray33, true);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray42 = new byte[] {};
        base64_41.decode(byteArray42, (int) 'a', (-1));
        byte[] byteArray47 = base64_41.decode("QUdRQkFBPT0");
        byte[] byteArray49 = null;
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64(10, byteArray49);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray57 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57, false, false);
        java.math.BigInteger bigInteger61 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray60);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger61);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger61);
        java.lang.Object obj64 = base64_51.encode((java.lang.Object) byteArray63);
        java.lang.Object obj65 = base64_50.encode((java.lang.Object) byteArray63);
        java.lang.Object obj66 = base64_41.encode((java.lang.Object) byteArray63);
        java.lang.String str67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray63);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray63, false, false);
        base64_39.decode(byteArray63, 0, 0);
        boolean boolean74 = base64_39.hasData();
        byte[] byteArray76 = base64_39.decode("");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger61);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "LzJRSy8yUT0" + "'", str67, "LzJRSy8yUT0");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
    }

    @Test
    public void test730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test730");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) -1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        byte[] byteArray11 = base64_3.decode("");
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_3.decode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray20 = new byte[] {};
        base64_19.decode(byteArray20, (int) 'a', (-1));
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, true, true, (int) (byte) 100);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, true, false, 1);
        java.lang.Object obj32 = base64_3.encode((java.lang.Object) byteArray31);
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray37);
        java.lang.Object obj39 = base64_3.encode((java.lang.Object) byteArray37);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        java.lang.Object obj41 = base64_1.decode((java.lang.Object) byteArray40);
        boolean boolean42 = base64_1.hasData();
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        java.lang.String str45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray44);
        base64_1.decode(byteArray44, (int) (short) 0, 0);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray51 = new byte[] {};
        base64_50.decode(byteArray51, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray57 = new byte[] {};
        base64_56.decode(byteArray57, (int) 'a', (-1));
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57, true, true, (int) (byte) 100);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray64, true, false, 1);
        base64_50.setInitialBuffer(byteArray68, (int) (byte) 10, 100);
        byte[] byteArray72 = new byte[] {};
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray72, false, false, 10);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray76);
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray76);
        java.lang.String str79 = base64_50.encodeToString(byteArray78);
        base64_1.decode(byteArray78, (int) ' ', 0);
        java.math.BigInteger bigInteger83 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray78);
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger83);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(bigInteger83);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
    }

    @Test
    public void test731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test731");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray10);
        byte[] byteArray15 = base64_1.encode(byteArray10);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, false, false, 100);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray20);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false, (int) 'a');
        base64_1.decode(byteArray25, (int) (byte) 10, (int) (byte) -1);
        boolean boolean33 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray36 = new byte[] {};
        base64_35.decode(byteArray36, (int) 'a', (-1));
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, true, true, (int) (byte) 100);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, true, false, 1);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray43);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48);
        boolean boolean50 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray48);
        java.lang.String str51 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray48);
        base64_1.encode(byteArray48, (int) (byte) 100, (int) (short) 100);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray48);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
    }

    @Test
    public void test732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test732");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray18);
        base64_0.encode(byteArray22, 0, 10);
        boolean boolean26 = base64_0.isUrlSafe();
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34);
        base64_0.decode(byteArray34, (int) (short) -1, (int) (byte) 10);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false, false);
        java.lang.String str43 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray42);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "UVVkUlFrRkJQVDA9\r\n" + "'", str43, "UVVkUlFrRkJQVDA9\r\n");
    }

    @Test
    public void test733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test733");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false, false);
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        java.lang.Object obj29 = base64_0.decode((java.lang.Object) byteArray28);
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false, false);
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        byte[] byteArray40 = base64_0.encode(byteArray37);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, false, false);
        java.math.BigInteger bigInteger50 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray49);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray49);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray51);
        base64_0.decode(byteArray51, (-1), (int) (short) 1);
        byte[] byteArray57 = base64_0.decode("");
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64((int) 'a');
        boolean boolean60 = base64_59.isUrlSafe();
        boolean boolean61 = base64_59.hasData();
        boolean boolean62 = base64_59.hasData();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj63 = base64_0.decode((java.lang.Object) base64_59);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "QUdRQkFBPT0" + "'", str38, "QUdRQkFBPT0");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test734");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        int int8 = base64_1.avail();
        byte[] byteArray10 = base64_1.decode("org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray15 = new byte[] {};
        base64_14.decode(byteArray15, (int) 'a', (-1));
        byte[] byteArray20 = base64_14.decode("QUdRQkFBPT0");
        java.lang.String str21 = base64_12.encodeToString(byteArray20);
        boolean boolean22 = base64_12.hasData();
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray25 = new byte[] {};
        base64_24.decode(byteArray25, (int) 'a', (-1));
        byte[] byteArray30 = base64_24.decode("QUdRQkFBPT0");
        base64_12.decode(byteArray30, 0, (int) (short) 0);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray36 = new byte[] {};
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false, false, 10);
        byte[] byteArray41 = base64_35.decode(byteArray40);
        byte[] byteArray43 = base64_35.decode("");
        byte[] byteArray44 = new byte[] {};
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false, false, 10);
        byte[] byteArray49 = base64_35.decode(byteArray48);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray52 = new byte[] {};
        base64_51.decode(byteArray52, (int) 'a', (-1));
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52, true, true, (int) (byte) 100);
        boolean boolean60 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray59);
        byte[] byteArray61 = base64_35.encode(byteArray59);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59, false);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray63, true, true, (int) '#');
        byte[] byteArray68 = base64_12.decode(byteArray63);
        byte[] byteArray69 = base64_1.decode(byteArray68);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.decodeBase64("QUdRQkFBPT0");
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray71);
        int int75 = base64_1.readResults(byteArray71, (int) (byte) 0, 14);
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray71);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -63, 39, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str21, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 100, 1, 0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61]");
    }

    @Test
    public void test735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test735");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray18);
        base64_0.encode(byteArray22, 0, 10);
        byte[] byteArray27 = new byte[] { (byte) 0 };
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false, true);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray30);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, true);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, true, true);
        base64_0.encode(byteArray36, (int) (short) -1, (int) (byte) 0);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: ");
        base64_0.decode(byteArray41, 10, 1);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray47 = new byte[] {};
        base64_46.decode(byteArray47, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray53 = new byte[] {};
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, false, false, 10);
        byte[] byteArray58 = base64_52.decode(byteArray57);
        byte[] byteArray60 = base64_52.decode("");
        byte[] byteArray61 = new byte[] {};
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, false, false, 10);
        byte[] byteArray66 = base64_52.decode(byteArray65);
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray69 = new byte[] {};
        base64_68.decode(byteArray69, (int) 'a', (-1));
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray69, true, true, (int) (byte) 100);
        byte[] byteArray80 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray76, true, false, 1);
        java.lang.Object obj81 = base64_52.encode((java.lang.Object) byteArray80);
        byte[] byteArray82 = new byte[] {};
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray82, false, false, 10);
        byte[] byteArray87 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray86);
        java.lang.Object obj88 = base64_52.encode((java.lang.Object) byteArray86);
        java.lang.Object obj89 = base64_46.encode((java.lang.Object) byteArray86);
        byte[] byteArray90 = base64_0.encode(byteArray86);
        byte[] byteArray91 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray86);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[85, 86, 86, 70, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[]");
    }

    @Test
    public void test736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test736");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        byte[] byteArray21 = base64_1.encode(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray24 = new byte[] {};
        base64_23.decode(byteArray24, (int) 'a', (-1));
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, true, (int) (byte) 100);
        java.lang.String str32 = base64_1.encodeToString(byteArray31);
        byte[] byteArray34 = new byte[] { (byte) 0 };
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false, true);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray37);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, true);
        base64_1.setInitialBuffer(byteArray40, (int) (byte) -1, 0);
        java.lang.Throwable throwable46 = null;
        org.apache.commons.codec.EncoderException encoderException47 = new org.apache.commons.codec.EncoderException(throwable46);
        org.apache.commons.codec.EncoderException encoderException48 = new org.apache.commons.codec.EncoderException("org.apache.commons.codec.DecoderException: hi!", (java.lang.Throwable) encoderException47);
        org.apache.commons.codec.EncoderException encoderException49 = new org.apache.commons.codec.EncoderException("LzJRSy8yUT0=\r\n", (java.lang.Throwable) encoderException48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj50 = base64_1.encode((java.lang.Object) "LzJRSy8yUT0=\r\n");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[81, 85, 69, 61, 13, 10]");
    }

    @Test
    public void test737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test737");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64(12, byteArray1, true);
    }

    @Test
    public void test738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test738");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray12 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray12);
        byte[] byteArray17 = base64_3.encode(byteArray12);
        java.lang.Object obj18 = base64_1.encode((java.lang.Object) byteArray12);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray12);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 100, 1, 0]");
    }

    @Test
    public void test739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test739");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        base64_2.decode(byteArray3, (int) 'a', (-1));
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, true, true, (int) (byte) 100);
        boolean boolean11 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray3);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray3, true);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray17 = new byte[] {};
        base64_16.decode(byteArray17, (int) 'a', (-1));
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, true, true, (int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64(100, byteArray24, true);
        byte[] byteArray27 = new byte[] {};
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false, false, 10);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray31);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray31);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, (-1));
        base64_26.setInitialBuffer(byteArray37, (int) (byte) 0, (int) (byte) 10);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray37);
        base64_13.setInitialBuffer(byteArray41, 20, (-1));
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
    }

    @Test
    public void test740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test740");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray9 = base64_3.decode("QUdRQkFBPT0");
        java.lang.String str10 = base64_1.encodeToString(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray9);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray12);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str10, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61]");
    }

    @Test
    public void test741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test741");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        boolean boolean6 = base64_1.isUrlSafe();
        byte[] byteArray8 = base64_1.decode("QUE=\r\n");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[65, 65]");
    }

    @Test
    public void test742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test742");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 100, 10, -1, 100]");
    }

    @Test
    public void test743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test743");
        byte[] byteArray5 = new byte[] { (byte) 0, (byte) 10, (byte) 100, (byte) 100, (byte) 100 };
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray5);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 10, 100, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[117, -41]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "AApkZGQ=\r\n" + "'", str7, "AApkZGQ=\r\n");
    }

    @Test
    public void test744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test744");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("LzJRSy8yUT0");
        java.lang.String str2 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LzJRSy8yUT0" + "'", str2, "LzJRSy8yUT0");
    }

    @Test
    public void test745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test745");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        int int8 = base64_1.avail();
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_11.decode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64(100, byteArray17);
        byte[] byteArray19 = base64_1.encode(byteArray17);
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray17);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
    }

    @Test
    public void test746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test746");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        int int8 = base64_1.avail();
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_11.decode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64(100, byteArray17);
        byte[] byteArray19 = base64_1.encode(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray23 = new byte[] {};
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false, 10);
        byte[] byteArray28 = base64_22.decode(byteArray27);
        byte[] byteArray30 = base64_22.decode("");
        byte[] byteArray31 = new byte[] {};
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false, 10);
        byte[] byteArray36 = base64_22.decode(byteArray35);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray37, false);
        byte[] byteArray40 = new byte[] {};
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray40);
        byte[] byteArray42 = base64_39.decode(byteArray40);
        base64_1.decode(byteArray40, 0, 0);
        byte[] byteArray47 = new byte[] { (byte) 0 };
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, false, true);
        boolean boolean51 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray50);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, true, false, (int) '#');
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray55);
        java.lang.Object obj57 = base64_1.decode((java.lang.Object) byteArray55);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[65, 65]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[85, 86, 86, 70, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(obj57);
    }

    @Test
    public void test747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test747");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray18);
        base64_0.encode(byteArray22, 0, 10);
        boolean boolean26 = base64_0.isUrlSafe();
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34);
        base64_0.decode(byteArray34, (int) (short) -1, (int) (byte) 10);
        byte[] byteArray41 = null;
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64(10, byteArray41);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray49, false, false);
        java.math.BigInteger bigInteger53 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray52);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger53);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger53);
        java.lang.Object obj56 = base64_43.encode((java.lang.Object) byteArray55);
        java.lang.Object obj57 = base64_42.encode((java.lang.Object) byteArray55);
        byte[] byteArray58 = null;
        base64_42.encode(byteArray58, (-1), 0);
        byte[] byteArray66 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66, false, false);
        java.math.BigInteger bigInteger70 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray66);
        byte[] byteArray71 = base64_42.decode(byteArray66);
        base64_0.encode(byteArray66, (int) (short) -1, (int) ' ');
        org.apache.commons.codec.binary.Base64 base64_77 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray78 = new byte[] {};
        byte[] byteArray82 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray78, false, false, 10);
        byte[] byteArray83 = base64_77.decode(byteArray82);
        byte[] byteArray85 = base64_77.decode("");
        byte[] byteArray86 = new byte[] {};
        byte[] byteArray90 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray86, false, false, 10);
        byte[] byteArray91 = base64_77.decode(byteArray90);
        org.apache.commons.codec.binary.Base64 base64_93 = new org.apache.commons.codec.binary.Base64(1, byteArray90, true);
        byte[] byteArray94 = base64_0.decode(byteArray90);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger53);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
    }

    @Test
    public void test748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test748");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        byte[] byteArray11 = base64_3.decode("");
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_3.decode(byteArray16);
        base64_1.setInitialBuffer(byteArray17, 1, 0);
        int int21 = base64_1.avail();
        byte[] byteArray22 = null;
        byte[] byteArray23 = base64_1.decode(byteArray22);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(byteArray23);
    }

    @Test
    public void test749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test749");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray9, false);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray9);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, false);
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger28);
        java.lang.Object obj31 = base64_18.encode((java.lang.Object) byteArray30);
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false, false);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray36);
        base64_18.encode(byteArray40, 0, 10);
        byte[] byteArray45 = new byte[] { (byte) 0 };
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, false, true);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray48);
        byte[] byteArray50 = base64_18.decode(byteArray48);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, false, true, (int) '4');
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64(10, byteArray50, true);
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64(76, byteArray50);
        byte[] byteArray58 = base64_15.decode(byteArray50);
        byte[] byteArray60 = base64_15.decode("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: ");
        java.math.BigInteger bigInteger61 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray60);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(bigInteger14);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94]");
        org.junit.Assert.assertNotNull(bigInteger61);
    }

    @Test
    public void test750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test750");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray5 = new byte[] {};
        base64_4.decode(byteArray5, (int) 'a', (-1));
        byte[] byteArray10 = base64_4.decode("QUdRQkFBPT0");
        java.lang.String str11 = base64_2.encodeToString(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray14 = new byte[] {};
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false, false, 10);
        byte[] byteArray19 = base64_13.decode(byteArray18);
        byte[] byteArray21 = base64_13.decode("");
        byte[] byteArray22 = new byte[] {};
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, false, false, 10);
        byte[] byteArray27 = base64_13.decode(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray30 = new byte[] {};
        base64_29.decode(byteArray30, (int) 'a', (-1));
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, true, true, (int) (byte) 100);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, true, false, 1);
        java.lang.Object obj42 = base64_13.encode((java.lang.Object) byteArray41);
        byte[] byteArray43 = base64_2.encode(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((int) (byte) 10, byteArray43, false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str11, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
    }

    @Test
    public void test751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test751");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray3 = base64_1.decode("");
        org.apache.commons.codec.DecoderException decoderException8 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.DecoderException decoderException9 = new org.apache.commons.codec.DecoderException("", (java.lang.Throwable) decoderException8);
        java.lang.Throwable[] throwableArray10 = decoderException8.getSuppressed();
        org.apache.commons.codec.DecoderException decoderException12 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.DecoderException decoderException13 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) decoderException12);
        java.lang.Throwable[] throwableArray14 = decoderException12.getSuppressed();
        org.apache.commons.codec.DecoderException decoderException17 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.DecoderException decoderException18 = new org.apache.commons.codec.DecoderException("", (java.lang.Throwable) decoderException17);
        decoderException12.addSuppressed((java.lang.Throwable) decoderException18);
        decoderException8.addSuppressed((java.lang.Throwable) decoderException18);
        org.apache.commons.codec.DecoderException decoderException23 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.DecoderException");
        org.apache.commons.codec.DecoderException decoderException24 = new org.apache.commons.codec.DecoderException("hi!", (java.lang.Throwable) decoderException23);
        org.apache.commons.codec.DecoderException decoderException25 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) decoderException23);
        decoderException18.addSuppressed((java.lang.Throwable) decoderException23);
        org.apache.commons.codec.DecoderException decoderException27 = new org.apache.commons.codec.DecoderException("AGQBAA", (java.lang.Throwable) decoderException23);
        org.apache.commons.codec.DecoderException decoderException28 = new org.apache.commons.codec.DecoderException();
        decoderException23.addSuppressed((java.lang.Throwable) decoderException28);
        org.apache.commons.codec.EncoderException encoderException30 = new org.apache.commons.codec.EncoderException("org.apache.commons.codec.EncoderException: QUE=\r\n", (java.lang.Throwable) decoderException28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj31 = base64_1.decode((java.lang.Object) encoderException30);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
    }

    @Test
    public void test752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test752");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray23 = new byte[] {};
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false, 10);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.String str30 = base64_1.encodeToString(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_32.decode(byteArray37);
        byte[] byteArray40 = base64_32.decode("");
        byte[] byteArray41 = new byte[] {};
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, false, false, 10);
        byte[] byteArray46 = base64_32.decode(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray46);
        byte[] byteArray48 = base64_1.decode(byteArray46);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray51 = new byte[] {};
        base64_50.decode(byteArray51, (int) 'a', (-1));
        byte[] byteArray56 = base64_50.decode("QUdRQkFBPT0");
        byte[] byteArray58 = null;
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64(10, byteArray58);
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray66 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66, false, false);
        java.math.BigInteger bigInteger70 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray69);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger70);
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger70);
        java.lang.Object obj73 = base64_60.encode((java.lang.Object) byteArray72);
        java.lang.Object obj74 = base64_59.encode((java.lang.Object) byteArray72);
        java.lang.Object obj75 = base64_50.encode((java.lang.Object) byteArray72);
        byte[] byteArray76 = base64_1.encode(byteArray72);
        java.lang.Object obj77 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj78 = base64_1.decode(obj77);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
    }

    @Test
    public void test753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test753");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = new byte[] {};
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false, 10);
        byte[] byteArray22 = base64_2.encode(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray22, false);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) 'a');
        boolean boolean27 = base64_26.isUrlSafe();
        boolean boolean28 = base64_26.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray32 = new byte[] {};
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false, false, 10);
        byte[] byteArray37 = base64_31.decode(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64(100, byteArray37);
        int int41 = base64_26.readResults(byteArray37, 1, (int) (byte) 1);
        boolean boolean42 = base64_26.hasData();
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray45 = new byte[] {};
        base64_44.decode(byteArray45, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray51 = new byte[] {};
        base64_50.decode(byteArray51, (int) 'a', (-1));
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, true, true, (int) (byte) 100);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray58, true, false, 1);
        base64_44.setInitialBuffer(byteArray62, (int) (byte) 10, 100);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, false, true, 0);
        byte[] byteArray70 = base64_26.encode(byteArray69);
        java.lang.Object obj71 = base64_24.encode((java.lang.Object) byteArray69);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(obj71);
    }

    @Test
    public void test754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test754");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        boolean boolean8 = base64_1.isUrlSafe();
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64(0, byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, true);
        base64_1.encode(byteArray14, 12, (int) '#');
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
    }

    @Test
    public void test755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test755");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, false);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger13);
        java.lang.Object obj16 = base64_3.encode((java.lang.Object) byteArray15);
        java.lang.Object obj17 = base64_2.encode((java.lang.Object) byteArray15);
        byte[] byteArray18 = null;
        base64_2.encode(byteArray18, (-1), 0);
        byte[] byteArray22 = null;
        byte[] byteArray23 = base64_2.encode(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray26 = new byte[] {};
        base64_25.decode(byteArray26, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray32 = new byte[] {};
        base64_31.decode(byteArray32, (int) 'a', (-1));
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, true, true, (int) (byte) 100);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, true, false, 1);
        base64_25.setInitialBuffer(byteArray43, (int) (byte) 10, 100);
        byte[] byteArray47 = new byte[] {};
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, false, false, 10);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray51);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray51);
        java.lang.String str54 = base64_25.encodeToString(byteArray53);
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray57 = new byte[] {};
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57, false, false, 10);
        byte[] byteArray62 = base64_56.decode(byteArray61);
        byte[] byteArray64 = base64_56.decode("");
        byte[] byteArray65 = new byte[] {};
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray65, false, false, 10);
        byte[] byteArray70 = base64_56.decode(byteArray69);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray70);
        byte[] byteArray72 = base64_25.decode(byteArray70);
        boolean boolean73 = base64_25.hasData();
        byte[] byteArray75 = base64_25.decode("org.apache.commons.codec.DecoderException: ");
        java.math.BigInteger bigInteger76 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray75);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger76);
        java.lang.String str78 = base64_2.encodeToString(byteArray77);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertNotNull(bigInteger76);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-54, -70, 123]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "yrp7" + "'", str78, "yrp7");
    }

    @Test
    public void test756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test756");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, false);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger13);
        java.lang.Object obj16 = base64_3.encode((java.lang.Object) byteArray15);
        java.lang.Object obj17 = base64_2.encode((java.lang.Object) byteArray15);
        byte[] byteArray18 = null;
        base64_2.encode(byteArray18, (-1), 0);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray24 = new byte[] {};
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, false, 10);
        byte[] byteArray29 = base64_23.decode(byteArray28);
        byte[] byteArray31 = base64_23.decode("");
        byte[] byteArray32 = new byte[] {};
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false, false, 10);
        byte[] byteArray37 = base64_23.decode(byteArray36);
        byte[] byteArray38 = new byte[] {};
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, false, false, 10);
        java.lang.String str43 = base64_23.encodeToString(byteArray38);
        boolean boolean44 = base64_23.isUrlSafe();
        byte[] byteArray45 = null;
        int int48 = base64_23.readResults(byteArray45, (int) (byte) 1, 76);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray51 = new byte[] {};
        base64_50.decode(byteArray51, (int) 'a', (-1));
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, true, true, (int) (byte) 100);
        byte[] byteArray59 = base64_23.decode(byteArray51);
        base64_2.encode(byteArray59, (int) (short) -1, (int) '4');
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray59);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
    }

    @Test
    public void test757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test757");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray4 = base64_2.decode("");
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] {};
        base64_6.decode(byteArray7, (int) 'a', (-1));
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, true, true, (int) (byte) 100);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        byte[] byteArray17 = base64_2.encode(byteArray16);
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray16);
        byte[] byteArray21 = base64_19.decode("org.apache.commons.codec.EncoderException: org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        int int22 = base64_19.avail();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 73, -36, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94, 122, 43, -127, -86, 90, 114, 23, -100, -94, 105, -88, -98, -57, 40, 117, -25, 4, -99, -54, 29, 122, -79, 49, 113, -22, 109, -118, -119]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test758");
        byte[] byteArray4 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray4);
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray4);
        java.lang.String str10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 100, 1, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AGQBAA==\r\n" + "'", str9, "AGQBAA==\r\n");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "AGQBAA" + "'", str10, "AGQBAA");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[65, 71, 81, 66, 65, 65]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[81, 85, 100, 82, 81, 107, 70, 66]");
    }

    @Test
    public void test759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test759");
        byte[] byteArray4 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray7);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48]");
        org.junit.Assert.assertNotNull(bigInteger11);
    }

    @Test
    public void test760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test760");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        java.lang.String str21 = base64_1.encodeToString(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray25 = new byte[] {};
        base64_24.decode(byteArray25, (int) 'a', (-1));
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, true, (int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64(100, byteArray32, true);
        byte[] byteArray35 = new byte[] {};
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false, false, 10);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray39);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray39);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, false, false, (-1));
        base64_34.setInitialBuffer(byteArray45, (int) (byte) 0, (int) (byte) 10);
        base64_1.decode(byteArray45, (int) 'a', (int) (byte) -1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
    }

    @Test
    public void test761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test761");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(10);
        byte[] byteArray3 = base64_1.decode("LzJRSy8yUT0=\r\n");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61]");
    }

    @Test
    public void test762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test762");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray9, false);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64(76, byteArray9, true);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true, true, (int) (byte) 100);
        java.math.BigInteger bigInteger19 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray18);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(bigInteger19);
    }

    @Test
    public void test763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test763");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray5 = new byte[] {};
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false, 10);
        byte[] byteArray10 = base64_4.decode(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray10, false);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(76, byteArray10, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, true, true, (int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64((-1), byteArray19);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray23 = new byte[] {};
        base64_22.decode(byteArray23, (int) 'a', (-1));
        byte[] byteArray28 = base64_22.decode("QUdRQkFBPT0");
        byte[] byteArray30 = null;
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64(10, byteArray30);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray38 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, false, false);
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger42);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger42);
        java.lang.Object obj45 = base64_32.encode((java.lang.Object) byteArray44);
        java.lang.Object obj46 = base64_31.encode((java.lang.Object) byteArray44);
        java.lang.Object obj47 = base64_22.encode((java.lang.Object) byteArray44);
        byte[] byteArray49 = base64_22.decode("org.apache.commons.codec.EncoderException");
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray49);
        java.lang.String str51 = base64_20.encodeToString(byteArray50);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 73, -36, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 69, 110, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 13, 10]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "b3JnYXBhY2hlY29tbW9uc2NvZGVjRW5jb2RlckV4Y2VwdGlvDQo=" + "'", str51, "b3JnYXBhY2hlY29tbW9uc2NvZGVjRW5jb2RlckV4Y2VwdGlvDQo=");
    }

    @Test
    public void test764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test764");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: ");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, true, true);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 103, 13, 10]");
    }

    @Test
    public void test765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test765");
        byte[] byteArray0 = new byte[] {};
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray0, false, false, 10);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        java.lang.Class<?> wildcardClass8 = byteArray7.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test766");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        boolean boolean2 = base64_1.isUrlSafe();
        boolean boolean3 = base64_1.hasData();
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray6 = new byte[] {};
        base64_5.decode(byteArray6, (int) 'a', (-1));
        byte[] byteArray14 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false, false);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray14);
        byte[] byteArray19 = base64_5.encode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray22 = new byte[] {};
        base64_21.decode(byteArray22, (int) 'a', (-1));
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, true, true, (int) (byte) 100);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, false, 1);
        byte[] byteArray34 = base64_5.encode(byteArray33);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray39 = new byte[] {};
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, false, false, 10);
        byte[] byteArray44 = base64_38.decode(byteArray43);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64(100, byteArray44);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((int) (short) 1, byteArray44);
        byte[] byteArray47 = base64_5.decode(byteArray44);
        int int50 = base64_1.readResults(byteArray44, 1, (int) (short) 100);
        java.math.BigInteger bigInteger51 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray44);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray44);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(bigInteger51);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
    }

    @Test
    public void test767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test767");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        byte[] byteArray9 = null;
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(10, byteArray9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger21);
        java.lang.Object obj24 = base64_11.encode((java.lang.Object) byteArray23);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray23);
        java.lang.Object obj26 = base64_1.encode((java.lang.Object) byteArray23);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray34 = base64_28.decode("QUdRQkFBPT0");
        base64_1.encode(byteArray34, 10, 10);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray41 = base64_39.decode("");
        java.lang.Object obj42 = base64_1.decode((java.lang.Object) byteArray41);
        java.math.BigInteger bigInteger43 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger43);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger43);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(bigInteger43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
    }

    @Test
    public void test768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test768");
        byte[] byteArray4 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray7);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7);
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray7);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test769");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray17, false);
        int int20 = base64_19.avail();
        int int21 = base64_19.avail();
        boolean boolean22 = base64_19.hasData();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test770");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray23 = new byte[] {};
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false, 10);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.String str30 = base64_1.encodeToString(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_32.decode(byteArray37);
        byte[] byteArray40 = base64_32.decode("");
        byte[] byteArray41 = new byte[] {};
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, false, false, 10);
        byte[] byteArray46 = base64_32.decode(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray46);
        byte[] byteArray48 = base64_1.decode(byteArray46);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray51 = new byte[] {};
        base64_50.decode(byteArray51, (int) 'a', (-1));
        byte[] byteArray56 = base64_50.decode("QUdRQkFBPT0");
        byte[] byteArray58 = null;
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64(10, byteArray58);
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray66 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66, false, false);
        java.math.BigInteger bigInteger70 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray69);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger70);
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger70);
        java.lang.Object obj73 = base64_60.encode((java.lang.Object) byteArray72);
        java.lang.Object obj74 = base64_59.encode((java.lang.Object) byteArray72);
        java.lang.Object obj75 = base64_50.encode((java.lang.Object) byteArray72);
        byte[] byteArray76 = base64_1.encode(byteArray72);
        boolean boolean77 = base64_1.hasData();
        org.apache.commons.codec.binary.Base64 base64_79 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray80 = new byte[] {};
        base64_79.decode(byteArray80, (int) 'a', (-1));
        byte[] byteArray87 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray80, true, true, (int) (byte) 100);
        byte[] byteArray91 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray87, true, false, 1);
        byte[] byteArray92 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray87);
        byte[] byteArray93 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray92);
        byte[] byteArray94 = base64_1.decode(byteArray92);
        boolean boolean95 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray92);
        java.math.BigInteger bigInteger96 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray92);
        byte[] byteArray97 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger96);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(bigInteger96);
        org.junit.Assert.assertNotNull(byteArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray97), "[]");
    }

    @Test
    public void test771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test771");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        java.lang.Object obj3 = base64_1.decode((java.lang.Object) "org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, false, false, 10);
        byte[] byteArray13 = base64_7.decode(byteArray12);
        byte[] byteArray15 = base64_7.decode("");
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        byte[] byteArray21 = base64_7.decode(byteArray20);
        base64_5.setInitialBuffer(byteArray21, 1, 0);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray28 = new byte[] {};
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, false, false, 10);
        byte[] byteArray33 = base64_27.decode(byteArray32);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray33, false);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray38 = new byte[] {};
        base64_37.decode(byteArray38, (int) 'a', (-1));
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, true, true, (int) (byte) 100);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, true, false, 1);
        java.lang.Object obj50 = base64_35.encode((java.lang.Object) byteArray45);
        byte[] byteArray51 = base64_5.encode(byteArray45);
        byte[] byteArray52 = base64_1.encode(byteArray51);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
    }

    @Test
    public void test772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test772");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray23 = new byte[] {};
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false, 10);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.String str30 = base64_1.encodeToString(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_32.decode(byteArray37);
        byte[] byteArray40 = base64_32.decode("");
        byte[] byteArray41 = new byte[] {};
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, false, false, 10);
        byte[] byteArray46 = base64_32.decode(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray46);
        byte[] byteArray48 = base64_1.decode(byteArray46);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray51 = new byte[] {};
        base64_50.decode(byteArray51, (int) 'a', (-1));
        byte[] byteArray56 = base64_50.decode("QUdRQkFBPT0");
        byte[] byteArray58 = null;
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64(10, byteArray58);
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray66 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66, false, false);
        java.math.BigInteger bigInteger70 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray69);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger70);
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger70);
        java.lang.Object obj73 = base64_60.encode((java.lang.Object) byteArray72);
        java.lang.Object obj74 = base64_59.encode((java.lang.Object) byteArray72);
        java.lang.Object obj75 = base64_50.encode((java.lang.Object) byteArray72);
        byte[] byteArray76 = base64_1.encode(byteArray72);
        byte[] byteArray77 = null;
        base64_1.decode(byteArray77, 1, (-1));
        boolean boolean81 = base64_1.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test773");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger11);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger11);
        java.lang.Object obj14 = base64_1.encode((java.lang.Object) byteArray13);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false, false);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray19);
        base64_1.encode(byteArray23, 0, 10);
        byte[] byteArray28 = new byte[] { (byte) 0 };
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, false, true);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray31);
        byte[] byteArray33 = base64_1.decode(byteArray31);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, true, (int) '4');
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64(10, byteArray33, true);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray42 = new byte[] {};
        base64_41.decode(byteArray42, (int) 'a', (-1));
        byte[] byteArray47 = base64_41.decode("QUdRQkFBPT0");
        byte[] byteArray49 = null;
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64(10, byteArray49);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray57 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57, false, false);
        java.math.BigInteger bigInteger61 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray60);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger61);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger61);
        java.lang.Object obj64 = base64_51.encode((java.lang.Object) byteArray63);
        java.lang.Object obj65 = base64_50.encode((java.lang.Object) byteArray63);
        java.lang.Object obj66 = base64_41.encode((java.lang.Object) byteArray63);
        java.lang.String str67 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray63);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray63, false, false);
        base64_39.decode(byteArray63, 0, 0);
        byte[] byteArray75 = base64_39.decode("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger61);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "LzJRSy8yUT0" + "'", str67, "LzJRSy8yUT0");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94, 122, 43, -127, -86, 90, 114, 23, -100, -94, 105, -88, -98, -57, 40, 117, -25, 3, 121, -54, 29, 122, -79, 49, 113, -22, 109, -118, -119]");
    }

    @Test
    public void test774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test774");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 0);
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray10);
        java.lang.Object obj13 = base64_1.decode((java.lang.Object) byteArray10);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
    }

    @Test
    public void test775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test775");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray5 = new byte[] {};
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false, 10);
        byte[] byteArray10 = base64_4.decode(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray10, false);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(76, byteArray10, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, true, true, (int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray19);
        byte[] byteArray21 = null;
        byte[] byteArray22 = base64_20.decode(byteArray21);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNull(byteArray22);
    }

    @Test
    public void test776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test776");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray17, false);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray22 = new byte[] {};
        base64_21.decode(byteArray22, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray28 = new byte[] {};
        base64_27.decode(byteArray28, (int) 'a', (-1));
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, true, true, (int) (byte) 100);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, true, false, 1);
        base64_21.setInitialBuffer(byteArray39, (int) (byte) 10, 100);
        byte[] byteArray43 = new byte[] {};
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false, false, 10);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray47);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray47);
        java.lang.String str50 = base64_21.encodeToString(byteArray49);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray53 = new byte[] {};
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, false, false, 10);
        byte[] byteArray58 = base64_52.decode(byteArray57);
        byte[] byteArray60 = base64_52.decode("");
        byte[] byteArray61 = new byte[] {};
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, false, false, 10);
        byte[] byteArray66 = base64_52.decode(byteArray65);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray66);
        byte[] byteArray68 = base64_21.decode(byteArray66);
        boolean boolean69 = base64_21.hasData();
        byte[] byteArray71 = base64_21.decode("org.apache.commons.codec.DecoderException: ");
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray71);
        byte[] byteArray73 = base64_19.encode(byteArray72);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[98, 51, 74, 110, 89, 88, 66, 104, 89, 50, 104, 108, 89, 50, 57, 116, 98, 87, 57, 117, 99, 50, 78, 118, 90, 71, 86, 106, 82, 71, 86, 106, 98, 50, 82, 108, 99, 107, 86, 52, 89, 50, 86, 119, 100, 71, 108, 118]");
    }

    @Test
    public void test777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test777");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        java.lang.Object obj3 = base64_1.decode((java.lang.Object) "org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray13 = base64_7.decode("QUdRQkFBPT0");
        java.lang.String str14 = base64_5.encodeToString(byteArray13);
        boolean boolean15 = base64_5.hasData();
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: hi!");
        java.math.BigInteger bigInteger18 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger18);
        byte[] byteArray20 = base64_5.encode(byteArray19);
        base64_1.decode(byteArray20, 0, (-1));
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray26 = new byte[] {};
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, false, 10);
        byte[] byteArray31 = base64_25.decode(byteArray30);
        byte[] byteArray33 = base64_25.decode("");
        byte[] byteArray34 = new byte[] {};
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false, false, 10);
        byte[] byteArray39 = base64_25.decode(byteArray38);
        boolean boolean40 = base64_25.isUrlSafe();
        byte[] byteArray42 = new byte[] {};
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, false, false, 10);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray46);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64(0, byteArray49);
        java.lang.String str51 = base64_25.encodeToString(byteArray49);
        byte[] byteArray53 = new byte[] { (byte) 0 };
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, false, true);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray56);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray56, true);
        int int62 = base64_25.readResults(byteArray56, 0, (int) (short) 100);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray56);
        java.lang.String str64 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray63);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray63);
        base64_1.decode(byteArray63, 1, (int) (short) 10);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str14, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[121, 114, 112, 55]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[101, 88, 74, 119, 78, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[65, 65]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "QUE=\r\n" + "'", str64, "QUE=\r\n");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0]");
    }

    @Test
    public void test778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test778");
        byte[] byteArray1 = new byte[] { (byte) 0 };
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, true);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[85, 86, 86, 70, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[86, 86, 90, 87, 82, 108, 66, 82, 77, 69, 115, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[86, 86, 90, 87, 82, 108, 66, 82, 77, 69, 115, 61]");
    }

    @Test
    public void test779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test779");
        byte[] byteArray0 = new byte[] {};
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray0, false, false, 10);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 100);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, false, (int) '4');
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray15);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
    }

    @Test
    public void test780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test780");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.decodeBase64("orgapachecommonscodecDecoderExceptionorgapachecommonscodecDecoderExceptionorgapachecommonscodecEncoderExceptiok");
        byte[] byteArray12 = base64_1.decode(byteArray11);
        boolean boolean13 = base64_1.isUrlSafe();
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray18);
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray18);
        java.lang.String str24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        boolean boolean25 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray18);
        java.lang.String str26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18);
        byte[] byteArray28 = base64_1.decode(byteArray27);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray31 = new byte[] {};
        base64_30.decode(byteArray31, (int) 'a', (-1));
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, true, true, (int) (byte) 100);
        boolean boolean39 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray38);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray38);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40, false, false, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj45 = base64_1.decode((java.lang.Object) false);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94, 122, 43, -127, -86, 90, 114, 23, -100, -94, 105, -88, -98, -57, 40, 117, -25, 4, -99, -54, 29, 122, -79, 49, 113, -22, 109, -118, -119]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -70, 123, -114, 60, -85, 47, 54, -13, -7, -102, -30, -69, 61, 106]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100, 1, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "AGQBAA==\r\n" + "'", str23, "AGQBAA==\r\n");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "AGQBAA" + "'", str24, "AGQBAA");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "AGQBAA" + "'", str26, "AGQBAA");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
    }

    @Test
    public void test781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test781");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        int int23 = base64_1.avail();
        byte[] byteArray24 = new byte[] {};
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, false, 10);
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        byte[] byteArray30 = base64_1.encode(byteArray28);
        java.lang.String str31 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray28);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test782");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        java.lang.String str21 = base64_1.encodeToString(byteArray16);
        boolean boolean22 = base64_1.isUrlSafe();
        byte[] byteArray23 = null;
        int int26 = base64_1.readResults(byteArray23, (int) (byte) 1, 76);
        boolean boolean27 = base64_1.isUrlSafe();
        boolean boolean28 = base64_1.hasData();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test783");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray24 = new byte[] {};
        base64_23.decode(byteArray24, (int) 'a', (-1));
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, true, (int) (byte) 100);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, true, false, 1);
        base64_17.setInitialBuffer(byteArray35, (int) (byte) 10, 100);
        byte[] byteArray39 = new byte[] {};
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, false, false, 10);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray43);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray43);
        java.lang.String str46 = base64_17.encodeToString(byteArray45);
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray49 = new byte[] {};
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray49, false, false, 10);
        byte[] byteArray54 = base64_48.decode(byteArray53);
        byte[] byteArray56 = base64_48.decode("");
        byte[] byteArray57 = new byte[] {};
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57, false, false, 10);
        byte[] byteArray62 = base64_48.decode(byteArray61);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray62);
        byte[] byteArray64 = base64_17.decode(byteArray62);
        org.apache.commons.codec.binary.Base64 base64_66 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray67 = new byte[] {};
        base64_66.decode(byteArray67, (int) 'a', (-1));
        byte[] byteArray72 = base64_66.decode("QUdRQkFBPT0");
        byte[] byteArray74 = null;
        org.apache.commons.codec.binary.Base64 base64_75 = new org.apache.commons.codec.binary.Base64(10, byteArray74);
        org.apache.commons.codec.binary.Base64 base64_76 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray82 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray85 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray82, false, false);
        java.math.BigInteger bigInteger86 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray85);
        byte[] byteArray87 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger86);
        byte[] byteArray88 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger86);
        java.lang.Object obj89 = base64_76.encode((java.lang.Object) byteArray88);
        java.lang.Object obj90 = base64_75.encode((java.lang.Object) byteArray88);
        java.lang.Object obj91 = base64_66.encode((java.lang.Object) byteArray88);
        byte[] byteArray92 = base64_17.encode(byteArray88);
        base64_1.decode(byteArray92, (int) (byte) 0, (int) '#');
        byte[] byteArray96 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray92);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger86);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertNotNull(obj90);
        org.junit.Assert.assertNotNull(obj91);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[84, 72, 112, 75, 85, 108, 78, 53, 79, 72, 108, 86, 86, 68, 65, 57, 68, 81, 111, 61]");
    }

    @Test
    public void test784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test784");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        java.lang.Object obj30 = base64_1.encode((java.lang.Object) byteArray29);
        byte[] byteArray32 = new byte[] { (byte) 0 };
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false, true);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray35);
        int int39 = base64_1.readResults(byteArray35, 1, (int) (short) -1);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray42 = new byte[] {};
        base64_41.decode(byteArray42, (int) 'a', (-1));
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, false, false);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray50);
        byte[] byteArray55 = base64_41.encode(byteArray50);
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray58 = new byte[] {};
        base64_57.decode(byteArray58, (int) 'a', (-1));
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray58, true, true, (int) (byte) 100);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray65, true, false, 1);
        byte[] byteArray70 = base64_41.encode(byteArray69);
        byte[] byteArray71 = base64_1.decode(byteArray70);
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray76, false, false);
        java.math.BigInteger bigInteger80 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray76);
        java.lang.Object obj81 = base64_1.encode((java.lang.Object) byteArray76);
        byte[] byteArray83 = base64_1.decode("QUE");
        byte[] byteArray85 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray83, true);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger80);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[81, 85, 69, 61, 13, 10]");
    }

    @Test
    public void test785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test785");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray8, false);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        base64_12.decode(byteArray13, (int) 'a', (-1));
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, true, true, (int) (byte) 100);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, true, false, 1);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray20);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray28 = new byte[] {};
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, false, false, 10);
        byte[] byteArray33 = base64_27.decode(byteArray32);
        int int36 = base64_10.readResults(byteArray32, 1, (int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64((int) ' ');
        boolean boolean39 = base64_38.hasData();
        int int40 = base64_38.avail();
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: hi!");
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, false, true);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray45);
        base64_38.setInitialBuffer(byteArray45, (int) 'a', (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            base64_10.decode(byteArray45, (int) '#', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 104, 103]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[98, 51, 74, 110, 89, 88, 66, 104, 89, 50, 104, 108, 89, 50, 57, 116, 98, 87, 57, 117, 99, 50, 78, 118, 90, 71, 86, 106, 82, 71, 86, 106, 98, 50, 82, 108, 99, 107, 86, 52, 89, 50, 86, 119, 100, 71, 108, 118, 98, 109, 104, 110]");
    }

    @Test
    public void test786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test786");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, true);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray4);
        boolean boolean6 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 104, 103]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[98, 51, 74, 110, 89, 88, 66, 104, 89, 50, 104, 108, 89, 50, 57, 116, 98, 87, 57, 117, 99, 50, 78, 118, 90, 71, 86, 106, 82, 71, 86, 106, 98, 50, 82, 108, 99, 107, 86, 52, 89, 50, 86, 119, 100, 71, 108, 118, 98, 109, 104, 110]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test787");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray9 = base64_3.decode("QUdRQkFBPT0");
        java.lang.String str10 = base64_1.encodeToString(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false, false, 10);
        byte[] byteArray18 = base64_12.decode(byteArray17);
        byte[] byteArray20 = base64_12.decode("");
        byte[] byteArray21 = new byte[] {};
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, false, 10);
        byte[] byteArray26 = base64_12.decode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        byte[] byteArray38 = base64_12.encode(byteArray36);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38);
        base64_1.decode(byteArray38, (int) (short) 10, (int) 'a');
        byte[] byteArray43 = new byte[] {};
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false, false, 10);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray43);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43);
        base64_1.decode(byteArray49, (int) (short) 1, 1);
        byte[] byteArray53 = new byte[] {};
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, false, false, 10);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57, false, false, 100);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray57);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, true);
        base64_1.setInitialBuffer(byteArray62, (int) (byte) 10, (int) (short) 0);
        byte[] byteArray69 = base64_1.decode("");
        boolean boolean70 = base64_1.hasData();
        boolean boolean71 = base64_1.hasData();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str10, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test788");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(100, byteArray8);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false, false, 10);
        byte[] byteArray18 = base64_12.decode(byteArray17);
        byte[] byteArray20 = base64_12.decode("");
        byte[] byteArray21 = new byte[] {};
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, false, 10);
        byte[] byteArray26 = base64_12.decode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        byte[] byteArray38 = base64_12.encode(byteArray36);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray40);
        java.lang.Object obj42 = base64_9.encode((java.lang.Object) byteArray40);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray45 = new byte[] {};
        base64_44.decode(byteArray45, (int) 'a', (-1));
        byte[] byteArray53 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, false, false);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray53);
        byte[] byteArray58 = base64_44.encode(byteArray53);
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray61 = new byte[] {};
        base64_60.decode(byteArray61, (int) 'a', (-1));
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, true, true, (int) (byte) 100);
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray68, true, false, 1);
        byte[] byteArray73 = base64_44.encode(byteArray72);
        java.lang.Object obj74 = base64_9.decode((java.lang.Object) byteArray72);
        byte[] byteArray76 = base64_9.decode("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException");
        byte[] byteArray77 = new byte[] {};
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray77, false, false, 10);
        byte[] byteArray82 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray81);
        java.lang.String str83 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray81);
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray81);
        java.lang.Object obj85 = base64_9.decode((java.lang.Object) byteArray84);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertNotNull(obj85);
    }

    @Test
    public void test789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test789");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray3 = base64_1.decode("");
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray6 = new byte[] {};
        base64_5.decode(byteArray6, (int) 'a', (-1));
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, true, true, (int) (byte) 100);
        boolean boolean14 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        byte[] byteArray16 = base64_1.encode(byteArray15);
        byte[] byteArray17 = new byte[] {};
        int int20 = base64_1.readResults(byteArray17, 1, (int) '4');
        byte[] byteArray21 = null;
        base64_1.setInitialBuffer(byteArray21, (int) (byte) 0, (int) (byte) 1);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: hi!");
        java.lang.Object obj27 = base64_1.encode((java.lang.Object) byteArray26);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertNotNull(obj27);
    }

    @Test
    public void test790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test790");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(0);
        byte[] byteArray2 = null;
        byte[] byteArray3 = base64_1.encode(byteArray2);
        org.junit.Assert.assertNull(byteArray3);
    }

    @Test
    public void test791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test791");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false);
        base64_1.setInitialBuffer(byteArray10, (int) '#', (int) (byte) -1);
        byte[] byteArray15 = new byte[] {};
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, false, false, 10);
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64(0, byteArray19);
        java.lang.String str22 = base64_1.encodeToString(byteArray19);
        boolean boolean23 = base64_1.hasData();
        int int24 = base64_1.avail();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test792");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray13 = new byte[] { (byte) 0, (byte) 10, (byte) 1, (byte) 0, (byte) 10 };
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray13);
        base64_1.setInitialBuffer(byteArray13, 0, (int) (byte) 1);
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false);
        java.math.BigInteger bigInteger27 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger27);
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger29);
        byte[] byteArray31 = base64_1.decode(byteArray30);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 10, 1, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100, 81, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[117]");
    }

    @Test
    public void test793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test793");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = new byte[] { (byte) 0 };
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, true);
        base64_1.setInitialBuffer(byteArray7, (int) (byte) -1, (int) '#');
        byte[] byteArray15 = base64_1.decode("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: ");
        org.apache.commons.codec.DecoderException decoderException18 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.EncoderException encoderException19 = new org.apache.commons.codec.EncoderException((java.lang.Throwable) decoderException18);
        org.apache.commons.codec.DecoderException decoderException20 = new org.apache.commons.codec.DecoderException("LzJRSy8yUT0", (java.lang.Throwable) encoderException19);
        org.apache.commons.codec.EncoderException encoderException21 = new org.apache.commons.codec.EncoderException();
        java.lang.Throwable[] throwableArray22 = encoderException21.getSuppressed();
        java.lang.Throwable[] throwableArray23 = encoderException21.getSuppressed();
        encoderException19.addSuppressed((java.lang.Throwable) encoderException21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj25 = base64_1.decode((java.lang.Object) encoderException21);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94]");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
    }

    @Test
    public void test794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test794");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(100, byteArray8);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false, false, 10);
        byte[] byteArray18 = base64_12.decode(byteArray17);
        byte[] byteArray20 = base64_12.decode("");
        byte[] byteArray21 = new byte[] {};
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, false, 10);
        byte[] byteArray26 = base64_12.decode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        byte[] byteArray38 = base64_12.encode(byteArray36);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray40);
        java.lang.Object obj42 = base64_9.encode((java.lang.Object) byteArray40);
        byte[] byteArray44 = base64_9.decode("AGQBAA");
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray44);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray44);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, true, true, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (18) than the specified maxium size of 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
    }

    @Test
    public void test795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test795");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, false, true, 76);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48]");
    }

    @Test
    public void test796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test796");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(12);
    }

    @Test
    public void test797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test797");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray24 = new byte[] { (byte) 0 };
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, true);
        boolean boolean28 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray27);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, true, false, (int) '#');
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        byte[] byteArray34 = base64_1.decode(byteArray33);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[65, 65]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[85, 86, 86, 70, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[86, 86, 90, 87, 82, 108, 66, 82, 77, 69, 115, 61]");
    }

    @Test
    public void test798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test798");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        java.lang.Object obj30 = base64_1.encode((java.lang.Object) byteArray29);
        byte[] byteArray31 = new byte[] {};
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false, 10);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray35);
        java.lang.Object obj37 = base64_1.encode((java.lang.Object) byteArray35);
        int int38 = base64_1.avail();
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false, false);
        java.math.BigInteger bigInteger48 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray47);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger48);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger48);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger48);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger48);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger48);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger48);
        byte[] byteArray55 = base64_1.decode(byteArray54);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[117]");
    }

    @Test
    public void test799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test799");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        byte[] byteArray11 = base64_3.decode("");
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_3.decode(byteArray16);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray18, false);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64(0, byteArray18);
        int int22 = base64_21.avail();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test800");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        byte[] byteArray11 = base64_3.decode("");
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_3.decode(byteArray16);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray18, false);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64(0, byteArray18);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
    }

    @Test
    public void test801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test801");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        boolean boolean2 = base64_1.isUrlSafe();
        boolean boolean3 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] {};
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false, 10);
        byte[] byteArray12 = base64_6.decode(byteArray11);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64(100, byteArray12);
        int int16 = base64_1.readResults(byteArray12, 1, (int) (byte) 1);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray20 = new byte[] {};
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, false, false, 10);
        byte[] byteArray25 = base64_19.decode(byteArray24);
        byte[] byteArray27 = base64_19.decode("");
        byte[] byteArray28 = new byte[] {};
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, false, false, 10);
        byte[] byteArray33 = base64_19.decode(byteArray32);
        byte[] byteArray34 = new byte[] {};
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false, false, 10);
        byte[] byteArray39 = base64_19.encode(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray39, false);
        byte[] byteArray43 = base64_41.decode("QUdRQkFBPT0");
        int int44 = base64_41.avail();
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray47 = new byte[] {};
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, false, false, 10);
        byte[] byteArray52 = base64_46.decode(byteArray51);
        byte[] byteArray54 = base64_46.decode("");
        byte[] byteArray55 = new byte[] {};
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray55, false, false, 10);
        byte[] byteArray60 = base64_46.decode(byteArray59);
        org.apache.commons.codec.binary.Base64 base64_62 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray63 = new byte[] {};
        base64_62.decode(byteArray63, (int) 'a', (-1));
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray63, true, true, (int) (byte) 100);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray70, true, false, 1);
        java.lang.Object obj75 = base64_46.encode((java.lang.Object) byteArray74);
        byte[] byteArray76 = new byte[] {};
        byte[] byteArray80 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray76, false, false, 10);
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray80);
        java.lang.Object obj82 = base64_46.encode((java.lang.Object) byteArray80);
        byte[] byteArray83 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray80);
        java.lang.Object obj84 = base64_41.decode((java.lang.Object) byteArray80);
        byte[] byteArray85 = base64_1.encode(byteArray80);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertNotNull(obj84);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
    }

    @Test
    public void test802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test802");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false, false);
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        java.lang.Object obj29 = base64_0.decode((java.lang.Object) byteArray28);
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false, false);
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        byte[] byteArray40 = base64_0.encode(byteArray37);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, false, false);
        java.math.BigInteger bigInteger50 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray49);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray49);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray51);
        base64_0.decode(byteArray51, (-1), (int) (short) 1);
        byte[] byteArray57 = base64_0.decode("orgapachecommonscodecEncoderExceptionorgapachecommonscodecDecoderExceptiog==\r\n");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "QUdRQkFBPT0" + "'", str38, "QUdRQkFBPT0");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 73, -36, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94]");
    }

    @Test
    public void test803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test803");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        int int23 = base64_1.avail();
        byte[] byteArray24 = null;
        int int27 = base64_1.readResults(byteArray24, (int) (short) 10, (int) (byte) -1);
        boolean boolean28 = base64_1.hasData();
        boolean boolean29 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray32 = new byte[] {};
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false, false, 10);
        byte[] byteArray37 = base64_31.decode(byteArray36);
        byte[] byteArray39 = base64_31.decode("");
        byte[] byteArray40 = new byte[] {};
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40, false, false, 10);
        byte[] byteArray45 = base64_31.decode(byteArray44);
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray48 = new byte[] {};
        base64_47.decode(byteArray48, (int) 'a', (-1));
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, true, true, (int) (byte) 100);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray55, true, false, 1);
        java.lang.Object obj60 = base64_31.encode((java.lang.Object) byteArray59);
        byte[] byteArray61 = new byte[] {};
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, false, false, 10);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray65);
        java.lang.Object obj67 = base64_31.encode((java.lang.Object) byteArray65);
        byte[] byteArray73 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray73, false, false);
        java.math.BigInteger bigInteger77 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray76);
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray76);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray76);
        byte[] byteArray80 = base64_31.encode(byteArray76);
        int int83 = base64_1.readResults(byteArray80, (int) (short) -1, 1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger77);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
    }

    @Test
    public void test804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest1.test804");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false);
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger20);
        java.lang.Object obj23 = base64_10.encode((java.lang.Object) byteArray22);
        byte[] byteArray29 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, false);
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger33);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger33);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger33);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger33);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger33);
        java.lang.Object obj39 = base64_10.decode((java.lang.Object) byteArray38);
        byte[] byteArray44 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false, false);
        java.lang.String str48 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray47);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray47);
        byte[] byteArray50 = base64_10.encode(byteArray47);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, true);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray52);
        int int56 = base64_1.readResults(byteArray52, (int) '4', (int) (short) -1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "QUdRQkFBPT0" + "'", str48, "QUdRQkFBPT0");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[85, 86, 86, 107, 85, 108, 70, 114, 82, 107, 74, 81, 86, 68, 65, 57, 68, 81, 111, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }
}

