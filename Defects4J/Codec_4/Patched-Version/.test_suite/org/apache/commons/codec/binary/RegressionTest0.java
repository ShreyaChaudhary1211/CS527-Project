package org.apache.commons.codec.binary;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        byte[] byteArray0 = null;
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray0);
        org.junit.Assert.assertNull(byteArray1);
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        byte[] byteArray4 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, true, true, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (10) than the specified maxium size of 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj3 = base64_1.decode((java.lang.Object) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        java.math.BigInteger bigInteger0 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray1 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: encodeInteger called with null parameter");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        java.math.BigInteger bigInteger0 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray1 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj9 = base64_1.decode((java.lang.Object) 76);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(100, byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray12 = new byte[] {};
        base64_11.decode(byteArray12, (int) 'a', (-1));
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, true, true, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            base64_9.decode(byteArray12, (int) 'a', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        boolean boolean1 = org.apache.commons.codec.binary.Base64.isBase64((byte) -1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, false, false);
        // The following exception was thrown during execution in test generation
        try {
            base64_1.decode(byteArray23, (int) (byte) 100, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[65, 71, 81, 66, 65, 65, 61, 61]");
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        java.lang.Class<?> wildcardClass3 = base64_2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj9 = base64_1.decode((java.lang.Object) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray3 = base64_1.decode("");
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        // The following exception was thrown during execution in test generation
        try {
            base64_1.encode(byteArray4, (int) (byte) 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        byte[] byteArray0 = null;
        java.lang.String str1 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray0);
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        byte[] byteArray0 = null;
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray0, true);
        org.junit.Assert.assertNull(byteArray2);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, true, true, (int) (byte) 100);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, true, false, 1);
        // The following exception was thrown during execution in test generation
        try {
            base64_1.encode(byteArray11, 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(true);
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray6);
        boolean boolean8 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj9 = base64_1.decode((java.lang.Object) boolean8);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.DecoderException decoderException7 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.DecoderException decoderException8 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) decoderException7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj9 = base64_1.decode((java.lang.Object) decoderException7);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        org.apache.commons.codec.DecoderException decoderException24 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.DecoderException");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj25 = base64_1.decode((java.lang.Object) decoderException24);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        boolean boolean2 = base64_1.isUrlSafe();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj4 = base64_1.decode((java.lang.Object) 100L);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        base64_2.decode(byteArray3, (int) 'a', (-1));
        byte[] byteArray11 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray11);
        byte[] byteArray16 = base64_2.encode(byteArray11);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) '4', byteArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [?d??]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        byte[] byteArray0 = null;
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray0, false, true);
        org.junit.Assert.assertNull(byteArray3);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        boolean boolean1 = org.apache.commons.codec.binary.Base64.isBase64((byte) 10);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(100, byteArray8);
        boolean boolean10 = base64_9.hasData();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = base64_9.encode((java.lang.Object) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        boolean boolean2 = base64_1.isUrlSafe();
        java.lang.Object obj3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj4 = base64_1.encode(obj3);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        byte[] byteArray9 = null;
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(10, byteArray9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger21);
        java.lang.Object obj24 = base64_11.encode((java.lang.Object) byteArray23);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray23);
        java.lang.Object obj26 = base64_1.encode((java.lang.Object) byteArray23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj28 = base64_1.decode((java.lang.Object) 0L);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray18);
        base64_0.encode(byteArray22, 0, 10);
        byte[] byteArray27 = new byte[] { (byte) 0 };
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false, true);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray30);
        byte[] byteArray32 = base64_0.decode(byteArray30);
        java.lang.String str33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray30);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "QUE" + "'", str33, "QUE");
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray18);
        base64_0.encode(byteArray22, 0, 10);
        byte[] byteArray27 = new byte[] { (byte) 0 };
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false, true);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray30);
        byte[] byteArray32 = base64_0.decode(byteArray30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj34 = base64_0.decode((java.lang.Object) (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0]");
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true, true, (int) (byte) 100);
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray11);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        boolean boolean1 = org.apache.commons.codec.binary.Base64.isBase64((byte) 100);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray9);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64(0, byteArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [/2QK/2Q=]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[47, 50, 81, 75, 47, 50, 81, 61]");
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray3 = base64_1.decode("");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj5 = base64_1.encode((java.lang.Object) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        boolean boolean1 = org.apache.commons.codec.binary.Base64.isBase64((byte) 0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        java.lang.String str21 = base64_1.encodeToString(byteArray16);
        boolean boolean22 = base64_1.isUrlSafe();
        byte[] byteArray23 = null;
        int int26 = base64_1.readResults(byteArray23, (int) (byte) 1, 76);
        boolean boolean27 = base64_1.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray10);
        byte[] byteArray15 = base64_1.encode(byteArray10);
        byte[] byteArray17 = new byte[] { (byte) 0 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, true);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray20);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj23 = base64_1.decode((java.lang.Object) bigInteger22);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0]");
        org.junit.Assert.assertNotNull(bigInteger22);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        byte[] byteArray5 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray8, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [AGQBAA==]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[65, 71, 81, 66, 65, 65, 61, 61]");
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        boolean boolean1 = org.apache.commons.codec.binary.Base64.isBase64((byte) 1);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true, true, (int) (byte) 100);
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        java.lang.Class<?> wildcardClass12 = byteArray9.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        byte[] byteArray5 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64(0, byteArray10);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray14 = new byte[] {};
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false, false, 10);
        byte[] byteArray19 = base64_13.decode(byteArray18);
        byte[] byteArray21 = base64_13.decode("");
        byte[] byteArray22 = new byte[] {};
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, false, false, 10);
        byte[] byteArray27 = base64_13.decode(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray30 = new byte[] {};
        base64_29.decode(byteArray30, (int) 'a', (-1));
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, true, true, (int) (byte) 100);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, true, false, 1);
        java.lang.Object obj42 = base64_13.encode((java.lang.Object) byteArray41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj43 = base64_11.decode((java.lang.Object) base64_13);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(obj42);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(100, byteArray8);
        boolean boolean10 = base64_9.hasData();
        byte[] byteArray15 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, false, false);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray15);
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray15);
        // The following exception was thrown during execution in test generation
        try {
            base64_9.encode(byteArray15, 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 100, 1, 0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "AGQBAA==\r\n" + "'", str20, "AGQBAA==\r\n");
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("LzJRSy8yUT0");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[47, 50, 81, 75, 47, 50, 81, 61]");
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray18);
        base64_0.encode(byteArray22, 0, 10);
        java.lang.Class<?> wildcardClass26 = byteArray22.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        base64_2.decode(byteArray3, (int) 'a', (-1));
        byte[] byteArray8 = base64_2.decode("QUdRQkFBPT0");
        byte[] byteArray10 = null;
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64(10, byteArray10);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger22);
        java.lang.Object obj25 = base64_12.encode((java.lang.Object) byteArray24);
        java.lang.Object obj26 = base64_11.encode((java.lang.Object) byteArray24);
        java.lang.Object obj27 = base64_2.encode((java.lang.Object) byteArray24);
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64(1, byteArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [/2QK/2Q=]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "LzJRSy8yUT0" + "'", str28, "LzJRSy8yUT0");
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray1 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray12 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray12);
        byte[] byteArray17 = base64_3.encode(byteArray12);
        java.lang.Object obj18 = base64_1.encode((java.lang.Object) byteArray12);
        byte[] byteArray20 = base64_1.decode("LzJRSy8yUT0");
        org.apache.commons.codec.DecoderException decoderException25 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.DecoderException");
        org.apache.commons.codec.DecoderException decoderException26 = new org.apache.commons.codec.DecoderException("hi!", (java.lang.Throwable) decoderException25);
        org.apache.commons.codec.EncoderException encoderException27 = new org.apache.commons.codec.EncoderException("org.apache.commons.codec.DecoderException", (java.lang.Throwable) decoderException25);
        org.apache.commons.codec.DecoderException decoderException28 = new org.apache.commons.codec.DecoderException("AGQBAA==\r\n", (java.lang.Throwable) decoderException25);
        org.apache.commons.codec.DecoderException decoderException30 = new org.apache.commons.codec.DecoderException("");
        decoderException25.addSuppressed((java.lang.Throwable) decoderException30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj32 = base64_1.encode((java.lang.Object) decoderException25);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 50, 81, 75, 47, 50, 81, 61]");
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        int int8 = base64_1.avail();
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_11.decode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64(100, byteArray17);
        byte[] byteArray19 = base64_1.encode(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray22 = new byte[] {};
        base64_21.decode(byteArray22, (int) 'a', (-1));
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, true, true, (int) (byte) 100);
        base64_1.setInitialBuffer(byteArray29, (int) (byte) 100, (int) (byte) 0);
        java.lang.String str33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray29);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray13);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "LzJRSy8yUT0" + "'", str14, "LzJRSy8yUT0");
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        int int8 = base64_1.avail();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj10 = base64_1.encode((java.lang.Object) '4');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        byte[] byteArray11 = base64_3.decode("");
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_3.decode(byteArray16);
        base64_1.setInitialBuffer(byteArray17, 1, 0);
        int int21 = base64_1.avail();
        byte[] byteArray22 = new byte[] {};
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, false, false, 10);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray26);
        // The following exception was thrown during execution in test generation
        try {
            base64_1.encode(byteArray28, 100, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        java.lang.String str21 = base64_1.encodeToString(byteArray16);
        boolean boolean22 = base64_1.isUrlSafe();
        byte[] byteArray23 = null;
        int int26 = base64_1.readResults(byteArray23, (int) (byte) 1, 76);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        byte[] byteArray37 = base64_1.decode(byteArray29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj39 = base64_1.decode((java.lang.Object) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        java.lang.String str21 = base64_1.encodeToString(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, false, false);
        java.math.BigInteger bigInteger32 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger32);
        java.lang.Object obj35 = base64_22.encode((java.lang.Object) byteArray34);
        byte[] byteArray40 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40, false, false);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray40);
        base64_22.encode(byteArray44, 0, 10);
        byte[] byteArray49 = new byte[] { (byte) 0 };
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray49, false, true);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray52);
        byte[] byteArray54 = base64_22.decode(byteArray52);
        // The following exception was thrown during execution in test generation
        try {
            base64_1.decode(byteArray52, (int) (byte) 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0]");
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        boolean boolean26 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray25);
        byte[] byteArray27 = base64_1.encode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj30 = base64_1.decode((java.lang.Object) base64_29);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false);
        base64_1.setInitialBuffer(byteArray10, (int) '#', (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj15 = base64_1.encode((java.lang.Object) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 50, 81, 75, 47, 50, 81, 61]");
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(0, byteArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [/2QK/2Q=]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        int int8 = base64_1.avail();
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_11.decode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64(100, byteArray17);
        byte[] byteArray19 = base64_1.encode(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray22 = new byte[] {};
        base64_21.decode(byteArray22, (int) 'a', (-1));
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, true, true, (int) (byte) 100);
        base64_1.setInitialBuffer(byteArray29, (int) (byte) 100, (int) (byte) 0);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray36 = base64_34.decode("");
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray39 = new byte[] {};
        base64_38.decode(byteArray39, (int) 'a', (-1));
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, true, true, (int) (byte) 100);
        boolean boolean47 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray46);
        byte[] byteArray49 = base64_34.encode(byteArray48);
        byte[] byteArray50 = new byte[] {};
        int int53 = base64_34.readResults(byteArray50, 1, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            base64_1.decode(byteArray50, (int) (byte) 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger1 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        byte[] byteArray0 = null;
        java.lang.String str1 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray0);
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false, false);
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        java.lang.Object obj29 = base64_0.decode((java.lang.Object) byteArray28);
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false, false);
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        byte[] byteArray40 = base64_0.encode(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray43 = new byte[] {};
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false, false, 10);
        byte[] byteArray48 = base64_42.decode(byteArray47);
        byte[] byteArray50 = base64_42.decode("");
        byte[] byteArray51 = new byte[] {};
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, false, false, 10);
        byte[] byteArray56 = base64_42.decode(byteArray55);
        byte[] byteArray57 = new byte[] {};
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57, false, false, 10);
        byte[] byteArray62 = base64_42.encode(byteArray61);
        org.apache.commons.codec.binary.Base64 base64_64 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray65 = new byte[] {};
        base64_64.decode(byteArray65, (int) 'a', (-1));
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray65, true, true, (int) (byte) 100);
        java.lang.String str73 = base64_42.encodeToString(byteArray72);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj74 = base64_0.encode((java.lang.Object) base64_42);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "QUdRQkFBPT0" + "'", str38, "QUdRQkFBPT0");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = new byte[] {};
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false, 10);
        byte[] byteArray22 = base64_2.encode(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64(100, byteArray22, false);
        byte[] byteArray25 = null;
        // The following exception was thrown during execution in test generation
        try {
            base64_24.decode(byteArray25, (int) (byte) 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        java.lang.String str21 = base64_1.encodeToString(byteArray16);
        boolean boolean22 = base64_1.isUrlSafe();
        byte[] byteArray24 = base64_1.decode("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        byte[] byteArray25 = null;
        base64_1.setInitialBuffer(byteArray25, 0, (int) (short) 0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94, 122, 43, -127, -86, 90, 114, 23, -100, -94, 105, -88, -98, -57, 40, 117, -25, 4, -99, -54, 29, 122, -79, 49, 113, -22, 109, -118, -119]");
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray9);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray11);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) '#', byteArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [?d??d]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100, 10, -1, 100]");
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        byte[] byteArray5 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [AGQBAA==]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "QUdRQkFBPT0" + "'", str9, "QUdRQkFBPT0");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48]");
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        int int8 = base64_1.avail();
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_11.decode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64(100, byteArray17);
        byte[] byteArray19 = base64_1.encode(byteArray17);
        boolean boolean20 = base64_1.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        boolean boolean26 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray25);
        byte[] byteArray27 = base64_1.encode(byteArray25);
        byte[] byteArray29 = base64_1.decode("QUE");
        byte[] byteArray35 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false, false);
        java.math.BigInteger bigInteger39 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray38);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger39);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger39);
        java.lang.Object obj42 = base64_1.encode((java.lang.Object) byteArray41);
        java.lang.Class<?> wildcardClass43 = base64_1.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = new byte[] {};
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false, 10);
        byte[] byteArray22 = base64_2.encode(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64(100, byteArray22, false);
        byte[] byteArray25 = null;
        // The following exception was thrown during execution in test generation
        try {
            base64_24.decode(byteArray25, (int) (byte) -1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        java.lang.String str21 = base64_1.encodeToString(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray24 = new byte[] {};
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, false, 10);
        byte[] byteArray29 = base64_23.decode(byteArray28);
        byte[] byteArray31 = base64_23.decode("");
        byte[] byteArray32 = new byte[] {};
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false, false, 10);
        byte[] byteArray37 = base64_23.decode(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray40 = new byte[] {};
        base64_39.decode(byteArray40, (int) 'a', (-1));
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40, true, true, (int) (byte) 100);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, true, false, 1);
        java.lang.Object obj52 = base64_23.encode((java.lang.Object) byteArray51);
        byte[] byteArray53 = new byte[] {};
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, false, false, 10);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray57);
        java.lang.Object obj59 = base64_23.encode((java.lang.Object) byteArray57);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57, false);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, false, false);
        // The following exception was thrown during execution in test generation
        try {
            base64_1.decode(byteArray64, (int) '4', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray8, false);
        org.apache.commons.codec.EncoderException encoderException11 = new org.apache.commons.codec.EncoderException();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = base64_10.encode((java.lang.Object) encoderException11);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        byte[] byteArray9 = null;
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(10, byteArray9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger21);
        java.lang.Object obj24 = base64_11.encode((java.lang.Object) byteArray23);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray23);
        java.lang.Object obj26 = base64_1.encode((java.lang.Object) byteArray23);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, false, 10);
        byte[] byteArray34 = base64_28.decode(byteArray33);
        byte[] byteArray36 = base64_28.decode("");
        byte[] byteArray37 = new byte[] {};
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, false, 10);
        byte[] byteArray42 = base64_28.decode(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray45 = new byte[] {};
        base64_44.decode(byteArray45, (int) 'a', (-1));
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, true, true, (int) (byte) 100);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52, true, false, 1);
        java.lang.Object obj57 = base64_28.encode((java.lang.Object) byteArray56);
        byte[] byteArray58 = new byte[] {};
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray58, false, false, 10);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray62);
        java.lang.Object obj64 = base64_28.encode((java.lang.Object) byteArray62);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        int int69 = base64_28.readResults(byteArray66, (int) (byte) 0, 10);
        java.lang.Object obj70 = base64_1.decode((java.lang.Object) byteArray66);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94, 122, 43, -127, -86, 90, 114, 23, -100, -94, 105, -88, -98, -57, 40, 117, -25, 4, -99, -54, 29, 122, -79, 49, 113, -22, 109, -118, -119]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(obj70);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray10);
        byte[] byteArray15 = base64_1.encode(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        byte[] byteArray30 = base64_1.encode(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray33 = new byte[] {};
        base64_32.decode(byteArray33, (int) 'a', (-1));
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, true, true, (int) (byte) 100);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40, true, false, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj45 = base64_1.decode((java.lang.Object) false);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray19 = new byte[] {};
        base64_18.decode(byteArray19, (int) 'a', (-1));
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, true, true, (int) (byte) 100);
        boolean boolean27 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray26);
        byte[] byteArray28 = base64_2.encode(byteArray26);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray30);
        java.lang.Class<?> wildcardClass32 = byteArray30.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        byte[] byteArray1 = new byte[] { (byte) 0 };
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, true);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, true, false, (int) '#');
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        java.lang.Class<?> wildcardClass11 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[65, 65]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[85, 86, 86, 70, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        java.lang.String str21 = base64_1.encodeToString(byteArray16);
        boolean boolean22 = base64_1.isUrlSafe();
        byte[] byteArray23 = null;
        int int26 = base64_1.readResults(byteArray23, (int) (byte) 1, 76);
        org.apache.commons.codec.DecoderException decoderException28 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.DecoderException decoderException29 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) decoderException28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj30 = base64_1.decode((java.lang.Object) decoderException29);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray5 = new byte[] {};
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false, 10);
        byte[] byteArray10 = base64_4.decode(byteArray9);
        byte[] byteArray12 = base64_4.decode("");
        byte[] byteArray13 = new byte[] {};
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false, false, 10);
        byte[] byteArray18 = base64_4.decode(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray21 = new byte[] {};
        base64_20.decode(byteArray21, (int) 'a', (-1));
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, true, true, (int) (byte) 100);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, true, false, 1);
        java.lang.Object obj33 = base64_4.encode((java.lang.Object) byteArray32);
        byte[] byteArray35 = new byte[] { (byte) 0 };
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false, true);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray38);
        int int42 = base64_4.readResults(byteArray38, 1, (int) (short) -1);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, true, false);
        // The following exception was thrown during execution in test generation
        try {
            base64_2.decode(byteArray38, 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[81, 85, 69, 61, 13, 10]");
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(100, byteArray9);
        boolean boolean11 = base64_10.hasData();
        byte[] byteArray13 = base64_10.decode("QUdRQkFBPT0=\r\n");
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray13);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((int) (short) 10, byteArray13, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [AGQBAA==]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str14, "QUdRQkFBPT0=\r\n");
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        java.lang.Object obj30 = base64_1.encode((java.lang.Object) byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_32.decode(byteArray37);
        byte[] byteArray40 = base64_32.decode("");
        byte[] byteArray41 = new byte[] {};
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, false, false, 10);
        byte[] byteArray46 = base64_32.decode(byteArray45);
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray49 = new byte[] {};
        base64_48.decode(byteArray49, (int) 'a', (-1));
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray49, true, true, (int) (byte) 100);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray56, true, false, 1);
        java.lang.Object obj61 = base64_32.encode((java.lang.Object) byteArray60);
        byte[] byteArray62 = new byte[] {};
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, false, false, 10);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray66);
        java.lang.Object obj68 = base64_32.encode((java.lang.Object) byteArray66);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray66);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray66);
        // The following exception was thrown during execution in test generation
        try {
            base64_1.encode(byteArray70, (int) (short) 1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray9);
        boolean boolean12 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray11);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64(0, byteArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [/2QK/2Q=]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray5 = new byte[] {};
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false, 10);
        byte[] byteArray10 = base64_4.decode(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray10, false);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(76, byteArray10, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, true, true, (int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64((-1), byteArray19);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray27 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false, false);
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray30);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger31);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger31);
        java.lang.Object obj34 = base64_21.encode((java.lang.Object) byteArray33);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, false, false);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray39);
        base64_21.encode(byteArray43, 0, 10);
        byte[] byteArray48 = new byte[] { (byte) 0 };
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, false, true);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray51);
        byte[] byteArray53 = base64_21.decode(byteArray51);
        java.lang.Object obj54 = base64_20.decode((java.lang.Object) byteArray51);
        byte[] byteArray56 = new byte[] {};
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray56, false, false, 10);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray60, false, false, 100);
        org.apache.commons.codec.binary.Base64 base64_66 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray60, false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj67 = base64_20.encode((java.lang.Object) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0]");
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) 10);
        int int2 = base64_1.avail();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray8);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (14) than the specified maxium size of 10");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 50, 81, 75, 47, 50, 81, 61]");
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = new byte[] { (byte) 0 };
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, true);
        base64_1.setInitialBuffer(byteArray7, (int) (byte) -1, (int) '#');
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false, false);
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj30 = base64_1.decode((java.lang.Object) bigInteger23);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 100, 10, -1, 100]");
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false, false);
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray29 = base64_0.decode(byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray29);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 100, -1, 100]");
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        int int23 = base64_1.avail();
        byte[] byteArray24 = null;
        int int27 = base64_1.readResults(byteArray24, (int) (short) 10, (int) (byte) -1);
        boolean boolean28 = base64_1.hasData();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("/2QK/2Q=\r\n");
        boolean boolean2 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray10 = new byte[] {};
        base64_9.decode(byteArray10, (int) 'a', (-1));
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, true, true, (int) (byte) 100);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, true, false, 1);
        base64_3.setInitialBuffer(byteArray21, (int) (byte) 10, 100);
        byte[] byteArray25 = new byte[] {};
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false, 10);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray29);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray29);
        java.lang.String str32 = base64_3.encodeToString(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray35 = new byte[] {};
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false, false, 10);
        byte[] byteArray40 = base64_34.decode(byteArray39);
        byte[] byteArray42 = base64_34.decode("");
        byte[] byteArray43 = new byte[] {};
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false, false, 10);
        byte[] byteArray48 = base64_34.decode(byteArray47);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray48);
        byte[] byteArray50 = base64_3.decode(byteArray48);
        byte[] byteArray51 = base64_1.decode(byteArray48);
        org.apache.commons.codec.DecoderException decoderException54 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.DecoderException decoderException55 = new org.apache.commons.codec.DecoderException("", (java.lang.Throwable) decoderException54);
        java.lang.Throwable[] throwableArray56 = decoderException54.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj57 = base64_1.encode((java.lang.Object) throwableArray56);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(throwableArray56);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        byte[] byteArray0 = new byte[] {};
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray0, false, false, 10);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray4);
        java.lang.String str7 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray4);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false);
        base64_1.setInitialBuffer(byteArray10, (int) '#', (int) (byte) -1);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray17 = base64_15.decode("");
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray20 = new byte[] {};
        base64_19.decode(byteArray20, (int) 'a', (-1));
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, true, true, (int) (byte) 100);
        boolean boolean28 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray27);
        byte[] byteArray30 = base64_15.encode(byteArray29);
        byte[] byteArray31 = base64_1.decode(byteArray30);
        org.apache.commons.codec.EncoderException encoderException33 = new org.apache.commons.codec.EncoderException("LzJRSy8yUT0");
        org.apache.commons.codec.DecoderException decoderException34 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) encoderException33);
        org.apache.commons.codec.DecoderException decoderException35 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) decoderException34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj36 = base64_1.encode((java.lang.Object) decoderException34);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        byte[] byteArray21 = base64_1.encode(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray24 = new byte[] {};
        base64_23.decode(byteArray24, (int) 'a', (-1));
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, true, (int) (byte) 100);
        java.lang.String str32 = base64_1.encodeToString(byteArray31);
        byte[] byteArray34 = new byte[] { (byte) 0 };
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false, true);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray37);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, true);
        base64_1.setInitialBuffer(byteArray40, (int) (byte) -1, 0);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray40);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[81, 85, 69, 61]");
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray23 = null;
        byte[] byteArray24 = base64_1.encode(byteArray23);
        byte[] byteArray26 = new byte[] { (byte) 0 };
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, true);
        boolean boolean30 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray29);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, false, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            base64_1.decode(byteArray34, (int) (short) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[65, 65]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[81, 85, 69, 61, 13, 10]");
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100, 81, 61, 61]");
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        java.lang.String str21 = base64_1.encodeToString(byteArray16);
        boolean boolean22 = base64_1.isUrlSafe();
        byte[] byteArray23 = null;
        int int26 = base64_1.readResults(byteArray23, (int) (byte) 1, 76);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        byte[] byteArray37 = base64_1.decode(byteArray29);
        byte[] byteArray38 = null;
        byte[] byteArray39 = base64_1.decode(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj42 = base64_1.encode((java.lang.Object) 'a');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNull(byteArray39);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray12 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray12);
        byte[] byteArray17 = base64_3.encode(byteArray12);
        java.lang.Object obj18 = base64_1.encode((java.lang.Object) byteArray12);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, false);
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray27);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray27);
        byte[] byteArray31 = base64_1.encode(byteArray27);
        java.lang.Object obj32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj33 = base64_1.decode(obj32);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException");
        java.lang.String str2 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "orgapachecommonscodecDecoderExceptio\r\n" + "'", str2, "orgapachecommonscodecDecoderExceptio\r\n");
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, false);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger13);
        java.lang.Object obj16 = base64_3.encode((java.lang.Object) byteArray15);
        java.lang.Object obj17 = base64_2.encode((java.lang.Object) byteArray15);
        byte[] byteArray18 = null;
        base64_2.encode(byteArray18, (-1), 0);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray25 = new byte[] {};
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false, 10);
        byte[] byteArray30 = base64_24.decode(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64(100, byteArray30);
        boolean boolean32 = base64_31.hasData();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj33 = base64_2.decode((java.lang.Object) boolean32);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray18);
        base64_0.encode(byteArray22, 0, 10);
        byte[] byteArray27 = new byte[] { (byte) 0 };
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false, true);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray30);
        byte[] byteArray32 = base64_0.decode(byteArray30);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray37 = new byte[] {};
        base64_36.decode(byteArray37, (int) 'a', (-1));
        byte[] byteArray42 = base64_36.decode("QUdRQkFBPT0");
        java.lang.String str43 = base64_34.encodeToString(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray46 = new byte[] {};
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, false, false, 10);
        byte[] byteArray51 = base64_45.decode(byteArray50);
        byte[] byteArray53 = base64_45.decode("");
        byte[] byteArray54 = new byte[] {};
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54, false, false, 10);
        byte[] byteArray59 = base64_45.decode(byteArray58);
        org.apache.commons.codec.binary.Base64 base64_61 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray62 = new byte[] {};
        base64_61.decode(byteArray62, (int) 'a', (-1));
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, true, true, (int) (byte) 100);
        boolean boolean70 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray69);
        byte[] byteArray71 = base64_45.encode(byteArray69);
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray71);
        base64_34.decode(byteArray71, (int) (short) 10, (int) 'a');
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray71);
        base64_0.setInitialBuffer(byteArray76, (int) ' ', (int) (byte) 100);
        byte[] byteArray80 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray76);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str43, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray9, false);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64(76, byteArray9, true);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray18);
        java.lang.Class<?> wildcardClass20 = byteArray18.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger11);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger11);
        java.lang.Object obj14 = base64_1.encode((java.lang.Object) byteArray13);
        byte[] byteArray19 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false, false);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray19);
        base64_1.encode(byteArray23, 0, 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) (short) 10, byteArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [?d??]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 100, 1, 0]");
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray18);
        base64_0.encode(byteArray22, 0, 10);
        byte[] byteArray27 = new byte[] { (byte) 0 };
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false, true);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray30);
        byte[] byteArray32 = base64_0.decode(byteArray30);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray37 = new byte[] {};
        base64_36.decode(byteArray37, (int) 'a', (-1));
        byte[] byteArray42 = base64_36.decode("QUdRQkFBPT0");
        java.lang.String str43 = base64_34.encodeToString(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray46 = new byte[] {};
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, false, false, 10);
        byte[] byteArray51 = base64_45.decode(byteArray50);
        byte[] byteArray53 = base64_45.decode("");
        byte[] byteArray54 = new byte[] {};
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54, false, false, 10);
        byte[] byteArray59 = base64_45.decode(byteArray58);
        org.apache.commons.codec.binary.Base64 base64_61 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray62 = new byte[] {};
        base64_61.decode(byteArray62, (int) 'a', (-1));
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, true, true, (int) (byte) 100);
        boolean boolean70 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray69);
        byte[] byteArray71 = base64_45.encode(byteArray69);
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray71);
        base64_34.decode(byteArray71, (int) (short) 10, (int) 'a');
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray71);
        base64_0.setInitialBuffer(byteArray76, (int) ' ', (int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_81 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray82 = new byte[] {};
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray82, false, false, 10);
        byte[] byteArray87 = base64_81.decode(byteArray86);
        byte[] byteArray89 = base64_81.decode("");
        java.lang.Object obj90 = base64_0.decode((java.lang.Object) "");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str43, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
        org.junit.Assert.assertNotNull(obj90);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray17, false);
        java.lang.Class<?> wildcardClass20 = base64_19.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64(0, byteArray1, false);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, false, false);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray8);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray12);
        java.lang.Object obj14 = base64_3.encode((java.lang.Object) byteArray12);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj14);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, false, false, 10);
        byte[] byteArray13 = base64_7.decode(byteArray12);
        byte[] byteArray15 = base64_7.decode("");
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        byte[] byteArray21 = base64_7.decode(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray24 = new byte[] {};
        base64_23.decode(byteArray24, (int) 'a', (-1));
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, true, (int) (byte) 100);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, true, false, 1);
        java.lang.Object obj36 = base64_7.encode((java.lang.Object) byteArray35);
        byte[] byteArray37 = new byte[] {};
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, false, 10);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray41);
        java.lang.Object obj43 = base64_7.encode((java.lang.Object) byteArray41);
        java.lang.Object obj44 = base64_1.encode((java.lang.Object) byteArray41);
        byte[] byteArray45 = null;
        byte[] byteArray46 = base64_1.decode(byteArray45);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertNull(byteArray46);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        byte[] byteArray9 = null;
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(10, byteArray9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger21);
        java.lang.Object obj24 = base64_11.encode((java.lang.Object) byteArray23);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray23);
        java.lang.Object obj26 = base64_1.encode((java.lang.Object) byteArray23);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray34 = base64_28.decode("QUdRQkFBPT0");
        base64_1.encode(byteArray34, 10, 10);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray41 = base64_39.decode("");
        java.lang.Object obj42 = base64_1.decode((java.lang.Object) byteArray41);
        org.apache.commons.codec.DecoderException decoderException44 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.DecoderException decoderException45 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) decoderException44);
        java.lang.Throwable[] throwableArray46 = decoderException44.getSuppressed();
        org.apache.commons.codec.DecoderException decoderException49 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.DecoderException decoderException50 = new org.apache.commons.codec.DecoderException("", (java.lang.Throwable) decoderException49);
        decoderException44.addSuppressed((java.lang.Throwable) decoderException50);
        org.apache.commons.codec.EncoderException encoderException52 = new org.apache.commons.codec.EncoderException((java.lang.Throwable) decoderException50);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj53 = base64_1.encode((java.lang.Object) decoderException50);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(throwableArray46);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, true, true, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (14) than the specified maxium size of 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 50, 81, 75, 47, 50, 81, 61]");
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        byte[] byteArray0 = null;
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray0);
        org.junit.Assert.assertNull(byteArray1);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException");
        java.lang.String str2 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "orgapachecommonscodecDecoderExceptio" + "'", str2, "orgapachecommonscodecDecoderExceptio");
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        byte[] byteArray4 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray4);
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray4);
        java.lang.Class<?> wildcardClass10 = byteArray4.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 100, 1, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AGQBAA==\r\n" + "'", str9, "AGQBAA==\r\n");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, false);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger13);
        java.lang.Object obj16 = base64_3.encode((java.lang.Object) byteArray15);
        java.lang.Object obj17 = base64_2.encode((java.lang.Object) byteArray15);
        byte[] byteArray18 = null;
        base64_2.encode(byteArray18, (-1), 0);
        byte[] byteArray22 = null;
        byte[] byteArray23 = base64_2.encode(byteArray22);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNull(byteArray23);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        java.lang.Object obj30 = base64_1.encode((java.lang.Object) byteArray29);
        byte[] byteArray31 = new byte[] {};
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false, 10);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray35);
        java.lang.Object obj37 = base64_1.encode((java.lang.Object) byteArray35);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, false, false);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray39);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        byte[] byteArray5 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray5, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [?d??]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray4 = base64_2.decode("");
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] {};
        base64_6.decode(byteArray7, (int) 'a', (-1));
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, true, true, (int) (byte) 100);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        byte[] byteArray17 = base64_2.encode(byteArray16);
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray16);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        int int23 = base64_1.avail();
        byte[] byteArray29 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, false);
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger33);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger33);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger33);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger33);
        byte[] byteArray38 = base64_1.encode(byteArray37);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.decodeBase64("QUdRQkFBPT0");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj41 = base64_1.encode((java.lang.Object) "QUdRQkFBPT0");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[47, 50, 81, 75, 47, 50, 81, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[65, 71, 81, 66, 65, 65, 61, 61]");
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        byte[] byteArray5 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(76, byteArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [AGQBAA==]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 71, 81, 66, 65, 65, 61, 61]");
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(true);
        byte[] byteArray3 = new byte[] { (byte) 0 };
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, true);
        // The following exception was thrown during execution in test generation
        try {
            base64_1.decode(byteArray3, (int) (short) -1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[65, 65]");
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        base64_2.decode(byteArray3, (int) 'a', (-1));
        byte[] byteArray8 = base64_2.decode("QUdRQkFBPT0");
        byte[] byteArray10 = null;
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64(10, byteArray10);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger22);
        java.lang.Object obj25 = base64_12.encode((java.lang.Object) byteArray24);
        java.lang.Object obj26 = base64_11.encode((java.lang.Object) byteArray24);
        java.lang.Object obj27 = base64_2.encode((java.lang.Object) byteArray24);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64(100, byteArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [LzJRSy8yUT0=??]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray24 = new byte[] {};
        base64_23.decode(byteArray24, (int) 'a', (-1));
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, true, (int) (byte) 100);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, true, false, 1);
        base64_17.setInitialBuffer(byteArray35, (int) (byte) 10, 100);
        int int39 = base64_17.avail();
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, false, false);
        java.math.BigInteger bigInteger49 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray48);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger49);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger49);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger49);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger49);
        byte[] byteArray54 = base64_17.encode(byteArray53);
        // The following exception was thrown during execution in test generation
        try {
            base64_1.encode(byteArray53, (int) '4', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[47, 50, 81, 75, 47, 50, 81, 61, 13, 10]");
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        java.lang.Object obj30 = base64_1.encode((java.lang.Object) byteArray29);
        byte[] byteArray31 = new byte[] {};
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false, 10);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray35);
        java.lang.Object obj37 = base64_1.encode((java.lang.Object) byteArray35);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, true);
        java.lang.String str42 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray41);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) 10);
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray6 = new byte[] {};
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false, 10);
        byte[] byteArray11 = base64_5.decode(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray11, false);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray11);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64(76, byteArray11, true);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, true, true, (int) (byte) 100);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray20);
        java.lang.Object obj22 = base64_1.decode((java.lang.Object) byteArray20);
        int int23 = base64_1.avail();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        byte[] byteArray1 = new byte[] {};
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, false, 10);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64(0, byteArray5);
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray5);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        byte[] byteArray21 = base64_1.encode(byteArray20);
        int int22 = base64_1.avail();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj24 = base64_1.decode((java.lang.Object) 0.0f);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false, false);
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        java.lang.Object obj29 = base64_0.decode((java.lang.Object) byteArray28);
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false, false);
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        byte[] byteArray40 = base64_0.encode(byteArray37);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, false, false);
        java.math.BigInteger bigInteger50 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray49);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray49);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray51);
        base64_0.decode(byteArray51, (-1), (int) (short) 1);
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray59 = new byte[] {};
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59, false, false, 10);
        byte[] byteArray64 = base64_58.decode(byteArray63);
        org.apache.commons.codec.binary.Base64 base64_66 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray64, false);
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray69 = new byte[] {};
        base64_68.decode(byteArray69, (int) 'a', (-1));
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray69, true, true, (int) (byte) 100);
        byte[] byteArray80 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray76, true, false, 1);
        java.lang.Object obj81 = base64_66.encode((java.lang.Object) byteArray76);
        java.lang.Object obj82 = base64_0.decode(obj81);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "QUdRQkFBPT0" + "'", str38, "QUdRQkFBPT0");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertNotNull(obj82);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        java.lang.String str21 = base64_1.encodeToString(byteArray16);
        boolean boolean22 = base64_1.isUrlSafe();
        boolean boolean23 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj26 = base64_1.encode((java.lang.Object) base64_25);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true, true, (int) (byte) 100);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true, false, 1);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14);
        boolean boolean16 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray12 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray12);
        byte[] byteArray17 = base64_3.encode(byteArray12);
        java.lang.Object obj18 = base64_1.encode((java.lang.Object) byteArray12);
        byte[] byteArray20 = base64_1.decode("LzJRSy8yUT0");
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray24 = new byte[] {};
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, false, 10);
        byte[] byteArray29 = base64_23.decode(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64(100, byteArray29);
        boolean boolean31 = base64_30.hasData();
        byte[] byteArray33 = base64_30.decode("QUdRQkFBPT0=\r\n");
        byte[] byteArray34 = base64_1.decode(byteArray33);
        java.lang.String str35 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray33);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 100, 1, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str35, "QUdRQkFBPT0=\r\n");
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[84, 72, 112, 75, 85, 108, 78, 53, 79, 72, 108, 86, 86, 68, 65, 61, 13, 10]");
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray19 = new byte[] {};
        base64_18.decode(byteArray19, (int) 'a', (-1));
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, true, true, (int) (byte) 100);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, true, false, 1);
        java.lang.Object obj31 = base64_2.encode((java.lang.Object) byteArray30);
        byte[] byteArray33 = new byte[] { (byte) 0 };
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, true);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray36);
        int int40 = base64_2.readResults(byteArray36, 1, (int) (short) -1);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray43 = new byte[] {};
        base64_42.decode(byteArray43, (int) 'a', (-1));
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, false, false);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray51);
        byte[] byteArray56 = base64_42.encode(byteArray51);
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray59 = new byte[] {};
        base64_58.decode(byteArray59, (int) 'a', (-1));
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59, true, true, (int) (byte) 100);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66, true, false, 1);
        byte[] byteArray71 = base64_42.encode(byteArray70);
        byte[] byteArray72 = base64_2.decode(byteArray71);
        byte[] byteArray77 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray80 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray77, false, false);
        java.math.BigInteger bigInteger81 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray77);
        java.lang.Object obj82 = base64_2.encode((java.lang.Object) byteArray77);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_83 = new org.apache.commons.codec.binary.Base64(76, byteArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [?d??]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger81);
        org.junit.Assert.assertNotNull(obj82);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray18);
        base64_0.encode(byteArray22, 0, 10);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray30 = new byte[] {};
        base64_29.decode(byteArray30, (int) 'a', (-1));
        byte[] byteArray38 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, false, false);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray38);
        byte[] byteArray43 = base64_29.encode(byteArray38);
        java.lang.Object obj44 = base64_27.encode((java.lang.Object) byteArray38);
        byte[] byteArray50 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, false, false);
        java.math.BigInteger bigInteger54 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray53);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray53);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray53);
        byte[] byteArray57 = base64_27.encode(byteArray53);
        byte[] byteArray58 = base64_0.encode(byteArray57);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[84, 72, 112, 75, 85, 108, 78, 53, 79, 72, 108, 86, 86, 68, 65, 57, 68, 81, 111, 61]");
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray17);
        org.apache.commons.codec.DecoderException decoderException20 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj21 = base64_18.encode((java.lang.Object) "org.apache.commons.codec.EncoderException");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        byte[] byteArray9 = null;
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(10, byteArray9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger21);
        java.lang.Object obj24 = base64_11.encode((java.lang.Object) byteArray23);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray23);
        java.lang.Object obj26 = base64_1.encode((java.lang.Object) byteArray23);
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray23);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false);
        java.lang.String str31 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray23);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "LzJRSy8yUT0" + "'", str27, "LzJRSy8yUT0");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "LzJRSy8yUT0=\r\n" + "'", str31, "LzJRSy8yUT0=\r\n");
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: hi!");
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, true);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [orgapachecommonscodecDecoderExceptionhg]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 104, 103]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[98, 51, 74, 110, 89, 88, 66, 104, 89, 50, 104, 108, 89, 50, 57, 116, 98, 87, 57, 117, 99, 50, 78, 118, 90, 71, 86, 106, 82, 71, 86, 106, 98, 50, 82, 108, 99, 107, 86, 52, 89, 50, 86, 119, 100, 71, 108, 118, 98, 109, 104, 110]");
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(true);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        byte[] byteArray11 = base64_3.decode("");
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_3.decode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray20 = new byte[] {};
        base64_19.decode(byteArray20, (int) 'a', (-1));
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, true, true, (int) (byte) 100);
        boolean boolean28 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray27);
        byte[] byteArray29 = base64_3.encode(byteArray27);
        byte[] byteArray30 = base64_1.decode(byteArray27);
        int int31 = base64_1.avail();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        boolean boolean9 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray5);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        boolean boolean2 = base64_1.isUrlSafe();
        boolean boolean3 = base64_1.hasData();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        boolean boolean16 = base64_1.isUrlSafe();
        byte[] byteArray18 = new byte[] {};
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false, 10);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64(0, byteArray25);
        java.lang.String str27 = base64_1.encodeToString(byteArray25);
        byte[] byteArray29 = new byte[] { (byte) 0 };
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, true);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray32);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, true);
        int int38 = base64_1.readResults(byteArray32, 0, (int) (short) 100);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray32);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[81, 85, 69]");
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray15);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray16, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [/2QK/2Q=]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[47, 50, 81, 75, 47, 50, 81, 61]");
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray3 = base64_1.decode("");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj5 = base64_1.encode((java.lang.Object) "org.apache.commons.codec.DecoderException: ");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray10);
        byte[] byteArray15 = base64_1.encode(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        byte[] byteArray30 = base64_1.encode(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray35 = new byte[] {};
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false, false, 10);
        byte[] byteArray40 = base64_34.decode(byteArray39);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64(100, byteArray40);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((int) (short) 1, byteArray40);
        byte[] byteArray43 = base64_1.decode(byteArray40);
        java.math.BigInteger bigInteger44 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger44);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray4 = base64_2.decode("");
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] {};
        base64_6.decode(byteArray7, (int) 'a', (-1));
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, true, true, (int) (byte) 100);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        byte[] byteArray17 = base64_2.encode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray17);
        java.math.BigInteger bigInteger19 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray17);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(bigInteger19);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray18);
        base64_0.encode(byteArray22, 0, 10);
        boolean boolean26 = base64_0.isUrlSafe();
        byte[] byteArray31 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34);
        base64_0.decode(byteArray34, (int) (short) -1, (int) (byte) 10);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray34);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 100, 1, 0]");
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        byte[] byteArray1 = new byte[] { (byte) 0 };
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, true);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[85, 86, 86, 70, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[86, 86, 90, 87, 82, 108, 66, 82, 77, 69, 115, 61]");
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(0);
        boolean boolean2 = base64_1.hasData();
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false, 100);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray7);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, true);
        byte[] byteArray15 = base64_1.encode(byteArray12);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        byte[] byteArray4 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false);
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray7);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray7);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "QUdRQkFBPT0" + "'", str8, "QUdRQkFBPT0");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[65, 71, 81, 66, 65, 65, 61, 61]");
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        byte[] byteArray4 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray4);
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray4);
        java.lang.String str10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        boolean boolean11 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray4);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 100, 1, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AGQBAA==\r\n" + "'", str9, "AGQBAA==\r\n");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "AGQBAA" + "'", str10, "AGQBAA");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AGQBAA" + "'", str12, "AGQBAA");
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        byte[] byteArray4 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray4);
        java.lang.String str9 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray4);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray4);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 100, 1, 0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "AGQBAA==\r\n" + "'", str9, "AGQBAA==\r\n");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 100, 1, 0]");
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = new byte[] {};
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false, 10);
        byte[] byteArray22 = base64_2.encode(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64(100, byteArray22, false);
        byte[] byteArray25 = null;
        base64_24.setInitialBuffer(byteArray25, (int) (short) 1, (int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray32 = new byte[] {};
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false, false, 10);
        byte[] byteArray37 = base64_31.decode(byteArray36);
        byte[] byteArray39 = base64_31.decode("");
        byte[] byteArray40 = new byte[] {};
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40, false, false, 10);
        byte[] byteArray45 = base64_31.decode(byteArray44);
        byte[] byteArray46 = new byte[] {};
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, false, false, 10);
        byte[] byteArray51 = base64_31.encode(byteArray50);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray51, false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj54 = base64_24.encode((java.lang.Object) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray17);
        java.math.BigInteger bigInteger19 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray17);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(bigInteger19);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        java.lang.Object obj30 = base64_1.encode((java.lang.Object) byteArray29);
        byte[] byteArray32 = new byte[] { (byte) 0 };
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false, true);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray35);
        int int39 = base64_1.readResults(byteArray35, 1, (int) (short) -1);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray42 = new byte[] {};
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, false, false, 10);
        byte[] byteArray47 = base64_41.decode(byteArray46);
        byte[] byteArray49 = base64_41.decode("");
        byte[] byteArray50 = new byte[] {};
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, false, false, 10);
        byte[] byteArray55 = base64_41.decode(byteArray54);
        byte[] byteArray56 = new byte[] {};
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray56, false, false, 10);
        java.lang.String str61 = base64_41.encodeToString(byteArray56);
        boolean boolean62 = base64_41.isUrlSafe();
        byte[] byteArray63 = null;
        int int66 = base64_41.readResults(byteArray63, (int) (byte) 1, 76);
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray69 = new byte[] {};
        base64_68.decode(byteArray69, (int) 'a', (-1));
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray69, true, true, (int) (byte) 100);
        byte[] byteArray77 = base64_41.decode(byteArray69);
        java.lang.Object obj78 = base64_1.decode((java.lang.Object) byteArray77);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray77);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        boolean boolean8 = base64_1.isUrlSafe();
        boolean boolean9 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray14 = new byte[] {};
        base64_13.decode(byteArray14, (int) 'a', (-1));
        byte[] byteArray19 = base64_13.decode("QUdRQkFBPT0");
        java.lang.String str20 = base64_11.encodeToString(byteArray19);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray19);
        base64_1.setInitialBuffer(byteArray19, (int) ' ', (int) (byte) 0);
        byte[] byteArray26 = new byte[] { (byte) 0 };
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, true);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray29);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, true, true);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false, false);
        base64_1.decode(byteArray38, (int) (short) 10, (int) (byte) 1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str20, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[85, 86, 86, 70, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[85, 86, 86, 70, 80, 81, 48, 75]");
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        byte[] byteArray9 = null;
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(10, byteArray9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger21);
        java.lang.Object obj24 = base64_11.encode((java.lang.Object) byteArray23);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray23);
        java.lang.Object obj26 = base64_1.encode((java.lang.Object) byteArray23);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, true);
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray28);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, false, false);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, true, true, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (30) than the specified maxium size of 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "THpKUlN5OHlVVDA9DQo=\r\n" + "'", str29, "THpKUlN5OHlVVDA9DQo=\r\n");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[84, 72, 112, 75, 85, 108, 78, 53, 79, 72, 108, 86, 86, 68, 65, 57, 68, 81, 111, 61]");
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(100, byteArray8);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false, false, 10);
        byte[] byteArray18 = base64_12.decode(byteArray17);
        byte[] byteArray20 = base64_12.decode("");
        byte[] byteArray21 = new byte[] {};
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, false, 10);
        byte[] byteArray26 = base64_12.decode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        byte[] byteArray38 = base64_12.encode(byteArray36);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray40);
        java.lang.Object obj42 = base64_9.encode((java.lang.Object) byteArray40);
        boolean boolean43 = base64_9.isUrlSafe();
        byte[] byteArray44 = new byte[] {};
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false, false, 10);
        byte[] byteArray49 = base64_9.encode(byteArray44);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray52 = new byte[] {};
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52, false, false, 10);
        byte[] byteArray57 = base64_51.decode(byteArray56);
        int int58 = base64_51.avail();
        org.apache.commons.codec.binary.Base64 base64_61 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray62 = new byte[] {};
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, false, false, 10);
        byte[] byteArray67 = base64_61.decode(byteArray66);
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64(100, byteArray67);
        byte[] byteArray69 = base64_51.encode(byteArray67);
        java.math.BigInteger bigInteger70 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray67);
        // The following exception was thrown during execution in test generation
        try {
            base64_9.decode(byteArray67, (int) (short) -1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(bigInteger70);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        java.lang.String str21 = base64_1.encodeToString(byteArray16);
        boolean boolean22 = base64_1.isUrlSafe();
        boolean boolean23 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray27 = new byte[] {};
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false, false, 10);
        byte[] byteArray32 = base64_26.decode(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray32, false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj35 = base64_1.decode((java.lang.Object) false);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, false, false);
        base64_2.setInitialBuffer(byteArray11, (int) '#', (int) (byte) -1);
        byte[] byteArray16 = base64_2.decode("orgapachecommonscodecDecoderExceptio");
        byte[] byteArray18 = new byte[] { (byte) 0 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, true);
        boolean boolean22 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray21);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, true, false, (int) '#');
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, true);
        byte[] byteArray30 = base64_2.encode(byteArray26);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64(100, byteArray30, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [UVVFPQ0K??]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 65]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[85, 86, 86, 70, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[85, 86, 86, 70, 80, 81, 48, 75, 13, 10]");
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray4 = base64_2.decode("");
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] {};
        base64_6.decode(byteArray7, (int) 'a', (-1));
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, true, true, (int) (byte) 100);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        byte[] byteArray17 = base64_2.encode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray17);
        boolean boolean19 = base64_18.hasData();
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray24 = new byte[] {};
        base64_23.decode(byteArray24, (int) 'a', (-1));
        byte[] byteArray29 = base64_23.decode("QUdRQkFBPT0");
        java.lang.String str30 = base64_21.encodeToString(byteArray29);
        boolean boolean31 = base64_21.hasData();
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray34 = new byte[] {};
        base64_33.decode(byteArray34, (int) 'a', (-1));
        byte[] byteArray39 = base64_33.decode("QUdRQkFBPT0");
        base64_21.decode(byteArray39, 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj43 = base64_18.decode((java.lang.Object) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str30, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[65, 71, 81, 66, 65, 65, 61, 61]");
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        java.lang.Object obj30 = base64_1.encode((java.lang.Object) byteArray29);
        byte[] byteArray32 = new byte[] { (byte) 0 };
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false, true);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray35);
        int int39 = base64_1.readResults(byteArray35, 1, (int) (short) -1);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, true, false);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[85, 86, 86, 70, 80, 81, 48, 75]");
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        byte[] byteArray0 = null;
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray0);
        org.junit.Assert.assertNull(byteArray1);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        byte[] byteArray9 = null;
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(10, byteArray9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger21);
        java.lang.Object obj24 = base64_11.encode((java.lang.Object) byteArray23);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray23);
        java.lang.Object obj26 = base64_1.encode((java.lang.Object) byteArray23);
        byte[] byteArray28 = base64_1.decode("org.apache.commons.codec.EncoderException");
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray28);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 73, -36, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 69, 110, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 69, 110, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111]");
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        java.lang.Object obj30 = base64_1.encode((java.lang.Object) byteArray29);
        byte[] byteArray31 = new byte[] {};
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false, 10);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray35);
        java.lang.Object obj37 = base64_1.encode((java.lang.Object) byteArray35);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        int int42 = base64_1.readResults(byteArray39, (int) (byte) 0, 10);
        boolean boolean43 = base64_1.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94, 122, 43, -127, -86, 90, 114, 23, -100, -94, 105, -88, -98, -57, 40, 117, -25, 4, -99, -54, 29, 122, -79, 49, 113, -22, 109, -118, -119]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64((-1), byteArray2, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [?????!y?&???r?^p7????????]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray10 = new byte[] {};
        base64_9.decode(byteArray10, (int) 'a', (-1));
        byte[] byteArray15 = base64_9.decode("QUdRQkFBPT0");
        byte[] byteArray17 = null;
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64(10, byteArray17);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false);
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger29);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger29);
        java.lang.Object obj32 = base64_19.encode((java.lang.Object) byteArray31);
        java.lang.Object obj33 = base64_18.encode((java.lang.Object) byteArray31);
        java.lang.Object obj34 = base64_9.encode((java.lang.Object) byteArray31);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        byte[] byteArray36 = base64_1.decode(byteArray31);
        java.lang.Object obj37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj38 = base64_1.decode(obj37);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 100, 10, -1, 100]");
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("QUdRQkFBPT0");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray1);
        java.lang.Class<?> wildcardClass3 = byteArray1.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        java.lang.Object obj30 = base64_1.encode((java.lang.Object) byteArray29);
        byte[] byteArray31 = new byte[] {};
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false, 10);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray35);
        java.lang.Object obj37 = base64_1.encode((java.lang.Object) byteArray35);
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false, false);
        java.math.BigInteger bigInteger47 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray46);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray46);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        byte[] byteArray50 = base64_1.encode(byteArray46);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray53 = new byte[] {};
        base64_52.decode(byteArray53, (int) 'a', (-1));
        byte[] byteArray58 = base64_52.decode("QUdRQkFBPT0");
        java.math.BigInteger bigInteger59 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray58);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj60 = base64_1.decode((java.lang.Object) bigInteger59);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger59);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        byte[] byteArray1 = new byte[] { (byte) 0 };
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, true);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, true, false, (int) '#');
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, true);
        java.lang.Class<?> wildcardClass13 = byteArray12.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[65, 65]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[85, 86, 86, 70, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        byte[] byteArray2 = new byte[] { (byte) 0 };
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, true);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64(1, byteArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [AA]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[81, 85, 69, 61, 13, 10]");
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: AGQBAA==\r\n");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -100, 1, -112, 4, 0]");
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        byte[] byteArray9 = null;
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(10, byteArray9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger21);
        java.lang.Object obj24 = base64_11.encode((java.lang.Object) byteArray23);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray23);
        java.lang.Object obj26 = base64_1.encode((java.lang.Object) byteArray23);
        byte[] byteArray28 = base64_1.decode("org.apache.commons.codec.EncoderException");
        boolean boolean29 = base64_1.hasData();
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_32.decode(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64(100, byteArray38);
        boolean boolean40 = base64_39.hasData();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj41 = base64_1.encode((java.lang.Object) boolean40);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 73, -36, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, false);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger13);
        java.lang.Object obj16 = base64_3.encode((java.lang.Object) byteArray15);
        java.lang.Object obj17 = base64_2.encode((java.lang.Object) byteArray15);
        byte[] byteArray18 = null;
        base64_2.encode(byteArray18, (-1), 0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, false);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray31 = base64_2.decode(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray34 = new byte[] {};
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false, false, 10);
        byte[] byteArray39 = base64_33.decode(byteArray38);
        int int40 = base64_33.avail();
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray44 = new byte[] {};
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false, false, 10);
        byte[] byteArray49 = base64_43.decode(byteArray48);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64(100, byteArray49);
        byte[] byteArray51 = base64_33.encode(byteArray49);
        byte[] byteArray52 = base64_2.encode(byteArray51);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        java.lang.Object obj30 = base64_1.encode((java.lang.Object) byteArray29);
        byte[] byteArray31 = new byte[] {};
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false, 10);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray35);
        java.lang.Object obj37 = base64_1.encode((java.lang.Object) byteArray35);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, false, false);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, false);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray9 = base64_3.decode("QUdRQkFBPT0");
        java.lang.String str10 = base64_1.encodeToString(byteArray9);
        boolean boolean11 = base64_1.hasData();
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray14 = new byte[] {};
        base64_13.decode(byteArray14, (int) 'a', (-1));
        byte[] byteArray19 = base64_13.decode("QUdRQkFBPT0");
        base64_1.decode(byteArray19, 0, (int) (short) 0);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray25 = new byte[] {};
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false, 10);
        byte[] byteArray30 = base64_24.decode(byteArray29);
        byte[] byteArray32 = base64_24.decode("");
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_24.decode(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray41 = new byte[] {};
        base64_40.decode(byteArray41, (int) 'a', (-1));
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, true, true, (int) (byte) 100);
        boolean boolean49 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray48);
        byte[] byteArray50 = base64_24.encode(byteArray48);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, false);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52, true, true, (int) '#');
        byte[] byteArray57 = base64_1.decode(byteArray52);
        org.apache.commons.codec.binary.Base64 base64_61 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray62 = new byte[] {};
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, false, false, 10);
        byte[] byteArray67 = base64_61.decode(byteArray66);
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray67, false);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray67);
        org.apache.commons.codec.binary.Base64 base64_72 = new org.apache.commons.codec.binary.Base64(76, byteArray67, true);
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray67, true, true, (int) (byte) 100);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray67, false, false);
        // The following exception was thrown during execution in test generation
        try {
            base64_1.decode(byteArray67, (int) '#', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str10, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) -1);
        boolean boolean2 = base64_1.isUrlSafe();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray18);
        base64_0.encode(byteArray22, 0, 10);
        byte[] byteArray27 = new byte[] { (byte) 0 };
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false, true);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray30);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, true);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, true, true);
        base64_0.encode(byteArray36, (int) (short) -1, (int) (byte) 0);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: ");
        base64_0.decode(byteArray41, 10, 1);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray47 = new byte[] {};
        base64_46.decode(byteArray47, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray53 = new byte[] {};
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, false, false, 10);
        byte[] byteArray58 = base64_52.decode(byteArray57);
        byte[] byteArray60 = base64_52.decode("");
        byte[] byteArray61 = new byte[] {};
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, false, false, 10);
        byte[] byteArray66 = base64_52.decode(byteArray65);
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray69 = new byte[] {};
        base64_68.decode(byteArray69, (int) 'a', (-1));
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray69, true, true, (int) (byte) 100);
        byte[] byteArray80 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray76, true, false, 1);
        java.lang.Object obj81 = base64_52.encode((java.lang.Object) byteArray80);
        byte[] byteArray82 = new byte[] {};
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray82, false, false, 10);
        byte[] byteArray87 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray86);
        java.lang.Object obj88 = base64_52.encode((java.lang.Object) byteArray86);
        java.lang.Object obj89 = base64_46.encode((java.lang.Object) byteArray86);
        byte[] byteArray90 = base64_0.encode(byteArray86);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[85, 86, 86, 70, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(true);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        byte[] byteArray11 = base64_3.decode("");
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_3.decode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray20 = new byte[] {};
        base64_19.decode(byteArray20, (int) 'a', (-1));
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, true, true, (int) (byte) 100);
        boolean boolean28 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray27);
        byte[] byteArray29 = base64_3.encode(byteArray27);
        byte[] byteArray30 = base64_1.decode(byteArray27);
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        boolean boolean32 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray27);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray9 = base64_3.decode("QUdRQkFBPT0");
        java.lang.String str10 = base64_1.encodeToString(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false, false, 10);
        byte[] byteArray18 = base64_12.decode(byteArray17);
        byte[] byteArray20 = base64_12.decode("");
        byte[] byteArray21 = new byte[] {};
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, false, 10);
        byte[] byteArray26 = base64_12.decode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        byte[] byteArray38 = base64_12.encode(byteArray36);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38);
        base64_1.decode(byteArray38, (int) (short) 10, (int) 'a');
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64(1);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray47 = new byte[] {};
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, false, false, 10);
        byte[] byteArray52 = base64_46.decode(byteArray51);
        byte[] byteArray53 = base64_44.encode(byteArray52);
        base64_1.decode(byteArray52, 76, 1);
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray63 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray63, false, false);
        java.math.BigInteger bigInteger67 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray66);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger67);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger67);
        java.lang.Object obj70 = base64_57.encode((java.lang.Object) byteArray69);
        byte[] byteArray75 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray75, false, false);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray75);
        base64_57.encode(byteArray79, 0, 10);
        org.apache.commons.codec.binary.Base64 base64_84 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray85 = new byte[] {};
        base64_84.decode(byteArray85, (int) 'a', (-1));
        byte[] byteArray92 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray85, true, true, (int) (byte) 100);
        boolean boolean93 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray92);
        byte[] byteArray94 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray92);
        java.lang.Object obj95 = base64_57.decode((java.lang.Object) byteArray94);
        byte[] byteArray96 = base64_1.encode(byteArray94);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str10, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
        org.junit.Assert.assertNotNull(obj95);
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[]");
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) -1);
        boolean boolean2 = base64_1.isUrlSafe();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray23 = new byte[] {};
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false, 10);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.String str30 = base64_1.encodeToString(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_32.decode(byteArray37);
        byte[] byteArray40 = base64_32.decode("");
        byte[] byteArray41 = new byte[] {};
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, false, false, 10);
        byte[] byteArray46 = base64_32.decode(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray46);
        byte[] byteArray48 = base64_1.decode(byteArray46);
        boolean boolean49 = base64_1.hasData();
        byte[] byteArray51 = base64_1.decode("org.apache.commons.codec.DecoderException: ");
        java.lang.Class<?> wildcardClass52 = base64_1.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, false);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger13);
        java.lang.Object obj16 = base64_3.encode((java.lang.Object) byteArray15);
        java.lang.Object obj17 = base64_2.encode((java.lang.Object) byteArray15);
        byte[] byteArray18 = null;
        base64_2.encode(byteArray18, (-1), 0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, false);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray31 = base64_2.decode(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray37 = new byte[] {};
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, false, 10);
        byte[] byteArray42 = base64_36.decode(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray42, false);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64(76, byteArray42, true);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, true, (int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64((-1), byteArray51);
        int int55 = base64_2.readResults(byteArray51, 100, (int) (short) 10);
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray62 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, false, false);
        java.math.BigInteger bigInteger66 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray65);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger66);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger66);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger66);
        byte[] byteArray70 = base64_56.decode(byteArray69);
        base64_2.encode(byteArray69, 0, 10);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[117]");
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        org.apache.commons.codec.DecoderException decoderException4 = new org.apache.commons.codec.DecoderException("");
        org.apache.commons.codec.DecoderException decoderException5 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) decoderException4);
        org.apache.commons.codec.DecoderException decoderException6 = new org.apache.commons.codec.DecoderException("AGQBAA==\r\n", (java.lang.Throwable) decoderException5);
        org.apache.commons.codec.DecoderException decoderException7 = new org.apache.commons.codec.DecoderException("", (java.lang.Throwable) decoderException6);
        org.apache.commons.codec.DecoderException decoderException11 = new org.apache.commons.codec.DecoderException("");
        org.apache.commons.codec.DecoderException decoderException12 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) decoderException11);
        org.apache.commons.codec.DecoderException decoderException13 = new org.apache.commons.codec.DecoderException("AGQBAA==\r\n", (java.lang.Throwable) decoderException12);
        org.apache.commons.codec.DecoderException decoderException14 = new org.apache.commons.codec.DecoderException("LzJRSy8yUT0", (java.lang.Throwable) decoderException13);
        decoderException6.addSuppressed((java.lang.Throwable) decoderException14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj16 = base64_0.decode((java.lang.Object) decoderException14);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        byte[] byteArray11 = base64_3.decode("");
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_3.decode(byteArray16);
        base64_1.setInitialBuffer(byteArray17, 1, 0);
        int int21 = base64_1.avail();
        byte[] byteArray23 = null;
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64(10, byteArray23);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray31 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger35);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger35);
        java.lang.Object obj38 = base64_25.encode((java.lang.Object) byteArray37);
        java.lang.Object obj39 = base64_24.encode((java.lang.Object) byteArray37);
        byte[] byteArray40 = null;
        base64_24.encode(byteArray40, (-1), 0);
        byte[] byteArray48 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, false, false);
        java.math.BigInteger bigInteger52 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray48);
        byte[] byteArray53 = base64_24.decode(byteArray48);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray53);
        // The following exception was thrown during execution in test generation
        try {
            base64_1.decode(byteArray54, (int) ' ', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) 100);
        org.apache.commons.codec.DecoderException decoderException4 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.DecoderException decoderException5 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) decoderException4);
        java.lang.Throwable[] throwableArray6 = decoderException4.getSuppressed();
        org.apache.commons.codec.DecoderException decoderException9 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.DecoderException decoderException10 = new org.apache.commons.codec.DecoderException("", (java.lang.Throwable) decoderException9);
        decoderException4.addSuppressed((java.lang.Throwable) decoderException10);
        org.apache.commons.codec.DecoderException decoderException14 = new org.apache.commons.codec.DecoderException("");
        org.apache.commons.codec.DecoderException decoderException15 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) decoderException14);
        org.apache.commons.codec.DecoderException decoderException16 = new org.apache.commons.codec.DecoderException("AGQBAA==\r\n", (java.lang.Throwable) decoderException15);
        decoderException4.addSuppressed((java.lang.Throwable) decoderException15);
        org.apache.commons.codec.EncoderException encoderException18 = new org.apache.commons.codec.EncoderException((java.lang.Throwable) decoderException15);
        org.apache.commons.codec.DecoderException decoderException19 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException", (java.lang.Throwable) encoderException18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj20 = base64_1.encode((java.lang.Object) "org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray6);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false);
        base64_1.setInitialBuffer(byteArray10, (int) '#', (int) (byte) -1);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray17 = base64_15.decode("");
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray20 = new byte[] {};
        base64_19.decode(byteArray20, (int) 'a', (-1));
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, true, true, (int) (byte) 100);
        boolean boolean28 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray27);
        byte[] byteArray30 = base64_15.encode(byteArray29);
        byte[] byteArray31 = base64_1.decode(byteArray30);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = new byte[] {};
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false, 10);
        byte[] byteArray22 = base64_2.encode(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray22, false);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray28 = new byte[] {};
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, false, false, 10);
        byte[] byteArray33 = base64_27.decode(byteArray32);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64(100, byteArray33);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray38 = new byte[] {};
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, false, false, 10);
        byte[] byteArray43 = base64_37.decode(byteArray42);
        byte[] byteArray45 = base64_37.decode("");
        byte[] byteArray46 = new byte[] {};
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, false, false, 10);
        byte[] byteArray51 = base64_37.decode(byteArray50);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray54 = new byte[] {};
        base64_53.decode(byteArray54, (int) 'a', (-1));
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54, true, true, (int) (byte) 100);
        boolean boolean62 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray61);
        byte[] byteArray63 = base64_37.encode(byteArray61);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, false);
        org.apache.commons.codec.binary.Base64 base64_66 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray65);
        java.lang.Object obj67 = base64_34.encode((java.lang.Object) byteArray65);
        byte[] byteArray69 = base64_34.decode("AGQBAA");
        // The following exception was thrown during execution in test generation
        try {
            base64_24.encode(byteArray69, (int) (short) 10, 76);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[0, 100, 1, 0]");
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray9 = base64_3.decode("QUdRQkFBPT0");
        java.lang.String str10 = base64_1.encodeToString(byteArray9);
        boolean boolean11 = base64_1.hasData();
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray14 = new byte[] {};
        base64_13.decode(byteArray14, (int) 'a', (-1));
        byte[] byteArray19 = base64_13.decode("QUdRQkFBPT0");
        base64_1.decode(byteArray19, 0, (int) (short) 0);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray25 = new byte[] {};
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false, 10);
        byte[] byteArray30 = base64_24.decode(byteArray29);
        byte[] byteArray32 = base64_24.decode("");
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_24.decode(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray41 = new byte[] {};
        base64_40.decode(byteArray41, (int) 'a', (-1));
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, true, true, (int) (byte) 100);
        boolean boolean49 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray48);
        byte[] byteArray50 = base64_24.encode(byteArray48);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, false);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52, true, true, (int) '#');
        byte[] byteArray57 = base64_1.decode(byteArray52);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str10, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        boolean boolean26 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray25);
        byte[] byteArray27 = base64_1.encode(byteArray25);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) '#');
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray33);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("/2QK/2Q=\r\n");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[117]");
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        byte[] byteArray0 = null;
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray0, true, false, (int) '4');
        org.junit.Assert.assertNull(byteArray4);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        byte[] byteArray4 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false);
        java.math.BigInteger bigInteger8 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger8);
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray9);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        java.lang.String str21 = base64_1.encodeToString(byteArray16);
        boolean boolean22 = base64_1.isUrlSafe();
        byte[] byteArray24 = base64_1.decode("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        int int25 = base64_1.avail();
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false, false);
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray35);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger36);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger36);
        java.lang.Object obj39 = base64_26.encode((java.lang.Object) byteArray38);
        byte[] byteArray40 = null;
        java.lang.String str41 = base64_26.encodeToString(byteArray40);
        byte[] byteArray43 = new byte[] { (byte) 0 };
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false, true);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray46);
        base64_26.setInitialBuffer(byteArray47, 0, (int) (byte) 0);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.decodeBase64("hi!");
        byte[] byteArray53 = base64_26.decode(byteArray52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj54 = base64_1.encode((java.lang.Object) base64_26);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94, 122, 43, -127, -86, 90, 114, 23, -100, -94, 105, -88, -98, -57, 40, 117, -25, 4, -99, -54, 29, 122, -79, 49, 113, -22, 109, -118, -119]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-122]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: hi!");
        java.math.BigInteger bigInteger2 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray1);
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger2);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[121, 114, 112, 55]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[101, 88, 74, 119, 78, 119, 61, 61]");
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray14 = null;
        java.lang.String str15 = base64_0.encodeToString(byteArray14);
        boolean boolean16 = base64_0.hasData();
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: LzJRSy8yUT0");
        // The following exception was thrown during execution in test generation
        try {
            base64_0.encode(byteArray18, 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 36");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -100, -68, -55, 69, 44, -68, -55, 68, -12]");
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        java.lang.Object obj30 = base64_1.encode((java.lang.Object) byteArray29);
        byte[] byteArray32 = new byte[] { (byte) 0 };
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false, true);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray35);
        int int39 = base64_1.readResults(byteArray35, 1, (int) (short) -1);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, true, false);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray35);
        java.lang.String str44 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray43);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[81, 85, 69]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UVVF\r\n" + "'", str44, "UVVF\r\n");
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        boolean boolean16 = base64_1.isUrlSafe();
        org.apache.commons.codec.DecoderException decoderException17 = new org.apache.commons.codec.DecoderException();
        org.apache.commons.codec.DecoderException decoderException20 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.DecoderException decoderException21 = new org.apache.commons.codec.DecoderException("", (java.lang.Throwable) decoderException20);
        java.lang.Throwable[] throwableArray22 = decoderException20.getSuppressed();
        org.apache.commons.codec.DecoderException decoderException24 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.DecoderException decoderException25 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) decoderException24);
        java.lang.Throwable[] throwableArray26 = decoderException24.getSuppressed();
        org.apache.commons.codec.DecoderException decoderException29 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.DecoderException decoderException30 = new org.apache.commons.codec.DecoderException("", (java.lang.Throwable) decoderException29);
        decoderException24.addSuppressed((java.lang.Throwable) decoderException30);
        decoderException20.addSuppressed((java.lang.Throwable) decoderException30);
        decoderException17.addSuppressed((java.lang.Throwable) decoderException30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj34 = base64_1.decode((java.lang.Object) decoderException30);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        java.lang.Object obj30 = base64_1.encode((java.lang.Object) byteArray29);
        byte[] byteArray31 = new byte[] {};
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false, 10);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray35);
        java.lang.Object obj37 = base64_1.encode((java.lang.Object) byteArray35);
        byte[] byteArray38 = null;
        java.lang.String str39 = base64_1.encodeToString(byteArray38);
        byte[] byteArray40 = null;
        // The following exception was thrown during execution in test generation
        try {
            base64_1.decode(byteArray40, (int) (short) 1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray8, false);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        base64_12.decode(byteArray13, (int) 'a', (-1));
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, true, true, (int) (byte) 100);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, true, false, 1);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray20);
        java.lang.Object obj27 = base64_10.decode((java.lang.Object) "THpKUlN5OHlVVDA9DQo=\r\n");
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray30 = new byte[] {};
        base64_29.decode(byteArray30, (int) 'a', (-1));
        byte[] byteArray35 = base64_29.decode("QUdRQkFBPT0");
        byte[] byteArray37 = null;
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64(10, byteArray37);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, false, false);
        java.math.BigInteger bigInteger49 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray48);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger49);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger49);
        java.lang.Object obj52 = base64_39.encode((java.lang.Object) byteArray51);
        java.lang.Object obj53 = base64_38.encode((java.lang.Object) byteArray51);
        java.lang.Object obj54 = base64_29.encode((java.lang.Object) byteArray51);
        byte[] byteArray56 = base64_29.decode("org.apache.commons.codec.EncoderException");
        java.lang.Object obj57 = base64_10.decode((java.lang.Object) "org.apache.commons.codec.EncoderException");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 73, -36, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertNotNull(obj57);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        byte[] byteArray1 = new byte[] { (byte) 0 };
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, true);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, true, false, (int) '#');
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, true);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray12);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[65, 65]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[85, 86, 86, 70, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[81, 85, 69, 61, 13, 10]");
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false);
        base64_1.setInitialBuffer(byteArray10, (int) '#', (int) (byte) -1);
        byte[] byteArray14 = null;
        base64_1.setInitialBuffer(byteArray14, (int) (short) 100, (int) (short) 100);
        byte[] byteArray18 = null;
        byte[] byteArray19 = base64_1.decode(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray22 = new byte[] {};
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, false, false, 10);
        byte[] byteArray27 = base64_21.decode(byteArray26);
        byte[] byteArray29 = base64_21.decode("");
        byte[] byteArray30 = new byte[] {};
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, false, false, 10);
        byte[] byteArray35 = base64_21.decode(byteArray34);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray38 = new byte[] {};
        base64_37.decode(byteArray38, (int) 'a', (-1));
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, true, true, (int) (byte) 100);
        boolean boolean46 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray45);
        byte[] byteArray47 = base64_21.encode(byteArray45);
        java.lang.String str48 = base64_1.encodeToString(byteArray45);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray23 = new byte[] {};
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false, 10);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.String str30 = base64_1.encodeToString(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_32.decode(byteArray37);
        byte[] byteArray40 = base64_32.decode("");
        byte[] byteArray41 = new byte[] {};
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, false, false, 10);
        byte[] byteArray46 = base64_32.decode(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray46);
        byte[] byteArray48 = base64_1.decode(byteArray46);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray51 = new byte[] {};
        base64_50.decode(byteArray51, (int) 'a', (-1));
        byte[] byteArray56 = base64_50.decode("QUdRQkFBPT0");
        byte[] byteArray58 = null;
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64(10, byteArray58);
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray66 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66, false, false);
        java.math.BigInteger bigInteger70 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray69);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger70);
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger70);
        java.lang.Object obj73 = base64_60.encode((java.lang.Object) byteArray72);
        java.lang.Object obj74 = base64_59.encode((java.lang.Object) byteArray72);
        java.lang.Object obj75 = base64_50.encode((java.lang.Object) byteArray72);
        byte[] byteArray76 = base64_1.encode(byteArray72);
        boolean boolean77 = base64_1.hasData();
        org.apache.commons.codec.binary.Base64 base64_79 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray80 = new byte[] {};
        base64_79.decode(byteArray80, (int) 'a', (-1));
        byte[] byteArray87 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray80, true, true, (int) (byte) 100);
        byte[] byteArray91 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray87, true, false, 1);
        byte[] byteArray92 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray87);
        byte[] byteArray93 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray92);
        byte[] byteArray94 = base64_1.decode(byteArray92);
        java.math.BigInteger bigInteger95 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray92);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
        org.junit.Assert.assertNotNull(bigInteger95);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        byte[] byteArray1 = new byte[] { (byte) 0 };
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, true);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, true, false, (int) '#');
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        java.lang.Class<?> wildcardClass11 = byteArray9.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[65, 65]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[85, 86, 86, 70, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true, true, (int) (byte) 100);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true, false, 1);
        java.lang.String str14 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray9);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = new byte[] {};
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false, 10);
        byte[] byteArray22 = base64_2.encode(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64(100, byteArray22, false);
        byte[] byteArray25 = null;
        base64_24.setInitialBuffer(byteArray25, (int) (short) 1, (int) (byte) 100);
        boolean boolean29 = base64_24.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray4 = base64_2.decode("");
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] {};
        base64_6.decode(byteArray7, (int) 'a', (-1));
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, true, true, (int) (byte) 100);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        byte[] byteArray17 = base64_2.encode(byteArray16);
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray16);
        java.lang.String str20 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray16);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        boolean boolean2 = base64_1.hasData();
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, false, false);
        java.math.BigInteger bigInteger12 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger12);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger12);
        // The following exception was thrown during execution in test generation
        try {
            base64_1.decode(byteArray15, 76, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 76");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 50, 81, 75, 47, 50, 81, 61]");
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        boolean boolean2 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64(1);
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] {};
        base64_6.decode(byteArray7, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        base64_12.decode(byteArray13, (int) 'a', (-1));
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, true, true, (int) (byte) 100);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, true, false, 1);
        base64_6.setInitialBuffer(byteArray24, (int) (byte) 10, 100);
        byte[] byteArray28 = new byte[] {};
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, false, false, 10);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray32);
        java.lang.String str35 = base64_6.encodeToString(byteArray34);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray38 = new byte[] {};
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, false, false, 10);
        byte[] byteArray43 = base64_37.decode(byteArray42);
        byte[] byteArray45 = base64_37.decode("");
        byte[] byteArray46 = new byte[] {};
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, false, false, 10);
        byte[] byteArray51 = base64_37.decode(byteArray50);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray51);
        byte[] byteArray53 = base64_6.decode(byteArray51);
        byte[] byteArray54 = base64_4.decode(byteArray51);
        int int57 = base64_1.readResults(byteArray51, (int) (short) 1, (int) (short) 10);
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray61 = new byte[] {};
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, false, false, 10);
        byte[] byteArray66 = base64_60.decode(byteArray65);
        org.apache.commons.codec.binary.Base64 base64_67 = new org.apache.commons.codec.binary.Base64(100, byteArray66);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj68 = base64_1.decode((java.lang.Object) base64_67);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = new byte[] {};
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false, 10);
        java.lang.String str22 = base64_2.encodeToString(byteArray17);
        boolean boolean23 = base64_2.isUrlSafe();
        byte[] byteArray25 = base64_2.decode("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        java.lang.String str26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray25);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [?????!y?&???r?^p7???????????j????(?j'???y??r?^?L\\z?b?z+??Zr???i???(u?????z?1q?m??]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94, 122, 43, -127, -86, 90, 114, 23, -100, -94, 105, -88, -98, -57, 40, 117, -25, 4, -99, -54, 29, 122, -79, 49, 113, -22, 109, -118, -119]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "orgapachecommonscodecDecoderExceptionorgapachecommonscodecDecoderExceptionorgapachecommonscodecEncoderExceptiok" + "'", str26, "orgapachecommonscodecDecoderExceptionorgapachecommonscodecDecoderExceptionorgapachecommonscodecEncoderExceptiok");
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false);
        base64_1.setInitialBuffer(byteArray10, (int) '#', (int) (byte) -1);
        byte[] byteArray15 = base64_1.decode("orgapachecommonscodecDecoderExceptio");
        byte[] byteArray17 = new byte[] { (byte) 0 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, true);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray20);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, true, false, (int) '#');
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, true);
        byte[] byteArray29 = base64_1.encode(byteArray25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj31 = base64_1.decode((java.lang.Object) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[65, 65]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[85, 86, 86, 70, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[85, 86, 86, 70, 80, 81, 48, 75, 13, 10]");
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray14 = null;
        java.lang.String str15 = base64_0.encodeToString(byteArray14);
        boolean boolean16 = base64_0.hasData();
        boolean boolean17 = base64_0.hasData();
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray21 = new byte[] {};
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, false, 10);
        byte[] byteArray26 = base64_20.decode(byteArray25);
        byte[] byteArray28 = base64_20.decode("");
        byte[] byteArray29 = new byte[] {};
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, false, 10);
        byte[] byteArray34 = base64_20.decode(byteArray33);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray34);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray35, false);
        byte[] byteArray38 = new byte[] {};
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray38);
        byte[] byteArray40 = base64_37.decode(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray43 = new byte[] {};
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false, false, 10);
        byte[] byteArray48 = base64_42.decode(byteArray47);
        byte[] byteArray50 = base64_42.decode("");
        byte[] byteArray51 = new byte[] {};
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, false, false, 10);
        byte[] byteArray56 = base64_42.decode(byteArray55);
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray59 = new byte[] {};
        base64_58.decode(byteArray59, (int) 'a', (-1));
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59, true, true, (int) (byte) 100);
        boolean boolean67 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray66);
        byte[] byteArray68 = base64_42.encode(byteArray66);
        base64_37.encode(byteArray68, (int) ' ', 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj72 = base64_0.encode((java.lang.Object) base64_37);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        base64_2.decode(byteArray3, (int) 'a', (-1));
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, true, true, (int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64(100, byteArray10, true);
        byte[] byteArray13 = null;
        byte[] byteArray14 = base64_12.encode(byteArray13);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNull(byteArray14);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) -1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        byte[] byteArray11 = base64_3.decode("");
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_3.decode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray20 = new byte[] {};
        base64_19.decode(byteArray20, (int) 'a', (-1));
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, true, true, (int) (byte) 100);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, true, false, 1);
        java.lang.Object obj32 = base64_3.encode((java.lang.Object) byteArray31);
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray37);
        java.lang.Object obj39 = base64_3.encode((java.lang.Object) byteArray37);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        java.lang.Object obj41 = base64_1.decode((java.lang.Object) byteArray40);
        boolean boolean42 = base64_1.hasData();
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        java.lang.String str45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray44);
        base64_1.decode(byteArray44, (int) (short) 0, 0);
        byte[] byteArray50 = new byte[] { (byte) 0 };
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, false, true);
        int int56 = base64_1.readResults(byteArray50, (int) (short) 0, 0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[65, 65]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        byte[] byteArray21 = base64_1.encode(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray24 = new byte[] {};
        base64_23.decode(byteArray24, (int) 'a', (-1));
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, true, (int) (byte) 100);
        java.lang.String str32 = base64_1.encodeToString(byteArray31);
        byte[] byteArray34 = new byte[] { (byte) 0 };
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false, true);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray37);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, true);
        base64_1.setInitialBuffer(byteArray40, (int) (byte) -1, 0);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray46 = new byte[] {};
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, false, false, 10);
        byte[] byteArray51 = base64_45.decode(byteArray50);
        byte[] byteArray53 = base64_45.decode("");
        byte[] byteArray54 = new byte[] {};
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54, false, false, 10);
        byte[] byteArray59 = base64_45.decode(byteArray58);
        byte[] byteArray60 = new byte[] {};
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray60, false, false, 10);
        byte[] byteArray65 = base64_45.encode(byteArray64);
        org.apache.commons.codec.binary.Base64 base64_67 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray68 = new byte[] {};
        base64_67.decode(byteArray68, (int) 'a', (-1));
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray68, true, true, (int) (byte) 100);
        java.lang.String str76 = base64_45.encodeToString(byteArray75);
        byte[] byteArray78 = new byte[] { (byte) 0 };
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray78, false, true);
        byte[] byteArray82 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray81);
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray81, true);
        base64_45.setInitialBuffer(byteArray84, (int) (byte) -1, 0);
        int int90 = base64_1.readResults(byteArray84, 76, (int) 'a');
        byte[] byteArray92 = base64_1.decode("org.apache.commons.codec.EncoderException: ");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[0]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 73, -36, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        byte[] byteArray0 = null;
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray0);
        org.junit.Assert.assertNull(byteArray1);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray23 = new byte[] {};
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false, 10);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.String str30 = base64_1.encodeToString(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_32.decode(byteArray37);
        byte[] byteArray40 = base64_32.decode("");
        byte[] byteArray41 = new byte[] {};
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, false, false, 10);
        byte[] byteArray46 = base64_32.decode(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray46);
        byte[] byteArray48 = base64_1.decode(byteArray46);
        boolean boolean49 = base64_1.hasData();
        byte[] byteArray51 = base64_1.decode("org.apache.commons.codec.DecoderException: ");
        byte[] byteArray53 = base64_1.decode("");
        byte[] byteArray55 = null;
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64(10, byteArray55);
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray63 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray63, false, false);
        java.math.BigInteger bigInteger67 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray66);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger67);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger67);
        java.lang.Object obj70 = base64_57.encode((java.lang.Object) byteArray69);
        java.lang.Object obj71 = base64_56.encode((java.lang.Object) byteArray69);
        byte[] byteArray72 = null;
        base64_56.encode(byteArray72, (-1), 0);
        byte[] byteArray80 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray83 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray80, false, false);
        java.math.BigInteger bigInteger84 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray80);
        byte[] byteArray85 = base64_56.decode(byteArray80);
        java.lang.String str86 = base64_1.encodeToString(byteArray80);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger84);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "AGQBAA==\r\n" + "'", str86, "AGQBAA==\r\n");
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray23 = new byte[] {};
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false, 10);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.String str30 = base64_1.encodeToString(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_32.decode(byteArray37);
        byte[] byteArray40 = base64_32.decode("");
        byte[] byteArray41 = new byte[] {};
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, false, false, 10);
        byte[] byteArray46 = base64_32.decode(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray46);
        byte[] byteArray48 = base64_1.decode(byteArray46);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray9 = base64_3.decode("QUdRQkFBPT0");
        java.lang.String str10 = base64_1.encodeToString(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false, false, 10);
        byte[] byteArray18 = base64_12.decode(byteArray17);
        byte[] byteArray20 = base64_12.decode("");
        byte[] byteArray21 = new byte[] {};
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, false, 10);
        byte[] byteArray26 = base64_12.decode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        byte[] byteArray38 = base64_12.encode(byteArray36);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38);
        base64_1.decode(byteArray38, (int) (short) 10, (int) 'a');
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64(1);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray47 = new byte[] {};
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, false, false, 10);
        byte[] byteArray52 = base64_46.decode(byteArray51);
        byte[] byteArray53 = base64_44.encode(byteArray52);
        base64_1.decode(byteArray52, 76, 1);
        int int57 = base64_1.avail();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str10, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 14 + "'", int57 == 14);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        java.lang.String str31 = base64_1.encodeToString(byteArray30);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.CHUNK_SEPARATOR;
        base64_1.decode(byteArray32, 76, (int) (byte) 0);
        java.lang.Class<?> wildcardClass36 = base64_1.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[13, 10]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray17, false);
        int int20 = base64_19.avail();
        int int21 = base64_19.avail();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray18);
        base64_0.encode(byteArray22, 0, 10);
        boolean boolean26 = base64_0.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray35 = new byte[] {};
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false, false, 10);
        byte[] byteArray40 = base64_34.decode(byteArray39);
        byte[] byteArray42 = base64_34.decode("");
        byte[] byteArray43 = new byte[] {};
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false, false, 10);
        byte[] byteArray48 = base64_34.decode(byteArray47);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray51 = new byte[] {};
        base64_50.decode(byteArray51, (int) 'a', (-1));
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, true, true, (int) (byte) 100);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray58, true, false, 1);
        java.lang.Object obj63 = base64_34.encode((java.lang.Object) byteArray62);
        byte[] byteArray64 = new byte[] {};
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray64, false, false, 10);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray68);
        java.lang.Object obj70 = base64_34.encode((java.lang.Object) byteArray68);
        java.lang.Object obj71 = base64_28.encode((java.lang.Object) byteArray68);
        base64_0.decode(byteArray68, (int) (short) -1, 76);
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray68);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray9 = base64_3.decode("QUdRQkFBPT0");
        java.lang.String str10 = base64_1.encodeToString(byteArray9);
        boolean boolean11 = base64_1.hasData();
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray14 = new byte[] {};
        base64_13.decode(byteArray14, (int) 'a', (-1));
        byte[] byteArray19 = base64_13.decode("QUdRQkFBPT0");
        base64_1.decode(byteArray19, 0, (int) (short) 0);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray25 = new byte[] {};
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false, 10);
        byte[] byteArray30 = base64_24.decode(byteArray29);
        byte[] byteArray32 = base64_24.decode("");
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_24.decode(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray41 = new byte[] {};
        base64_40.decode(byteArray41, (int) 'a', (-1));
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, true, true, (int) (byte) 100);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, true, false, 1);
        java.lang.Object obj53 = base64_24.encode((java.lang.Object) byteArray52);
        byte[] byteArray54 = new byte[] {};
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54, false, false, 10);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray58);
        java.lang.Object obj60 = base64_24.encode((java.lang.Object) byteArray58);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray58);
        java.lang.String str62 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray58);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj63 = base64_1.encode((java.lang.Object) str62);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str10, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        boolean boolean26 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray25);
        byte[] byteArray27 = base64_1.encode(byteArray25);
        byte[] byteArray29 = base64_1.decode("QUE");
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray34 = new byte[] {};
        base64_33.decode(byteArray34, (int) 'a', (-1));
        byte[] byteArray42 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, false, false);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray42);
        byte[] byteArray47 = base64_33.encode(byteArray42);
        java.lang.Object obj48 = base64_31.encode((java.lang.Object) byteArray42);
        byte[] byteArray54 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54, false, false);
        java.math.BigInteger bigInteger58 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray57);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray57);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray57);
        byte[] byteArray61 = base64_31.encode(byteArray57);
        org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray64 = new byte[] {};
        base64_63.decode(byteArray64, (int) 'a', (-1));
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray64, true, true, (int) (byte) 100);
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray71);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray71);
        base64_31.encode(byteArray71, (int) ' ', (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj77 = base64_1.decode((java.lang.Object) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray10);
        byte[] byteArray15 = base64_1.encode(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        byte[] byteArray30 = base64_1.encode(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray35 = new byte[] {};
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false, false, 10);
        byte[] byteArray40 = base64_34.decode(byteArray39);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64(100, byteArray40);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((int) (short) 1, byteArray40);
        byte[] byteArray43 = base64_1.decode(byteArray40);
        byte[] byteArray45 = base64_1.decode("org.apache.commons.codec.DecoderException: ");
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray48 = new byte[] {};
        base64_47.decode(byteArray48, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray54 = new byte[] {};
        base64_53.decode(byteArray54, (int) 'a', (-1));
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54, true, true, (int) (byte) 100);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, true, false, 1);
        base64_47.setInitialBuffer(byteArray65, (int) (byte) 10, 100);
        byte[] byteArray69 = new byte[] {};
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray69, false, false, 10);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray73);
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray73);
        java.lang.String str76 = base64_47.encodeToString(byteArray75);
        base64_1.decode(byteArray75, (-1), 0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        base64_2.decode(byteArray3, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray9 = new byte[] {};
        base64_8.decode(byteArray9, (int) 'a', (-1));
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true, true, (int) (byte) 100);
        boolean boolean17 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray16);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, true, (int) (short) 10);
        byte[] byteArray22 = base64_2.encode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) (byte) 10, byteArray16, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray8, false);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        base64_12.decode(byteArray13, (int) 'a', (-1));
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, true, true, (int) (byte) 100);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, true, false, 1);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray20);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray27);
        base64_10.decode(byteArray28, 76, 1);
        boolean boolean32 = base64_10.hasData();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94, 122, 43, -127, -86, 90, 114, 23, -100, -94, 105, -88, -98, -57, 40, 117, -25, 4, -99, -54, 29, 122, -79, 49, 113, -22, 109, -118, -119]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 111, 114, 13, 10, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 69, 110, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 107, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        boolean boolean2 = base64_1.hasData();
        byte[] byteArray3 = null;
        int int6 = base64_1.readResults(byteArray3, 0, 76);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray10 = base64_8.decode("");
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        base64_12.decode(byteArray13, (int) 'a', (-1));
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, true, true, (int) (byte) 100);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray20);
        byte[] byteArray23 = base64_8.encode(byteArray22);
        byte[] byteArray24 = new byte[] {};
        int int27 = base64_8.readResults(byteArray24, 1, (int) '4');
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray24);
        // The following exception was thrown during execution in test generation
        try {
            base64_1.encode(byteArray24, 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray17, false);
        byte[] byteArray20 = new byte[] {};
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray20);
        byte[] byteArray22 = base64_19.decode(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray26 = new byte[] {};
        base64_25.decode(byteArray26, (int) 'a', (-1));
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, true, true, (int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64(100, byteArray33, true);
        boolean boolean36 = base64_35.isUrlSafe();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj37 = base64_19.decode((java.lang.Object) base64_35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray9 = base64_3.decode("QUdRQkFBPT0");
        java.lang.String str10 = base64_1.encodeToString(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false, false, 10);
        byte[] byteArray18 = base64_12.decode(byteArray17);
        byte[] byteArray20 = base64_12.decode("");
        byte[] byteArray21 = new byte[] {};
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, false, 10);
        byte[] byteArray26 = base64_12.decode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        byte[] byteArray38 = base64_12.encode(byteArray36);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38);
        base64_1.decode(byteArray38, (int) (short) 10, (int) 'a');
        byte[] byteArray43 = new byte[] {};
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false, false, 10);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray43);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43);
        base64_1.decode(byteArray49, (int) (short) 1, 1);
        byte[] byteArray53 = new byte[] {};
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, false, false, 10);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57, false, false, 100);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray57);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, true);
        base64_1.setInitialBuffer(byteArray62, (int) (byte) 10, (int) (short) 0);
        byte[] byteArray68 = new byte[] {};
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray68, false, false, 10);
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray72, false, false, 100);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray72);
        byte[] byteArray78 = base64_1.encode(byteArray77);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str10, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray23 = new byte[] {};
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false, 10);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.String str30 = base64_1.encodeToString(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_32.decode(byteArray37);
        byte[] byteArray40 = base64_32.decode("");
        byte[] byteArray41 = new byte[] {};
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, false, false, 10);
        byte[] byteArray46 = base64_32.decode(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray46);
        byte[] byteArray48 = base64_1.decode(byteArray46);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray51 = new byte[] {};
        base64_50.decode(byteArray51, (int) 'a', (-1));
        byte[] byteArray56 = base64_50.decode("QUdRQkFBPT0");
        byte[] byteArray58 = null;
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64(10, byteArray58);
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray66 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66, false, false);
        java.math.BigInteger bigInteger70 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray69);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger70);
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger70);
        java.lang.Object obj73 = base64_60.encode((java.lang.Object) byteArray72);
        java.lang.Object obj74 = base64_59.encode((java.lang.Object) byteArray72);
        java.lang.Object obj75 = base64_50.encode((java.lang.Object) byteArray72);
        byte[] byteArray76 = base64_1.encode(byteArray72);
        boolean boolean77 = base64_1.hasData();
        org.apache.commons.codec.binary.Base64 base64_79 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray80 = new byte[] {};
        base64_79.decode(byteArray80, (int) 'a', (-1));
        byte[] byteArray87 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray80, true, true, (int) (byte) 100);
        byte[] byteArray91 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray87, true, false, 1);
        byte[] byteArray92 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray87);
        byte[] byteArray93 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray92);
        byte[] byteArray94 = base64_1.decode(byteArray92);
        boolean boolean95 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray92);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false, false);
        base64_1.setInitialBuffer(byteArray27, 100, 1);
        boolean boolean34 = base64_1.hasData();
        byte[] byteArray36 = new byte[] { (byte) 0 };
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false, true);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray39);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, true);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj46 = base64_1.encode((java.lang.Object) true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[85, 86, 86, 70, 80, 81, 48, 75, 13, 10]");
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(100, byteArray8);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false, false, 10);
        byte[] byteArray18 = base64_12.decode(byteArray17);
        byte[] byteArray20 = base64_12.decode("");
        byte[] byteArray21 = new byte[] {};
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, false, 10);
        byte[] byteArray26 = base64_12.decode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        byte[] byteArray38 = base64_12.encode(byteArray36);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray40);
        java.lang.Object obj42 = base64_9.encode((java.lang.Object) byteArray40);
        int int43 = base64_9.avail();
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray46 = new byte[] {};
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, false, false, 10);
        byte[] byteArray51 = base64_45.decode(byteArray50);
        int int52 = base64_45.avail();
        org.apache.commons.codec.binary.Base64 base64_55 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray56 = new byte[] {};
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray56, false, false, 10);
        byte[] byteArray61 = base64_55.decode(byteArray60);
        org.apache.commons.codec.binary.Base64 base64_62 = new org.apache.commons.codec.binary.Base64(100, byteArray61);
        byte[] byteArray63 = base64_45.encode(byteArray61);
        java.math.BigInteger bigInteger64 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray61);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, false);
        java.lang.Object obj67 = base64_9.decode((java.lang.Object) byteArray66);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(bigInteger64);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(obj67);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        byte[] byteArray9 = null;
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(10, byteArray9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger21);
        java.lang.Object obj24 = base64_11.encode((java.lang.Object) byteArray23);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray23);
        java.lang.Object obj26 = base64_1.encode((java.lang.Object) byteArray23);
        byte[] byteArray28 = base64_1.decode("org.apache.commons.codec.EncoderException");
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray28);
        java.lang.String str30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray28);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 73, -36, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 69, 110, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 13, 10]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "orgapachecommonscodecEncoderExceptio" + "'", str30, "orgapachecommonscodecEncoderExceptio");
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray8 = null;
        // The following exception was thrown during execution in test generation
        try {
            base64_1.decode(byteArray8, (int) (byte) 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(0);
        boolean boolean2 = base64_1.hasData();
        byte[] byteArray3 = null;
        int int6 = base64_1.readResults(byteArray3, (int) (short) -1, (int) (byte) 0);
        boolean boolean7 = base64_1.isUrlSafe();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray18);
        base64_0.encode(byteArray22, 0, 10);
        byte[] byteArray27 = new byte[] { (byte) 0 };
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false, true);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray30);
        byte[] byteArray32 = base64_0.decode(byteArray30);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false, true, (int) '4');
        java.math.BigInteger bigInteger37 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger37);
        java.lang.String str39 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray38);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[65, 65]");
        org.junit.Assert.assertNotNull(bigInteger37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64("AGQBAA==\r\n");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray2, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [?d??]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[65, 71, 81, 66, 65, 65, 61, 61]");
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = new byte[] {};
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false, 10);
        byte[] byteArray22 = base64_2.encode(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64(100, byteArray22, false);
        byte[] byteArray26 = base64_24.decode("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException");
        java.lang.Object obj27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj28 = base64_24.decode(obj27);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94, 122, 43, -127, -86, 90, 114, 23, -100, -94, 105, -88, -98, -57, 40, 117, -25, 3, 121, -54, 29, 122, -79, 49, 113, -22, 109, -118, -119]");
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        base64_2.decode(byteArray3, (int) 'a', (-1));
        byte[] byteArray8 = base64_2.decode("QUdRQkFBPT0");
        byte[] byteArray10 = null;
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64(10, byteArray10);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger22);
        java.lang.Object obj25 = base64_12.encode((java.lang.Object) byteArray24);
        java.lang.Object obj26 = base64_11.encode((java.lang.Object) byteArray24);
        java.lang.Object obj27 = base64_2.encode((java.lang.Object) byteArray24);
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray24, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [/2QK/2Q=]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(bigInteger28);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, false, false);
        java.math.BigInteger bigInteger32 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger32);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger32);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj37 = base64_1.decode((java.lang.Object) bigInteger32);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 100, 10, -1, 100]");
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray18);
        base64_0.encode(byteArray22, 0, 10);
        boolean boolean26 = base64_0.isUrlSafe();
        org.apache.commons.codec.DecoderException decoderException28 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.DecoderException decoderException29 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) decoderException28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj30 = base64_0.encode((java.lang.Object) decoderException28);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false);
        base64_1.setInitialBuffer(byteArray10, (int) '#', (int) (byte) -1);
        byte[] byteArray15 = base64_1.decode("orgapachecommonscodecDecoderExceptio");
        byte[] byteArray17 = new byte[] { (byte) 0 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, true);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray20);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, true, false, (int) '#');
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, true);
        byte[] byteArray29 = base64_1.encode(byteArray25);
        boolean boolean30 = base64_1.isUrlSafe();
        byte[] byteArray31 = new byte[] {};
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false, 10);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false, false, 100);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray35);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40, false, false, (int) 'a');
        base64_1.decode(byteArray40, 1, 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[65, 65]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[85, 86, 86, 70, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[85, 86, 86, 70, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        boolean boolean6 = base64_1.isUrlSafe();
        boolean boolean7 = base64_1.isUrlSafe();
        java.lang.Class<?> wildcardClass8 = base64_1.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.DecoderException decoderException2 = new org.apache.commons.codec.DecoderException();
        java.lang.Throwable[] throwableArray3 = decoderException2.getSuppressed();
        org.apache.commons.codec.DecoderException decoderException6 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.DecoderException decoderException7 = new org.apache.commons.codec.DecoderException("", (java.lang.Throwable) decoderException6);
        decoderException2.addSuppressed((java.lang.Throwable) decoderException6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj9 = base64_1.decode((java.lang.Object) decoderException2);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray3);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = new byte[] {};
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false, 10);
        byte[] byteArray22 = base64_2.encode(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64(100, byteArray22, false);
        byte[] byteArray25 = null;
        base64_24.setInitialBuffer(byteArray25, (int) (short) 1, (int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray31 = new byte[] {};
        base64_30.decode(byteArray31, (int) 'a', (-1));
        byte[] byteArray36 = base64_30.decode("QUdRQkFBPT0");
        byte[] byteArray38 = null;
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64(10, byteArray38);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, false, false);
        java.math.BigInteger bigInteger50 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray49);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger50);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger50);
        java.lang.Object obj53 = base64_40.encode((java.lang.Object) byteArray52);
        java.lang.Object obj54 = base64_39.encode((java.lang.Object) byteArray52);
        java.lang.Object obj55 = base64_30.encode((java.lang.Object) byteArray52);
        java.lang.Object obj56 = base64_24.encode(obj55);
        byte[] byteArray62 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, false, false);
        java.math.BigInteger bigInteger66 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray65);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger66);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger66);
        base64_24.decode(byteArray68, (int) (byte) -1, (int) ' ');
        org.apache.commons.codec.binary.Base64 base64_73 = new org.apache.commons.codec.binary.Base64((int) ' ');
        boolean boolean74 = base64_73.hasData();
        int int75 = base64_73.avail();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj76 = base64_24.encode((java.lang.Object) base64_73);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        byte[] byteArray9 = null;
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(10, byteArray9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger21);
        java.lang.Object obj24 = base64_11.encode((java.lang.Object) byteArray23);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray23);
        java.lang.Object obj26 = base64_1.encode((java.lang.Object) byteArray23);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray34 = base64_28.decode("QUdRQkFBPT0");
        base64_1.encode(byteArray34, 10, 10);
        org.apache.commons.codec.DecoderException decoderException43 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.DecoderException");
        org.apache.commons.codec.DecoderException decoderException44 = new org.apache.commons.codec.DecoderException("hi!", (java.lang.Throwable) decoderException43);
        org.apache.commons.codec.EncoderException encoderException45 = new org.apache.commons.codec.EncoderException("org.apache.commons.codec.DecoderException", (java.lang.Throwable) decoderException43);
        org.apache.commons.codec.DecoderException decoderException46 = new org.apache.commons.codec.DecoderException("AGQBAA==\r\n", (java.lang.Throwable) decoderException43);
        org.apache.commons.codec.DecoderException decoderException47 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) decoderException43);
        org.apache.commons.codec.DecoderException decoderException48 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.DecoderException", (java.lang.Throwable) decoderException47);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj49 = base64_1.decode((java.lang.Object) decoderException47);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[65, 71, 81, 66, 65, 65, 61, 61]");
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray14 = base64_0.decode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, false, false);
        base64_16.setInitialBuffer(byteArray25, (int) '#', (int) (byte) -1);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray32 = base64_30.decode("");
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray35 = new byte[] {};
        base64_34.decode(byteArray35, (int) 'a', (-1));
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, true, true, (int) (byte) 100);
        boolean boolean43 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray42);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray42);
        byte[] byteArray45 = base64_30.encode(byteArray44);
        byte[] byteArray46 = base64_16.decode(byteArray45);
        base64_0.decode(byteArray45, 76, (int) (short) -1);
        byte[] byteArray50 = new byte[] {};
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, false, false, 10);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray50);
        java.lang.Object obj56 = base64_0.decode((java.lang.Object) byteArray55);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[117]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(obj56);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray18);
        base64_0.encode(byteArray22, 0, 10);
        byte[] byteArray27 = new byte[] { (byte) 0 };
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false, true);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray30);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, true);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, true, true);
        base64_0.encode(byteArray36, (int) (short) -1, (int) (byte) 0);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: ");
        base64_0.decode(byteArray41, 10, 1);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((int) 'a');
        boolean boolean47 = base64_46.isUrlSafe();
        boolean boolean48 = base64_46.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray52 = new byte[] {};
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52, false, false, 10);
        byte[] byteArray57 = base64_51.decode(byteArray56);
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64(100, byteArray57);
        int int61 = base64_46.readResults(byteArray57, 1, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj62 = base64_0.decode((java.lang.Object) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[85, 86, 86, 70, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        byte[] byteArray0 = new byte[] {};
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray0, false, false, 10);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray4);
        boolean boolean7 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray4);
        boolean boolean9 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray8);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, false);
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray8);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        boolean boolean8 = base64_1.isUrlSafe();
        boolean boolean9 = base64_1.isUrlSafe();
        boolean boolean10 = base64_1.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true, true, (int) (byte) 100);
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, (int) (byte) 1);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        byte[] byteArray1 = new byte[] {};
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, false, 10);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(0, byteArray8);
        boolean boolean10 = base64_9.hasData();
        boolean boolean11 = base64_9.hasData();
        java.lang.Object obj12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj13 = base64_9.encode(obj12);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray10);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, true, (int) '#');
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[95, 50, 81, 75, 95, 50, 81]");
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray6);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64(0, byteArray11);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        byte[] byteArray21 = base64_15.decode(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64(100, byteArray21);
        boolean boolean23 = base64_22.hasData();
        byte[] byteArray25 = base64_22.decode("QUdRQkFBPT0=\r\n");
        java.lang.String str26 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray25);
        byte[] byteArray27 = base64_12.decode(byteArray25);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64(1, byteArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [?d??]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str26, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 100, 1, 0]");
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(100, byteArray8);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false, false, 10);
        byte[] byteArray18 = base64_12.decode(byteArray17);
        byte[] byteArray20 = base64_12.decode("");
        byte[] byteArray21 = new byte[] {};
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, false, 10);
        byte[] byteArray26 = base64_12.decode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        byte[] byteArray38 = base64_12.encode(byteArray36);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray40);
        java.lang.Object obj42 = base64_9.encode((java.lang.Object) byteArray40);
        boolean boolean43 = base64_9.hasData();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("ZFE=\r\n");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100, 81]");
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) (short) -1);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] {};
        base64_6.decode(byteArray7, (int) 'a', (-1));
        byte[] byteArray15 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, false, false);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray15);
        byte[] byteArray20 = base64_6.encode(byteArray15);
        java.lang.Object obj21 = base64_4.encode((java.lang.Object) byteArray15);
        byte[] byteArray27 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false, false);
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray30);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray30);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray30);
        byte[] byteArray34 = base64_4.encode(byteArray30);
        byte[] byteArray35 = base64_2.decode(byteArray30);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64(1, byteArray35, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [?d??d]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 100, 10, -1, 100]");
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = new byte[] { (byte) 0 };
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, true);
        base64_1.setInitialBuffer(byteArray7, (int) (byte) -1, (int) '#');
        byte[] byteArray15 = base64_1.decode("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: ");
        byte[] byteArray17 = new byte[] { (byte) 0 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, true);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray20);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger22);
        base64_1.encode(byteArray23, (int) (short) 1, 0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0]");
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        java.lang.String str21 = base64_1.encodeToString(byteArray16);
        boolean boolean22 = base64_1.isUrlSafe();
        byte[] byteArray23 = null;
        int int26 = base64_1.readResults(byteArray23, (int) (byte) 1, 76);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        byte[] byteArray37 = base64_1.decode(byteArray29);
        byte[] byteArray38 = null;
        byte[] byteArray39 = base64_1.decode(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray42 = new byte[] {};
        base64_41.decode(byteArray42, (int) 'a', (-1));
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, true, (int) (byte) 100);
        byte[] byteArray50 = base64_1.encode(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray54 = new byte[] {};
        base64_53.decode(byteArray54, (int) 'a', (-1));
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54, true, true, (int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64(100, byteArray61, true);
        byte[] byteArray64 = base64_1.encode(byteArray61);
        org.apache.commons.codec.EncoderException encoderException66 = new org.apache.commons.codec.EncoderException("");
        org.apache.commons.codec.DecoderException decoderException67 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) encoderException66);
        org.apache.commons.codec.EncoderException encoderException68 = new org.apache.commons.codec.EncoderException((java.lang.Throwable) decoderException67);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj69 = base64_1.encode((java.lang.Object) decoderException67);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray10);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61, 13, 10]");
        org.junit.Assert.assertNotNull(bigInteger13);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        byte[] byteArray1 = new byte[] {};
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, false, 10);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(0, byteArray8);
        byte[] byteArray11 = base64_9.decode("org.apache.commons.codec.DecoderException: hi!");
        boolean boolean12 = base64_9.hasData();
        boolean boolean13 = base64_9.isUrlSafe();
        org.apache.commons.codec.DecoderException decoderException17 = new org.apache.commons.codec.DecoderException("orgapachecommonscodecDecoderExceptionorgapachecommonscodecDecoderExceptionorgapachecommonscodecEncoderExceptiok");
        org.apache.commons.codec.EncoderException encoderException18 = new org.apache.commons.codec.EncoderException("hi!", (java.lang.Throwable) decoderException17);
        org.apache.commons.codec.EncoderException encoderException19 = new org.apache.commons.codec.EncoderException("org.apache.commons.codec.EncoderException: ", (java.lang.Throwable) encoderException18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj20 = base64_9.encode((java.lang.Object) encoderException19);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(100, byteArray8);
        boolean boolean10 = base64_9.hasData();
        byte[] byteArray12 = base64_9.decode("QUdRQkFBPT0=\r\n");
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray20);
        byte[] byteArray22 = base64_9.encode(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray26 = new byte[] {};
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, false, 10);
        byte[] byteArray31 = base64_25.decode(byteArray30);
        byte[] byteArray33 = base64_25.decode("");
        byte[] byteArray34 = new byte[] {};
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false, false, 10);
        byte[] byteArray39 = base64_25.decode(byteArray38);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray40);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: hi!");
        java.math.BigInteger bigInteger44 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray43);
        byte[] byteArray45 = base64_41.encode(byteArray43);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj46 = base64_9.encode((java.lang.Object) base64_41);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 104, 103, 61]");
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray14 = null;
        java.lang.String str15 = base64_0.encodeToString(byteArray14);
        boolean boolean16 = base64_0.hasData();
        java.lang.Object obj17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = base64_0.decode(obj17);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray3 = base64_1.decode("");
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray6 = new byte[] {};
        base64_5.decode(byteArray6, (int) 'a', (-1));
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, true, true, (int) (byte) 100);
        boolean boolean14 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        byte[] byteArray16 = base64_1.encode(byteArray15);
        byte[] byteArray17 = new byte[] {};
        int int20 = base64_1.readResults(byteArray17, 1, (int) '4');
        byte[] byteArray21 = null;
        base64_1.setInitialBuffer(byteArray21, (int) (byte) 0, (int) (byte) 1);
        byte[] byteArray26 = new byte[] { (byte) 0 };
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, true);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray29);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray29);
        base64_1.decode(byteArray31, (int) (short) 1, (int) (short) 10);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[81, 85, 69, 61, 13, 10]");
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("QUdRQkFBPT0");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray1);
        java.lang.String str3 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 100, 1, 0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "QUdRQkFBPT0" + "'", str3, "QUdRQkFBPT0");
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        byte[] byteArray1 = new byte[] { (byte) 0 };
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, true);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[81, 85, 69, 61, 13, 10]");
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray20 = new byte[] {};
        base64_19.decode(byteArray20, (int) 'a', (-1));
        byte[] byteArray25 = base64_19.decode("QUdRQkFBPT0");
        java.lang.String str26 = base64_17.encodeToString(byteArray25);
        boolean boolean27 = base64_17.hasData();
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64("QUdRQkFBPT0");
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray29);
        byte[] byteArray31 = base64_17.encode(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray34 = new byte[] {};
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false, false, 10);
        byte[] byteArray39 = base64_33.decode(byteArray38);
        int int40 = base64_33.avail();
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray44 = new byte[] {};
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false, false, 10);
        byte[] byteArray49 = base64_43.decode(byteArray48);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64(100, byteArray49);
        byte[] byteArray51 = base64_33.encode(byteArray49);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray49, false);
        java.lang.String str54 = base64_17.encodeToString(byteArray53);
        byte[] byteArray56 = base64_17.decode("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj57 = base64_1.encode((java.lang.Object) "org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str26, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94]");
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        base64_2.decode(byteArray3, (int) 'a', (-1));
        byte[] byteArray11 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray11);
        byte[] byteArray16 = base64_2.encode(byteArray11);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray19 = new byte[] {};
        base64_18.decode(byteArray19, (int) 'a', (-1));
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, true, true, (int) (byte) 100);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, true, false, 1);
        byte[] byteArray31 = base64_2.encode(byteArray30);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray36 = new byte[] {};
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false, false, 10);
        byte[] byteArray41 = base64_35.decode(byteArray40);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64(100, byteArray41);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64((int) (short) 1, byteArray41);
        byte[] byteArray44 = base64_2.decode(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray44, false);
        java.lang.String str47 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray44);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(100, byteArray8);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false, false, 10);
        byte[] byteArray18 = base64_12.decode(byteArray17);
        byte[] byteArray20 = base64_12.decode("");
        byte[] byteArray21 = new byte[] {};
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, false, 10);
        byte[] byteArray26 = base64_12.decode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        byte[] byteArray38 = base64_12.encode(byteArray36);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray40);
        java.lang.Object obj42 = base64_9.encode((java.lang.Object) byteArray40);
        byte[] byteArray44 = base64_9.decode("AGQBAA");
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray48 = new byte[] {};
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, false, false, 10);
        byte[] byteArray53 = base64_47.decode(byteArray52);
        byte[] byteArray55 = base64_47.decode("");
        byte[] byteArray56 = new byte[] {};
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray56, false, false, 10);
        byte[] byteArray61 = base64_47.decode(byteArray60);
        byte[] byteArray62 = new byte[] {};
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, false, false, 10);
        byte[] byteArray67 = base64_47.encode(byteArray66);
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray67, false);
        byte[] byteArray71 = base64_69.decode("QUdRQkFBPT0");
        byte[] byteArray72 = base64_9.decode(byteArray71);
        java.lang.Object obj74 = base64_9.decode((java.lang.Object) "org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: ");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(obj74);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false);
        base64_1.setInitialBuffer(byteArray10, (int) '#', (int) (byte) -1);
        byte[] byteArray15 = base64_1.decode("orgapachecommonscodecDecoderExceptio");
        byte[] byteArray17 = new byte[] { (byte) 0 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, true);
        boolean boolean21 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray20);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, true, false, (int) '#');
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, true);
        byte[] byteArray29 = base64_1.encode(byteArray25);
        int int30 = base64_1.avail();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[65, 65]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[85, 86, 86, 70, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[85, 86, 86, 70, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray9 = base64_3.decode("QUdRQkFBPT0");
        java.lang.String str10 = base64_1.encodeToString(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false, false, 10);
        byte[] byteArray18 = base64_12.decode(byteArray17);
        byte[] byteArray20 = base64_12.decode("");
        byte[] byteArray21 = new byte[] {};
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, false, 10);
        byte[] byteArray26 = base64_12.decode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        byte[] byteArray38 = base64_12.encode(byteArray36);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38);
        base64_1.decode(byteArray38, (int) (short) 10, (int) 'a');
        byte[] byteArray43 = new byte[] {};
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false, false, 10);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray43);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43);
        base64_1.decode(byteArray49, (int) (short) 1, 1);
        byte[] byteArray53 = new byte[] {};
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, false, false, 10);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57, false, false, 100);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray57);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, true);
        base64_1.setInitialBuffer(byteArray62, (int) (byte) 10, (int) (short) 0);
        byte[] byteArray69 = new byte[] { (byte) 0 };
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray69, false, true);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray72);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray73);
        java.lang.String str75 = base64_1.encodeToString(byteArray73);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str10, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[0]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[85, 86, 86, 70, 80, 81, 48, 75]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "UVVFPQ0K\r\n" + "'", str75, "UVVFPQ0K\r\n");
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) -1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        byte[] byteArray11 = base64_3.decode("");
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_3.decode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray20 = new byte[] {};
        base64_19.decode(byteArray20, (int) 'a', (-1));
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, true, true, (int) (byte) 100);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, true, false, 1);
        java.lang.Object obj32 = base64_3.encode((java.lang.Object) byteArray31);
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray37);
        java.lang.Object obj39 = base64_3.encode((java.lang.Object) byteArray37);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        java.lang.Object obj41 = base64_1.decode((java.lang.Object) byteArray40);
        boolean boolean42 = base64_1.hasData();
        byte[] byteArray43 = null;
        base64_1.encode(byteArray43, (int) (short) 0, 0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray5 = new byte[] {};
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false, 10);
        byte[] byteArray10 = base64_4.decode(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray10, false);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(76, byteArray10, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, true, true, (int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64((-1), byteArray19);
        java.lang.Object obj22 = base64_20.decode((java.lang.Object) "org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: ");
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray25 = new byte[] {};
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false, 10);
        byte[] byteArray30 = base64_24.decode(byteArray29);
        byte[] byteArray32 = base64_24.decode("");
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_24.decode(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray41 = new byte[] {};
        base64_40.decode(byteArray41, (int) 'a', (-1));
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, true, true, (int) (byte) 100);
        boolean boolean49 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray48);
        byte[] byteArray50 = base64_24.encode(byteArray48);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50);
        byte[] byteArray52 = base64_20.decode(byteArray51);
        java.lang.String str53 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray51);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        java.lang.Object obj30 = base64_1.encode((java.lang.Object) byteArray29);
        byte[] byteArray32 = new byte[] { (byte) 0 };
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false, true);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray35);
        int int39 = base64_1.readResults(byteArray35, 1, (int) (short) -1);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray42 = new byte[] {};
        base64_41.decode(byteArray42, (int) 'a', (-1));
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, false, false);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray50);
        byte[] byteArray55 = base64_41.encode(byteArray50);
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray58 = new byte[] {};
        base64_57.decode(byteArray58, (int) 'a', (-1));
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray58, true, true, (int) (byte) 100);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray65, true, false, 1);
        byte[] byteArray70 = base64_41.encode(byteArray69);
        byte[] byteArray71 = base64_1.decode(byteArray70);
        byte[] byteArray76 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray76, false, false);
        java.math.BigInteger bigInteger80 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray76);
        java.lang.Object obj81 = base64_1.encode((java.lang.Object) byteArray76);
        boolean boolean82 = base64_1.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger80);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        byte[] byteArray1 = new byte[] { (byte) 0 };
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, true);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        java.math.BigInteger bigInteger7 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0]");
        org.junit.Assert.assertNotNull(bigInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray5 = new byte[] {};
        base64_4.decode(byteArray5, (int) 'a', (-1));
        byte[] byteArray10 = base64_4.decode("QUdRQkFBPT0");
        java.lang.String str11 = base64_2.encodeToString(byteArray10);
        boolean boolean12 = base64_2.hasData();
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: hi!");
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger15);
        byte[] byteArray17 = base64_2.encode(byteArray16);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [eXJwNw==]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str11, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[121, 114, 112, 55]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[101, 88, 74, 119, 78, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[101, 88, 74, 119, 78, 119, 61, 61]");
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray9 = base64_3.decode("QUdRQkFBPT0");
        java.lang.String str10 = base64_1.encodeToString(byteArray9);
        boolean boolean11 = base64_1.hasData();
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray14 = new byte[] {};
        base64_13.decode(byteArray14, (int) 'a', (-1));
        byte[] byteArray19 = base64_13.decode("QUdRQkFBPT0");
        base64_1.decode(byteArray19, 0, (int) (short) 0);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray25 = new byte[] {};
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false, 10);
        byte[] byteArray30 = base64_24.decode(byteArray29);
        byte[] byteArray32 = base64_24.decode("");
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_24.decode(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray41 = new byte[] {};
        base64_40.decode(byteArray41, (int) 'a', (-1));
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, true, true, (int) (byte) 100);
        boolean boolean49 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray48);
        byte[] byteArray50 = base64_24.encode(byteArray48);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, false);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52, true, true, (int) '#');
        byte[] byteArray57 = base64_1.decode(byteArray52);
        java.lang.String str58 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray57);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray57);
        java.lang.String str60 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray59);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str10, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        byte[] byteArray9 = null;
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(10, byteArray9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger21);
        java.lang.Object obj24 = base64_11.encode((java.lang.Object) byteArray23);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray23);
        java.lang.Object obj26 = base64_1.encode((java.lang.Object) byteArray23);
        java.math.BigInteger bigInteger27 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray23);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger27);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(bigInteger27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 50, 81, 75, 47, 50, 81, 61]");
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        java.lang.String str21 = base64_1.encodeToString(byteArray16);
        boolean boolean22 = base64_1.isUrlSafe();
        byte[] byteArray23 = null;
        int int26 = base64_1.readResults(byteArray23, (int) (byte) 1, 76);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        byte[] byteArray37 = base64_1.decode(byteArray29);
        byte[] byteArray38 = null;
        byte[] byteArray39 = base64_1.decode(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray42 = new byte[] {};
        base64_41.decode(byteArray42, (int) 'a', (-1));
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, true, (int) (byte) 100);
        byte[] byteArray50 = base64_1.encode(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray54 = base64_52.decode("");
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray57 = new byte[] {};
        base64_56.decode(byteArray57, (int) 'a', (-1));
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57, true, true, (int) (byte) 100);
        boolean boolean65 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray64);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray64);
        byte[] byteArray67 = base64_52.encode(byteArray66);
        byte[] byteArray68 = new byte[] {};
        int int71 = base64_52.readResults(byteArray68, 1, (int) '4');
        byte[] byteArray72 = null;
        base64_52.setInitialBuffer(byteArray72, (int) (byte) 0, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj76 = base64_1.encode((java.lang.Object) base64_52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        byte[] byteArray9 = null;
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(10, byteArray9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger21);
        java.lang.Object obj24 = base64_11.encode((java.lang.Object) byteArray23);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray23);
        java.lang.Object obj26 = base64_1.encode((java.lang.Object) byteArray23);
        byte[] byteArray28 = base64_1.decode("org.apache.commons.codec.EncoderException");
        byte[] byteArray30 = base64_1.decode("");
        byte[] byteArray31 = null;
        int int34 = base64_1.readResults(byteArray31, 76, 12);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 73, -36, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray3 = base64_1.decode("");
        boolean boolean4 = base64_1.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        boolean boolean26 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray25);
        byte[] byteArray27 = base64_1.encode(byteArray25);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27);
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray28);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        boolean boolean16 = base64_1.isUrlSafe();
        byte[] byteArray18 = new byte[] {};
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false, 10);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64(0, byteArray25);
        java.lang.String str27 = base64_1.encodeToString(byteArray25);
        byte[] byteArray29 = new byte[] { (byte) 0 };
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, true);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray32);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, true);
        int int38 = base64_1.readResults(byteArray32, 0, (int) (short) 100);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray32);
        boolean boolean40 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray39);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[65, 65]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(0);
        boolean boolean2 = base64_1.hasData();
        byte[] byteArray3 = null;
        int int6 = base64_1.readResults(byteArray3, (int) (short) -1, (int) (byte) 0);
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray9 = new byte[] {};
        base64_8.decode(byteArray9, (int) 'a', (-1));
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true, true, (int) (byte) 100);
        boolean boolean17 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray16);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray16);
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj20 = base64_1.encode((java.lang.Object) str19);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        byte[] byteArray4 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false);
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray7);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray7);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "QUdRQkFBPT0" + "'", str8, "QUdRQkFBPT0");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[65, 71, 81, 66, 65, 65, 61, 61]");
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("orgapachecommonscodecDecoderExceptio");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(10, byteArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [?d??d]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100, 10, -1, 100]");
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray10);
        byte[] byteArray15 = base64_1.encode(byteArray10);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, true);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[65, 71, 81, 66, 65, 65]");
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray14 = null;
        java.lang.String str15 = base64_0.encodeToString(byteArray14);
        byte[] byteArray17 = new byte[] { (byte) 0 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, true);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray20);
        base64_0.setInitialBuffer(byteArray21, 0, (int) (byte) 0);
        int int25 = base64_0.avail();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray8, false);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        base64_12.decode(byteArray13, (int) 'a', (-1));
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, true, true, (int) (byte) 100);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, true, false, 1);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray20);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray27);
        base64_10.decode(byteArray28, 76, 1);
        byte[] byteArray38 = new byte[] { (byte) -1, (byte) 100, (byte) 100, (byte) 1, (byte) 0, (byte) 10 };
        // The following exception was thrown during execution in test generation
        try {
            int int41 = base64_10.readResults(byteArray38, (int) (short) 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94, 122, 43, -127, -86, 90, 114, 23, -100, -94, 105, -88, -98, -57, 40, 117, -25, 4, -99, -54, 29, 122, -79, 49, 113, -22, 109, -118, -119]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 111, 114, 13, 10, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 69, 110, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 107, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 100, 100, 1, 0, 10]");
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray17, false);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray22 = new byte[] {};
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, false, false, 10);
        byte[] byteArray27 = base64_21.decode(byteArray26);
        byte[] byteArray29 = base64_21.decode("");
        byte[] byteArray30 = new byte[] {};
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, false, false, 10);
        byte[] byteArray35 = base64_21.decode(byteArray34);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray38 = new byte[] {};
        base64_37.decode(byteArray38, (int) 'a', (-1));
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, true, true, (int) (byte) 100);
        boolean boolean46 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray45);
        byte[] byteArray47 = base64_21.encode(byteArray45);
        byte[] byteArray49 = base64_21.decode("QUE");
        byte[] byteArray55 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray55, false, false);
        java.math.BigInteger bigInteger59 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray58);
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger59);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger59);
        java.lang.Object obj62 = base64_21.encode((java.lang.Object) byteArray61);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, true);
        base64_19.decode(byteArray61, (int) '4', (int) (short) 0);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger59);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true, true, (int) (byte) 100);
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray2);
        java.lang.Class<?> wildcardClass11 = byteArray2.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        byte[] byteArray1 = new byte[] { (byte) 0 };
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, true);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        java.math.BigInteger bigInteger6 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray7);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0]");
        org.junit.Assert.assertNotNull(bigInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        java.lang.String str21 = base64_1.encodeToString(byteArray16);
        boolean boolean22 = base64_1.isUrlSafe();
        byte[] byteArray23 = null;
        int int26 = base64_1.readResults(byteArray23, (int) (byte) 1, 76);
        byte[] byteArray27 = null;
        base64_1.setInitialBuffer(byteArray27, 0, 14);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray37 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, false);
        java.math.BigInteger bigInteger41 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger41);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger41);
        java.lang.Object obj44 = base64_31.encode((java.lang.Object) byteArray43);
        byte[] byteArray50 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, false, false);
        java.math.BigInteger bigInteger54 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray53);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger54);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger54);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger54);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger54);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger54);
        java.lang.Object obj60 = base64_31.decode((java.lang.Object) byteArray59);
        org.apache.commons.codec.binary.Base64 base64_62 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray63 = new byte[] {};
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray63, false, false, 10);
        byte[] byteArray68 = base64_62.decode(byteArray67);
        byte[] byteArray70 = base64_62.decode("");
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.decodeBase64("orgapachecommonscodecDecoderExceptionorgapachecommonscodecDecoderExceptionorgapachecommonscodecEncoderExceptiok");
        byte[] byteArray73 = base64_62.decode(byteArray72);
        byte[] byteArray74 = base64_31.encode(byteArray73);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj75 = base64_1.encode((java.lang.Object) base64_31);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94, 122, 43, -127, -86, 90, 114, 23, -100, -94, 105, -88, -98, -57, 40, 117, -25, 4, -99, -54, 29, 122, -79, 49, 113, -22, 109, -118, -119]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-54, -70, 123, -114, 60, -85, 47, 54, -13, -7, -102, -30, -69, 61, 106]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[121, 114, 112, 55, 106, 106, 121, 114, 76, 122, 98, 122, 43, 90, 114, 105, 117, 122, 49, 113]");
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        java.lang.String str21 = base64_1.encodeToString(byteArray16);
        boolean boolean22 = base64_1.isUrlSafe();
        byte[] byteArray23 = null;
        int int26 = base64_1.readResults(byteArray23, (int) (byte) 1, 76);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        byte[] byteArray37 = base64_1.decode(byteArray29);
        byte[] byteArray38 = null;
        byte[] byteArray39 = base64_1.decode(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray42 = new byte[] {};
        base64_41.decode(byteArray42, (int) 'a', (-1));
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, true, (int) (byte) 100);
        byte[] byteArray50 = base64_1.encode(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray54 = new byte[] {};
        base64_53.decode(byteArray54, (int) 'a', (-1));
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54, true, true, (int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64(100, byteArray61, true);
        byte[] byteArray64 = base64_1.encode(byteArray61);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray14 = null;
        java.lang.String str15 = base64_0.encodeToString(byteArray14);
        byte[] byteArray17 = new byte[] { (byte) 0 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, true);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray20);
        base64_0.setInitialBuffer(byteArray21, 0, (int) (byte) 0);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64("hi!");
        byte[] byteArray27 = base64_0.decode(byteArray26);
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true, true, (int) (byte) 100);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true, false, 1);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9);
        java.lang.Class<?> wildcardClass16 = byteArray9.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray14 = null;
        java.lang.String str15 = base64_0.encodeToString(byteArray14);
        byte[] byteArray17 = new byte[] { (byte) 0 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, true);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray20);
        base64_0.setInitialBuffer(byteArray21, 0, (int) (byte) 0);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.decodeBase64("hi!");
        byte[] byteArray27 = base64_0.decode(byteArray26);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray28);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-122]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false, false);
        base64_1.setInitialBuffer(byteArray27, 100, 1);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray36 = new byte[] {};
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false, false, 10);
        byte[] byteArray41 = base64_35.decode(byteArray40);
        base64_1.encode(byteArray41, (-1), 76);
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray49 = new byte[] {};
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray49, false, false, 10);
        byte[] byteArray54 = base64_48.decode(byteArray53);
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray54, false);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray54);
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64(76, byteArray54, true);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54, true, true, (int) (byte) 100);
        byte[] byteArray64 = base64_1.encode(byteArray54);
        boolean boolean65 = base64_1.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false, false);
        base64_1.setInitialBuffer(byteArray27, 100, 1);
        java.lang.Class<?> wildcardClass34 = byteArray27.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        java.lang.Object obj30 = base64_1.encode((java.lang.Object) byteArray29);
        byte[] byteArray31 = new byte[] {};
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false, 10);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray35);
        java.lang.Object obj37 = base64_1.encode((java.lang.Object) byteArray35);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray39);
        java.lang.Object obj41 = base64_1.encode((java.lang.Object) byteArray39);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94, 122, 43, -127, -86, 90, 114, 23, -100, -94, 105, -88, -98, -57, 40, 117, -25, 4, -99, -54, 29, 122, -79, 49, 113, -22, 109, -118, -119]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 111, 114, 13, 10, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 69, 110, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 107, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj41);
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(true);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        byte[] byteArray11 = base64_3.decode("");
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_3.decode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray20 = new byte[] {};
        base64_19.decode(byteArray20, (int) 'a', (-1));
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, true, true, (int) (byte) 100);
        boolean boolean28 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray27);
        byte[] byteArray29 = base64_3.encode(byteArray27);
        byte[] byteArray30 = base64_1.decode(byteArray27);
        byte[] byteArray32 = new byte[] { (byte) 0 };
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false, true);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray35);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray36);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false);
        // The following exception was thrown during execution in test generation
        try {
            base64_1.encode(byteArray39, (int) (short) 100, 76);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[85, 86, 86, 70, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[86, 86, 90, 87, 82, 108, 66, 82, 77, 69, 115, 61]");
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj5 = base64_2.encode((java.lang.Object) false);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        byte[] byteArray11 = base64_3.decode("");
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_3.decode(byteArray16);
        base64_1.setInitialBuffer(byteArray17, 1, 0);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray24 = new byte[] {};
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, false, 10);
        byte[] byteArray29 = base64_23.decode(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray29, false);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray34 = new byte[] {};
        base64_33.decode(byteArray34, (int) 'a', (-1));
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, true, true, (int) (byte) 100);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, true, false, 1);
        java.lang.Object obj46 = base64_31.encode((java.lang.Object) byteArray41);
        byte[] byteArray47 = base64_1.encode(byteArray41);
        byte[] byteArray49 = base64_1.decode("org.apache.commons.codec.EncoderException");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 73, -36, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        byte[] byteArray9 = null;
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(10, byteArray9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger21);
        java.lang.Object obj24 = base64_11.encode((java.lang.Object) byteArray23);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray23);
        java.lang.Object obj26 = base64_1.encode((java.lang.Object) byteArray23);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, true);
        java.lang.String str29 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray28);
        java.lang.Class<?> wildcardClass30 = byteArray28.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "THpKUlN5OHlVVDA9DQo=\r\n" + "'", str29, "THpKUlN5OHlVVDA9DQo=\r\n");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test298");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        java.lang.String str21 = base64_1.encodeToString(byteArray16);
        boolean boolean22 = base64_1.isUrlSafe();
        byte[] byteArray23 = null;
        int int26 = base64_1.readResults(byteArray23, (int) (byte) 1, 76);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        byte[] byteArray37 = base64_1.decode(byteArray29);
        boolean boolean38 = base64_1.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test299");
        byte[] byteArray1 = new byte[] { (byte) 0 };
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, true);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[65, 65]");
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test300");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false);
        base64_1.setInitialBuffer(byteArray10, (int) '#', (int) (byte) -1);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray17 = base64_15.decode("");
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray20 = new byte[] {};
        base64_19.decode(byteArray20, (int) 'a', (-1));
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, true, true, (int) (byte) 100);
        boolean boolean28 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray27);
        byte[] byteArray30 = base64_15.encode(byteArray29);
        byte[] byteArray31 = base64_1.decode(byteArray30);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray31);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test301");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray15);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[47, 50, 81, 75, 47, 50, 81, 61]");
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test302");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        int int8 = base64_1.avail();
        byte[] byteArray10 = base64_1.decode("org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray15 = new byte[] {};
        base64_14.decode(byteArray15, (int) 'a', (-1));
        byte[] byteArray20 = base64_14.decode("QUdRQkFBPT0");
        java.lang.String str21 = base64_12.encodeToString(byteArray20);
        boolean boolean22 = base64_12.hasData();
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray25 = new byte[] {};
        base64_24.decode(byteArray25, (int) 'a', (-1));
        byte[] byteArray30 = base64_24.decode("QUdRQkFBPT0");
        base64_12.decode(byteArray30, 0, (int) (short) 0);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray36 = new byte[] {};
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false, false, 10);
        byte[] byteArray41 = base64_35.decode(byteArray40);
        byte[] byteArray43 = base64_35.decode("");
        byte[] byteArray44 = new byte[] {};
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false, false, 10);
        byte[] byteArray49 = base64_35.decode(byteArray48);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray52 = new byte[] {};
        base64_51.decode(byteArray52, (int) 'a', (-1));
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52, true, true, (int) (byte) 100);
        boolean boolean60 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray59);
        byte[] byteArray61 = base64_35.encode(byteArray59);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59, false);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray63, true, true, (int) '#');
        byte[] byteArray68 = base64_12.decode(byteArray63);
        byte[] byteArray69 = base64_1.decode(byteArray68);
        java.lang.Class<?> wildcardClass70 = base64_1.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -63, 39, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str21, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test303");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray19 = new byte[] {};
        base64_18.decode(byteArray19, (int) 'a', (-1));
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, true, true, (int) (byte) 100);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, true, false, 1);
        java.lang.Object obj31 = base64_2.encode((java.lang.Object) byteArray30);
        byte[] byteArray33 = new byte[] { (byte) 0 };
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, true);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray36);
        int int40 = base64_2.readResults(byteArray36, 1, (int) (short) -1);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray43 = new byte[] {};
        base64_42.decode(byteArray43, (int) 'a', (-1));
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, false, false);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray51);
        byte[] byteArray56 = base64_42.encode(byteArray51);
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray59 = new byte[] {};
        base64_58.decode(byteArray59, (int) 'a', (-1));
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59, true, true, (int) (byte) 100);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66, true, false, 1);
        byte[] byteArray71 = base64_42.encode(byteArray70);
        byte[] byteArray72 = base64_2.decode(byteArray71);
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray71, true, true);
        org.apache.commons.codec.binary.Base64 base64_77 = new org.apache.commons.codec.binary.Base64((int) '#', byteArray71, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test304");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray18);
        base64_0.encode(byteArray22, 0, 10);
        byte[] byteArray27 = new byte[] { (byte) 0 };
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false, true);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray30);
        byte[] byteArray32 = base64_0.decode(byteArray30);
        java.lang.Class<?> wildcardClass33 = byteArray30.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0]");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test305");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray23 = new byte[] {};
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false, 10);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.String str30 = base64_1.encodeToString(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_32.decode(byteArray37);
        byte[] byteArray40 = base64_32.decode("");
        byte[] byteArray41 = new byte[] {};
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, false, false, 10);
        byte[] byteArray46 = base64_32.decode(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray46);
        byte[] byteArray48 = base64_1.decode(byteArray46);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray51 = new byte[] {};
        base64_50.decode(byteArray51, (int) 'a', (-1));
        byte[] byteArray56 = base64_50.decode("QUdRQkFBPT0");
        byte[] byteArray58 = null;
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64(10, byteArray58);
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray66 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66, false, false);
        java.math.BigInteger bigInteger70 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray69);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger70);
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger70);
        java.lang.Object obj73 = base64_60.encode((java.lang.Object) byteArray72);
        java.lang.Object obj74 = base64_59.encode((java.lang.Object) byteArray72);
        java.lang.Object obj75 = base64_50.encode((java.lang.Object) byteArray72);
        byte[] byteArray76 = base64_1.encode(byteArray72);
        boolean boolean77 = base64_1.hasData();
        org.apache.commons.codec.binary.Base64 base64_81 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray82 = new byte[] {};
        base64_81.decode(byteArray82, (int) 'a', (-1));
        byte[] byteArray89 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray82, true, true, (int) (byte) 100);
        boolean boolean90 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray82);
        org.apache.commons.codec.binary.Base64 base64_92 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray82, true);
        org.apache.commons.codec.binary.Base64 base64_93 = new org.apache.commons.codec.binary.Base64(0, byteArray82);
        byte[] byteArray94 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray82);
        byte[] byteArray95 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray82);
        base64_1.decode(byteArray82, 0, (int) ' ');
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[]");
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test306");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray6 = base64_4.decode("");
        org.apache.commons.codec.binary.Base64 base64_8 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray9 = new byte[] {};
        base64_8.decode(byteArray9, (int) 'a', (-1));
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true, true, (int) (byte) 100);
        boolean boolean17 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray16);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray16);
        byte[] byteArray19 = base64_4.encode(byteArray18);
        byte[] byteArray20 = new byte[] {};
        int int23 = base64_4.readResults(byteArray20, 1, (int) '4');
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray26 = new byte[] {};
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, false, 10);
        byte[] byteArray31 = base64_25.decode(byteArray30);
        byte[] byteArray33 = base64_25.decode("");
        byte[] byteArray34 = new byte[] {};
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false, false, 10);
        byte[] byteArray39 = base64_25.decode(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray42 = new byte[] {};
        base64_41.decode(byteArray42, (int) 'a', (-1));
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, true, (int) (byte) 100);
        boolean boolean50 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray49);
        byte[] byteArray51 = base64_25.encode(byteArray49);
        byte[] byteArray52 = base64_4.decode(byteArray49);
        // The following exception was thrown during execution in test generation
        try {
            base64_2.decode(byteArray52, 12, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 12");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test307");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) ' ');
        boolean boolean3 = base64_2.hasData();
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray6 = new byte[] {};
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false, 10);
        byte[] byteArray11 = base64_5.decode(byteArray10);
        byte[] byteArray13 = base64_5.decode("");
        byte[] byteArray14 = new byte[] {};
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false, false, 10);
        byte[] byteArray19 = base64_5.decode(byteArray18);
        java.lang.String str20 = base64_2.encodeToString(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((-1), byteArray18, false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test308");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(100, byteArray8);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false, false, 10);
        byte[] byteArray18 = base64_12.decode(byteArray17);
        byte[] byteArray20 = base64_12.decode("");
        byte[] byteArray21 = new byte[] {};
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, false, 10);
        byte[] byteArray26 = base64_12.decode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        byte[] byteArray38 = base64_12.encode(byteArray36);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray40);
        java.lang.Object obj42 = base64_9.encode((java.lang.Object) byteArray40);
        boolean boolean43 = base64_9.isUrlSafe();
        byte[] byteArray44 = new byte[] {};
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false, false, 10);
        byte[] byteArray49 = base64_9.encode(byteArray44);
        byte[] byteArray51 = new byte[] {};
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, false, false, 10);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray55);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray55);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57);
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64(0, byteArray58);
        byte[] byteArray61 = base64_59.decode("org.apache.commons.codec.DecoderException: hi!");
        int int64 = base64_9.readResults(byteArray61, (int) (byte) -1, 1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test309");
        byte[] byteArray0 = new byte[] {};
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray0, false, false, 10);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, true, true, (int) (byte) 10);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test310");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray19 = new byte[] {};
        base64_18.decode(byteArray19, (int) 'a', (-1));
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, true, true, (int) (byte) 100);
        boolean boolean27 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray26);
        byte[] byteArray28 = base64_2.encode(byteArray26);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray30);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj34 = base64_31.decode((java.lang.Object) base64_33);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test311");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, true, true, (int) (byte) 100);
        boolean boolean12 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray4, true);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(0, byteArray4);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        java.math.BigInteger bigInteger19 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray18);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(bigInteger19);
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test312");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray5 = new byte[] {};
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false, 10);
        byte[] byteArray10 = base64_4.decode(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray10, false);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(76, byteArray10, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, true, true, (int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64((-1), byteArray19);
        java.lang.Object obj22 = base64_20.decode((java.lang.Object) "org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: ");
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray25 = new byte[] {};
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false, 10);
        byte[] byteArray30 = base64_24.decode(byteArray29);
        byte[] byteArray32 = base64_24.decode("");
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_24.decode(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray41 = new byte[] {};
        base64_40.decode(byteArray41, (int) 'a', (-1));
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, true, true, (int) (byte) 100);
        boolean boolean49 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray48);
        byte[] byteArray50 = base64_24.encode(byteArray48);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50);
        byte[] byteArray52 = base64_20.decode(byteArray51);
        java.lang.Object obj54 = base64_20.decode((java.lang.Object) "org.apache.commons.codec.DecoderException: ");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(obj54);
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test313");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        boolean boolean26 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray25);
        byte[] byteArray27 = base64_1.encode(byteArray25);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        boolean boolean31 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray29);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test314");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.decodeBase64("orgapachecommonscodecDecoderExceptionorgapachecommonscodecDecoderExceptionorgapachecommonscodecEncoderExceptiok");
        byte[] byteArray12 = base64_1.decode(byteArray11);
        byte[] byteArray13 = null;
        byte[] byteArray14 = base64_1.encode(byteArray13);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94, 122, 43, -127, -86, 90, 114, 23, -100, -94, 105, -88, -98, -57, 40, 117, -25, 4, -99, -54, 29, 122, -79, 49, 113, -22, 109, -118, -119]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -70, 123, -114, 60, -85, 47, 54, -13, -7, -102, -30, -69, 61, 106]");
        org.junit.Assert.assertNull(byteArray14);
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test315");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(0);
        boolean boolean2 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64(1);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray14 = new byte[] {};
        base64_13.decode(byteArray14, (int) 'a', (-1));
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, true, true, (int) (byte) 100);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, true, false, 1);
        base64_7.setInitialBuffer(byteArray25, (int) (byte) 10, 100);
        byte[] byteArray29 = new byte[] {};
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, false, 10);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray33);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray33);
        java.lang.String str36 = base64_7.encodeToString(byteArray35);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray39 = new byte[] {};
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, false, false, 10);
        byte[] byteArray44 = base64_38.decode(byteArray43);
        byte[] byteArray46 = base64_38.decode("");
        byte[] byteArray47 = new byte[] {};
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, false, false, 10);
        byte[] byteArray52 = base64_38.decode(byteArray51);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray52);
        byte[] byteArray54 = base64_7.decode(byteArray52);
        byte[] byteArray55 = base64_5.decode(byteArray52);
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64(76, byteArray55, false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj58 = base64_1.decode((java.lang.Object) 76);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test316");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray8, false);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        base64_12.decode(byteArray13, (int) 'a', (-1));
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, true, true, (int) (byte) 100);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, true, false, 1);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray20);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray28 = new byte[] {};
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, false, false, 10);
        byte[] byteArray33 = base64_27.decode(byteArray32);
        int int36 = base64_10.readResults(byteArray32, 1, (int) (byte) 100);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: hi!");
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, false, true);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray41);
        byte[] byteArray43 = base64_10.decode(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray48 = new byte[] {};
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, false, false, 10);
        byte[] byteArray53 = base64_47.decode(byteArray52);
        byte[] byteArray55 = base64_47.decode("");
        byte[] byteArray56 = new byte[] {};
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray56, false, false, 10);
        byte[] byteArray61 = base64_47.decode(byteArray60);
        base64_45.setInitialBuffer(byteArray61, 1, 0);
        java.lang.String str65 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray61);
        java.lang.String str66 = base64_10.encodeToString(byteArray61);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 104, 103]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[98, 51, 74, 110, 89, 88, 66, 104, 89, 50, 104, 108, 89, 50, 57, 116, 98, 87, 57, 117, 99, 50, 78, 118, 90, 71, 86, 106, 82, 71, 86, 106, 98, 50, 82, 108, 99, 107, 86, 52, 89, 50, 86, 119, 100, 71, 108, 118, 98, 109, 104, 110]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test317");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        byte[] byteArray11 = base64_3.decode("");
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_3.decode(byteArray16);
        base64_1.setInitialBuffer(byteArray17, 1, 0);
        int int21 = base64_1.avail();
        byte[] byteArray22 = null;
        byte[] byteArray23 = base64_1.encode(byteArray22);
        byte[] byteArray24 = null;
        int int27 = base64_1.readResults(byteArray24, (int) (short) 10, (int) (short) 1);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray35 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false, false);
        base64_29.setInitialBuffer(byteArray38, (int) '#', (int) (byte) -1);
        org.apache.commons.codec.DecoderException decoderException44 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.EncoderException encoderException45 = new org.apache.commons.codec.EncoderException((java.lang.Throwable) decoderException44);
        org.apache.commons.codec.DecoderException decoderException46 = new org.apache.commons.codec.DecoderException("LzJRSy8yUT0", (java.lang.Throwable) encoderException45);
        java.lang.Object obj47 = base64_29.decode((java.lang.Object) "LzJRSy8yUT0");
        boolean boolean48 = base64_29.isUrlSafe();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj49 = base64_1.encode((java.lang.Object) base64_29);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test318");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        boolean boolean16 = base64_1.isUrlSafe();
        byte[] byteArray18 = new byte[] {};
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false, 10);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64(0, byteArray25);
        java.lang.String str27 = base64_1.encodeToString(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray32 = new byte[] {};
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false, false, 10);
        byte[] byteArray37 = base64_31.decode(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray37, false);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64(76, byteArray37, true);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, true, true, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj47 = base64_1.decode((java.lang.Object) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test319");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray19 = new byte[] {};
        base64_18.decode(byteArray19, (int) 'a', (-1));
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, true, true, (int) (byte) 100);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, true, false, 1);
        java.lang.Object obj31 = base64_2.encode((java.lang.Object) byteArray30);
        byte[] byteArray32 = new byte[] {};
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false, false, 10);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray36);
        java.lang.Object obj38 = base64_2.encode((java.lang.Object) byteArray36);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64((int) (short) 1, byteArray36);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(obj38);
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test320");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("UVVFPQ0K\r\n");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[81, 85, 69, 61, 13, 10]");
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test321");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray10 = new byte[] {};
        base64_9.decode(byteArray10, (int) 'a', (-1));
        byte[] byteArray15 = base64_9.decode("QUdRQkFBPT0");
        byte[] byteArray17 = null;
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64(10, byteArray17);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false);
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger29);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger29);
        java.lang.Object obj32 = base64_19.encode((java.lang.Object) byteArray31);
        java.lang.Object obj33 = base64_18.encode((java.lang.Object) byteArray31);
        java.lang.Object obj34 = base64_9.encode((java.lang.Object) byteArray31);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        byte[] byteArray36 = base64_1.decode(byteArray31);
        java.lang.String str37 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray36);
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray36);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "/2QK/2Q=\r\n" + "'", str37, "/2QK/2Q=\r\n");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "_2QK_2Q" + "'", str38, "_2QK_2Q");
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test322");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray12 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray12);
        byte[] byteArray17 = base64_3.encode(byteArray12);
        java.lang.Object obj18 = base64_1.encode((java.lang.Object) byteArray12);
        byte[] byteArray20 = base64_1.decode("LzJRSy8yUT0");
        byte[] byteArray25 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray25);
        java.lang.String str30 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray25);
        java.lang.String str31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray25);
        boolean boolean32 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray25);
        int int35 = base64_1.readResults(byteArray25, 100, (int) (short) 0);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray41 = new byte[] {};
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, false, false, 10);
        byte[] byteArray46 = base64_40.decode(byteArray45);
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray46, false);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray46);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64(76, byteArray46, true);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, true, true, (int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64((-1), byteArray55);
        java.lang.Object obj58 = base64_56.decode((java.lang.Object) "org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: ");
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray61 = new byte[] {};
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, false, false, 10);
        byte[] byteArray66 = base64_60.decode(byteArray65);
        byte[] byteArray68 = base64_60.decode("");
        byte[] byteArray69 = new byte[] {};
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray69, false, false, 10);
        byte[] byteArray74 = base64_60.decode(byteArray73);
        org.apache.commons.codec.binary.Base64 base64_76 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray77 = new byte[] {};
        base64_76.decode(byteArray77, (int) 'a', (-1));
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray77, true, true, (int) (byte) 100);
        boolean boolean85 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray84);
        byte[] byteArray86 = base64_60.encode(byteArray84);
        byte[] byteArray87 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray86);
        byte[] byteArray88 = base64_56.decode(byteArray87);
        byte[] byteArray89 = base64_1.encode(byteArray87);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 100, 1, 0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "AGQBAA==\r\n" + "'", str30, "AGQBAA==\r\n");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "AGQBAA" + "'", str31, "AGQBAA");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test323");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray17, false);
        org.apache.commons.codec.DecoderException decoderException21 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj22 = base64_19.encode((java.lang.Object) decoderException21);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test324");
        byte[] byteArray5 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray5);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64(0, byteArray10);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray15 = new byte[] {};
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, false, false, 10);
        byte[] byteArray20 = base64_14.decode(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64(100, byteArray20);
        boolean boolean22 = base64_21.hasData();
        byte[] byteArray24 = base64_21.decode("QUdRQkFBPT0=\r\n");
        java.lang.String str25 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray24);
        byte[] byteArray26 = base64_11.decode(byteArray24);
        byte[] byteArray27 = null;
        byte[] byteArray28 = base64_11.encode(byteArray27);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str25, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 100, 1, 0]");
        org.junit.Assert.assertNull(byteArray28);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test325");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        boolean boolean2 = base64_1.isUrlSafe();
        boolean boolean3 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] {};
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false, 10);
        byte[] byteArray12 = base64_6.decode(byteArray11);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64(100, byteArray12);
        int int16 = base64_1.readResults(byteArray12, 1, (int) (byte) 1);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false);
        java.lang.Class<?> wildcardClass19 = byteArray12.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test326");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(100, byteArray8);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false, false, 10);
        byte[] byteArray18 = base64_12.decode(byteArray17);
        byte[] byteArray20 = base64_12.decode("");
        byte[] byteArray21 = new byte[] {};
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, false, 10);
        byte[] byteArray26 = base64_12.decode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        byte[] byteArray38 = base64_12.encode(byteArray36);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray40);
        java.lang.Object obj42 = base64_9.encode((java.lang.Object) byteArray40);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test327");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 0);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray6 = new byte[] {};
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false, 10);
        byte[] byteArray11 = base64_5.decode(byteArray10);
        byte[] byteArray13 = base64_5.decode("");
        byte[] byteArray14 = new byte[] {};
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false, false, 10);
        byte[] byteArray19 = base64_5.decode(byteArray18);
        base64_3.setInitialBuffer(byteArray19, 1, 0);
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        base64_1.setInitialBuffer(byteArray19, (int) 'a', (int) (short) 10);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, false, 10);
        byte[] byteArray34 = base64_28.decode(byteArray33);
        byte[] byteArray36 = base64_28.decode("");
        byte[] byteArray37 = new byte[] {};
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, false, 10);
        byte[] byteArray42 = base64_28.decode(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray45 = new byte[] {};
        base64_44.decode(byteArray45, (int) 'a', (-1));
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, true, true, (int) (byte) 100);
        boolean boolean53 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray52);
        byte[] byteArray54 = base64_28.encode(byteArray52);
        byte[] byteArray55 = base64_1.decode(byteArray54);
        boolean boolean56 = base64_1.hasData();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test328");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray5 = new byte[] {};
        base64_4.decode(byteArray5, (int) 'a', (-1));
        byte[] byteArray10 = base64_4.decode("QUdRQkFBPT0");
        byte[] byteArray12 = null;
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64(10, byteArray12);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, false, false);
        java.math.BigInteger bigInteger24 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger24);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger24);
        java.lang.Object obj27 = base64_14.encode((java.lang.Object) byteArray26);
        java.lang.Object obj28 = base64_13.encode((java.lang.Object) byteArray26);
        java.lang.Object obj29 = base64_4.encode((java.lang.Object) byteArray26);
        byte[] byteArray30 = base64_2.decode(byteArray26);
        byte[] byteArray31 = null;
        int int34 = base64_2.readResults(byteArray31, 0, (int) (short) 1);
        byte[] byteArray35 = new byte[] {};
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false, false, 10);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray39);
        boolean boolean41 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray40);
        int int44 = base64_2.readResults(byteArray40, 14, 1);
        byte[] byteArray46 = base64_2.decode("UVVFPQ0K\r\n");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64(76, byteArray46, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [QUE=??]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[81, 85, 69, 61, 13, 10]");
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test329");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray9);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray11);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64(1, byteArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [/2QK/2Q=]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100, 10, -1, 100]");
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test330");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(0);
        boolean boolean2 = base64_1.hasData();
        byte[] byteArray3 = null;
        int int6 = base64_1.readResults(byteArray3, (int) (short) -1, (int) (byte) 0);
        java.lang.Class<?> wildcardClass7 = base64_1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test331");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        byte[] byteArray11 = base64_3.decode("");
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_3.decode(byteArray16);
        base64_1.setInitialBuffer(byteArray17, 1, 0);
        int int21 = base64_1.avail();
        byte[] byteArray22 = null;
        byte[] byteArray23 = base64_1.encode(byteArray22);
        boolean boolean24 = base64_1.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test332");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray9 = base64_3.decode("QUdRQkFBPT0");
        java.lang.String str10 = base64_1.encodeToString(byteArray9);
        boolean boolean11 = base64_1.hasData();
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray14 = new byte[] {};
        base64_13.decode(byteArray14, (int) 'a', (-1));
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, true, true, (int) (byte) 100);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, true);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray24);
        base64_1.decode(byteArray24, 0, (int) (short) 1);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, true, (int) (byte) 10);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str10, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test333");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(100, byteArray8);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false, false, 10);
        byte[] byteArray18 = base64_12.decode(byteArray17);
        byte[] byteArray20 = base64_12.decode("");
        byte[] byteArray21 = new byte[] {};
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, false, 10);
        byte[] byteArray26 = base64_12.decode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        byte[] byteArray38 = base64_12.encode(byteArray36);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray40);
        java.lang.Object obj42 = base64_9.encode((java.lang.Object) byteArray40);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray49, false, false);
        java.math.BigInteger bigInteger53 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray52);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger53);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger53);
        java.lang.Object obj56 = base64_43.encode((java.lang.Object) byteArray55);
        int int59 = base64_9.readResults(byteArray55, 0, (int) (short) 1);
        boolean boolean60 = base64_9.hasData();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger53);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test334");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64("AGQBAA==\r\n");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray24);
        byte[] byteArray26 = base64_1.encode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, false, 10);
        byte[] byteArray34 = base64_28.decode(byteArray33);
        byte[] byteArray36 = base64_28.decode("");
        byte[] byteArray37 = new byte[] {};
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, false, 10);
        byte[] byteArray42 = base64_28.decode(byteArray41);
        byte[] byteArray43 = new byte[] {};
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false, false, 10);
        java.lang.String str48 = base64_28.encodeToString(byteArray43);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj49 = base64_1.encode((java.lang.Object) str48);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test335");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray18);
        base64_0.encode(byteArray22, 0, 10);
        byte[] byteArray27 = new byte[] { (byte) 0 };
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false, true);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray30);
        byte[] byteArray32 = base64_0.decode(byteArray30);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray35 = new byte[] {};
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false, false, 10);
        byte[] byteArray40 = base64_34.decode(byteArray39);
        byte[] byteArray42 = base64_34.decode("");
        byte[] byteArray43 = new byte[] {};
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false, false, 10);
        byte[] byteArray48 = base64_34.decode(byteArray47);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray51 = new byte[] {};
        base64_50.decode(byteArray51, (int) 'a', (-1));
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, true, true, (int) (byte) 100);
        boolean boolean59 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray58);
        byte[] byteArray60 = base64_34.encode(byteArray58);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray58, false);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray62);
        byte[] byteArray64 = base64_0.encode(byteArray63);
        java.lang.Object obj66 = base64_0.decode((java.lang.Object) "org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException");
        org.apache.commons.codec.DecoderException decoderException69 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.DecoderException decoderException70 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) decoderException69);
        java.lang.Throwable[] throwableArray71 = decoderException69.getSuppressed();
        org.apache.commons.codec.DecoderException decoderException74 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.DecoderException decoderException75 = new org.apache.commons.codec.DecoderException("", (java.lang.Throwable) decoderException74);
        decoderException69.addSuppressed((java.lang.Throwable) decoderException75);
        org.apache.commons.codec.DecoderException decoderException79 = new org.apache.commons.codec.DecoderException("");
        org.apache.commons.codec.DecoderException decoderException80 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) decoderException79);
        org.apache.commons.codec.DecoderException decoderException81 = new org.apache.commons.codec.DecoderException("AGQBAA==\r\n", (java.lang.Throwable) decoderException80);
        decoderException69.addSuppressed((java.lang.Throwable) decoderException80);
        org.apache.commons.codec.EncoderException encoderException83 = new org.apache.commons.codec.EncoderException((java.lang.Throwable) decoderException80);
        org.apache.commons.codec.DecoderException decoderException84 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException", (java.lang.Throwable) encoderException83);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj85 = base64_0.encode((java.lang.Object) encoderException83);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertNotNull(throwableArray71);
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test336");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        java.lang.String str21 = base64_1.encodeToString(byteArray16);
        boolean boolean22 = base64_1.isUrlSafe();
        byte[] byteArray23 = null;
        int int26 = base64_1.readResults(byteArray23, (int) (byte) 1, 76);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        byte[] byteArray37 = base64_1.decode(byteArray29);
        byte[] byteArray38 = null;
        byte[] byteArray39 = base64_1.decode(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray42 = new byte[] {};
        base64_41.decode(byteArray42, (int) 'a', (-1));
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, true, (int) (byte) 100);
        byte[] byteArray50 = base64_1.encode(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray53 = new byte[] {};
        base64_52.decode(byteArray53, (int) 'a', (-1));
        byte[] byteArray58 = base64_52.decode("QUdRQkFBPT0");
        byte[] byteArray60 = null;
        org.apache.commons.codec.binary.Base64 base64_61 = new org.apache.commons.codec.binary.Base64(10, byteArray60);
        org.apache.commons.codec.binary.Base64 base64_62 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray68 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray68, false, false);
        java.math.BigInteger bigInteger72 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray71);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger72);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger72);
        java.lang.Object obj75 = base64_62.encode((java.lang.Object) byteArray74);
        java.lang.Object obj76 = base64_61.encode((java.lang.Object) byteArray74);
        java.lang.Object obj77 = base64_52.encode((java.lang.Object) byteArray74);
        org.apache.commons.codec.binary.Base64 base64_79 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray80 = new byte[] {};
        base64_79.decode(byteArray80, (int) 'a', (-1));
        byte[] byteArray85 = base64_79.decode("QUdRQkFBPT0");
        base64_52.encode(byteArray85, 10, 10);
        org.apache.commons.codec.binary.Base64 base64_90 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray92 = base64_90.decode("");
        java.lang.Object obj93 = base64_52.decode((java.lang.Object) byteArray92);
        byte[] byteArray94 = base64_1.encode(byteArray92);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger72);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[]");
        org.junit.Assert.assertNotNull(obj93);
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test337");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        int int10 = base64_3.avail();
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray14 = new byte[] {};
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false, false, 10);
        byte[] byteArray19 = base64_13.decode(byteArray18);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64(100, byteArray19);
        byte[] byteArray21 = base64_3.encode(byteArray19);
        java.math.BigInteger bigInteger22 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray19);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray19);
        java.lang.Object obj24 = base64_1.decode((java.lang.Object) byteArray19);
        int int25 = base64_1.avail();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(bigInteger22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test338");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        java.lang.String str21 = base64_1.encodeToString(byteArray16);
        boolean boolean22 = base64_1.isUrlSafe();
        byte[] byteArray23 = null;
        int int26 = base64_1.readResults(byteArray23, (int) (byte) 1, 76);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        byte[] byteArray37 = base64_1.decode(byteArray29);
        byte[] byteArray38 = new byte[] {};
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, false, false, 10);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray42);
        java.lang.String str44 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray42);
        boolean boolean45 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray42);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray42);
        byte[] byteArray47 = base64_1.decode(byteArray42);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray48);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test339");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        boolean boolean16 = base64_1.isUrlSafe();
        byte[] byteArray18 = new byte[] {};
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false, 10);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64(0, byteArray25);
        java.lang.String str27 = base64_1.encodeToString(byteArray25);
        boolean boolean28 = base64_1.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test340");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(100, byteArray8);
        boolean boolean10 = base64_9.hasData();
        byte[] byteArray12 = base64_9.decode("QUdRQkFBPT0=\r\n");
        byte[] byteArray13 = null;
        base64_9.encode(byteArray13, (int) (short) 0, (int) (byte) 100);
        boolean boolean17 = base64_9.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test341");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        byte[] byteArray9 = null;
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(10, byteArray9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger21);
        java.lang.Object obj24 = base64_11.encode((java.lang.Object) byteArray23);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray23);
        java.lang.Object obj26 = base64_1.encode((java.lang.Object) byteArray23);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray34 = base64_28.decode("QUdRQkFBPT0");
        base64_1.encode(byteArray34, 10, 10);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray41 = base64_39.decode("");
        java.lang.Object obj42 = base64_1.decode((java.lang.Object) byteArray41);
        java.lang.Class<?> wildcardClass43 = base64_1.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test342");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false, false);
        base64_1.setInitialBuffer(byteArray27, 100, 1);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray36 = new byte[] {};
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false, false, 10);
        byte[] byteArray41 = base64_35.decode(byteArray40);
        base64_1.encode(byteArray41, (-1), 76);
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray49 = new byte[] {};
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray49, false, false, 10);
        byte[] byteArray54 = base64_48.decode(byteArray53);
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray54, false);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray54);
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64(76, byteArray54, true);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54, true, true, (int) (byte) 100);
        byte[] byteArray64 = base64_1.encode(byteArray54);
        java.lang.String str65 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray54);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test343");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray9 = base64_3.decode("QUdRQkFBPT0");
        java.lang.String str10 = base64_1.encodeToString(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false, false, 10);
        byte[] byteArray18 = base64_12.decode(byteArray17);
        byte[] byteArray20 = base64_12.decode("");
        byte[] byteArray21 = new byte[] {};
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, false, 10);
        byte[] byteArray26 = base64_12.decode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        byte[] byteArray38 = base64_12.encode(byteArray36);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38);
        base64_1.decode(byteArray38, (int) (short) 10, (int) 'a');
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray38);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray43);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str10, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test344");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(100, byteArray8);
        boolean boolean10 = base64_9.hasData();
        byte[] byteArray12 = base64_9.decode("QUdRQkFBPT0=\r\n");
        java.lang.Object obj13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj14 = base64_9.decode(obj13);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[65, 71, 81, 66, 65, 65, 61, 61]");
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test345");
        byte[] byteArray1 = new byte[] {};
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, false, 10);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(0, byteArray8);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray12);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test346");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false, false);
        base64_1.setInitialBuffer(byteArray27, 100, 1);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray36 = new byte[] {};
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false, false, 10);
        byte[] byteArray41 = base64_35.decode(byteArray40);
        base64_1.encode(byteArray41, (-1), 76);
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray49 = new byte[] {};
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray49, false, false, 10);
        byte[] byteArray54 = base64_48.decode(byteArray53);
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray54, false);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray54);
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64(76, byteArray54, true);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54, true, true, (int) (byte) 100);
        byte[] byteArray64 = base64_1.encode(byteArray54);
        boolean boolean65 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray64);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test347");
        byte[] byteArray1 = new byte[] {};
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, false, 10);
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64(0, byteArray5, true);
        int int8 = base64_7.avail();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test348");
        byte[] byteArray1 = new byte[] {};
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, false, 10);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(0, byteArray8);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test349");
        byte[] byteArray0 = null;
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray0, false);
        org.junit.Assert.assertNull(byteArray2);
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test350");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        byte[] byteArray11 = base64_3.decode("");
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_3.decode(byteArray16);
        base64_1.setInitialBuffer(byteArray17, 1, 0);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray24 = new byte[] {};
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, false, 10);
        byte[] byteArray29 = base64_23.decode(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray29, false);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray34 = new byte[] {};
        base64_33.decode(byteArray34, (int) 'a', (-1));
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, true, true, (int) (byte) 100);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, true, false, 1);
        java.lang.Object obj46 = base64_31.encode((java.lang.Object) byteArray41);
        byte[] byteArray47 = base64_1.encode(byteArray41);
        int int48 = base64_1.avail();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj50 = base64_1.decode((java.lang.Object) 1.0f);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test351");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = new byte[] {};
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false, 10);
        byte[] byteArray22 = base64_2.encode(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray22, false);
        byte[] byteArray26 = base64_24.decode("QUdRQkFBPT0");
        int int27 = base64_24.avail();
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64("AGQBAA==\r\n");
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray29);
        java.lang.Object obj31 = base64_24.encode((java.lang.Object) byteArray29);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(obj31);
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test352");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false);
        base64_1.setInitialBuffer(byteArray10, (int) '#', (int) (byte) -1);
        byte[] byteArray14 = null;
        base64_1.setInitialBuffer(byteArray14, (int) (short) 100, (int) (short) 100);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, false);
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger28);
        java.lang.Object obj31 = base64_18.encode((java.lang.Object) byteArray30);
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false, false);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray36);
        base64_18.encode(byteArray40, 0, 10);
        byte[] byteArray45 = new byte[] { (byte) 0 };
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, false, true);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray48);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, true);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, true, true);
        base64_18.encode(byteArray54, (int) (short) -1, (int) (byte) 0);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: ");
        base64_18.decode(byteArray59, 10, 1);
        byte[] byteArray63 = base64_1.decode(byteArray59);
        org.apache.commons.codec.binary.Base64 base64_66 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray67 = new byte[] {};
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray67, false, false, 10);
        byte[] byteArray72 = base64_66.decode(byteArray71);
        byte[] byteArray74 = base64_66.decode("");
        byte[] byteArray75 = new byte[] {};
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray75, false, false, 10);
        byte[] byteArray80 = base64_66.decode(byteArray79);
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray79);
        org.apache.commons.codec.binary.Base64 base64_82 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray81);
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: hi!");
        java.math.BigInteger bigInteger85 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray84);
        byte[] byteArray86 = base64_82.encode(byteArray84);
        byte[] byteArray88 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        java.lang.String str89 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray88);
        base64_82.encode(byteArray88, (int) (byte) 1, (int) (byte) 1);
        base64_1.decode(byteArray88, 0, (int) (byte) -1);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[85, 86, 86, 70, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-54, -70, 123, -114, 60, -85, 47, 54]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertNotNull(bigInteger85);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 104, 103, 61]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test353");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((-1));
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test354");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(100, byteArray8);
        boolean boolean10 = base64_9.hasData();
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray15 = new byte[] {};
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, false, false, 10);
        byte[] byteArray20 = base64_14.decode(byteArray19);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64(100, byteArray20);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((int) (short) 1, byteArray20);
        byte[] byteArray23 = base64_9.decode(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray28 = base64_26.decode("");
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray31 = new byte[] {};
        base64_30.decode(byteArray31, (int) 'a', (-1));
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, true, true, (int) (byte) 100);
        boolean boolean39 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray38);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray38);
        byte[] byteArray41 = base64_26.encode(byteArray40);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((int) (short) -1, byteArray41);
        boolean boolean43 = base64_42.hasData();
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray48 = new byte[] {};
        base64_47.decode(byteArray48, (int) 'a', (-1));
        byte[] byteArray53 = base64_47.decode("QUdRQkFBPT0");
        java.lang.String str54 = base64_45.encodeToString(byteArray53);
        boolean boolean55 = base64_45.hasData();
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: hi!");
        java.math.BigInteger bigInteger58 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray57);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger58);
        byte[] byteArray60 = base64_45.encode(byteArray59);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59);
        byte[] byteArray62 = base64_42.encode(byteArray61);
        java.lang.Object obj63 = base64_9.encode((java.lang.Object) byteArray61);
        org.apache.commons.codec.binary.Base64 base64_66 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray67 = new byte[] {};
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray67, false, false, 10);
        byte[] byteArray72 = base64_66.decode(byteArray71);
        org.apache.commons.codec.binary.Base64 base64_74 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray72, false);
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray72);
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray75, false, true, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            int int82 = base64_9.readResults(byteArray79, (int) (short) 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str54, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertNotNull(bigInteger58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[121, 114, 112, 55]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[101, 88, 74, 119, 78, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[101, 88, 74, 119, 78, 119, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[90, 86, 104, 75, 100, 48, 53, 51, 80, 84, 48, 61]");
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test355");
        byte[] byteArray4 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false);
        java.lang.String str8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray7);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray7);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "QUdRQkFBPT0" + "'", str8, "QUdRQkFBPT0");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[85, 86, 86, 107, 85, 108, 70, 114, 82, 107, 74, 81, 86, 68, 65, 57, 68, 81, 111, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[85, 86, 86, 107, 85, 108, 70, 114, 82, 107, 74, 81, 86, 68, 65, 57, 68, 81, 111, 61, 13, 10]");
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test356");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false, false);
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        java.lang.Object obj29 = base64_0.decode((java.lang.Object) byteArray28);
        int int30 = base64_0.avail();
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) 'a');
        boolean boolean33 = base64_32.isUrlSafe();
        boolean boolean34 = base64_32.isUrlSafe();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj35 = base64_0.encode((java.lang.Object) base64_32);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test357");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, false);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger13);
        java.lang.Object obj16 = base64_3.encode((java.lang.Object) byteArray15);
        java.lang.Object obj17 = base64_2.encode((java.lang.Object) byteArray15);
        byte[] byteArray18 = null;
        base64_2.encode(byteArray18, (-1), 0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, false);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray31 = base64_2.decode(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_36 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray37 = new byte[] {};
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, false, 10);
        byte[] byteArray42 = base64_36.decode(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray42, false);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64(76, byteArray42, true);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, true, (int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64((-1), byteArray51);
        int int55 = base64_2.readResults(byteArray51, 100, (int) (short) 10);
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray62 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, false, false);
        java.math.BigInteger bigInteger66 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray65);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger66);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger66);
        java.lang.Object obj69 = base64_56.encode((java.lang.Object) byteArray68);
        byte[] byteArray74 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray74, false, false);
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray74);
        base64_56.encode(byteArray78, 0, 10);
        byte[] byteArray83 = new byte[] { (byte) 0 };
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray83, false, true);
        byte[] byteArray87 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray86);
        byte[] byteArray88 = base64_56.decode(byteArray86);
        base64_2.decode(byteArray86, (int) '4', 12);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[0]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[0]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[0]");
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test358");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        java.lang.Object obj30 = base64_1.encode((java.lang.Object) byteArray29);
        byte[] byteArray32 = new byte[] { (byte) 0 };
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false, true);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray35);
        int int39 = base64_1.readResults(byteArray35, 1, (int) (short) -1);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray42 = new byte[] {};
        base64_41.decode(byteArray42, (int) 'a', (-1));
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, false, false);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray50);
        byte[] byteArray55 = base64_41.encode(byteArray50);
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray58 = new byte[] {};
        base64_57.decode(byteArray58, (int) 'a', (-1));
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray58, true, true, (int) (byte) 100);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray65, true, false, 1);
        byte[] byteArray70 = base64_41.encode(byteArray69);
        byte[] byteArray71 = base64_1.decode(byteArray70);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: hi!");
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray73, false, true);
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray76);
        int int80 = base64_1.readResults(byteArray76, (int) '4', 0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 104, 103]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[98, 51, 74, 110, 89, 88, 66, 104, 89, 50, 104, 108, 89, 50, 57, 116, 98, 87, 57, 117, 99, 50, 78, 118, 90, 71, 86, 106, 82, 71, 86, 106, 98, 50, 82, 108, 99, 107, 86, 52, 89, 50, 86, 119, 100, 71, 108, 118, 98, 109, 104, 110]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test359");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        java.lang.Object obj30 = base64_1.encode((java.lang.Object) byteArray29);
        byte[] byteArray31 = new byte[] {};
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false, 10);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray35);
        java.lang.Object obj37 = base64_1.encode((java.lang.Object) byteArray35);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray35);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray35);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray40);
        boolean boolean42 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray41);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test360");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        byte[] byteArray9 = null;
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(10, byteArray9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger21);
        java.lang.Object obj24 = base64_11.encode((java.lang.Object) byteArray23);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray23);
        java.lang.Object obj26 = base64_1.encode((java.lang.Object) byteArray23);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray34 = base64_28.decode("QUdRQkFBPT0");
        base64_1.encode(byteArray34, 10, 10);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray41 = base64_39.decode("");
        java.lang.Object obj42 = base64_1.decode((java.lang.Object) byteArray41);
        byte[] byteArray44 = base64_1.decode("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray51 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, false, false);
        java.math.BigInteger bigInteger55 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray54);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger55);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger55);
        java.lang.Object obj58 = base64_45.encode((java.lang.Object) byteArray57);
        byte[] byteArray59 = null;
        java.lang.String str60 = base64_45.encodeToString(byteArray59);
        byte[] byteArray62 = new byte[] { (byte) 0 };
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, false, true);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray65);
        base64_45.setInitialBuffer(byteArray66, 0, (int) (byte) 0);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.decodeBase64("hi!");
        byte[] byteArray72 = base64_45.decode(byteArray71);
        byte[] byteArray73 = base64_1.encode(byteArray72);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 73, -36, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-122]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test361");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(0);
        org.apache.commons.codec.DecoderException decoderException4 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.DecoderException decoderException5 = new org.apache.commons.codec.DecoderException("", (java.lang.Throwable) decoderException4);
        java.lang.Throwable[] throwableArray6 = decoderException4.getSuppressed();
        org.apache.commons.codec.DecoderException decoderException8 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.DecoderException decoderException9 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) decoderException8);
        java.lang.Throwable[] throwableArray10 = decoderException8.getSuppressed();
        org.apache.commons.codec.DecoderException decoderException13 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.DecoderException decoderException14 = new org.apache.commons.codec.DecoderException("", (java.lang.Throwable) decoderException13);
        decoderException8.addSuppressed((java.lang.Throwable) decoderException14);
        decoderException4.addSuppressed((java.lang.Throwable) decoderException14);
        org.apache.commons.codec.EncoderException encoderException18 = new org.apache.commons.codec.EncoderException("LzJRSy8yUT0");
        org.apache.commons.codec.DecoderException decoderException19 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) encoderException18);
        decoderException14.addSuppressed((java.lang.Throwable) decoderException19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj21 = base64_1.encode((java.lang.Object) decoderException14);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray10);
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test362");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray10 = new byte[] {};
        base64_9.decode(byteArray10, (int) 'a', (-1));
        byte[] byteArray15 = base64_9.decode("QUdRQkFBPT0");
        byte[] byteArray17 = null;
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64(10, byteArray17);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false);
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger29);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger29);
        java.lang.Object obj32 = base64_19.encode((java.lang.Object) byteArray31);
        java.lang.Object obj33 = base64_18.encode((java.lang.Object) byteArray31);
        java.lang.Object obj34 = base64_9.encode((java.lang.Object) byteArray31);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        byte[] byteArray36 = base64_1.decode(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray41 = new byte[] {};
        base64_40.decode(byteArray41, (int) 'a', (-1));
        byte[] byteArray46 = base64_40.decode("QUdRQkFBPT0");
        java.lang.String str47 = base64_38.encodeToString(byteArray46);
        boolean boolean48 = base64_38.hasData();
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.decodeBase64("QUdRQkFBPT0");
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray50);
        byte[] byteArray52 = base64_38.encode(byteArray50);
        java.lang.String str53 = base64_1.encodeToString(byteArray50);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str47, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str53, "QUdRQkFBPT0=\r\n");
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test363");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = new byte[] {};
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false, 10);
        byte[] byteArray22 = base64_2.encode(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray25 = new byte[] {};
        base64_24.decode(byteArray25, (int) 'a', (-1));
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, true, (int) (byte) 100);
        java.lang.String str33 = base64_2.encodeToString(byteArray32);
        byte[] byteArray35 = new byte[] { (byte) 0 };
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false, true);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray38);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, true);
        base64_2.setInitialBuffer(byteArray41, (int) (byte) -1, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray41, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [QUE=??]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[81, 85, 69, 61, 13, 10]");
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test364");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        byte[] byteArray4 = base64_1.decode(byteArray3);
        java.lang.String str5 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray3);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray3);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test365");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true, true, (int) (byte) 100);
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray9);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, true, (int) (short) 10);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test366");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[47, 50, 81, 75, 47, 50, 81, 61]");
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test367");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        java.lang.Object obj30 = base64_1.encode((java.lang.Object) byteArray29);
        byte[] byteArray31 = new byte[] {};
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false, 10);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray35);
        java.lang.Object obj37 = base64_1.encode((java.lang.Object) byteArray35);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, true);
        java.math.BigInteger bigInteger42 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(bigInteger42);
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test368");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        java.lang.Object obj30 = base64_1.encode((java.lang.Object) byteArray29);
        byte[] byteArray32 = new byte[] { (byte) 0 };
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false, true);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray35);
        int int39 = base64_1.readResults(byteArray35, 1, (int) (short) -1);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray42 = new byte[] {};
        base64_41.decode(byteArray42, (int) 'a', (-1));
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, false, false);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray50);
        byte[] byteArray55 = base64_41.encode(byteArray50);
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray58 = new byte[] {};
        base64_57.decode(byteArray58, (int) 'a', (-1));
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray58, true, true, (int) (byte) 100);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray65, true, false, 1);
        byte[] byteArray70 = base64_41.encode(byteArray69);
        byte[] byteArray71 = base64_1.decode(byteArray70);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray70, true, true);
        java.lang.String str75 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray74);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test369");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false);
        base64_1.setInitialBuffer(byteArray10, (int) '#', (int) (byte) -1);
        int int14 = base64_1.avail();
        org.apache.commons.codec.binary.Base64 base64_16 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray17 = new byte[] {};
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false, 10);
        byte[] byteArray22 = base64_16.decode(byteArray21);
        byte[] byteArray24 = base64_16.decode("");
        byte[] byteArray25 = new byte[] {};
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false, 10);
        byte[] byteArray30 = base64_16.decode(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray33 = new byte[] {};
        base64_32.decode(byteArray33, (int) 'a', (-1));
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, true, true, (int) (byte) 100);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40, true, false, 1);
        java.lang.Object obj45 = base64_16.encode((java.lang.Object) byteArray44);
        byte[] byteArray46 = new byte[] {};
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, false, false, 10);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray50);
        java.lang.Object obj52 = base64_16.encode((java.lang.Object) byteArray50);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray50);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray50);
        byte[] byteArray55 = base64_1.encode(byteArray54);
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray58 = new byte[] {};
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray58, false, false, 10);
        byte[] byteArray63 = base64_57.decode(byteArray62);
        byte[] byteArray65 = base64_57.decode("");
        byte[] byteArray66 = new byte[] {};
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66, false, false, 10);
        byte[] byteArray71 = base64_57.decode(byteArray70);
        byte[] byteArray72 = new byte[] {};
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray72, false, false, 10);
        byte[] byteArray77 = base64_57.encode(byteArray76);
        java.lang.String str78 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray76);
        byte[] byteArray82 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray76, true, true, 0);
        byte[] byteArray83 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray76);
        java.lang.Object obj84 = base64_1.encode((java.lang.Object) byteArray83);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertNotNull(obj84);
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test370");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        byte[] byteArray11 = base64_3.decode("");
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_3.decode(byteArray16);
        base64_1.setInitialBuffer(byteArray17, 1, 0);
        boolean boolean21 = base64_1.isUrlSafe();
        byte[] byteArray23 = null;
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj25 = base64_1.encode((java.lang.Object) byteArray23);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test371");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        boolean boolean8 = base64_1.hasData();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test372");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64("AGQBAA==\r\n");
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray24);
        byte[] byteArray26 = base64_1.encode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray30 = new byte[] {};
        base64_29.decode(byteArray30, (int) 'a', (-1));
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, true, true, (int) (byte) 100);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, true);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray40);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((int) (byte) 10, byteArray40);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj43 = base64_1.decode((java.lang.Object) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test373");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        java.lang.Object obj30 = base64_1.encode((java.lang.Object) byteArray29);
        byte[] byteArray32 = new byte[] { (byte) 0 };
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false, true);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray35);
        int int39 = base64_1.readResults(byteArray35, 1, (int) (short) -1);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray42 = new byte[] {};
        base64_41.decode(byteArray42, (int) 'a', (-1));
        byte[] byteArray50 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50, false, false);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray50);
        byte[] byteArray55 = base64_41.encode(byteArray50);
        org.apache.commons.codec.binary.Base64 base64_57 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray58 = new byte[] {};
        base64_57.decode(byteArray58, (int) 'a', (-1));
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray58, true, true, (int) (byte) 100);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray65, true, false, 1);
        byte[] byteArray70 = base64_41.encode(byteArray69);
        byte[] byteArray71 = base64_1.decode(byteArray70);
        boolean boolean72 = base64_1.hasData();
        org.apache.commons.codec.binary.Base64 base64_74 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_76 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray77 = new byte[] {};
        base64_76.decode(byteArray77, (int) 'a', (-1));
        byte[] byteArray82 = base64_76.decode("QUdRQkFBPT0");
        java.lang.String str83 = base64_74.encodeToString(byteArray82);
        boolean boolean84 = base64_74.hasData();
        byte[] byteArray86 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: hi!");
        java.math.BigInteger bigInteger87 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray86);
        byte[] byteArray88 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger87);
        byte[] byteArray89 = base64_74.encode(byteArray88);
        byte[] byteArray90 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray88);
        java.lang.String str91 = base64_1.encodeToString(byteArray88);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str83, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertNotNull(bigInteger87);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[121, 114, 112, 55]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[101, 88, 74, 119, 78, 119, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[101, 88, 74, 119, 78, 119, 61, 61]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "eXJwNw==\r\n" + "'", str91, "eXJwNw==\r\n");
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test374");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) (short) 10, byteArray15, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [/2QK/2Q=]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 50, 81, 75, 47, 50, 81, 61]");
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test375");
        byte[] byteArray1 = new byte[] {};
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, false, 10);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray5);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray6, false);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        byte[] byteArray21 = base64_15.decode(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray21, false);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64(76, byteArray21, true);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, true, true, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj31 = base64_11.encode((java.lang.Object) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test376");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true, true, (int) (byte) 100);
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray9);
        java.lang.String str12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray11);
        boolean boolean13 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray11);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test377");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) -1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        byte[] byteArray11 = base64_3.decode("");
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_3.decode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray20 = new byte[] {};
        base64_19.decode(byteArray20, (int) 'a', (-1));
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, true, true, (int) (byte) 100);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, true, false, 1);
        java.lang.Object obj32 = base64_3.encode((java.lang.Object) byteArray31);
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray37);
        java.lang.Object obj39 = base64_3.encode((java.lang.Object) byteArray37);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        java.lang.Object obj41 = base64_1.decode((java.lang.Object) byteArray40);
        boolean boolean42 = base64_1.hasData();
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.decodeBase64("");
        java.lang.String str45 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray44);
        base64_1.decode(byteArray44, (int) (short) 0, 0);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray53 = new byte[] {};
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, false, false, 10);
        byte[] byteArray58 = base64_52.decode(byteArray57);
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray58, false);
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray58);
        org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64(76, byteArray58, true);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray58, true, true, (int) (byte) 100);
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray58, false, false);
        // The following exception was thrown during execution in test generation
        try {
            base64_1.encode(byteArray58, (int) (short) 100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test378");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true, true, (int) (byte) 100);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true, false, 1);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, false, false);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test379");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = new byte[] {};
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false, 10);
        byte[] byteArray22 = base64_2.encode(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray25 = new byte[] {};
        base64_24.decode(byteArray25, (int) 'a', (-1));
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, true, (int) (byte) 100);
        java.lang.String str33 = base64_2.encodeToString(byteArray32);
        byte[] byteArray35 = new byte[] { (byte) 0 };
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false, true);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray38);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, true);
        base64_2.setInitialBuffer(byteArray41, (int) (byte) -1, 0);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray47 = new byte[] {};
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, false, false, 10);
        byte[] byteArray52 = base64_46.decode(byteArray51);
        byte[] byteArray54 = base64_46.decode("");
        byte[] byteArray55 = new byte[] {};
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray55, false, false, 10);
        byte[] byteArray60 = base64_46.decode(byteArray59);
        byte[] byteArray61 = new byte[] {};
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, false, false, 10);
        byte[] byteArray66 = base64_46.encode(byteArray65);
        org.apache.commons.codec.binary.Base64 base64_68 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray69 = new byte[] {};
        base64_68.decode(byteArray69, (int) 'a', (-1));
        byte[] byteArray76 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray69, true, true, (int) (byte) 100);
        java.lang.String str77 = base64_46.encodeToString(byteArray76);
        byte[] byteArray79 = new byte[] { (byte) 0 };
        byte[] byteArray82 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray79, false, true);
        byte[] byteArray83 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray82);
        byte[] byteArray85 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray82, true);
        base64_46.setInitialBuffer(byteArray85, (int) (byte) -1, 0);
        int int91 = base64_2.readResults(byteArray85, 76, (int) 'a');
        byte[] byteArray92 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray85);
        byte[] byteArray93 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray85);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_95 = new org.apache.commons.codec.binary.Base64((int) '4', byteArray93, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [AA]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[0]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[85, 86, 86, 70, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[65, 65]");
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test380");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray14 = null;
        java.lang.String str15 = base64_0.encodeToString(byteArray14);
        boolean boolean16 = base64_0.hasData();
        boolean boolean17 = base64_0.hasData();
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, false);
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger28);
        java.lang.Object obj31 = base64_18.encode((java.lang.Object) byteArray30);
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false, false);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray36);
        base64_18.encode(byteArray40, 0, 10);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray46 = new byte[] {};
        base64_45.decode(byteArray46, (int) 'a', (-1));
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, true, true, (int) (byte) 100);
        boolean boolean54 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray53);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray53);
        java.lang.Object obj56 = base64_18.decode((java.lang.Object) byteArray55);
        org.apache.commons.codec.binary.Base64 base64_58 = new org.apache.commons.codec.binary.Base64(true);
        org.apache.commons.codec.binary.Base64 base64_60 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray61 = new byte[] {};
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, false, false, 10);
        byte[] byteArray66 = base64_60.decode(byteArray65);
        byte[] byteArray68 = base64_60.decode("");
        byte[] byteArray69 = new byte[] {};
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray69, false, false, 10);
        byte[] byteArray74 = base64_60.decode(byteArray73);
        org.apache.commons.codec.binary.Base64 base64_76 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray77 = new byte[] {};
        base64_76.decode(byteArray77, (int) 'a', (-1));
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray77, true, true, (int) (byte) 100);
        boolean boolean85 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray84);
        byte[] byteArray86 = base64_60.encode(byteArray84);
        byte[] byteArray87 = base64_58.decode(byteArray84);
        byte[] byteArray88 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray84);
        java.lang.Object obj89 = base64_18.decode((java.lang.Object) byteArray84);
        byte[] byteArray90 = new byte[] {};
        byte[] byteArray94 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray90, false, false, 10);
        byte[] byteArray95 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray94);
        byte[] byteArray96 = base64_18.encode(byteArray94);
        java.lang.Object obj97 = base64_0.encode((java.lang.Object) byteArray94);
        int int98 = base64_0.avail();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[]");
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[]");
        org.junit.Assert.assertNotNull(obj97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test381");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(10);
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false);
        java.math.BigInteger bigInteger11 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger11);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger11);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger11);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray14);
        int int18 = base64_1.readResults(byteArray15, (int) 'a', 10);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test382");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray5 = new byte[] {};
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false, 10);
        byte[] byteArray10 = base64_4.decode(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray10, false);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(76, byteArray10, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, true, true, (int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64((-1), byteArray19);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray27 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false, false);
        java.math.BigInteger bigInteger31 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray30);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger31);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger31);
        java.lang.Object obj34 = base64_21.encode((java.lang.Object) byteArray33);
        byte[] byteArray39 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, false, false);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray39);
        base64_21.encode(byteArray43, 0, 10);
        byte[] byteArray48 = new byte[] { (byte) 0 };
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, false, true);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray51);
        byte[] byteArray53 = base64_21.decode(byteArray51);
        java.lang.Object obj54 = base64_20.decode((java.lang.Object) byteArray51);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, false, true);
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[0]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[0]");
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[81, 85, 69]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[85, 86, 86, 70]");
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test383");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(0);
        boolean boolean2 = base64_1.hasData();
        byte[] byteArray3 = null;
        byte[] byteArray4 = base64_1.decode(byteArray3);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(byteArray4);
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test384");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        boolean boolean2 = base64_1.isUrlSafe();
        boolean boolean3 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] {};
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false, 10);
        byte[] byteArray12 = base64_6.decode(byteArray11);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64(100, byteArray12);
        int int16 = base64_1.readResults(byteArray12, 1, (int) (byte) 1);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, 0);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        java.math.BigInteger bigInteger24 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray18);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, true, (int) (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(bigInteger24);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test385");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(100, byteArray8);
        boolean boolean10 = base64_9.hasData();
        byte[] byteArray12 = base64_9.decode("QUdRQkFBPT0=\r\n");
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray20);
        byte[] byteArray22 = base64_9.encode(byteArray21);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61]");
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test386");
        byte[] byteArray4 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray7);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 100, 1, 0]");
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test387");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(14);
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test388");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        byte[] byteArray11 = base64_3.decode("");
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_3.decode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray20 = new byte[] {};
        base64_19.decode(byteArray20, (int) 'a', (-1));
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, true, true, (int) (byte) 100);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, true, false, 1);
        java.lang.Object obj32 = base64_3.encode((java.lang.Object) byteArray31);
        byte[] byteArray34 = new byte[] { (byte) 0 };
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false, true);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray37);
        int int41 = base64_3.readResults(byteArray37, 1, (int) (short) -1);
        org.apache.commons.codec.binary.Base64 base64_43 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray44 = new byte[] {};
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false, false, 10);
        byte[] byteArray49 = base64_43.decode(byteArray48);
        byte[] byteArray51 = base64_43.decode("");
        byte[] byteArray52 = new byte[] {};
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52, false, false, 10);
        byte[] byteArray57 = base64_43.decode(byteArray56);
        byte[] byteArray58 = new byte[] {};
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray58, false, false, 10);
        java.lang.String str63 = base64_43.encodeToString(byteArray58);
        boolean boolean64 = base64_43.isUrlSafe();
        byte[] byteArray65 = null;
        int int68 = base64_43.readResults(byteArray65, (int) (byte) 1, 76);
        org.apache.commons.codec.binary.Base64 base64_70 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray71 = new byte[] {};
        base64_70.decode(byteArray71, (int) 'a', (-1));
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray71, true, true, (int) (byte) 100);
        byte[] byteArray79 = base64_43.decode(byteArray71);
        java.lang.Object obj80 = base64_3.decode((java.lang.Object) byteArray79);
        org.apache.commons.codec.binary.Base64 base64_81 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray79);
        org.apache.commons.codec.binary.Base64 base64_82 = new org.apache.commons.codec.binary.Base64((int) (short) 10, byteArray79);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertNotNull(obj80);
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test389");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        int int8 = base64_1.avail();
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_11.decode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64(100, byteArray17);
        byte[] byteArray19 = base64_1.encode(byteArray17);
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray17);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray22);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test390");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        byte[] byteArray9 = null;
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(10, byteArray9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger21);
        java.lang.Object obj24 = base64_11.encode((java.lang.Object) byteArray23);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray23);
        java.lang.Object obj26 = base64_1.encode((java.lang.Object) byteArray23);
        org.apache.commons.codec.DecoderException decoderException28 = new org.apache.commons.codec.DecoderException("");
        org.apache.commons.codec.DecoderException decoderException29 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) decoderException28);
        org.apache.commons.codec.DecoderException decoderException33 = new org.apache.commons.codec.DecoderException("");
        org.apache.commons.codec.DecoderException decoderException34 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) decoderException33);
        org.apache.commons.codec.DecoderException decoderException35 = new org.apache.commons.codec.DecoderException("AGQBAA==\r\n", (java.lang.Throwable) decoderException34);
        org.apache.commons.codec.DecoderException decoderException36 = new org.apache.commons.codec.DecoderException("LzJRSy8yUT0", (java.lang.Throwable) decoderException35);
        decoderException28.addSuppressed((java.lang.Throwable) decoderException36);
        org.apache.commons.codec.DecoderException decoderException40 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.DecoderException decoderException41 = new org.apache.commons.codec.DecoderException("", (java.lang.Throwable) decoderException40);
        org.apache.commons.codec.DecoderException decoderException42 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) decoderException40);
        decoderException36.addSuppressed((java.lang.Throwable) decoderException40);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj44 = base64_1.decode((java.lang.Object) decoderException40);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test391");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        java.lang.String str31 = base64_1.encodeToString(byteArray30);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64(true);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray36 = new byte[] {};
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false, false, 10);
        byte[] byteArray41 = base64_35.decode(byteArray40);
        byte[] byteArray43 = base64_35.decode("");
        byte[] byteArray44 = new byte[] {};
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false, false, 10);
        byte[] byteArray49 = base64_35.decode(byteArray48);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray52 = new byte[] {};
        base64_51.decode(byteArray52, (int) 'a', (-1));
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52, true, true, (int) (byte) 100);
        boolean boolean60 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray59);
        byte[] byteArray61 = base64_35.encode(byteArray59);
        byte[] byteArray62 = base64_33.decode(byteArray59);
        org.apache.commons.codec.binary.Base64 base64_65 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray66 = new byte[] {};
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66, false, false, 10);
        byte[] byteArray71 = base64_65.decode(byteArray70);
        org.apache.commons.codec.binary.Base64 base64_73 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray71, false);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray71);
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray71);
        byte[] byteArray76 = base64_33.encode(byteArray71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj77 = base64_1.encode((java.lang.Object) base64_33);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test392");
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray6);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray7, false);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray7);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test393");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(100, byteArray8);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false, false, 10);
        byte[] byteArray18 = base64_12.decode(byteArray17);
        byte[] byteArray20 = base64_12.decode("");
        byte[] byteArray21 = new byte[] {};
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, false, 10);
        byte[] byteArray26 = base64_12.decode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        byte[] byteArray38 = base64_12.encode(byteArray36);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray40);
        java.lang.Object obj42 = base64_9.encode((java.lang.Object) byteArray40);
        byte[] byteArray44 = base64_9.decode("AGQBAA");
        byte[] byteArray45 = null;
        byte[] byteArray46 = base64_9.encode(byteArray45);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 100, 1, 0]");
        org.junit.Assert.assertNull(byteArray46);
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test394");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        byte[] byteArray21 = base64_1.encode(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray24 = new byte[] {};
        base64_23.decode(byteArray24, (int) 'a', (-1));
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, true, (int) (byte) 100);
        java.lang.String str32 = base64_1.encodeToString(byteArray31);
        byte[] byteArray34 = new byte[] { (byte) 0 };
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false, true);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray37);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, true);
        base64_1.setInitialBuffer(byteArray40, (int) (byte) -1, 0);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray46 = new byte[] {};
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, false, false, 10);
        byte[] byteArray51 = base64_45.decode(byteArray50);
        byte[] byteArray53 = base64_45.decode("");
        byte[] byteArray54 = new byte[] {};
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54, false, false, 10);
        byte[] byteArray59 = base64_45.decode(byteArray58);
        byte[] byteArray60 = new byte[] {};
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray60, false, false, 10);
        byte[] byteArray65 = base64_45.encode(byteArray64);
        org.apache.commons.codec.binary.Base64 base64_67 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray68 = new byte[] {};
        base64_67.decode(byteArray68, (int) 'a', (-1));
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray68, true, true, (int) (byte) 100);
        java.lang.String str76 = base64_45.encodeToString(byteArray75);
        byte[] byteArray78 = new byte[] { (byte) 0 };
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray78, false, true);
        byte[] byteArray82 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray81);
        byte[] byteArray84 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray81, true);
        base64_45.setInitialBuffer(byteArray84, (int) (byte) -1, 0);
        int int90 = base64_1.readResults(byteArray84, 76, (int) 'a');
        byte[] byteArray91 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray84);
        byte[] byteArray92 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray84);
        java.lang.Class<?> wildcardClass93 = byteArray92.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[0]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[85, 86, 86, 70, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[65, 65]");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test395");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.EncoderException: org.apache.commons.codec.DecoderException: hi!");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 73, -36, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94, 120, 98]");
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test396");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray8, false);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        base64_12.decode(byteArray13, (int) 'a', (-1));
        byte[] byteArray18 = base64_12.decode("QUdRQkFBPT0");
        byte[] byteArray20 = null;
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64(10, byteArray20);
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, false, false);
        java.math.BigInteger bigInteger32 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger32);
        java.lang.Object obj35 = base64_22.encode((java.lang.Object) byteArray34);
        java.lang.Object obj36 = base64_21.encode((java.lang.Object) byteArray34);
        java.lang.Object obj37 = base64_12.encode((java.lang.Object) byteArray34);
        org.apache.commons.codec.binary.Base64 base64_39 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray40 = new byte[] {};
        base64_39.decode(byteArray40, (int) 'a', (-1));
        byte[] byteArray45 = base64_39.decode("QUdRQkFBPT0");
        base64_12.encode(byteArray45, 10, 10);
        java.lang.Object obj49 = base64_10.decode((java.lang.Object) byteArray45);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(obj49);
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test397");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(100, byteArray8);
        boolean boolean10 = base64_9.hasData();
        byte[] byteArray12 = base64_9.decode("QUdRQkFBPT0=\r\n");
        byte[] byteArray17 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray20);
        byte[] byteArray22 = base64_9.encode(byteArray21);
        boolean boolean23 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray21);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test398");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray16);
        java.math.BigInteger bigInteger18 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray17);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64(0, byteArray17, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [u]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[117]");
        org.junit.Assert.assertNotNull(bigInteger18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100, 81]");
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test399");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        boolean boolean8 = base64_1.isUrlSafe();
        byte[] byteArray10 = base64_1.decode("AGQBAA==\r\n");
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.decodeBase64("LzJRSy8yUT0=\r\n");
        byte[] byteArray13 = base64_1.decode(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray13);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[117]");
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test400");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        int int8 = base64_1.avail();
        byte[] byteArray10 = base64_1.decode("org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray15 = new byte[] {};
        base64_14.decode(byteArray15, (int) 'a', (-1));
        byte[] byteArray20 = base64_14.decode("QUdRQkFBPT0");
        java.lang.String str21 = base64_12.encodeToString(byteArray20);
        boolean boolean22 = base64_12.hasData();
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray25 = new byte[] {};
        base64_24.decode(byteArray25, (int) 'a', (-1));
        byte[] byteArray30 = base64_24.decode("QUdRQkFBPT0");
        base64_12.decode(byteArray30, 0, (int) (short) 0);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray36 = new byte[] {};
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false, false, 10);
        byte[] byteArray41 = base64_35.decode(byteArray40);
        byte[] byteArray43 = base64_35.decode("");
        byte[] byteArray44 = new byte[] {};
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false, false, 10);
        byte[] byteArray49 = base64_35.decode(byteArray48);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray52 = new byte[] {};
        base64_51.decode(byteArray52, (int) 'a', (-1));
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52, true, true, (int) (byte) 100);
        boolean boolean60 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray59);
        byte[] byteArray61 = base64_35.encode(byteArray59);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59, false);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray63, true, true, (int) '#');
        byte[] byteArray68 = base64_12.decode(byteArray63);
        byte[] byteArray69 = base64_1.decode(byteArray68);
        org.apache.commons.codec.binary.Base64 base64_71 = new org.apache.commons.codec.binary.Base64((int) ' ');
        boolean boolean72 = base64_71.hasData();
        org.apache.commons.codec.binary.Base64 base64_74 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray75 = new byte[] {};
        byte[] byteArray79 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray75, false, false, 10);
        byte[] byteArray80 = base64_74.decode(byteArray79);
        byte[] byteArray82 = base64_74.decode("");
        byte[] byteArray83 = new byte[] {};
        byte[] byteArray87 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray83, false, false, 10);
        byte[] byteArray88 = base64_74.decode(byteArray87);
        java.lang.String str89 = base64_71.encodeToString(byteArray87);
        java.lang.Object obj90 = base64_1.encode((java.lang.Object) byteArray87);
        byte[] byteArray92 = org.apache.commons.codec.binary.Base64.decodeBase64("QUdRQkFBPT0");
        byte[] byteArray93 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray92);
        byte[] byteArray94 = base64_1.decode(byteArray92);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -63, 39, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str21, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(obj90);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[0, 100, 1, 0]");
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test401");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray10 = new byte[] {};
        base64_9.decode(byteArray10, (int) 'a', (-1));
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, true, true, (int) (byte) 100);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, true, false, 1);
        base64_3.setInitialBuffer(byteArray21, (int) (byte) 10, 100);
        byte[] byteArray25 = new byte[] {};
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false, 10);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray29);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray29);
        java.lang.String str32 = base64_3.encodeToString(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray35 = new byte[] {};
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false, false, 10);
        byte[] byteArray40 = base64_34.decode(byteArray39);
        byte[] byteArray42 = base64_34.decode("");
        byte[] byteArray43 = new byte[] {};
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false, false, 10);
        byte[] byteArray48 = base64_34.decode(byteArray47);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray48);
        byte[] byteArray50 = base64_3.decode(byteArray48);
        byte[] byteArray51 = base64_1.decode(byteArray48);
        byte[] byteArray53 = base64_1.decode("/2QK/2Q=\r\n");
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray53);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[117]");
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test402");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true, true, (int) (byte) 100);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, true);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(bigInteger13);
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test403");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        byte[] byteArray21 = base64_1.encode(byteArray20);
        int int22 = base64_1.avail();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj24 = base64_1.decode((java.lang.Object) 1L);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test404");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray1);
        byte[] byteArray8 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, false, false);
        java.math.BigInteger bigInteger12 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger12);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64(0, byteArray13);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false, 10);
        byte[] byteArray23 = base64_17.decode(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64(100, byteArray23);
        boolean boolean25 = base64_24.hasData();
        byte[] byteArray27 = base64_24.decode("QUdRQkFBPT0=\r\n");
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray27);
        byte[] byteArray29 = base64_14.decode(byteArray27);
        // The following exception was thrown during execution in test generation
        try {
            base64_2.encode(byteArray27, 0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str28, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 100, 1, 0]");
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test405");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        byte[] byteArray21 = base64_1.encode(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray24 = new byte[] {};
        base64_23.decode(byteArray24, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray30 = new byte[] {};
        base64_29.decode(byteArray30, (int) 'a', (-1));
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, true, true, (int) (byte) 100);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, true, false, 1);
        base64_23.setInitialBuffer(byteArray41, (int) (byte) 10, 100);
        byte[] byteArray45 = new byte[] {};
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, false, false, 10);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray49);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray49);
        java.lang.String str52 = base64_23.encodeToString(byteArray51);
        boolean boolean53 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray51);
        java.lang.String str54 = base64_1.encodeToString(byteArray51);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test406");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        base64_2.decode(byteArray3, (int) 'a', (-1));
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, true, true, (int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64(100, byteArray10, true);
        boolean boolean13 = base64_12.isUrlSafe();
        byte[] byteArray14 = null;
        byte[] byteArray15 = base64_12.encode(byteArray14);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(byteArray15);
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test407");
        byte[] byteArray0 = new byte[] {};
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray0, false, false, 10);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 100);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, false, (int) 'a');
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray13);
        java.lang.String str15 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray14);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test408");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        java.lang.String str21 = base64_1.encodeToString(byteArray16);
        boolean boolean22 = base64_1.isUrlSafe();
        byte[] byteArray24 = base64_1.decode("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        boolean boolean25 = base64_1.hasData();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94, 122, 43, -127, -86, 90, 114, 23, -100, -94, 105, -88, -98, -57, 40, 117, -25, 4, -99, -54, 29, 122, -79, 49, 113, -22, 109, -118, -119]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test409");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        byte[] byteArray21 = base64_1.encode(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray24 = new byte[] {};
        base64_23.decode(byteArray24, (int) 'a', (-1));
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, true, true, (int) (byte) 100);
        java.lang.String str32 = base64_1.encodeToString(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray36 = new byte[] {};
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false, false, 10);
        byte[] byteArray41 = base64_35.decode(byteArray40);
        byte[] byteArray43 = base64_35.decode("");
        byte[] byteArray44 = new byte[] {};
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false, false, 10);
        byte[] byteArray49 = base64_35.decode(byteArray48);
        org.apache.commons.codec.binary.Base64 base64_50 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj51 = base64_1.decode((java.lang.Object) base64_50);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test410");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        java.lang.Object obj30 = base64_1.encode((java.lang.Object) byteArray29);
        byte[] byteArray31 = new byte[] {};
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false, 10);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray35);
        java.lang.Object obj37 = base64_1.encode((java.lang.Object) byteArray35);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray35);
        java.lang.String str39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray35);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, true, true, (int) (short) 100);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test411");
        byte[] byteArray1 = new byte[] {};
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, false, 10);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false, 100);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray5);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, (int) 'a');
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray15, false);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test412");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true, true, (int) (byte) 100);
        boolean boolean10 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray9);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false);
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray12);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test413");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        int int8 = base64_1.avail();
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_11.decode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64(100, byteArray17);
        byte[] byteArray19 = base64_1.encode(byteArray17);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray22 = new byte[] {};
        base64_21.decode(byteArray22, (int) 'a', (-1));
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, true, true, (int) (byte) 100);
        base64_1.setInitialBuffer(byteArray29, (int) (byte) 100, (int) (byte) 0);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: ");
        java.lang.Object obj35 = base64_1.decode((java.lang.Object) byteArray34);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertNotNull(obj35);
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test414");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        byte[] byteArray11 = base64_3.decode("");
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_3.decode(byteArray16);
        base64_1.setInitialBuffer(byteArray17, 1, 0);
        int int21 = base64_1.avail();
        byte[] byteArray22 = null;
        byte[] byteArray23 = base64_1.encode(byteArray22);
        byte[] byteArray24 = null;
        int int27 = base64_1.readResults(byteArray24, (int) (short) 10, (int) (short) 1);
        boolean boolean28 = base64_1.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test415");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray19 = new byte[] {};
        base64_18.decode(byteArray19, (int) 'a', (-1));
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, true, true, (int) (byte) 100);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, true, false, 1);
        java.lang.Object obj31 = base64_2.encode((java.lang.Object) byteArray30);
        byte[] byteArray33 = new byte[] { (byte) 0 };
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, true);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray36);
        int int40 = base64_2.readResults(byteArray36, 1, (int) (short) -1);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray43 = new byte[] {};
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false, false, 10);
        byte[] byteArray48 = base64_42.decode(byteArray47);
        byte[] byteArray50 = base64_42.decode("");
        byte[] byteArray51 = new byte[] {};
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, false, false, 10);
        byte[] byteArray56 = base64_42.decode(byteArray55);
        byte[] byteArray57 = new byte[] {};
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57, false, false, 10);
        java.lang.String str62 = base64_42.encodeToString(byteArray57);
        boolean boolean63 = base64_42.isUrlSafe();
        byte[] byteArray64 = null;
        int int67 = base64_42.readResults(byteArray64, (int) (byte) 1, 76);
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray70 = new byte[] {};
        base64_69.decode(byteArray70, (int) 'a', (-1));
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray70, true, true, (int) (byte) 100);
        byte[] byteArray78 = base64_42.decode(byteArray70);
        java.lang.Object obj79 = base64_2.decode((java.lang.Object) byteArray78);
        org.apache.commons.codec.binary.Base64 base64_80 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray78);
        byte[] byteArray85 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray88 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray85, false, false);
        byte[] byteArray89 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray88);
        byte[] byteArray90 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray89);
        // The following exception was thrown during execution in test generation
        try {
            base64_80.encode(byteArray90, (int) (byte) 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 14");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61, 13, 10]");
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test416");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        java.lang.String str21 = base64_1.encodeToString(byteArray16);
        boolean boolean22 = base64_1.isUrlSafe();
        boolean boolean23 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray27 = new byte[] {};
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false, false, 10);
        byte[] byteArray32 = base64_26.decode(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64(100, byteArray32);
        boolean boolean34 = base64_33.hasData();
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray39 = new byte[] {};
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, false, false, 10);
        byte[] byteArray44 = base64_38.decode(byteArray43);
        org.apache.commons.codec.binary.Base64 base64_45 = new org.apache.commons.codec.binary.Base64(100, byteArray44);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((int) (short) 1, byteArray44);
        byte[] byteArray47 = base64_33.decode(byteArray44);
        byte[] byteArray48 = base64_1.encode(byteArray47);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray50);
        int int54 = base64_1.readResults(byteArray50, (int) (short) 0, 0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94, 122, 43, -127, -86, 90, 114, 23, -100, -94, 105, -88, -98, -57, 40, 117, -25, 4, -99, -54, 29, 122, -79, 49, 113, -22, 109, -118, -119]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 111, 114, 13, 10, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 69, 110, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 107, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test417");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        java.lang.String str21 = base64_1.encodeToString(byteArray16);
        boolean boolean22 = base64_1.isUrlSafe();
        boolean boolean23 = base64_1.isUrlSafe();
        boolean boolean24 = base64_1.isUrlSafe();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test418");
        byte[] byteArray0 = new byte[] {};
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray0, false, false, 10);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray6);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray6);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(bigInteger9);
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test419");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        boolean boolean16 = base64_1.isUrlSafe();
        byte[] byteArray18 = new byte[] {};
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false, 10);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64(0, byteArray25);
        java.lang.String str27 = base64_1.encodeToString(byteArray25);
        byte[] byteArray29 = new byte[] { (byte) 0 };
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, true);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray32);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, true);
        int int38 = base64_1.readResults(byteArray32, 0, (int) (short) 100);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray32);
        java.lang.String str40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray32);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[65, 65]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "QUE" + "'", str40, "QUE");
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test420");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        java.lang.String str21 = base64_1.encodeToString(byteArray16);
        boolean boolean22 = base64_1.isUrlSafe();
        byte[] byteArray23 = null;
        int int26 = base64_1.readResults(byteArray23, (int) (byte) 1, 76);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        byte[] byteArray37 = base64_1.decode(byteArray29);
        byte[] byteArray38 = null;
        byte[] byteArray39 = base64_1.decode(byteArray38);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray42 = new byte[] {};
        base64_41.decode(byteArray42, (int) 'a', (-1));
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray42, true, true, (int) (byte) 100);
        byte[] byteArray50 = base64_1.encode(byteArray42);
        org.apache.commons.codec.binary.Base64 base64_52 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray53 = new byte[] {};
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray53, false, false, 10);
        byte[] byteArray58 = base64_52.decode(byteArray57);
        byte[] byteArray60 = base64_52.decode("");
        byte[] byteArray61 = new byte[] {};
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray61, false, false, 10);
        byte[] byteArray66 = base64_52.decode(byteArray65);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray65, false, true);
        byte[] byteArray70 = base64_1.encode(byteArray69);
        boolean boolean71 = base64_1.hasData();
        boolean boolean72 = base64_1.isUrlSafe();
        byte[] byteArray74 = new byte[] { (byte) 0 };
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray74, false, true);
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray77);
        byte[] byteArray80 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray77, true);
        // The following exception was thrown during execution in test generation
        try {
            base64_1.decode(byteArray80, (int) (short) 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[0]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[81, 85, 69, 61, 13, 10]");
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test421");
        byte[] byteArray1 = new byte[] { (byte) 0 };
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, true);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray4);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[81, 85, 69, 61]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 65]");
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test422");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = new byte[] {};
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false, 10);
        byte[] byteArray22 = base64_2.encode(byteArray21);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64(100, byteArray22, false);
        byte[] byteArray25 = null;
        base64_24.setInitialBuffer(byteArray25, (int) (short) 1, (int) (byte) 100);
        byte[] byteArray29 = new byte[] {};
        java.lang.String str30 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray29);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray29);
        byte[] byteArray32 = base64_24.encode(byteArray29);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test423");
        byte[] byteArray1 = new byte[] { (byte) 0 };
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, true);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, true);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, true, true);
        java.lang.String str11 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray7);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[85, 86, 86, 70, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UVVFPQ0K\r\n" + "'", str11, "UVVFPQ0K\r\n");
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test424");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        java.lang.Object obj3 = base64_1.decode((java.lang.Object) "org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, false, false, 10);
        byte[] byteArray13 = base64_7.decode(byteArray12);
        byte[] byteArray15 = base64_7.decode("");
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        byte[] byteArray21 = base64_7.decode(byteArray20);
        base64_5.setInitialBuffer(byteArray21, 1, 0);
        boolean boolean25 = base64_5.isUrlSafe();
        byte[] byteArray26 = null;
        byte[] byteArray27 = base64_5.decode(byteArray26);
        byte[] byteArray29 = null;
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64(12, byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_32.decode(byteArray37);
        byte[] byteArray40 = base64_32.decode("");
        byte[] byteArray41 = new byte[] {};
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, false, false, 10);
        byte[] byteArray46 = base64_32.decode(byteArray45);
        byte[] byteArray47 = new byte[] {};
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, false, false, 10);
        java.lang.String str52 = base64_32.encodeToString(byteArray47);
        boolean boolean53 = base64_32.isUrlSafe();
        byte[] byteArray54 = null;
        int int57 = base64_32.readResults(byteArray54, (int) (byte) 1, 76);
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray60 = new byte[] {};
        base64_59.decode(byteArray60, (int) 'a', (-1));
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray60, true, true, (int) (byte) 100);
        byte[] byteArray68 = base64_32.decode(byteArray60);
        java.lang.Object obj69 = base64_30.decode((java.lang.Object) byteArray68);
        byte[] byteArray70 = base64_5.decode(byteArray68);
        base64_1.setInitialBuffer(byteArray70, (int) (short) 100, 0);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test425");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        boolean boolean16 = base64_1.isUrlSafe();
        byte[] byteArray18 = new byte[] {};
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false, 10);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64(0, byteArray25);
        java.lang.String str27 = base64_1.encodeToString(byteArray25);
        byte[] byteArray29 = new byte[] { (byte) 0 };
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, true);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray32);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, true);
        int int38 = base64_1.readResults(byteArray32, 0, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false, false, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (6) than the specified maxium size of 0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test426");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        boolean boolean26 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray25);
        byte[] byteArray27 = base64_1.encode(byteArray25);
        byte[] byteArray29 = base64_1.decode("QUE");
        byte[] byteArray35 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false, false);
        java.math.BigInteger bigInteger39 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray38);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger39);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger39);
        java.lang.Object obj42 = base64_1.encode((java.lang.Object) byteArray41);
        boolean boolean43 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray41);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray41);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 100, 10, -1, 100]");
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test427");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray8, false);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray8);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, true, (int) ' ');
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, false, true, 0);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test428");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(100, byteArray8);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, false, false, 10);
        byte[] byteArray18 = base64_12.decode(byteArray17);
        byte[] byteArray20 = base64_12.decode("");
        byte[] byteArray21 = new byte[] {};
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, false, false, 10);
        byte[] byteArray26 = base64_12.decode(byteArray25);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        boolean boolean37 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray36);
        byte[] byteArray38 = base64_12.encode(byteArray36);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray40);
        java.lang.Object obj42 = base64_9.encode((java.lang.Object) byteArray40);
        boolean boolean43 = base64_9.isUrlSafe();
        byte[] byteArray44 = new byte[] {};
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray44, false, false, 10);
        byte[] byteArray49 = base64_9.encode(byteArray44);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray49, false, false, (int) (byte) 10);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test429");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        java.lang.String str31 = base64_1.encodeToString(byteArray30);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.CHUNK_SEPARATOR;
        base64_1.decode(byteArray32, 76, (int) (byte) 0);
        byte[] byteArray37 = base64_1.decode("/2QK/2Q=\r\n");
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray37);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[117]");
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test430");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray18 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray18);
        base64_0.encode(byteArray22, 0, 10);
        byte[] byteArray27 = new byte[] { (byte) 0 };
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false, true);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray30);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, true);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, true, true);
        base64_0.encode(byteArray36, (int) (short) -1, (int) (byte) 0);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray36);
        boolean boolean41 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray40);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[85, 86, 86, 70, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[86, 86, 90, 87, 82, 108, 66, 82, 77, 69, 115, 78, 67, 103]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test431");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: hi!");
        java.math.BigInteger bigInteger2 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray1);
        byte[] byteArray3 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger2);
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger2);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, true);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertNotNull(bigInteger2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[121, 114, 112, 55]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-54, -70, 123]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[121, 114, 112, 55, 13, 10]");
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test432");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray19 = new byte[] {};
        base64_18.decode(byteArray19, (int) 'a', (-1));
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, true, true, (int) (byte) 100);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, true, false, 1);
        java.lang.Object obj31 = base64_2.encode((java.lang.Object) byteArray30);
        byte[] byteArray33 = new byte[] { (byte) 0 };
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, true);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray36);
        int int40 = base64_2.readResults(byteArray36, 1, (int) (short) -1);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray43 = new byte[] {};
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false, false, 10);
        byte[] byteArray48 = base64_42.decode(byteArray47);
        byte[] byteArray50 = base64_42.decode("");
        byte[] byteArray51 = new byte[] {};
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, false, false, 10);
        byte[] byteArray56 = base64_42.decode(byteArray55);
        byte[] byteArray57 = new byte[] {};
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray57, false, false, 10);
        java.lang.String str62 = base64_42.encodeToString(byteArray57);
        boolean boolean63 = base64_42.isUrlSafe();
        byte[] byteArray64 = null;
        int int67 = base64_42.readResults(byteArray64, (int) (byte) 1, 76);
        org.apache.commons.codec.binary.Base64 base64_69 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray70 = new byte[] {};
        base64_69.decode(byteArray70, (int) 'a', (-1));
        byte[] byteArray77 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray70, true, true, (int) (byte) 100);
        byte[] byteArray78 = base64_42.decode(byteArray70);
        java.lang.Object obj79 = base64_2.decode((java.lang.Object) byteArray78);
        org.apache.commons.codec.binary.Base64 base64_80 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray78);
        java.lang.String str81 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray78);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test433");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        int int23 = base64_1.avail();
        byte[] byteArray29 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, false);
        java.math.BigInteger bigInteger33 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray32);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger33);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger33);
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger33);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger33);
        byte[] byteArray38 = base64_1.encode(byteArray37);
        byte[] byteArray39 = new byte[] {};
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, false, false, 10);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray39);
        byte[] byteArray45 = base64_1.decode(byteArray44);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[47, 50, 81, 75, 47, 50, 81, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test434");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray23 = new byte[] {};
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false, 10);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.String str30 = base64_1.encodeToString(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_32.decode(byteArray37);
        byte[] byteArray40 = base64_32.decode("");
        byte[] byteArray41 = new byte[] {};
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, false, false, 10);
        byte[] byteArray46 = base64_32.decode(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray46);
        byte[] byteArray48 = base64_1.decode(byteArray46);
        boolean boolean49 = base64_1.hasData();
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray52 = new byte[] {};
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52, false, false, 10);
        byte[] byteArray57 = base64_51.decode(byteArray56);
        int int58 = base64_51.avail();
        byte[] byteArray60 = base64_51.decode("org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        byte[] byteArray61 = null;
        base64_51.decode(byteArray61, (int) (byte) 1, (int) (short) 0);
        byte[] byteArray66 = base64_51.decode("QUdRQkFBPT0");
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66, true, false);
        base64_1.decode(byteArray69, (int) (byte) 10, (-1));
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -63, 39, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61, 13, 10]");
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test435");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-54, -70, 123]");
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test436");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray10 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray10);
        byte[] byteArray15 = base64_1.encode(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        byte[] byteArray30 = base64_1.encode(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray35 = new byte[] {};
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false, false, 10);
        byte[] byteArray40 = base64_34.decode(byteArray39);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64(100, byteArray40);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((int) (short) 1, byteArray40);
        byte[] byteArray43 = base64_1.decode(byteArray40);
        java.math.BigInteger bigInteger44 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        boolean boolean45 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray40);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test437");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, false, false);
        base64_1.setInitialBuffer(byteArray10, (int) '#', (int) (byte) -1);
        byte[] byteArray14 = null;
        base64_1.setInitialBuffer(byteArray14, (int) (short) 100, (int) (short) 100);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, false);
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger28);
        java.lang.Object obj31 = base64_18.encode((java.lang.Object) byteArray30);
        byte[] byteArray36 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false, false);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray36);
        base64_18.encode(byteArray40, 0, 10);
        byte[] byteArray45 = new byte[] { (byte) 0 };
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, false, true);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray48);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, true);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, true, true);
        base64_18.encode(byteArray54, (int) (short) -1, (int) (byte) 0);
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: ");
        base64_18.decode(byteArray59, 10, 1);
        byte[] byteArray63 = base64_1.decode(byteArray59);
        java.lang.String str64 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray59);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[85, 86, 86, 70, 80, 81, 48, 75, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-54, -70, 123, -114, 60, -85, 47, 54]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "orgapachecommonscodecDecoderExceptionorgapachecommonscodecDecoderExceptiog" + "'", str64, "orgapachecommonscodecDecoderExceptionorgapachecommonscodecDecoderExceptiog");
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test438");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray9 = base64_3.decode("QUdRQkFBPT0");
        java.lang.String str10 = base64_1.encodeToString(byteArray9);
        boolean boolean11 = base64_1.hasData();
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray14 = new byte[] {};
        base64_13.decode(byteArray14, (int) 'a', (-1));
        byte[] byteArray19 = base64_13.decode("QUdRQkFBPT0");
        base64_1.decode(byteArray19, 0, (int) (short) 0);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray25 = new byte[] {};
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false, 10);
        byte[] byteArray30 = base64_24.decode(byteArray29);
        byte[] byteArray32 = base64_24.decode("");
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_24.decode(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray41 = new byte[] {};
        base64_40.decode(byteArray41, (int) 'a', (-1));
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, true, true, (int) (byte) 100);
        boolean boolean49 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray48);
        byte[] byteArray50 = base64_24.encode(byteArray48);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, false);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52, true, true, (int) '#');
        byte[] byteArray57 = base64_1.decode(byteArray52);
        java.math.BigInteger bigInteger58 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray52);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str10, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(bigInteger58);
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test439");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64(1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray10 = new byte[] {};
        base64_9.decode(byteArray10, (int) 'a', (-1));
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, true, true, (int) (byte) 100);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, true, false, 1);
        base64_3.setInitialBuffer(byteArray21, (int) (byte) 10, 100);
        byte[] byteArray25 = new byte[] {};
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false, 10);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray29);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray29);
        java.lang.String str32 = base64_3.encodeToString(byteArray31);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray35 = new byte[] {};
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false, false, 10);
        byte[] byteArray40 = base64_34.decode(byteArray39);
        byte[] byteArray42 = base64_34.decode("");
        byte[] byteArray43 = new byte[] {};
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray43, false, false, 10);
        byte[] byteArray48 = base64_34.decode(byteArray47);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray48);
        byte[] byteArray50 = base64_3.decode(byteArray48);
        byte[] byteArray51 = base64_1.decode(byteArray48);
        byte[] byteArray52 = null;
        byte[] byteArray53 = base64_1.decode(byteArray52);
        int int54 = base64_1.avail();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNull(byteArray53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test440");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.DecoderException decoderException6 = new org.apache.commons.codec.DecoderException("");
        org.apache.commons.codec.DecoderException decoderException7 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) decoderException6);
        org.apache.commons.codec.DecoderException decoderException8 = new org.apache.commons.codec.DecoderException("AGQBAA==\r\n", (java.lang.Throwable) decoderException7);
        org.apache.commons.codec.DecoderException decoderException9 = new org.apache.commons.codec.DecoderException("LzJRSy8yUT0", (java.lang.Throwable) decoderException8);
        org.apache.commons.codec.EncoderException encoderException10 = new org.apache.commons.codec.EncoderException("", (java.lang.Throwable) decoderException8);
        org.apache.commons.codec.EncoderException encoderException11 = new org.apache.commons.codec.EncoderException((java.lang.Throwable) encoderException10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = base64_1.encode((java.lang.Object) encoderException10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test441");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 0);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray6 = new byte[] {};
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false, 10);
        byte[] byteArray11 = base64_5.decode(byteArray10);
        byte[] byteArray13 = base64_5.decode("");
        byte[] byteArray14 = new byte[] {};
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false, false, 10);
        byte[] byteArray19 = base64_5.decode(byteArray18);
        base64_3.setInitialBuffer(byteArray19, 1, 0);
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        base64_1.setInitialBuffer(byteArray19, (int) 'a', (int) (short) 10);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false, false);
        java.math.BigInteger bigInteger36 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray35);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray35);
        java.lang.String str38 = base64_1.encodeToString(byteArray35);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "LzJRSy8yUT0=" + "'", str38, "LzJRSy8yUT0=");
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test442");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray9 = base64_3.decode("QUdRQkFBPT0");
        java.lang.String str10 = base64_1.encodeToString(byteArray9);
        boolean boolean11 = base64_1.hasData();
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray14 = new byte[] {};
        base64_13.decode(byteArray14, (int) 'a', (-1));
        byte[] byteArray19 = base64_13.decode("QUdRQkFBPT0");
        base64_1.decode(byteArray19, 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false, true, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Input array too big, the output array would be bigger (14) than the specified maxium size of 1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str10, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[65, 71, 81, 66, 65, 65, 61, 61]");
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test443");
        byte[] byteArray0 = new byte[] {};
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray0, false, false, 10);
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray4);
        java.lang.String str6 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray4);
        boolean boolean7 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, true);
        boolean boolean11 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray10);
        java.lang.String str13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray12);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test444");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(100, byteArray8);
        byte[] byteArray11 = base64_9.decode("");
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, (int) (byte) 0);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test445");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray3 = base64_1.decode("");
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray6 = new byte[] {};
        base64_5.decode(byteArray6, (int) 'a', (-1));
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, true, true, (int) (byte) 100);
        boolean boolean14 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        byte[] byteArray16 = base64_1.encode(byteArray15);
        byte[] byteArray17 = new byte[] {};
        int int20 = base64_1.readResults(byteArray17, 1, (int) '4');
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray23 = new byte[] {};
        base64_22.decode(byteArray23, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, true, true, (int) (byte) 100);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, true, false, 1);
        base64_22.setInitialBuffer(byteArray40, (int) (byte) 10, 100);
        byte[] byteArray45 = new byte[] { (byte) 0 };
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, false, true);
        boolean boolean49 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray48);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, true, false, (int) '#');
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray53);
        byte[] byteArray55 = base64_22.decode(byteArray54);
        byte[] byteArray56 = base64_1.decode(byteArray54);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[65, 65]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[85, 86, 86, 70, 80, 81, 48, 75]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[81, 85, 69, 61, 13, 10]");
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test446");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray23 = new byte[] {};
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false, 10);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.String str30 = base64_1.encodeToString(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_32.decode(byteArray37);
        byte[] byteArray40 = base64_32.decode("");
        byte[] byteArray41 = new byte[] {};
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, false, false, 10);
        byte[] byteArray46 = base64_32.decode(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray46);
        byte[] byteArray48 = base64_1.decode(byteArray46);
        boolean boolean49 = base64_1.hasData();
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64(1);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray54 = new byte[] {};
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54, false, false, 10);
        byte[] byteArray59 = base64_53.decode(byteArray58);
        byte[] byteArray60 = base64_51.encode(byteArray59);
        byte[] byteArray61 = base64_1.encode(byteArray59);
        byte[] byteArray62 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray59);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test447");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(12, byteArray1);
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray8);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, false);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray9, false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj15 = base64_2.decode((java.lang.Object) base64_14);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test448");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) '4');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray9 = base64_3.decode("QUdRQkFBPT0");
        byte[] byteArray11 = null;
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64(10, byteArray11);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false, false);
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        java.lang.Object obj26 = base64_13.encode((java.lang.Object) byteArray25);
        java.lang.Object obj27 = base64_12.encode((java.lang.Object) byteArray25);
        java.lang.Object obj28 = base64_3.encode((java.lang.Object) byteArray25);
        byte[] byteArray29 = base64_1.decode(byteArray25);
        java.lang.Class<?> wildcardClass30 = base64_1.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test449");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.decodeBase64("orgapachecommonscodecDecoderExceptionorgapachecommonscodecDecoderExceptionorgapachecommonscodecEncoderExceptiok");
        byte[] byteArray12 = base64_1.decode(byteArray11);
        int int13 = base64_1.avail();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94, 122, 43, -127, -86, 90, 114, 23, -100, -94, 105, -88, -98, -57, 40, 117, -25, 4, -99, -54, 29, 122, -79, 49, 113, -22, 109, -118, -119]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -70, 123, -114, 60, -85, 47, 54, -13, -7, -102, -30, -69, 61, 106]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test450");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray12 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray12);
        byte[] byteArray17 = base64_3.encode(byteArray12);
        java.lang.Object obj18 = base64_1.encode((java.lang.Object) byteArray12);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, false);
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray27);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray27);
        byte[] byteArray31 = base64_1.encode(byteArray27);
        org.apache.commons.codec.binary.Base64 base64_33 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray34 = new byte[] {};
        base64_33.decode(byteArray34, (int) 'a', (-1));
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, true, true, (int) (byte) 100);
        byte[] byteArray42 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray41);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41);
        base64_1.encode(byteArray41, (int) ' ', (int) (short) 10);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41);
        java.math.BigInteger bigInteger48 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray41);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(bigInteger48);
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test451");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray8, false);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray13 = new byte[] {};
        base64_12.decode(byteArray13, (int) 'a', (-1));
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray13, true, true, (int) (byte) 100);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, true, false, 1);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray20);
        java.lang.Object obj27 = base64_10.decode((java.lang.Object) "THpKUlN5OHlVVDA9DQo=\r\n");
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((int) 'a');
        boolean boolean30 = base64_29.isUrlSafe();
        boolean boolean31 = base64_29.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray35 = new byte[] {};
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, false, false, 10);
        byte[] byteArray40 = base64_34.decode(byteArray39);
        org.apache.commons.codec.binary.Base64 base64_41 = new org.apache.commons.codec.binary.Base64(100, byteArray40);
        int int44 = base64_29.readResults(byteArray40, 1, (int) (byte) 1);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40, false);
        byte[] byteArray50 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray46, true, true, 0);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray46);
        java.math.BigInteger bigInteger52 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray46);
        base64_10.encode(byteArray46, (int) 'a', 0);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(bigInteger52);
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test452");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        boolean boolean26 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray25);
        byte[] byteArray27 = base64_1.encode(byteArray25);
        java.lang.String str28 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray27);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false);
        byte[] byteArray34 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, false, false, (int) (byte) 10);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test453");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray5 = new byte[] {};
        base64_4.decode(byteArray5, (int) 'a', (-1));
        byte[] byteArray10 = base64_4.decode("QUdRQkFBPT0");
        java.lang.String str11 = base64_2.encodeToString(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray14 = new byte[] {};
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false, false, 10);
        byte[] byteArray19 = base64_13.decode(byteArray18);
        byte[] byteArray21 = base64_13.decode("");
        byte[] byteArray22 = new byte[] {};
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, false, false, 10);
        byte[] byteArray27 = base64_13.decode(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray30 = new byte[] {};
        base64_29.decode(byteArray30, (int) 'a', (-1));
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, true, true, (int) (byte) 100);
        boolean boolean38 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray37);
        byte[] byteArray39 = base64_13.encode(byteArray37);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39);
        base64_2.decode(byteArray39, (int) (short) 10, (int) 'a');
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((int) (short) 100, byteArray39);
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray39);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str11, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test454");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray9 = base64_3.decode("QUdRQkFBPT0");
        java.lang.String str10 = base64_1.encodeToString(byteArray9);
        boolean boolean11 = base64_1.hasData();
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray14 = new byte[] {};
        base64_13.decode(byteArray14, (int) 'a', (-1));
        byte[] byteArray19 = base64_13.decode("QUdRQkFBPT0");
        base64_1.decode(byteArray19, 0, (int) (short) 0);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray25 = new byte[] {};
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false, 10);
        byte[] byteArray30 = base64_24.decode(byteArray29);
        byte[] byteArray32 = base64_24.decode("");
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_24.decode(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray41 = new byte[] {};
        base64_40.decode(byteArray41, (int) 'a', (-1));
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, true, true, (int) (byte) 100);
        boolean boolean49 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray48);
        byte[] byteArray50 = base64_24.encode(byteArray48);
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, false);
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52, true, true, (int) '#');
        byte[] byteArray57 = base64_1.decode(byteArray52);
        byte[] byteArray58 = null;
        // The following exception was thrown during execution in test generation
        try {
            base64_1.encode(byteArray58, (int) (byte) 100, 76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str10, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test455");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray23 = new byte[] {};
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false, 10);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.String str30 = base64_1.encodeToString(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_32.decode(byteArray37);
        byte[] byteArray40 = base64_32.decode("");
        byte[] byteArray41 = new byte[] {};
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, false, false, 10);
        byte[] byteArray46 = base64_32.decode(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray46);
        byte[] byteArray48 = base64_1.decode(byteArray46);
        boolean boolean49 = base64_1.hasData();
        byte[] byteArray51 = base64_1.decode("org.apache.commons.codec.DecoderException: ");
        org.apache.commons.codec.DecoderException decoderException55 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.DecoderException decoderException56 = new org.apache.commons.codec.DecoderException("", (java.lang.Throwable) decoderException55);
        java.lang.Throwable[] throwableArray57 = decoderException55.getSuppressed();
        org.apache.commons.codec.DecoderException decoderException59 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.DecoderException decoderException60 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) decoderException59);
        java.lang.Throwable[] throwableArray61 = decoderException59.getSuppressed();
        org.apache.commons.codec.DecoderException decoderException64 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.DecoderException decoderException65 = new org.apache.commons.codec.DecoderException("", (java.lang.Throwable) decoderException64);
        decoderException59.addSuppressed((java.lang.Throwable) decoderException65);
        decoderException55.addSuppressed((java.lang.Throwable) decoderException65);
        org.apache.commons.codec.DecoderException decoderException68 = new org.apache.commons.codec.DecoderException("", (java.lang.Throwable) decoderException55);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj69 = base64_1.encode((java.lang.Object) decoderException55);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray61);
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test456");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray14 = null;
        java.lang.String str15 = base64_0.encodeToString(byteArray14);
        boolean boolean16 = base64_0.hasData();
        boolean boolean17 = base64_0.hasData();
        byte[] byteArray18 = new byte[] {};
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false, 10);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray22);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, false, (int) (short) 0);
        java.lang.Object obj29 = base64_0.decode((java.lang.Object) byteArray24);
        byte[] byteArray30 = null;
        byte[] byteArray31 = base64_0.decode(byteArray30);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNull(byteArray31);
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test457");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray4 = base64_2.decode("");
        org.apache.commons.codec.binary.Base64 base64_6 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray7 = new byte[] {};
        base64_6.decode(byteArray7, (int) 'a', (-1));
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7, true, true, (int) (byte) 100);
        boolean boolean15 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray14);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray14);
        byte[] byteArray17 = base64_2.encode(byteArray16);
        java.lang.String str18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray16);
        org.apache.commons.codec.binary.Base64 base64_21 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray22 = new byte[] {};
        base64_21.decode(byteArray22, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray28 = new byte[] {};
        base64_27.decode(byteArray28, (int) 'a', (-1));
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, true, true, (int) (byte) 100);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray35, true, false, 1);
        base64_21.setInitialBuffer(byteArray39, (int) (byte) 10, 100);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, false, true, 0);
        byte[] byteArray47 = base64_19.decode(byteArray46);
        byte[] byteArray48 = new byte[] {};
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, false, false, 10);
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray52);
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray52);
        byte[] byteArray55 = base64_19.decode(byteArray52);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test458");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        base64_17.decode(byteArray18, (int) 'a', (-1));
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, true, true, (int) (byte) 100);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, true, false, 1);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray25);
        java.lang.String str31 = base64_1.encodeToString(byteArray30);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.CHUNK_SEPARATOR;
        base64_1.decode(byteArray32, 76, (int) (byte) 0);
        byte[] byteArray37 = base64_1.decode("/2QK/2Q=\r\n");
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray37);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[13, 10]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 100, -1, 100]");
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test459");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray9 = base64_3.decode("QUdRQkFBPT0");
        java.lang.String str10 = base64_1.encodeToString(byteArray9);
        boolean boolean11 = base64_1.hasData();
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.decodeBase64("QUdRQkFBPT0");
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray13);
        byte[] byteArray15 = base64_1.encode(byteArray13);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray18 = new byte[] {};
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false, 10);
        byte[] byteArray23 = base64_17.decode(byteArray22);
        int int24 = base64_17.avail();
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray28 = new byte[] {};
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray28, false, false, 10);
        byte[] byteArray33 = base64_27.decode(byteArray32);
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64(100, byteArray33);
        byte[] byteArray35 = base64_17.encode(byteArray33);
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false);
        java.lang.String str38 = base64_1.encodeToString(byteArray37);
        byte[] byteArray39 = null;
        byte[] byteArray40 = base64_1.encode(byteArray39);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str10, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNull(byteArray40);
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test460");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) (byte) 100, byteArray17, false);
        byte[] byteArray20 = new byte[] {};
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray20);
        byte[] byteArray22 = base64_19.decode(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray25 = new byte[] {};
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false, 10);
        byte[] byteArray30 = base64_24.decode(byteArray29);
        byte[] byteArray32 = base64_24.decode("");
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_24.decode(byteArray37);
        byte[] byteArray39 = new byte[] {};
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, false, false, 10);
        byte[] byteArray44 = base64_24.encode(byteArray43);
        java.lang.Object obj45 = base64_19.encode((java.lang.Object) byteArray43);
        org.apache.commons.codec.binary.Base64 base64_47 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray48 = new byte[] {};
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray48, false, false, 10);
        byte[] byteArray53 = base64_47.decode(byteArray52);
        byte[] byteArray55 = base64_47.decode("");
        byte[] byteArray56 = new byte[] {};
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray56, false, false, 10);
        byte[] byteArray61 = base64_47.decode(byteArray60);
        org.apache.commons.codec.binary.Base64 base64_63 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray64 = new byte[] {};
        base64_63.decode(byteArray64, (int) 'a', (-1));
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray64, true, true, (int) (byte) 100);
        byte[] byteArray75 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray71, true, false, 1);
        java.lang.Object obj76 = base64_47.encode((java.lang.Object) byteArray75);
        byte[] byteArray77 = new byte[] {};
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray77, false, false, 10);
        byte[] byteArray82 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray81);
        java.lang.Object obj83 = base64_47.encode((java.lang.Object) byteArray81);
        byte[] byteArray85 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray81, false);
        java.lang.String str86 = base64_19.encodeToString(byteArray81);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test461");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        int int8 = base64_1.avail();
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_11.decode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64(100, byteArray17);
        byte[] byteArray19 = base64_1.encode(byteArray17);
        java.math.BigInteger bigInteger20 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray17);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray17);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray21, true, false, (int) '4');
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(bigInteger20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test462");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray3 = base64_1.decode("");
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray6 = new byte[] {};
        base64_5.decode(byteArray6, (int) 'a', (-1));
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, true, true, (int) (byte) 100);
        boolean boolean14 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray13);
        byte[] byteArray16 = base64_1.encode(byteArray15);
        byte[] byteArray17 = new byte[] {};
        int int20 = base64_1.readResults(byteArray17, 1, (int) '4');
        org.apache.commons.codec.binary.Base64 base64_22 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray23 = new byte[] {};
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false, 10);
        byte[] byteArray28 = base64_22.decode(byteArray27);
        byte[] byteArray30 = base64_22.decode("");
        byte[] byteArray31 = new byte[] {};
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false, 10);
        byte[] byteArray36 = base64_22.decode(byteArray35);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray39 = new byte[] {};
        base64_38.decode(byteArray39, (int) 'a', (-1));
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray39, true, true, (int) (byte) 100);
        boolean boolean47 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray46);
        byte[] byteArray48 = base64_22.encode(byteArray46);
        byte[] byteArray49 = base64_1.decode(byteArray46);
        org.apache.commons.codec.binary.Base64 base64_51 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray52 = new byte[] {};
        byte[] byteArray56 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray52, false, false, 10);
        byte[] byteArray57 = base64_51.decode(byteArray56);
        byte[] byteArray59 = base64_51.decode("");
        byte[] byteArray60 = new byte[] {};
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray60, false, false, 10);
        byte[] byteArray65 = base64_51.decode(byteArray64);
        byte[] byteArray66 = new byte[] {};
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray66, false, false, 10);
        java.lang.String str71 = base64_51.encodeToString(byteArray66);
        boolean boolean72 = base64_51.isUrlSafe();
        byte[] byteArray74 = base64_51.decode("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException");
        java.lang.String str75 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray74);
        java.lang.Object obj76 = base64_1.decode((java.lang.Object) byteArray74);
        byte[] byteArray78 = new byte[] { (byte) 0 };
        byte[] byteArray81 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray78, false, true);
        byte[] byteArray82 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray81);
        boolean boolean83 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray82);
        java.lang.String str84 = base64_1.encodeToString(byteArray82);
        byte[] byteArray86 = base64_1.decode("orgapachecommonscodecDecoderExceptio\r\n");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94, 122, 43, -127, -86, 90, 114, 23, -100, -94, 105, -88, -98, -57, 40, 117, -25, 4, -99, -54, 29, 122, -79, 49, 113, -22, 109, -118, -119]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "orgapachecommonscodecDecoderExceptionorgapachecommonscodecDecoderExceptionorgapachecommonscodecEncoderExceptiok" + "'", str75, "orgapachecommonscodecDecoderExceptionorgapachecommonscodecDecoderExceptionorgapachecommonscodecEncoderExceptiok");
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[0]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "AA==\r\n" + "'", str84, "AA==\r\n");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test463");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray6);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64(0, byteArray11);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: hi!");
        java.math.BigInteger bigInteger15 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray14);
        byte[] byteArray16 = base64_12.encode(byteArray14);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((-1), byteArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: lineSeperator must not contain base64 characters: [?????!y?&???r?^p7??????????]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertNotNull(bigInteger15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 104, 103, 61]");
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test464");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        boolean boolean16 = base64_1.isUrlSafe();
        byte[] byteArray18 = new byte[] {};
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false, 10);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray22);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64(0, byteArray25);
        java.lang.String str27 = base64_1.encodeToString(byteArray25);
        byte[] byteArray29 = new byte[] { (byte) 0 };
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, true);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray32);
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, true);
        int int38 = base64_1.readResults(byteArray32, 0, (int) (short) 100);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray43 = new byte[] {};
        base64_42.decode(byteArray43, (int) 'a', (-1));
        byte[] byteArray51 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray54 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray51, false, false);
        byte[] byteArray55 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray51);
        byte[] byteArray56 = base64_42.encode(byteArray51);
        java.lang.Object obj57 = base64_40.encode((java.lang.Object) byteArray51);
        byte[] byteArray59 = base64_40.decode("LzJRSy8yUT0");
        byte[] byteArray60 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray59);
        java.lang.Object obj61 = base64_1.encode((java.lang.Object) byteArray60);
        org.apache.commons.codec.DecoderException decoderException65 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.DecoderException");
        org.apache.commons.codec.DecoderException decoderException66 = new org.apache.commons.codec.DecoderException("hi!", (java.lang.Throwable) decoderException65);
        org.apache.commons.codec.EncoderException encoderException67 = new org.apache.commons.codec.EncoderException("org.apache.commons.codec.DecoderException", (java.lang.Throwable) decoderException65);
        java.lang.Throwable[] throwableArray68 = decoderException65.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj69 = base64_1.encode((java.lang.Object) decoderException65);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.EncoderException; message: Parameter supplied to Base64 encode is not a byte[]");
        } catch (org.apache.commons.codec.EncoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61]");
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertNotNull(throwableArray68);
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test465");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64((int) (short) 0, byteArray17);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: hi!");
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = base64_18.encode(byteArray20);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: LzJRSy8yUT0");
        base64_18.encode(byteArray24, (int) (byte) 10, (int) (byte) 1);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray31 = new byte[] {};
        byte[] byteArray35 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray31, false, false, 10);
        byte[] byteArray36 = base64_30.decode(byteArray35);
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64(100, byteArray36);
        boolean boolean38 = base64_37.hasData();
        byte[] byteArray40 = base64_37.decode("QUdRQkFBPT0=\r\n");
        byte[] byteArray45 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, false, false);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray48);
        byte[] byteArray50 = base64_37.encode(byteArray49);
        java.lang.Object obj51 = base64_18.decode((java.lang.Object) byteArray50);
        org.apache.commons.codec.binary.Base64 base64_53 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray54 = new byte[] {};
        byte[] byteArray58 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54, false, false, 10);
        byte[] byteArray59 = base64_53.decode(byteArray58);
        byte[] byteArray61 = base64_53.decode("");
        byte[] byteArray62 = new byte[] {};
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray62, false, false, 10);
        byte[] byteArray67 = base64_53.decode(byteArray66);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray66);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray68);
        java.lang.Object obj70 = base64_18.encode((java.lang.Object) byteArray68);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 68, 101, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 104, 103, 61]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -100, -68, -55, 69, 44, -68, -55, 68, -12]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61]");
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(obj70);
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test466");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(100, byteArray8);
        boolean boolean10 = base64_9.hasData();
        org.apache.commons.codec.binary.Base64 base64_13 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray14 = new byte[] {};
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false, false, 10);
        byte[] byteArray19 = base64_13.decode(byteArray18);
        byte[] byteArray21 = base64_13.decode("");
        byte[] byteArray22 = new byte[] {};
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, false, false, 10);
        byte[] byteArray27 = base64_13.decode(byteArray26);
        org.apache.commons.codec.binary.Base64 base64_29 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray30 = new byte[] {};
        base64_29.decode(byteArray30, (int) 'a', (-1));
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray30, true, true, (int) (byte) 100);
        boolean boolean38 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray37);
        byte[] byteArray39 = base64_13.encode(byteArray37);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false);
        org.apache.commons.codec.binary.Base64 base64_42 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray41);
        java.lang.Object obj43 = base64_9.encode((java.lang.Object) byteArray41);
        byte[] byteArray44 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray41);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test467");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        byte[] byteArray11 = base64_3.decode("");
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_3.decode(byteArray16);
        byte[] byteArray18 = new byte[] {};
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false, false, 10);
        byte[] byteArray23 = base64_3.encode(byteArray22);
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64((int) (byte) 1, byteArray23, false);
        org.apache.commons.codec.binary.Base64 base64_26 = new org.apache.commons.codec.binary.Base64(10, byteArray23);
        byte[] byteArray27 = null;
        byte[] byteArray28 = base64_26.decode(byteArray27);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNull(byteArray28);
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test468");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false, true, 0);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, true);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test469");
        byte[] byteArray1 = new byte[] { (byte) 0 };
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, true);
        boolean boolean5 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, true, false, (int) '#');
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[65, 65]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[81, 85, 69, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[81, 85, 69, 61]");
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test470");
        byte[] byteArray1 = null;
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64(10, byteArray1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, false);
        java.math.BigInteger bigInteger13 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger13);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger13);
        java.lang.Object obj16 = base64_3.encode((java.lang.Object) byteArray15);
        java.lang.Object obj17 = base64_2.encode((java.lang.Object) byteArray15);
        byte[] byteArray18 = null;
        base64_2.encode(byteArray18, (-1), 0);
        byte[] byteArray26 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray26, false, false);
        java.math.BigInteger bigInteger30 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray26);
        byte[] byteArray31 = base64_2.decode(byteArray26);
        boolean boolean32 = base64_2.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_34 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray35 = new byte[] {};
        base64_34.decode(byteArray35, (int) 'a', (-1));
        byte[] byteArray40 = base64_34.decode("QUdRQkFBPT0");
        java.math.BigInteger bigInteger41 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray40);
        byte[] byteArray43 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray40, true);
        java.lang.Object obj44 = base64_2.encode((java.lang.Object) byteArray43);
        boolean boolean45 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray43);
        byte[] byteArray46 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray43);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger41);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[85, 86, 86, 107, 85, 108, 70, 114, 82, 107, 74, 81, 86, 68, 65, 57, 68, 81, 111, 61, 13, 10]");
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test471");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray12 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray12);
        byte[] byteArray17 = base64_3.encode(byteArray12);
        java.lang.Object obj18 = base64_1.encode((java.lang.Object) byteArray12);
        byte[] byteArray20 = base64_1.decode("LzJRSy8yUT0");
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray24 = new byte[] {};
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, false, 10);
        byte[] byteArray29 = base64_23.decode(byteArray28);
        org.apache.commons.codec.binary.Base64 base64_30 = new org.apache.commons.codec.binary.Base64(100, byteArray29);
        boolean boolean31 = base64_30.hasData();
        byte[] byteArray33 = base64_30.decode("QUdRQkFBPT0=\r\n");
        byte[] byteArray34 = base64_1.decode(byteArray33);
        boolean boolean35 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray33);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 100, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test472");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, true, true, (int) (byte) 100);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, false, true);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray12);
        java.math.BigInteger bigInteger14 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray12);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(bigInteger14);
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test473");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 100);
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, false, false);
        java.math.BigInteger bigInteger12 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray11);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger12);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger12);
        java.lang.Object obj15 = base64_2.encode((java.lang.Object) byteArray14);
        byte[] byteArray20 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, false, false);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray20);
        base64_2.encode(byteArray24, 0, 10);
        byte[] byteArray29 = new byte[] { (byte) 0 };
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, true);
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray32);
        byte[] byteArray34 = base64_2.decode(byteArray32);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false, true, (int) '4');
        java.math.BigInteger bigInteger39 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray34);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger39);
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger39);
        byte[] byteArray42 = base64_1.encode(byteArray41);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[65, 65]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[65, 65]");
        org.junit.Assert.assertNotNull(bigInteger39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test474");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("hi!");
        byte[] byteArray4 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, false);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-122]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[104, 103, 61, 61]");
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test475");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        byte[] byteArray21 = base64_1.encode(byteArray20);
        org.apache.commons.codec.binary.Base64 base64_23 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray26 = new byte[] {};
        base64_25.decode(byteArray26, (int) 'a', (-1));
        byte[] byteArray31 = base64_25.decode("QUdRQkFBPT0");
        java.lang.String str32 = base64_23.encodeToString(byteArray31);
        boolean boolean33 = base64_23.hasData();
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray36 = new byte[] {};
        base64_35.decode(byteArray36, (int) 'a', (-1));
        byte[] byteArray41 = base64_35.decode("QUdRQkFBPT0");
        base64_23.decode(byteArray41, 0, (int) (short) 0);
        org.apache.commons.codec.binary.Base64 base64_46 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray47 = new byte[] {};
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray47, false, false, 10);
        byte[] byteArray52 = base64_46.decode(byteArray51);
        byte[] byteArray54 = base64_46.decode("");
        byte[] byteArray55 = new byte[] {};
        byte[] byteArray59 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray55, false, false, 10);
        byte[] byteArray60 = base64_46.decode(byteArray59);
        org.apache.commons.codec.binary.Base64 base64_62 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray63 = new byte[] {};
        base64_62.decode(byteArray63, (int) 'a', (-1));
        byte[] byteArray70 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray63, true, true, (int) (byte) 100);
        boolean boolean71 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray70);
        byte[] byteArray72 = base64_46.encode(byteArray70);
        byte[] byteArray74 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray70, false);
        byte[] byteArray78 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray74, true, true, (int) '#');
        byte[] byteArray79 = base64_23.decode(byteArray74);
        base64_1.encode(byteArray74, (int) '#', 0);
        org.apache.commons.codec.binary.Base64 base64_84 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray85 = new byte[] {};
        base64_84.decode(byteArray85, (int) 'a', (-1));
        byte[] byteArray92 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray85, true, true, (int) (byte) 100);
        boolean boolean93 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray92);
        byte[] byteArray95 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray92, false);
        byte[] byteArray96 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray95);
        int int99 = base64_1.readResults(byteArray96, (int) (byte) -1, 0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str32, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[]");
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[]");
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test476");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        base64_3.decode(byteArray4, (int) 'a', (-1));
        byte[] byteArray12 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray12);
        byte[] byteArray17 = base64_3.encode(byteArray12);
        java.lang.Object obj18 = base64_1.encode((java.lang.Object) byteArray12);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray24, false, false);
        java.math.BigInteger bigInteger28 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray27);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray27);
        byte[] byteArray31 = base64_1.encode(byteArray27);
        byte[] byteArray32 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray31);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[65, 71, 81, 66, 65, 65, 61, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[84, 72, 112, 75, 85, 108, 78, 53, 79, 72, 108, 86, 86, 68, 65, 57, 68, 81, 111]");
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test477");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("orgapachecommonscodecEncoderExceptio");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 73, -36, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test478");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        byte[] byteArray9 = null;
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(10, byteArray9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger21);
        java.lang.Object obj24 = base64_11.encode((java.lang.Object) byteArray23);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray23);
        java.lang.Object obj26 = base64_1.encode((java.lang.Object) byteArray23);
        java.lang.String str27 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray23);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "LzJRSy8yUT0" + "'", str27, "LzJRSy8yUT0");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61]");
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test479");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray10 = new byte[] {};
        base64_9.decode(byteArray10, (int) 'a', (-1));
        byte[] byteArray15 = base64_9.decode("QUdRQkFBPT0");
        byte[] byteArray17 = null;
        org.apache.commons.codec.binary.Base64 base64_18 = new org.apache.commons.codec.binary.Base64(10, byteArray17);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false);
        java.math.BigInteger bigInteger29 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray28);
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger29);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger29);
        java.lang.Object obj32 = base64_19.encode((java.lang.Object) byteArray31);
        java.lang.Object obj33 = base64_18.encode((java.lang.Object) byteArray31);
        java.lang.Object obj34 = base64_9.encode((java.lang.Object) byteArray31);
        java.math.BigInteger bigInteger35 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray31);
        byte[] byteArray36 = base64_1.decode(byteArray31);
        byte[] byteArray37 = null;
        base64_1.setInitialBuffer(byteArray37, 12, (int) '#');
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(bigInteger35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 100, 10, -1, 100]");
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test480");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray15);
        java.math.BigInteger bigInteger17 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray16);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray16);
        java.lang.String str19 = org.apache.commons.codec.binary.Base64.encodeBase64String(byteArray18);
        byte[] byteArray21 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray18, false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[117]");
        org.junit.Assert.assertNotNull(bigInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100, 81]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ZFE=\r\n" + "'", str19, "ZFE=\r\n");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[90, 70, 69, 61]");
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test481");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: hi!");
        byte[] byteArray2 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, 24]");
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test482");
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray9, false);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64(76, byteArray9, true);
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray9, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray18);
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray18);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test483");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88, -98, -118, -32, 106, -106, -100, -123, -25, 40, -102, 106, 39, -79, -54, 29, 121, -64, -34, 114, -121, 94, -84, 76, 92, 122, -101, 98, -94]");
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test484");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) -1);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray4 = new byte[] {};
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false, 10);
        byte[] byteArray9 = base64_3.decode(byteArray8);
        byte[] byteArray11 = base64_3.decode("");
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray16 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray12, false, false, 10);
        byte[] byteArray17 = base64_3.decode(byteArray16);
        org.apache.commons.codec.binary.Base64 base64_19 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray20 = new byte[] {};
        base64_19.decode(byteArray20, (int) 'a', (-1));
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray20, true, true, (int) (byte) 100);
        byte[] byteArray31 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, true, false, 1);
        java.lang.Object obj32 = base64_3.encode((java.lang.Object) byteArray31);
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray37);
        java.lang.Object obj39 = base64_3.encode((java.lang.Object) byteArray37);
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        java.lang.Object obj41 = base64_1.decode((java.lang.Object) byteArray40);
        boolean boolean42 = base64_1.hasData();
        byte[] byteArray44 = base64_1.decode("orgapachecommonscodecDecoderExceptio\r\n");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 55, -100, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test485");
        org.apache.commons.codec.binary.Base64 base64_0 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false);
        java.math.BigInteger bigInteger10 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger10);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger10);
        java.lang.Object obj13 = base64_0.encode((java.lang.Object) byteArray12);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray19, false, false);
        java.math.BigInteger bigInteger23 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger23);
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray26 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger23);
        java.lang.Object obj29 = base64_0.decode((java.lang.Object) byteArray28);
        byte[] byteArray34 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray34, false, false);
        java.lang.String str38 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray37);
        byte[] byteArray39 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray37);
        byte[] byteArray40 = base64_0.encode(byteArray37);
        byte[] byteArray41 = null;
        byte[] byteArray42 = base64_0.decode(byteArray41);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "QUdRQkFBPT0" + "'", str38, "QUdRQkFBPT0");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61]");
        org.junit.Assert.assertNull(byteArray42);
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test486");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        byte[] byteArray9 = null;
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(10, byteArray9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger21);
        java.lang.Object obj24 = base64_11.encode((java.lang.Object) byteArray23);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray23);
        java.lang.Object obj26 = base64_1.encode((java.lang.Object) byteArray23);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        base64_28.decode(byteArray29, (int) 'a', (-1));
        byte[] byteArray34 = base64_28.decode("QUdRQkFBPT0");
        base64_1.encode(byteArray34, 10, 10);
        byte[] byteArray38 = null;
        base64_1.setInitialBuffer(byteArray38, (int) (short) -1, (int) (short) 1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[65, 71, 81, 66, 65, 65, 61, 61]");
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test487");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray2, false, false, 10);
        byte[] byteArray7 = base64_1.decode(byteArray6);
        byte[] byteArray9 = base64_1.decode("");
        byte[] byteArray10 = new byte[] {};
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, false, false, 10);
        byte[] byteArray15 = base64_1.decode(byteArray14);
        byte[] byteArray16 = new byte[] {};
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray16, false, false, 10);
        java.lang.String str21 = base64_1.encodeToString(byteArray16);
        boolean boolean22 = base64_1.isUrlSafe();
        boolean boolean23 = base64_1.isUrlSafe();
        org.apache.commons.codec.binary.Base64 base64_25 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray28 = new byte[] {};
        base64_27.decode(byteArray28, (int) 'a', (-1));
        byte[] byteArray33 = base64_27.decode("QUdRQkFBPT0");
        java.lang.String str34 = base64_25.encodeToString(byteArray33);
        boolean boolean35 = base64_25.hasData();
        org.apache.commons.codec.binary.Base64 base64_37 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray38 = new byte[] {};
        base64_37.decode(byteArray38, (int) 'a', (-1));
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray38, true, true, (int) (byte) 100);
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, false, true);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray48);
        base64_25.decode(byteArray48, 0, (int) (short) 1);
        base64_1.decode(byteArray48, 0, (-1));
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "QUdRQkFBPT0=\r\n" + "'", str34, "QUdRQkFBPT0=\r\n");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test488");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        byte[] byteArray7 = base64_1.decode("QUdRQkFBPT0");
        byte[] byteArray9 = null;
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64(10, byteArray9);
        org.apache.commons.codec.binary.Base64 base64_11 = new org.apache.commons.codec.binary.Base64();
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray20 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray17, false, false);
        java.math.BigInteger bigInteger21 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray20);
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger21);
        byte[] byteArray23 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger21);
        java.lang.Object obj24 = base64_11.encode((java.lang.Object) byteArray23);
        java.lang.Object obj25 = base64_10.encode((java.lang.Object) byteArray23);
        java.lang.Object obj26 = base64_1.encode((java.lang.Object) byteArray23);
        byte[] byteArray28 = base64_1.decode("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.binary.Base64 base64_31 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray32 = new byte[] {};
        byte[] byteArray36 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray32, false, false, 10);
        byte[] byteArray37 = base64_31.decode(byteArray36);
        org.apache.commons.codec.binary.Base64 base64_38 = new org.apache.commons.codec.binary.Base64(100, byteArray37);
        boolean boolean39 = base64_38.hasData();
        byte[] byteArray41 = base64_38.decode("QUdRQkFBPT0=\r\n");
        byte[] byteArray43 = base64_38.decode("org.apache.commons.codec.EncoderException: QUE");
        byte[] byteArray44 = base64_1.encode(byteArray43);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 73, -36, -95, -41, -85, 19, 23, 30, -90, -40, -88]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-94, -72, 26, -91, -89, 33, 121, -54, 38, -102, -119, -20, 114, -121, 94, 112, 73, -36, -95, -41, -85, 19, 23, 30, -90, -40, -88, -99, 5, 4]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[111, 114, 103, 97, 112, 97, 99, 104, 101, 99, 111, 109, 109, 111, 110, 115, 99, 111, 100, 101, 99, 69, 110, 99, 111, 100, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 81, 85, 69, 13, 10]");
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test489");
        byte[] byteArray4 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray4, false, false);
        java.math.BigInteger bigInteger8 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray4);
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray4);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray9);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(bigInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test490");
        byte[] byteArray1 = new byte[] {};
        byte[] byteArray5 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray1, false, false, 10);
        byte[] byteArray6 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray5);
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray5);
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray7);
        org.apache.commons.codec.binary.Base64 base64_9 = new org.apache.commons.codec.binary.Base64(0, byteArray8);
        boolean boolean10 = base64_9.hasData();
        boolean boolean11 = base64_9.hasData();
        byte[] byteArray12 = null;
        // The following exception was thrown during execution in test generation
        try {
            base64_9.decode(byteArray12, (int) (byte) -1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test491");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 0);
        org.apache.commons.codec.DecoderException decoderException4 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.DecoderException decoderException5 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) decoderException4);
        java.lang.Throwable[] throwableArray6 = decoderException4.getSuppressed();
        org.apache.commons.codec.DecoderException decoderException9 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.DecoderException decoderException10 = new org.apache.commons.codec.DecoderException("", (java.lang.Throwable) decoderException9);
        decoderException4.addSuppressed((java.lang.Throwable) decoderException10);
        org.apache.commons.codec.DecoderException decoderException14 = new org.apache.commons.codec.DecoderException("");
        org.apache.commons.codec.DecoderException decoderException15 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) decoderException14);
        org.apache.commons.codec.DecoderException decoderException16 = new org.apache.commons.codec.DecoderException("AGQBAA==\r\n", (java.lang.Throwable) decoderException15);
        decoderException4.addSuppressed((java.lang.Throwable) decoderException15);
        org.apache.commons.codec.EncoderException encoderException18 = new org.apache.commons.codec.EncoderException((java.lang.Throwable) decoderException15);
        org.apache.commons.codec.DecoderException decoderException19 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.DecoderException: org.apache.commons.codec.EncoderException", (java.lang.Throwable) encoderException18);
        org.apache.commons.codec.DecoderException decoderException21 = new org.apache.commons.codec.DecoderException("org.apache.commons.codec.EncoderException");
        org.apache.commons.codec.EncoderException encoderException22 = new org.apache.commons.codec.EncoderException((java.lang.Throwable) decoderException21);
        org.apache.commons.codec.DecoderException decoderException23 = new org.apache.commons.codec.DecoderException((java.lang.Throwable) encoderException22);
        encoderException18.addSuppressed((java.lang.Throwable) decoderException23);
        org.apache.commons.codec.EncoderException encoderException25 = new org.apache.commons.codec.EncoderException((java.lang.Throwable) encoderException18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj26 = base64_1.decode((java.lang.Object) encoderException18);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.codec.DecoderException; message: Parameter supplied to Base64 decode is not a byte[] or a String");
        } catch (org.apache.commons.codec.DecoderException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray6);
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test492");
        org.apache.commons.codec.binary.Base64 base64_2 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray3 = new byte[] {};
        byte[] byteArray7 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray3, false, false, 10);
        byte[] byteArray8 = base64_2.decode(byteArray7);
        byte[] byteArray10 = base64_2.decode("");
        byte[] byteArray11 = new byte[] {};
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray11, false, false, 10);
        byte[] byteArray16 = base64_2.decode(byteArray15);
        org.apache.commons.codec.binary.Base64 base64_17 = new org.apache.commons.codec.binary.Base64((int) (byte) 0, byteArray15);
        byte[] byteArray22 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray25 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray22, false, false);
        java.lang.String str26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray25);
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray25);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray27);
        java.lang.Object obj29 = base64_17.decode((java.lang.Object) byteArray28);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "QUdRQkFBPT0" + "'", str26, "QUdRQkFBPT0");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[81, 85, 100, 82, 81, 107, 70, 66, 80, 84, 48, 61, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[85, 86, 86, 107, 85, 108, 70, 114, 82, 107, 74, 81, 86, 68, 65, 57, 68, 81, 111, 61, 13, 10]");
        org.junit.Assert.assertNotNull(obj29);
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test493");
        byte[] byteArray1 = org.apache.commons.codec.binary.Base64.decodeBase64("AGQBAA");
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 100, 1, 0]");
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test494");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray8 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false);
        java.math.BigInteger bigInteger9 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray8);
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        byte[] byteArray11 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray12 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger9);
        byte[] byteArray14 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger9);
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray14);
        byte[] byteArray17 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[76, 122, 74, 82, 83, 121, 56, 121, 85, 84, 48, 61]");
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test495");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (byte) 100);
        byte[] byteArray2 = null;
        byte[] byteArray3 = base64_1.decode(byteArray2);
        byte[] byteArray4 = null;
        base64_1.encode(byteArray4, 0, (int) (short) 0);
        org.apache.commons.codec.binary.Base64 base64_10 = new org.apache.commons.codec.binary.Base64((int) ' ');
        byte[] byteArray12 = base64_10.decode("");
        org.apache.commons.codec.binary.Base64 base64_14 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray15 = new byte[] {};
        base64_14.decode(byteArray15, (int) 'a', (-1));
        byte[] byteArray22 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, true, (int) (byte) 100);
        boolean boolean23 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray22);
        byte[] byteArray24 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray22);
        byte[] byteArray25 = base64_10.encode(byteArray24);
        java.lang.String str26 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray24);
        org.apache.commons.codec.binary.Base64 base64_27 = new org.apache.commons.codec.binary.Base64((int) (byte) -1, byteArray24);
        byte[] byteArray28 = base64_1.decode(byteArray24);
        byte[] byteArray29 = null;
        java.lang.String str30 = base64_1.encodeToString(byteArray29);
        org.junit.Assert.assertNull(byteArray3);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test496");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean1 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test497");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) (short) 0);
        org.apache.commons.codec.binary.Base64 base64_3 = new org.apache.commons.codec.binary.Base64((int) ' ');
        org.apache.commons.codec.binary.Base64 base64_5 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray6 = new byte[] {};
        byte[] byteArray10 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray6, false, false, 10);
        byte[] byteArray11 = base64_5.decode(byteArray10);
        byte[] byteArray13 = base64_5.decode("");
        byte[] byteArray14 = new byte[] {};
        byte[] byteArray18 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray14, false, false, 10);
        byte[] byteArray19 = base64_5.decode(byteArray18);
        base64_3.setInitialBuffer(byteArray19, 1, 0);
        java.lang.String str23 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byteArray19);
        base64_1.setInitialBuffer(byteArray19, (int) 'a', (int) (short) 10);
        org.apache.commons.codec.binary.Base64 base64_28 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray29 = new byte[] {};
        byte[] byteArray33 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray29, false, false, 10);
        byte[] byteArray34 = base64_28.decode(byteArray33);
        byte[] byteArray36 = base64_28.decode("");
        byte[] byteArray37 = new byte[] {};
        byte[] byteArray41 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray37, false, false, 10);
        byte[] byteArray42 = base64_28.decode(byteArray41);
        org.apache.commons.codec.binary.Base64 base64_44 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray45 = new byte[] {};
        base64_44.decode(byteArray45, (int) 'a', (-1));
        byte[] byteArray52 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray45, true, true, (int) (byte) 100);
        boolean boolean53 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray52);
        byte[] byteArray54 = base64_28.encode(byteArray52);
        byte[] byteArray55 = base64_1.decode(byteArray54);
        boolean boolean56 = base64_1.isUrlSafe();
        int int57 = base64_1.avail();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test498");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray23 = new byte[] {};
        byte[] byteArray27 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray23, false, false, 10);
        byte[] byteArray28 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray27);
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray27);
        java.lang.String str30 = base64_1.encodeToString(byteArray29);
        org.apache.commons.codec.binary.Base64 base64_32 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_32.decode(byteArray37);
        byte[] byteArray40 = base64_32.decode("");
        byte[] byteArray41 = new byte[] {};
        byte[] byteArray45 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, false, false, 10);
        byte[] byteArray46 = base64_32.decode(byteArray45);
        byte[] byteArray47 = org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byteArray46);
        byte[] byteArray48 = base64_1.decode(byteArray46);
        byte[] byteArray49 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray46);
        boolean boolean50 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray46);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test499");
        org.apache.commons.codec.binary.Base64 base64_4 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray5 = new byte[] {};
        byte[] byteArray9 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray5, false, false, 10);
        byte[] byteArray10 = base64_4.decode(byteArray9);
        org.apache.commons.codec.binary.Base64 base64_12 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray10, false);
        byte[] byteArray13 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray10);
        org.apache.commons.codec.binary.Base64 base64_15 = new org.apache.commons.codec.binary.Base64(76, byteArray10, true);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray10, true, true, (int) (byte) 100);
        org.apache.commons.codec.binary.Base64 base64_20 = new org.apache.commons.codec.binary.Base64((-1), byteArray19);
        java.lang.Object obj22 = base64_20.decode((java.lang.Object) "org.apache.commons.codec.DecoderException: org.apache.commons.codec.DecoderException: ");
        org.apache.commons.codec.binary.Base64 base64_24 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray25 = new byte[] {};
        byte[] byteArray29 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray25, false, false, 10);
        byte[] byteArray30 = base64_24.decode(byteArray29);
        byte[] byteArray32 = base64_24.decode("");
        byte[] byteArray33 = new byte[] {};
        byte[] byteArray37 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray33, false, false, 10);
        byte[] byteArray38 = base64_24.decode(byteArray37);
        org.apache.commons.codec.binary.Base64 base64_40 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray41 = new byte[] {};
        base64_40.decode(byteArray41, (int) 'a', (-1));
        byte[] byteArray48 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray41, true, true, (int) (byte) 100);
        boolean boolean49 = org.apache.commons.codec.binary.Base64.isArrayByteBase64(byteArray48);
        byte[] byteArray50 = base64_24.encode(byteArray48);
        byte[] byteArray51 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray50);
        byte[] byteArray52 = base64_20.decode(byteArray51);
        byte[] byteArray58 = new byte[] { (byte) -1, (byte) 100, (byte) 10, (byte) -1, (byte) 100 };
        byte[] byteArray61 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray58, false, false);
        java.math.BigInteger bigInteger62 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray61);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger62);
        byte[] byteArray64 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger62);
        byte[] byteArray65 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger62);
        byte[] byteArray66 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger62);
        byte[] byteArray67 = org.apache.commons.codec.binary.Base64.encodeInteger(bigInteger62);
        byte[] byteArray68 = org.apache.commons.codec.binary.Base64.toIntegerBytes(bigInteger62);
        byte[] byteArray69 = org.apache.commons.codec.binary.Base64.decodeBase64(byteArray68);
        java.math.BigInteger bigInteger70 = org.apache.commons.codec.binary.Base64.decodeInteger(byteArray69);
        byte[] byteArray71 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray69);
        int int74 = base64_20.readResults(byteArray69, 0, 10);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(bigInteger62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[47, 50, 81, 75, 47, 50, 81, 61]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1, 100, 10, -1, 100]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[117]");
        org.junit.Assert.assertNotNull(bigInteger70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[100, 81]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test500");
        org.apache.commons.codec.binary.Base64 base64_1 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray2 = new byte[] {};
        base64_1.decode(byteArray2, (int) 'a', (-1));
        org.apache.commons.codec.binary.Base64 base64_7 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray8 = new byte[] {};
        base64_7.decode(byteArray8, (int) 'a', (-1));
        byte[] byteArray15 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray8, true, true, (int) (byte) 100);
        byte[] byteArray19 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray15, true, false, 1);
        base64_1.setInitialBuffer(byteArray19, (int) (byte) 10, 100);
        byte[] byteArray27 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray30 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray27, false, false);
        base64_1.setInitialBuffer(byteArray27, 100, 1);
        org.apache.commons.codec.binary.Base64 base64_35 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray36 = new byte[] {};
        byte[] byteArray40 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray36, false, false, 10);
        byte[] byteArray41 = base64_35.decode(byteArray40);
        base64_1.encode(byteArray41, (-1), 76);
        org.apache.commons.codec.binary.Base64 base64_48 = new org.apache.commons.codec.binary.Base64((int) 'a');
        byte[] byteArray49 = new byte[] {};
        byte[] byteArray53 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray49, false, false, 10);
        byte[] byteArray54 = base64_48.decode(byteArray53);
        org.apache.commons.codec.binary.Base64 base64_56 = new org.apache.commons.codec.binary.Base64((int) 'a', byteArray54, false);
        byte[] byteArray57 = org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byteArray54);
        org.apache.commons.codec.binary.Base64 base64_59 = new org.apache.commons.codec.binary.Base64(76, byteArray54, true);
        byte[] byteArray63 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray54, true, true, (int) (byte) 100);
        byte[] byteArray64 = base64_1.encode(byteArray54);
        byte[] byteArray69 = new byte[] { (byte) 0, (byte) 100, (byte) 1, (byte) 0 };
        byte[] byteArray72 = org.apache.commons.codec.binary.Base64.encodeBase64(byteArray69, false, false);
        byte[] byteArray73 = org.apache.commons.codec.binary.Base64.discardWhitespace(byteArray72);
        // The following exception was thrown during execution in test generation
        try {
            base64_1.encode(byteArray72, (int) (short) 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[0, 100, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[65, 71, 81, 66, 65, 65, 61, 61]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[65, 71, 81, 66, 65, 65, 61, 61]");
    }
}

