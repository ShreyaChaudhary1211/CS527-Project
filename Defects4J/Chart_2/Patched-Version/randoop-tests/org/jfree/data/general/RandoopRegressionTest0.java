package org.jfree.data.general;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RandoopRegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0001");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset0, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0002");
        org.jfree.data.xy.XYDataset xYDataset0 = null;
        java.util.List list1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range3 = org.jfree.data.general.DatasetUtilities.findDomainBounds(xYDataset0, list1, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0003");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset2 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0004");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset2 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0005");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number1 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(categoryDataset0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0006");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        boolean boolean1 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0007");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset0, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0008");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range1 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0009");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset2 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0010");
        org.jfree.data.xy.XYDataset xYDataset0 = null;
        boolean boolean1 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(xYDataset0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0011");
        org.jfree.data.xy.XYDataset xYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number1 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue(xYDataset0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0012");
        org.jfree.data.xy.XYDataset xYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range1 = org.jfree.data.general.DatasetUtilities.findRangeBounds(xYDataset0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0013");
        org.jfree.data.xy.XYDataset xYDataset0 = null;
        java.util.List list1 = null;
        org.jfree.data.Range range2 = null;
        org.jfree.data.Range range4 = org.jfree.data.Range.expandToInclude(range2, (double) 100);
        double double6 = range4.constrain((double) '4');
        double double7 = range4.getLength();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range9 = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(xYDataset0, list1, range4, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0014");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range1 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0015");
        org.jfree.data.function.Function2D function2D0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYDataset xYDataset5 = org.jfree.data.general.DatasetUtilities.sampleFunction2D(function2D0, (double) 1, (double) (short) 10, 0, (java.lang.Comparable) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'f' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0016");
        org.jfree.data.xy.XYDataset xYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range1 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds(xYDataset0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0017");
        org.jfree.data.xy.XYDataset xYDataset0 = null;
        java.util.List list1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range3 = org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds(xYDataset0, list1, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0018");
        org.jfree.data.xy.XYDataset xYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number1 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(xYDataset0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0019");
        org.jfree.data.xy.TableXYDataset tableXYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(tableXYDataset0, (double) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0020");
        org.jfree.data.xy.XYDataset xYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range1 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds(xYDataset0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0021");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset2 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0022");
        org.jfree.data.xy.XYDataset xYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(xYDataset0, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0023");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0024");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset2 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0025");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        java.util.List list1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range3 = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, list1, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0026");
        org.jfree.data.xy.XYDataset xYDataset0 = null;
        java.util.List list1 = null;
        org.jfree.data.Range range2 = null;
        org.jfree.data.Range range4 = org.jfree.data.Range.expandToInclude(range2, (double) 100);
        double double6 = range4.constrain((double) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range8 = org.jfree.data.general.DatasetUtilities.findRangeBounds(xYDataset0, list1, range4, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0027");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem7 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset8 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (java.lang.Comparable) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0028");
        org.jfree.data.function.Function2D function2D0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYSeries xYSeries5 = org.jfree.data.general.DatasetUtilities.sampleFunction2DToSeries(function2D0, (double) (short) 100, 0.0d, 0, (java.lang.Comparable) 10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'f' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0029");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number1 = org.jfree.data.general.DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0030");
        org.jfree.data.xy.XYDataset xYDataset0 = null;
        java.util.List list1 = null;
        org.jfree.data.Range range2 = null;
        org.jfree.data.Range range4 = org.jfree.data.Range.expandToInclude(range2, (double) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range6 = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(xYDataset0, list1, range2, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(range4);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0031");
        org.jfree.data.xy.XYDataset xYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds(xYDataset0, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0032");
        org.jfree.data.pie.PieDataset pieDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset3 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (java.lang.Comparable) 0L, (double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0033");
        org.jfree.data.xy.XYDataset xYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range1 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(xYDataset0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0034");
        org.jfree.data.xy.XYDataset xYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findDomainBounds(xYDataset0, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0035");
        org.jfree.data.pie.PieDataset pieDataset0 = null;
        boolean boolean1 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(pieDataset0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0036");
        org.jfree.data.xy.XYDataset xYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number1 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue(xYDataset0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0037");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset0, (double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0038");
        org.jfree.data.xy.XYDataset xYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range1 = org.jfree.data.general.DatasetUtilities.findDomainBounds(xYDataset0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0039");
        org.jfree.data.pie.PieDataset pieDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset3 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (java.lang.Comparable) "hi!", (double) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0040");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        java.util.List list1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range3 = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, list1, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0041");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number1 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0042");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        org.jfree.data.KeyedValues keyedValues7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.category.CategoryDataset categoryDataset8 = org.jfree.data.general.DatasetUtilities.createCategoryDataset((java.lang.Comparable) (short) 100, keyedValues7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'rowData' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0043");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range1 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0044");
        org.jfree.data.xy.XYDataset xYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number1 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(xYDataset0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0045");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset21, (java.lang.Comparable) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0046");
        org.jfree.data.KeyedValues keyedValues1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.category.CategoryDataset categoryDataset2 = org.jfree.data.general.DatasetUtilities.createCategoryDataset((java.lang.Comparable) (short) 0, keyedValues1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'rowData' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0047");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset0, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0048");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable24 = categoryDataset21.getRowKey((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0049");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds(categoryDataset0, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0050");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset2 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset0, (java.lang.Comparable) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0051");
        org.jfree.data.xy.TableXYDataset tableXYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(tableXYDataset0, (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0052");
        java.lang.Comparable comparable0 = null;
        org.jfree.data.KeyedValues keyedValues1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.category.CategoryDataset categoryDataset2 = org.jfree.data.general.DatasetUtilities.createCategoryDataset(comparable0, keyedValues1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'rowKey' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0053");
        java.lang.Number[] numberArray6 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray22 = new java.lang.Number[][] { numberArray6, numberArray9, numberArray12, numberArray15, numberArray18, numberArray21 };
        org.jfree.data.category.CategoryDataset categoryDataset23 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray22);
        org.jfree.data.category.CategoryDataset categoryDataset24 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray22);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem31 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int33 = xYIntervalDataItem31.compareTo((java.lang.Object) 1.0f);
        double double34 = xYIntervalDataItem31.getXHighValue();
        org.jfree.data.Range range35 = null;
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range35, (double) 100);
        double double39 = range37.constrain((double) '4');
        boolean boolean40 = xYIntervalDataItem31.equals((java.lang.Object) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number42 = categoryDataset24.getValue((java.lang.Comparable) '4', (java.lang.Comparable) 100.0d);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.UnknownKeyException; message: Row key (4) not recognised.");
        } catch (org.jfree.data.UnknownKeyException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray6);
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(categoryDataset23);
        org.junit.Assert.assertNotNull(categoryDataset24);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0054");
        org.jfree.data.xy.XYDataset xYDataset0 = null;
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset22, (double) (short) -1);
        java.util.List list26 = categoryDataset22.getRowKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds(xYDataset0, list26, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(list26);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0055");
        org.jfree.data.KeyedValues keyedValues1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.category.CategoryDataset categoryDataset2 = org.jfree.data.general.DatasetUtilities.createCategoryDataset((java.lang.Comparable) 32, keyedValues1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'rowData' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0056");
        org.jfree.data.pie.PieDataset pieDataset0 = null;
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem7 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int9 = xYIntervalDataItem7.compareTo((java.lang.Object) 1.0f);
        double double10 = xYIntervalDataItem7.getXHighValue();
        org.jfree.data.Range range11 = null;
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 100);
        double double15 = range13.constrain((double) '4');
        boolean boolean16 = xYIntervalDataItem7.equals((java.lang.Object) '4');
        org.jfree.data.Range range17 = null;
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range17, (double) 100);
        double double21 = range19.constrain((double) '4');
        int int22 = xYIntervalDataItem7.compareTo((java.lang.Object) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset24 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (java.lang.Comparable) '4', (double) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0057");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset2 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (java.lang.Comparable) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0058");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        int int26 = categoryDataset21.getColumnIndex((java.lang.Comparable) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable28 = categoryDataset21.getColumnKey((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0059");
        org.jfree.data.xy.TableXYDataset tableXYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double2 = org.jfree.data.general.DatasetUtilities.calculateStackTotal(tableXYDataset0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0060");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, list23, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0061");
        org.jfree.data.function.Function2D function2D0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYDataset xYDataset5 = org.jfree.data.general.DatasetUtilities.sampleFunction2D(function2D0, (double) 10L, (double) 10, (int) (short) -1, (java.lang.Comparable) (-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'f' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0062");
        org.jfree.data.xy.TableXYDataset tableXYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range1 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(tableXYDataset0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0063");
        org.jfree.data.xy.XYDataset xYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds(xYDataset0, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0064");
        org.jfree.data.xy.XYDataset xYDataset0 = null;
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset22, (double) (short) -1);
        java.util.List list26 = categoryDataset22.getRowKeys();
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray46 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray47 = new java.lang.Number[][] { numberArray31, numberArray34, numberArray37, numberArray40, numberArray43, numberArray46 };
        org.jfree.data.category.CategoryDataset categoryDataset48 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray47);
        org.jfree.data.Range range50 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset48, true);
        org.jfree.data.Range range52 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset48, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range54 = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(xYDataset0, list26, range52, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray46);
        org.junit.Assert.assertNotNull(numberArray47);
        org.junit.Assert.assertNotNull(categoryDataset48);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertNotNull(range52);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0065");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset26 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0066");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        double double25 = range24.getUpperBound();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 32.0d + "'", double25 == 32.0d);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0067");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range23 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        org.jfree.data.Range range26 = org.jfree.data.Range.expand(range23, (double) 0.0f, (double) (short) 10);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range26);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0068");
        org.jfree.data.xy.TableXYDataset tableXYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double2 = org.jfree.data.general.DatasetUtilities.calculateStackTotal(tableXYDataset0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0069");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        java.util.List list48 = categoryDataset46.getColumnKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number51 = categoryDataset46.getValue((java.lang.Comparable) (byte) 1, (java.lang.Comparable) 10L);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.UnknownKeyException; message: Row key (1) not recognised.");
        } catch (org.jfree.data.UnknownKeyException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(list48);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0070");
        org.jfree.data.xy.TableXYDataset tableXYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(tableXYDataset0, (double) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0071");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        java.lang.Number[] numberArray6 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray22 = new java.lang.Number[][] { numberArray6, numberArray9, numberArray12, numberArray15, numberArray18, numberArray21 };
        org.jfree.data.category.CategoryDataset categoryDataset23 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray22);
        java.util.List list24 = categoryDataset23.getRowKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, list24, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNotNull(numberArray6);
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(categoryDataset23);
        org.junit.Assert.assertNotNull(list24);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0072");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = xYIntervalSeriesCollection0.getXValue(10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0073");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener25 = null;
        categoryDataset21.removeChangeListener(datasetChangeListener25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number29 = categoryDataset21.getValue((int) (byte) 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0074");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        java.lang.Number[] numberArray6 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray22 = new java.lang.Number[][] { numberArray6, numberArray9, numberArray12, numberArray15, numberArray18, numberArray21 };
        org.jfree.data.category.CategoryDataset categoryDataset23 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray22);
        java.util.List list24 = categoryDataset23.getRowKeys();
        org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset23, (double) (short) -1);
        java.util.List list27 = categoryDataset23.getRowKeys();
        org.jfree.data.Range range28 = null;
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range28, (double) 100);
        double double32 = range30.constrain((double) '4');
        double double33 = range30.getLength();
        org.jfree.data.Range range34 = null;
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range34, (double) 100);
        double double38 = range36.constrain((double) '4');
        boolean boolean39 = range30.intersects(range36);
        double double40 = range30.getUpperBound();
        java.lang.Object obj41 = null;
        boolean boolean42 = range30.equals(obj41);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range44 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, list27, range30, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNotNull(numberArray6);
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(categoryDataset23);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0075");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        java.lang.Object obj14 = xYIntervalDataItem10.clone();
        boolean boolean16 = xYIntervalDataItem10.equals((java.lang.Object) 0);
        int int17 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = xYIntervalSeriesCollection0.getStartXValue((int) (byte) 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0076");
        org.jfree.data.ComparableObjectSeries comparableObjectSeries1 = new org.jfree.data.ComparableObjectSeries((java.lang.Comparable) (-1.0d));
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection2 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range4 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection2, true);
        java.lang.Object obj5 = xYIntervalSeriesCollection2.clone();
        // The following exception was thrown during execution in test generation
        try {
            comparableObjectSeries1.removeChangeListener((org.jfree.data.event.SeriesChangeListener) xYIntervalSeriesCollection2);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Listener org.jfree.data.xy.XYIntervalSeriesCollection@634cfb63 is not of type class org.jfree.data.xy.XYIntervalSeries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range4);
        org.junit.Assert.assertNotNull(obj5);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0077");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable9 = xYIntervalSeriesCollection0.getSeriesKey((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0078");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range23 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, 0.0d);
        java.util.List list26 = categoryDataset21.getRowKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable28 = categoryDataset21.getRowKey((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(list26);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0079");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21, true);
        org.jfree.data.Range range29 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (byte) 0);
        org.jfree.data.Range range30 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset21);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset32 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset21, (java.lang.Comparable) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range30);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0080");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = xYIntervalSeriesCollection0.getYValue((int) (short) -1, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0081");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.Range range5 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = xYIntervalSeriesCollection0.getStartXValue(0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNull(range5);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0082");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number10 = xYIntervalSeriesCollection0.getEndY(32, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0083");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener25 = null;
        categoryDataset21.removeChangeListener(datasetChangeListener25);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset28 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, (java.lang.Comparable) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0084");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem7 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int9 = xYIntervalDataItem7.compareTo((java.lang.Object) 1.0f);
        double double10 = xYIntervalDataItem7.getXHighValue();
        org.jfree.data.Range range11 = null;
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 100);
        double double15 = range13.constrain((double) '4');
        boolean boolean16 = xYIntervalDataItem7.equals((java.lang.Object) '4');
        java.lang.Comparable[] comparableArray20 = new java.lang.Comparable[] { 100.0d, '4', 0.0d, (-1), ' ' };
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem30 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        java.lang.Comparable[] comparableArray33 = new java.lang.Comparable[] { 1L, 2147483647, (byte) 1, (short) 1, (-1), (byte) 0 };
        double[] doubleArray39 = new double[] { 1.0d, (byte) -1, 1.0d };
        double[][] doubleArray40 = new double[][] { doubleArray39 };
        org.jfree.data.category.CategoryDataset categoryDataset41 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "", doubleArray40);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.category.CategoryDataset categoryDataset42 = org.jfree.data.general.DatasetUtilities.createCategoryDataset(comparableArray20, comparableArray33, doubleArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The number of row keys does not match the number of rows in the data array.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(comparableArray20);
        org.junit.Assert.assertNotNull(comparableArray33);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(categoryDataset41);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0085");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = xYIntervalSeriesCollection0.getEndXValue((int) (short) 1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0086");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range23 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, 0.0d);
        java.util.List list26 = categoryDataset21.getRowKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset28 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset21, (java.lang.Comparable) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(list26);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0087");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = xYIntervalSeriesCollection0.getEndYValue(10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0088");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable13 = xYIntervalSeriesCollection0.getSeriesKey(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0089");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener34 = null;
        categoryDataset22.addChangeListener(datasetChangeListener34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable37 = categoryDataset22.getColumnKey(32);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(range33);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0090");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        java.lang.Object obj14 = xYIntervalDataItem10.clone();
        boolean boolean16 = xYIntervalDataItem10.equals((java.lang.Object) 0);
        int int17 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        org.jfree.data.DomainOrder domainOrder18 = xYIntervalSeriesCollection0.getDomainOrder();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number21 = xYIntervalSeriesCollection0.getX(0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(domainOrder18);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0091");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray24 = new java.lang.Number[][] { numberArray8, numberArray11, numberArray14, numberArray17, numberArray20, numberArray23 };
        org.jfree.data.category.CategoryDataset categoryDataset25 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray24);
        java.util.List list26 = categoryDataset25.getRowKeys();
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset25, false);
        int int30 = categoryDataset25.getColumnIndex((java.lang.Comparable) (-1L));
        boolean boolean31 = xYIntervalSeriesCollection0.equals((java.lang.Object) categoryDataset25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number34 = xYIntervalSeriesCollection0.getX(0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(categoryDataset25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0092");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        int int49 = categoryDataset46.getRowIndex((java.lang.Comparable) "org.jfree.data.event.DatasetChangeEvent[source=-1]");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number52 = categoryDataset46.getValue((int) (byte) 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0093");
        org.jfree.data.function.Function2D function2D0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYDataset xYDataset5 = org.jfree.data.general.DatasetUtilities.sampleFunction2D(function2D0, (double) 10L, 32.0d, (int) (byte) -1, (java.lang.Comparable) "NOID");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'f' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0094");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        org.jfree.data.Range range27 = org.jfree.data.Range.expand(range24, (double) 10, (double) (byte) 1);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range27);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0095");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22);
        org.jfree.data.KeyToGroupMap keyToGroupMap34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range35 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset22, keyToGroupMap34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(range33);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0096");
        java.lang.Comparable[] comparableArray0 = new java.lang.Comparable[] {};
        java.lang.Number[] numberArray6 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray22 = new java.lang.Number[][] { numberArray6, numberArray9, numberArray12, numberArray15, numberArray18, numberArray21 };
        org.jfree.data.category.CategoryDataset categoryDataset23 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray22);
        java.util.List list24 = categoryDataset23.getRowKeys();
        org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset23, false);
        int int28 = categoryDataset23.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset30 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo31 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset30, datasetChangeInfo31);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent33 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset23, datasetChangeInfo31);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem40 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int42 = xYIntervalDataItem40.compareTo((java.lang.Object) 1.0f);
        int int43 = categoryDataset23.getColumnIndex((java.lang.Comparable) xYIntervalDataItem40);
        java.lang.Comparable[] comparableArray46 = new java.lang.Comparable[] { xYIntervalDataItem40, (-1.0d), 93.0d };
        double[] doubleArray52 = new double[] { 1.0d, (byte) -1, 1.0d };
        double[][] doubleArray53 = new double[][] { doubleArray52 };
        org.jfree.data.category.CategoryDataset categoryDataset54 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "", doubleArray53);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.category.CategoryDataset categoryDataset55 = org.jfree.data.general.DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray46, doubleArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The number of row keys does not match the number of rows in the data array.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(comparableArray0);
        org.junit.Assert.assertNotNull(numberArray6);
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(categoryDataset23);
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(comparableArray46);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(categoryDataset54);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0097");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = xYIntervalSeriesCollection0.getStartXValue(0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNull(range2);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0098");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = xYIntervalSeriesCollection0.getEndYValue((int) (byte) 10, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0099");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number15 = xYIntervalSeriesCollection0.getX((int) (byte) 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0100");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset2 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (java.lang.Comparable) 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0101");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number14 = xYIntervalSeriesCollection0.getX((int) (short) 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0102");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = xYIntervalSeriesCollection0.getEndYValue(32, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0103");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        boolean boolean26 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset28 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0104");
        org.jfree.data.pie.PieDataset pieDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double1 = org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(pieDataset0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0105");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable14 = xYIntervalSeriesCollection0.getSeriesKey((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0106");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        org.jfree.data.Range range48 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset46);
        double double49 = range48.getLength();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 198.0d + "'", double49 == 198.0d);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0107");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        java.lang.Object obj14 = xYIntervalDataItem10.clone();
        boolean boolean16 = xYIntervalDataItem10.equals((java.lang.Object) 0);
        int int17 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        org.jfree.data.DomainOrder domainOrder18 = xYIntervalSeriesCollection0.getDomainOrder();
        // The following exception was thrown during execution in test generation
        try {
            double double21 = xYIntervalSeriesCollection0.getYValue((int) (short) 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(domainOrder18);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0108");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable15 = xYIntervalSeriesCollection0.getSeriesKey((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0109");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.lang.Number number25 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset27 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset21, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertEquals("'" + number25 + "' != '" + (-1.0d) + "'", number25, (-1.0d));
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0110");
        org.jfree.data.xy.TableXYDataset tableXYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double2 = org.jfree.data.general.DatasetUtilities.calculateStackTotal(tableXYDataset0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0111");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset0, (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0112");
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries3 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries3.setMaximumItemCount((int) ' ');
        xYIntervalSeries3.setDescription("hi!");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection8 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range10 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8, true);
        java.lang.Object obj11 = xYIntervalSeriesCollection8.clone();
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray22 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray25 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray32 = new java.lang.Number[][] { numberArray16, numberArray19, numberArray22, numberArray25, numberArray28, numberArray31 };
        org.jfree.data.category.CategoryDataset categoryDataset33 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray32);
        java.util.List list34 = categoryDataset33.getRowKeys();
        org.jfree.data.Range range36 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset33, false);
        int int38 = categoryDataset33.getColumnIndex((java.lang.Comparable) (-1L));
        boolean boolean39 = xYIntervalSeriesCollection8.equals((java.lang.Object) categoryDataset33);
        org.jfree.data.Range range41 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8, true);
        // The following exception was thrown during execution in test generation
        try {
            xYIntervalSeries3.addChangeListener((org.jfree.data.event.SeriesChangeListener) xYIntervalSeriesCollection8);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Listener org.jfree.data.xy.XYIntervalSeriesCollection@6e35acd2 is not of type class org.jfree.data.xy.XYIntervalSeries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(numberArray25);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(categoryDataset33);
        org.junit.Assert.assertNotNull(list34);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(range41);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0113");
        org.jfree.data.xy.TableXYDataset tableXYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(tableXYDataset0, (double) 2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0114");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable13 = xYIntervalSeriesCollection0.getSeriesKey((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0115");
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries3 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        java.lang.Object obj5 = null;
        xYIntervalSeries3.firePropertyChange("", obj5, (java.lang.Object) "hi!");
        xYIntervalSeries3.setKey((java.lang.Comparable) (short) 1);
        xYIntervalSeries3.add((double) 100, (double) 0, (double) (byte) -1, (double) (short) -1, (double) 100, (double) 0);
        org.jfree.data.Range range18 = null;
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range18, (double) 100);
        double double22 = range20.constrain((double) '4');
        boolean boolean24 = range20.contains((double) 0.0f);
        xYIntervalSeries3.firePropertyChange("org.jfree.data.event.DatasetChangeEvent[source=-1]", (java.lang.Object) 0.0f, (java.lang.Object) true);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection27 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range29 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection27, true);
        java.lang.Object obj30 = xYIntervalSeriesCollection27.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem37 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int39 = xYIntervalDataItem37.compareTo((java.lang.Object) 1.0f);
        double double40 = xYIntervalDataItem37.getXHighValue();
        java.lang.Object obj41 = xYIntervalDataItem37.clone();
        boolean boolean43 = xYIntervalDataItem37.equals((java.lang.Object) 0);
        int int44 = xYIntervalSeriesCollection27.indexOf((java.lang.Comparable) xYIntervalDataItem37);
        org.jfree.data.DomainOrder domainOrder45 = xYIntervalSeriesCollection27.getDomainOrder();
        // The following exception was thrown during execution in test generation
        try {
            xYIntervalSeries3.removeChangeListener((org.jfree.data.event.SeriesChangeListener) xYIntervalSeriesCollection27);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Listener org.jfree.data.xy.XYIntervalSeriesCollection@2d8a8f5b is not of type class org.jfree.data.xy.XYIntervalSeries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(range29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(domainOrder45);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0116");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        java.lang.Object obj14 = xYIntervalDataItem10.clone();
        boolean boolean16 = xYIntervalDataItem10.equals((java.lang.Object) 0);
        int int17 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        org.jfree.data.DomainOrder domainOrder18 = xYIntervalSeriesCollection0.getDomainOrder();
        java.lang.Number number19 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double22 = xYIntervalSeriesCollection0.getStartYValue((int) (byte) 1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(domainOrder18);
        org.junit.Assert.assertNull(number19);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0117");
        org.jfree.data.xy.TableXYDataset tableXYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(tableXYDataset0, 100.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0118");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.Range range5 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = xYIntervalSeriesCollection0.getYValue((-1), 2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNull(range5);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0119");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21, true);
        org.jfree.data.Range range29 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (byte) 0);
        org.jfree.data.Range range30 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number33 = categoryDataset21.getValue((java.lang.Comparable) 32, (java.lang.Comparable) 1);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.UnknownKeyException; message: Row key (32) not recognised.");
        } catch (org.jfree.data.UnknownKeyException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range30);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0120");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range23 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, 0.0d);
        java.util.List list26 = categoryDataset21.getRowKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable28 = categoryDataset21.getColumnKey((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(list26);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0121");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        int int49 = categoryDataset46.getRowIndex((java.lang.Comparable) "org.jfree.data.event.DatasetChangeEvent[source=-1]");
        org.jfree.data.Range range51 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset46, 15.5d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(range51);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0122");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem9 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int11 = xYIntervalDataItem9.compareTo((java.lang.Object) 1.0f);
        double double12 = xYIntervalDataItem9.getXHighValue();
        org.jfree.data.Range range13 = null;
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range13, (double) 100);
        double double17 = range15.constrain((double) '4');
        boolean boolean18 = xYIntervalDataItem9.equals((java.lang.Object) '4');
        org.jfree.data.Range range19 = null;
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range19, (double) 100);
        double double23 = range21.constrain((double) '4');
        int int24 = xYIntervalDataItem9.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray46 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray47 = new java.lang.Number[][] { numberArray31, numberArray34, numberArray37, numberArray40, numberArray43, numberArray46 };
        org.jfree.data.category.CategoryDataset categoryDataset48 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray47);
        org.jfree.data.category.CategoryDataset categoryDataset49 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray47);
        int int50 = xYIntervalDataItem9.compareTo((java.lang.Object) categoryDataset49);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener51 = null;
        categoryDataset49.removeChangeListener(datasetChangeListener51);
        org.jfree.data.general.DatasetGroup datasetGroup53 = categoryDataset49.getGroup();
        xYIntervalSeriesCollection0.setGroup(datasetGroup53);
        // The following exception was thrown during execution in test generation
        try {
            double double57 = xYIntervalSeriesCollection0.getYValue((int) (short) 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray46);
        org.junit.Assert.assertNotNull(numberArray47);
        org.junit.Assert.assertNotNull(categoryDataset48);
        org.junit.Assert.assertNotNull(categoryDataset49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(datasetGroup53);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0123");
        double[] doubleArray5 = new double[] { 1.0d, (byte) -1, 1.0d };
        double[][] doubleArray6 = new double[][] { doubleArray5 };
        org.jfree.data.category.CategoryDataset categoryDataset7 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "", doubleArray6);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem14 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int16 = xYIntervalDataItem14.compareTo((java.lang.Object) 1.0f);
        double double17 = xYIntervalDataItem14.getXHighValue();
        org.jfree.data.Range range18 = null;
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range18, (double) 100);
        double double22 = range20.constrain((double) '4');
        boolean boolean23 = xYIntervalDataItem14.equals((java.lang.Object) '4');
        org.jfree.data.Range range24 = null;
        org.jfree.data.Range range26 = org.jfree.data.Range.expandToInclude(range24, (double) 100);
        double double28 = range26.constrain((double) '4');
        int int29 = xYIntervalDataItem14.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray36 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray39 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray42 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray45 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray48 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray51 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray52 = new java.lang.Number[][] { numberArray36, numberArray39, numberArray42, numberArray45, numberArray48, numberArray51 };
        org.jfree.data.category.CategoryDataset categoryDataset53 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray52);
        org.jfree.data.category.CategoryDataset categoryDataset54 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray52);
        int int55 = xYIntervalDataItem14.compareTo((java.lang.Object) categoryDataset54);
        java.util.List list56 = categoryDataset54.getColumnKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range58 = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(categoryDataset7, list56, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(categoryDataset7);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(numberArray36);
        org.junit.Assert.assertNotNull(numberArray39);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(numberArray51);
        org.junit.Assert.assertNotNull(numberArray52);
        org.junit.Assert.assertNotNull(categoryDataset53);
        org.junit.Assert.assertNotNull(categoryDataset54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(list56);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0124");
        org.jfree.data.xy.XYDataset xYDataset0 = null;
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range24 = null;
        org.jfree.data.Range range26 = org.jfree.data.Range.expandToInclude(range24, (double) 100);
        double double28 = range26.constrain((double) '4');
        double double29 = range26.getLength();
        org.jfree.data.Range range30 = null;
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range30, (double) 100);
        double double34 = range32.constrain((double) '4');
        boolean boolean35 = range26.intersects(range32);
        double double37 = range26.constrain((double) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range39 = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(xYDataset0, list23, range26, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0125");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        java.lang.Number number25 = org.jfree.data.general.DatasetUtilities.findMinimumStackedRangeValue(categoryDataset21);
        org.jfree.data.KeyToGroupMap keyToGroupMap26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, keyToGroupMap26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertEquals("'" + number25 + "' != '" + (-6.0d) + "'", number25, (-6.0d));
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0126");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        boolean boolean26 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset28 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, (java.lang.Comparable) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0127");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        boolean boolean17 = xYIntervalDataItem6.equals((java.lang.Object) 0.0f);
        java.lang.Object obj18 = xYIntervalDataItem6.clone();
        double double19 = xYIntervalDataItem6.getYLowValue();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem27 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int29 = xYIntervalDataItem27.compareTo((java.lang.Object) 1.0f);
        double double30 = xYIntervalDataItem27.getXHighValue();
        java.lang.Object obj31 = xYIntervalDataItem27.clone();
        boolean boolean33 = xYIntervalDataItem27.equals((java.lang.Object) 0);
        java.lang.Number[] numberArray38 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray41 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray44 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray47 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray50 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray53 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray54 = new java.lang.Number[][] { numberArray38, numberArray41, numberArray44, numberArray47, numberArray50, numberArray53 };
        org.jfree.data.category.CategoryDataset categoryDataset55 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray54);
        org.jfree.data.pie.PieDataset pieDataset57 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset55, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState58 = pieDataset57.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset62 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset57, (java.lang.Comparable) (short) 0, (double) (short) 100, (int) ' ');
        org.jfree.data.category.CategoryDataset categoryDataset63 = org.jfree.data.general.DatasetUtilities.createCategoryDataset((java.lang.Comparable) xYIntervalDataItem27, (org.jfree.data.KeyedValues) pieDataset62);
        java.lang.Comparable[] comparableArray67 = new java.lang.Comparable[] { double19, false, xYIntervalDataItem27, 10, (byte) -1, (-1) };
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem75 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int77 = xYIntervalDataItem75.compareTo((java.lang.Object) 1.0f);
        double double78 = xYIntervalDataItem75.getXHighValue();
        java.lang.Object obj79 = xYIntervalDataItem75.clone();
        java.lang.Comparable[] comparableArray83 = new java.lang.Comparable[] { (-1.0f), xYIntervalDataItem75, (-1), 93.0d, 0 };
        double[] doubleArray91 = new double[] { 1.0d, (byte) -1, 1.0d };
        double[][] doubleArray92 = new double[][] { doubleArray91 };
        org.jfree.data.category.CategoryDataset categoryDataset93 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "", doubleArray92);
        org.jfree.data.category.CategoryDataset categoryDataset94 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("org.jfree.data.general.SeriesException: ", "", doubleArray92);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.category.CategoryDataset categoryDataset95 = org.jfree.data.general.DatasetUtilities.createCategoryDataset(comparableArray67, comparableArray83, doubleArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The number of row keys does not match the number of rows in the data array.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(numberArray38);
        org.junit.Assert.assertNotNull(numberArray41);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(numberArray47);
        org.junit.Assert.assertNotNull(numberArray50);
        org.junit.Assert.assertNotNull(numberArray53);
        org.junit.Assert.assertNotNull(numberArray54);
        org.junit.Assert.assertNotNull(categoryDataset55);
        org.junit.Assert.assertNotNull(pieDataset57);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState58);
        org.junit.Assert.assertNotNull(pieDataset62);
        org.junit.Assert.assertNotNull(categoryDataset63);
        org.junit.Assert.assertNotNull(comparableArray67);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 100.0d + "'", double78 == 100.0d);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertNotNull(comparableArray83);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertNotNull(categoryDataset93);
        org.junit.Assert.assertNotNull(categoryDataset94);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0128");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21, true);
        boolean boolean29 = range27.contains((double) (byte) 1);
        double double31 = range27.constrain((double) 10L);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0129");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        java.lang.Number number26 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        boolean boolean27 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset21);
        org.jfree.data.KeyToGroupMap keyToGroupMap29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range30 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, keyToGroupMap29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertEquals("'" + number26 + "' != '" + (-1.0d) + "'", number26, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(range28);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0130");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, (double) 100);
        double double4 = range2.constrain((double) '4');
        double double5 = range2.getLength();
        double double6 = range2.getCentralValue();
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray27 = new java.lang.Number[][] { numberArray11, numberArray14, numberArray17, numberArray20, numberArray23, numberArray26 };
        org.jfree.data.category.CategoryDataset categoryDataset28 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray27);
        java.util.List list29 = categoryDataset28.getRowKeys();
        org.jfree.data.Range range31 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset28, (double) (short) -1);
        java.lang.Number number32 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset28);
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset28);
        boolean boolean34 = range2.intersects(range33);
        boolean boolean37 = range2.intersects(32.0d, (double) (byte) 100);
        org.junit.Assert.assertNotNull(range2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray27);
        org.junit.Assert.assertNotNull(categoryDataset28);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertEquals("'" + number32 + "' != '" + (-1.0d) + "'", number32, (-1.0d));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0131");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number14 = xYIntervalSeriesCollection0.getEndY((int) (short) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0132");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range1 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double4 = xYIntervalSeriesCollection0.getYValue((int) (short) 1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range1);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0133");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range15 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable17 = xYIntervalSeriesCollection0.getSeriesKey((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNull(range15);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0134");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable15 = xYIntervalSeriesCollection0.getSeriesKey((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0135");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo10 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection0.fireDatasetChanged(datasetChangeInfo10);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = xYIntervalSeriesCollection0.getItemCount((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0136");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.Range range5 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.jfree.data.Range range6 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = xYIntervalSeriesCollection0.getEndXValue((int) (short) 1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNull(range5);
        org.junit.Assert.assertNull(range6);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0137");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem28 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int30 = xYIntervalDataItem28.compareTo((java.lang.Object) 1.0f);
        double double31 = xYIntervalDataItem28.getXHighValue();
        org.jfree.data.Range range32 = null;
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range32, (double) 100);
        double double36 = range34.constrain((double) '4');
        boolean boolean37 = xYIntervalDataItem28.equals((java.lang.Object) '4');
        boolean boolean39 = xYIntervalDataItem28.equals((java.lang.Object) 0.0f);
        java.lang.Object obj40 = xYIntervalDataItem28.clone();
        java.lang.Object obj41 = null;
        int int42 = xYIntervalDataItem28.compareTo(obj41);
        double double43 = xYIntervalDataItem28.getXLowValue();
        org.jfree.data.ComparableObjectSeries comparableObjectSeries44 = new org.jfree.data.ComparableObjectSeries((java.lang.Comparable) xYIntervalDataItem28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number46 = categoryDataset21.getValue((java.lang.Comparable) xYIntervalDataItem28, (java.lang.Comparable) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.UnknownKeyException; message: Row key (org.jfree.data.xy.XYIntervalDataItem@cfed54c5) not recognised.");
        } catch (org.jfree.data.UnknownKeyException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0138");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo10 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection0.fireDatasetChanged(datasetChangeInfo10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number14 = xYIntervalSeriesCollection0.getY(10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0139");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries17 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries17.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo20 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent21 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo20);
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable24 = xYIntervalSeriesCollection0.getSeriesKey((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0140");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        java.lang.Object obj14 = xYIntervalDataItem10.clone();
        boolean boolean16 = xYIntervalDataItem10.equals((java.lang.Object) 0);
        int int17 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        org.jfree.data.DomainOrder domainOrder18 = xYIntervalSeriesCollection0.getDomainOrder();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number21 = xYIntervalSeriesCollection0.getStartY((int) '4', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(domainOrder18);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0141");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = xYIntervalSeriesCollection0.getStartYValue(0, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0142");
        java.lang.Number[] numberArray6 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray22 = new java.lang.Number[][] { numberArray6, numberArray9, numberArray12, numberArray15, numberArray18, numberArray21 };
        org.jfree.data.category.CategoryDataset categoryDataset23 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray22);
        org.jfree.data.category.CategoryDataset categoryDataset24 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray22);
        java.lang.Number number25 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(categoryDataset24);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset27 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset24, (java.lang.Comparable) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray6);
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(categoryDataset23);
        org.junit.Assert.assertNotNull(categoryDataset24);
        org.junit.Assert.assertEquals("'" + number25 + "' != '" + 32.0d + "'", number25, 32.0d);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0143");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        boolean boolean22 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem29 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        double double30 = xYIntervalDataItem29.getYLowValue();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset31 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset21, (java.lang.Comparable) xYIntervalDataItem29);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0144");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState24 = pieDataset23.getSelectionState();
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState25 = pieDataset23.getSelectionState();
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray46 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray47 = new java.lang.Number[][] { numberArray31, numberArray34, numberArray37, numberArray40, numberArray43, numberArray46 };
        org.jfree.data.category.CategoryDataset categoryDataset48 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray47);
        java.util.List list49 = categoryDataset48.getRowKeys();
        org.jfree.data.Range range51 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset48, false);
        int int53 = categoryDataset48.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset55 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo56 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent57 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset55, datasetChangeInfo56);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent58 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset48, datasetChangeInfo56);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem65 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int67 = xYIntervalDataItem65.compareTo((java.lang.Object) 1.0f);
        int int68 = categoryDataset48.getColumnIndex((java.lang.Comparable) xYIntervalDataItem65);
        double double69 = xYIntervalDataItem65.getXLowValue();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection70 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder71 = xYIntervalSeriesCollection70.getDomainOrder();
        org.jfree.data.ComparableObjectItem comparableObjectItem72 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable) xYIntervalDataItem65, (java.lang.Object) domainOrder71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number73 = pieDataset23.getValue((java.lang.Comparable) comparableObjectItem72);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.UnknownKeyException; message: The key (org.jfree.data.ComparableObjectItem@1ff1c002) is not recognised.");
        } catch (org.jfree.data.UnknownKeyException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState24);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState25);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray46);
        org.junit.Assert.assertNotNull(numberArray47);
        org.junit.Assert.assertNotNull(categoryDataset48);
        org.junit.Assert.assertNotNull(list49);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertNotNull(domainOrder71);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0145");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection26 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset28 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo29 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent30 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset28, datasetChangeInfo29);
        xYIntervalSeriesCollection26.notifyListeners(datasetChangeEvent30);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState32 = xYIntervalSeriesCollection26.getSelectionState();
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection26);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection34 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder35 = xYIntervalSeriesCollection34.getDomainOrder();
        int int36 = xYIntervalSeriesCollection34.getSeriesCount();
        boolean boolean37 = xYIntervalSeriesCollection26.hasListener((java.util.EventListener) xYIntervalSeriesCollection34);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo38 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent39 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) list25, (org.jfree.data.general.Dataset) xYIntervalSeriesCollection34, datasetChangeInfo38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number42 = xYIntervalSeriesCollection34.getStartX((int) (short) 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNull(xYDatasetSelectionState32);
        org.junit.Assert.assertNull(range33);
        org.junit.Assert.assertNotNull(domainOrder35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0146");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range9 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number12 = xYIntervalSeriesCollection0.getY(0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNull(range9);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0147");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        java.lang.Object obj14 = xYIntervalDataItem10.clone();
        boolean boolean16 = xYIntervalDataItem10.equals((java.lang.Object) 0);
        int int17 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        java.lang.Number number18 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number21 = xYIntervalSeriesCollection0.getStartX(0, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(number18);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0148");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = xYIntervalSeriesCollection0.getEndXValue(0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0149");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = xYIntervalSeriesCollection0.getEndYValue(2147483647, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2147483647, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNull(range2);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0150");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener48 = null;
        categoryDataset46.removeChangeListener(datasetChangeListener48);
        org.jfree.data.general.DatasetGroup datasetGroup50 = categoryDataset46.getGroup();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset52 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset46, (java.lang.Comparable) 15.5d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(datasetGroup50);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0151");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray24 = new java.lang.Number[][] { numberArray8, numberArray11, numberArray14, numberArray17, numberArray20, numberArray23 };
        org.jfree.data.category.CategoryDataset categoryDataset25 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray24);
        java.util.List list26 = categoryDataset25.getRowKeys();
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset25, false);
        int int30 = categoryDataset25.getColumnIndex((java.lang.Comparable) (-1L));
        boolean boolean31 = xYIntervalSeriesCollection0.equals((java.lang.Object) categoryDataset25);
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        // The following exception was thrown during execution in test generation
        try {
            double double36 = xYIntervalSeriesCollection0.getYValue(1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(categoryDataset25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(range33);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0152");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState24 = pieDataset23.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset28 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset23, (java.lang.Comparable) 'a', (double) 10.0f, (int) (short) 10);
        java.lang.Number number30 = pieDataset28.getValue((int) (short) 100);
        org.jfree.data.pie.PieDataset pieDataset34 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset28, (java.lang.Comparable) (short) 10, (double) 100, 100);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState24);
        org.junit.Assert.assertNotNull(pieDataset28);
        org.junit.Assert.assertNull(number30);
        org.junit.Assert.assertNotNull(pieDataset34);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0153");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range1 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            int int3 = xYIntervalSeriesCollection0.getItemCount((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range1);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0154");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number14 = xYIntervalSeriesCollection0.getY(2147483647, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2147483647, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0155");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, true);
        org.jfree.data.general.DatasetGroup datasetGroup25 = categoryDataset22.getGroup();
        java.util.List list26 = categoryDataset22.getRowKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, list26, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(datasetGroup25);
        org.junit.Assert.assertNotNull(list26);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0156");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable24 = categoryDataset21.getColumnKey(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0157");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj8 = xYIntervalSeriesCollection0.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number11 = xYIntervalSeriesCollection0.getEndY((int) ' ', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(obj8);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0158");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range23 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        org.jfree.data.general.DatasetGroup datasetGroup24 = categoryDataset21.getGroup();
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        boolean boolean26 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        java.lang.Comparable comparable27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number29 = categoryDataset21.getValue(comparable27, (java.lang.Comparable) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'rowKey' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(datasetGroup24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0159");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray24 = new java.lang.Number[][] { numberArray8, numberArray11, numberArray14, numberArray17, numberArray20, numberArray23 };
        org.jfree.data.category.CategoryDataset categoryDataset25 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray24);
        java.util.List list26 = categoryDataset25.getRowKeys();
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset25, false);
        int int30 = categoryDataset25.getColumnIndex((java.lang.Comparable) (-1L));
        boolean boolean31 = xYIntervalSeriesCollection0.equals((java.lang.Object) categoryDataset25);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries35 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        boolean boolean36 = xYIntervalSeries35.getNotify();
        int int37 = xYIntervalSeries35.getItemCount();
        boolean boolean38 = xYIntervalSeries35.getAutoSort();
        xYIntervalSeries35.fireSeriesChanged();
        xYIntervalSeries35.setMaximumItemCount((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            xYIntervalSeriesCollection0.addSeries(xYIntervalSeries35);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Listener org.jfree.data.xy.XYIntervalSeriesCollection@603221a2 is not of type class org.jfree.data.xy.XYIntervalSeries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(categoryDataset25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0160");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        int int4 = xYIntervalSeriesCollection0.getSeriesCount();
        int int6 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 100.0d);
        org.jfree.data.DomainOrder domainOrder7 = xYIntervalSeriesCollection0.getDomainOrder();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = xYIntervalSeriesCollection0.getYValue((int) '4', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(domainOrder7);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0161");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = xYIntervalSeriesCollection0.getYValue((int) (byte) 1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0162");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj8 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.Range range9 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray29 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray30 = new java.lang.Number[][] { numberArray14, numberArray17, numberArray20, numberArray23, numberArray26, numberArray29 };
        org.jfree.data.category.CategoryDataset categoryDataset31 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray30);
        java.util.List list32 = categoryDataset31.getRowKeys();
        org.jfree.data.Range range34 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset31, (double) (short) -1);
        java.util.List list35 = categoryDataset31.getRowKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range37 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, list35, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNull(range9);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(numberArray30);
        org.junit.Assert.assertNotNull(categoryDataset31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(list35);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0163");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        int int10 = xYIntervalSeriesCollection0.getSeriesCount();
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray24 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray27 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray30 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray31 = new java.lang.Number[][] { numberArray15, numberArray18, numberArray21, numberArray24, numberArray27, numberArray30 };
        org.jfree.data.category.CategoryDataset categoryDataset32 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray31);
        java.util.List list33 = categoryDataset32.getRowKeys();
        org.jfree.data.Range range35 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset32, (double) (short) -1);
        java.util.List list36 = categoryDataset32.getRowKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range38 = org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, list36, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(numberArray27);
        org.junit.Assert.assertNotNull(numberArray30);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(categoryDataset32);
        org.junit.Assert.assertNotNull(list33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(list36);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0164");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        boolean boolean22 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number25 = categoryDataset21.getValue(10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0165");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range22 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset21);
        java.lang.Class<?> wildcardClass23 = range22.getClass();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0166");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = xYIntervalSeriesCollection0.getEndXValue(0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNull(range2);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0167");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number16 = xYIntervalSeriesCollection0.getX((int) (short) 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0168");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState7 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number12 = xYIntervalSeriesCollection0.getEndX(1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0169");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        // The following exception was thrown during execution in test generation
        try {
            double double16 = xYIntervalSeriesCollection0.getYValue((int) ' ', (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0170");
        java.lang.Number[] numberArray6 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray22 = new java.lang.Number[][] { numberArray6, numberArray9, numberArray12, numberArray15, numberArray18, numberArray21 };
        org.jfree.data.category.CategoryDataset categoryDataset23 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray22);
        org.jfree.data.category.CategoryDataset categoryDataset24 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray22);
        java.lang.Number number25 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(categoryDataset24);
        org.jfree.data.KeyToGroupMap keyToGroupMap26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset24, keyToGroupMap26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray6);
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(categoryDataset23);
        org.junit.Assert.assertNotNull(categoryDataset24);
        org.junit.Assert.assertEquals("'" + number25 + "' != '" + 32.0d + "'", number25, 32.0d);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0171");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range24, 0.0d);
        org.jfree.data.Range range29 = org.jfree.data.Range.shift(range26, (double) '#', true);
        double double30 = range29.getUpperBound();
        org.jfree.data.Range range32 = org.jfree.data.Range.scale(range29, (double) 10L);
        java.lang.Class<?> wildcardClass33 = range32.getClass();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 67.0d + "'", double30 == 67.0d);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0172");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray24 = new java.lang.Number[][] { numberArray8, numberArray11, numberArray14, numberArray17, numberArray20, numberArray23 };
        org.jfree.data.category.CategoryDataset categoryDataset25 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray24);
        java.util.List list26 = categoryDataset25.getRowKeys();
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset25, false);
        int int30 = categoryDataset25.getColumnIndex((java.lang.Comparable) (-1L));
        boolean boolean31 = xYIntervalSeriesCollection0.equals((java.lang.Object) categoryDataset25);
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Number number34 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Number[] numberArray39 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray42 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray45 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray48 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray51 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray54 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray55 = new java.lang.Number[][] { numberArray39, numberArray42, numberArray45, numberArray48, numberArray51, numberArray54 };
        org.jfree.data.category.CategoryDataset categoryDataset56 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray55);
        java.util.List list57 = categoryDataset56.getRowKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range59 = org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, list57, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(categoryDataset25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(range33);
        org.junit.Assert.assertNull(number34);
        org.junit.Assert.assertNotNull(numberArray39);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(numberArray51);
        org.junit.Assert.assertNotNull(numberArray54);
        org.junit.Assert.assertNotNull(numberArray55);
        org.junit.Assert.assertNotNull(categoryDataset56);
        org.junit.Assert.assertNotNull(list57);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0173");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj8 = xYIntervalSeriesCollection0.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number11 = xYIntervalSeriesCollection0.getEndX(0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(obj8);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0174");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range15 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        // The following exception was thrown during execution in test generation
        try {
            double double18 = xYIntervalSeriesCollection0.getEndXValue((int) '4', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNull(range15);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0175");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range22 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset21);
        double double23 = range22.getLength();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 32.0d + "'", double23 == 32.0d);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0176");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        java.lang.Object obj14 = xYIntervalDataItem10.clone();
        boolean boolean16 = xYIntervalDataItem10.equals((java.lang.Object) 0);
        int int17 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = xYIntervalSeriesCollection0.getEndXValue(6, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0177");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        boolean boolean10 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable12 = xYIntervalSeriesCollection0.getSeriesKey((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0178");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21, true);
        boolean boolean29 = range27.contains((double) (byte) 1);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range27, 1.0d, true);
        org.jfree.data.Range range33 = null;
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) 100);
        double double37 = range35.constrain((double) '4');
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range35, (double) (byte) 1, false);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range27, range40);
        java.lang.Class<?> wildcardClass42 = range41.getClass();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0179");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener25 = null;
        categoryDataset21.removeChangeListener(datasetChangeListener25);
        java.lang.Number number27 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(categoryDataset21);
        java.lang.Class<?> wildcardClass28 = categoryDataset21.getClass();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertEquals("'" + number27 + "' != '" + 32.0d + "'", number27, 32.0d);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0180");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries13 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) "");
        xYIntervalSeries13.add((double) (byte) 10, (double) 1L, (double) (-1), (double) (-1), 1.0d, (double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            xYIntervalSeriesCollection0.addSeries(xYIntervalSeries13);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Listener org.jfree.data.xy.XYIntervalSeriesCollection@533f14e is not of type class org.jfree.data.Range");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0181");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem7 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int9 = xYIntervalDataItem7.compareTo((java.lang.Object) 1.0f);
        double double10 = xYIntervalDataItem7.getXHighValue();
        java.lang.Object obj11 = xYIntervalDataItem7.clone();
        boolean boolean13 = xYIntervalDataItem7.equals((java.lang.Object) 0);
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray24 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray27 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray30 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray33 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray34 = new java.lang.Number[][] { numberArray18, numberArray21, numberArray24, numberArray27, numberArray30, numberArray33 };
        org.jfree.data.category.CategoryDataset categoryDataset35 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray34);
        org.jfree.data.pie.PieDataset pieDataset37 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset35, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState38 = pieDataset37.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset42 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset37, (java.lang.Comparable) (short) 0, (double) (short) 100, (int) ' ');
        org.jfree.data.category.CategoryDataset categoryDataset43 = org.jfree.data.general.DatasetUtilities.createCategoryDataset((java.lang.Comparable) xYIntervalDataItem7, (org.jfree.data.KeyedValues) pieDataset42);
        boolean boolean44 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(pieDataset42);
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset((java.lang.Comparable) (byte) 1, (org.jfree.data.KeyedValues) pieDataset42);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(numberArray27);
        org.junit.Assert.assertNotNull(numberArray30);
        org.junit.Assert.assertNotNull(numberArray33);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(categoryDataset35);
        org.junit.Assert.assertNotNull(pieDataset37);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState38);
        org.junit.Assert.assertNotNull(pieDataset42);
        org.junit.Assert.assertNotNull(categoryDataset43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(categoryDataset45);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0182");
        org.jfree.data.function.Function2D function2D0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYDataset xYDataset5 = org.jfree.data.general.DatasetUtilities.sampleFunction2D(function2D0, (double) 2, 32.0d, 6, (java.lang.Comparable) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'f' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0183");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number1 = org.jfree.data.general.DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0184");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo10 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection0.fireDatasetChanged(datasetChangeInfo10);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries15 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        java.lang.Object obj17 = null;
        xYIntervalSeries15.firePropertyChange("", obj17, (java.lang.Object) "hi!");
        xYIntervalSeries15.setKey((java.lang.Comparable) (short) 1);
        xYIntervalSeries15.firePropertyChange("", (java.lang.Object) 100L, (java.lang.Object) 100.0f);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem33 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int35 = xYIntervalDataItem33.compareTo((java.lang.Object) 1.0f);
        double double36 = xYIntervalDataItem33.getXHighValue();
        java.lang.Object obj37 = xYIntervalDataItem33.clone();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries41 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        boolean boolean42 = xYIntervalSeries41.getNotify();
        int int43 = xYIntervalSeries41.getItemCount();
        boolean boolean44 = xYIntervalSeries41.getAutoSort();
        xYIntervalSeries41.fireSeriesChanged();
        xYIntervalSeries15.firePropertyChange("", obj37, (java.lang.Object) xYIntervalSeries41);
        // The following exception was thrown during execution in test generation
        try {
            xYIntervalSeriesCollection0.addSeries(xYIntervalSeries41);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Listener org.jfree.data.xy.XYIntervalSeriesCollection@3d409c2c is not of type class org.jfree.data.Range");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0185");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        java.lang.Object obj14 = xYIntervalDataItem10.clone();
        boolean boolean16 = xYIntervalDataItem10.equals((java.lang.Object) 0);
        int int17 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        org.jfree.data.DomainOrder domainOrder18 = xYIntervalSeriesCollection0.getDomainOrder();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable20 = xYIntervalSeriesCollection0.getSeriesKey(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(domainOrder18);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0186");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray24 = new java.lang.Number[][] { numberArray8, numberArray11, numberArray14, numberArray17, numberArray20, numberArray23 };
        org.jfree.data.category.CategoryDataset categoryDataset25 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray24);
        java.util.List list26 = categoryDataset25.getRowKeys();
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset25, false);
        int int30 = categoryDataset25.getColumnIndex((java.lang.Comparable) (-1L));
        boolean boolean31 = xYIntervalSeriesCollection0.equals((java.lang.Object) categoryDataset25);
        // The following exception was thrown during execution in test generation
        try {
            double double34 = xYIntervalSeriesCollection0.getEndXValue((int) ' ', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(categoryDataset25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0187");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, (double) 100);
        double double4 = range2.constrain((double) '4');
        double double5 = range2.getLength();
        double double6 = range2.getCentralValue();
        boolean boolean9 = range2.intersects((double) 2147483647, (double) (short) 10);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection10 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset12 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo13 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent14 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset12, datasetChangeInfo13);
        xYIntervalSeriesCollection10.notifyListeners(datasetChangeEvent14);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState16 = xYIntervalSeriesCollection10.getSelectionState();
        org.jfree.data.Range range17 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection10);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection18 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset20 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo21 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent22 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset20, datasetChangeInfo21);
        xYIntervalSeriesCollection18.notifyListeners(datasetChangeEvent22);
        org.jfree.data.general.Dataset dataset24 = datasetChangeEvent22.getDataset();
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo25 = datasetChangeEvent22.getInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent26 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) range2, (org.jfree.data.general.Dataset) xYIntervalSeriesCollection10, datasetChangeInfo25);
        // The following exception was thrown during execution in test generation
        try {
            int int28 = xYIntervalSeriesCollection10.getItemCount(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(range2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(xYDatasetSelectionState16);
        org.junit.Assert.assertNull(range17);
        org.junit.Assert.assertNull(dataset24);
        org.junit.Assert.assertNotNull(datasetChangeInfo25);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0188");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray24 = new java.lang.Number[][] { numberArray8, numberArray11, numberArray14, numberArray17, numberArray20, numberArray23 };
        org.jfree.data.category.CategoryDataset categoryDataset25 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray24);
        java.util.List list26 = categoryDataset25.getRowKeys();
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset25, false);
        int int30 = categoryDataset25.getColumnIndex((java.lang.Comparable) (-1L));
        boolean boolean31 = xYIntervalSeriesCollection0.equals((java.lang.Object) categoryDataset25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable33 = categoryDataset25.getColumnKey((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(categoryDataset25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0189");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.lang.Class<?> wildcardClass22 = numberArray20.getClass();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0190");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection8 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection8.getDomainOrder();
        int int10 = xYIntervalSeriesCollection8.getSeriesCount();
        boolean boolean11 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection8);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = xYIntervalSeriesCollection8.getStartXValue((int) (short) 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0191");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        int int49 = categoryDataset46.getRowIndex((java.lang.Comparable) "org.jfree.data.event.DatasetChangeEvent[source=-1]");
        org.jfree.data.KeyToGroupMap keyToGroupMap50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range51 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset46, keyToGroupMap50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0192");
        org.jfree.data.function.Function2D function2D0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYDataset xYDataset5 = org.jfree.data.general.DatasetUtilities.sampleFunction2D(function2D0, 0.0d, 67.0d, (int) (short) 10, (java.lang.Comparable) 35.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'f' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0193");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        java.lang.Number number26 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        boolean boolean27 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number31 = categoryDataset21.getValue(100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertEquals("'" + number26 + "' != '" + (-1.0d) + "'", number26, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(range28);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0194");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        int int24 = categoryDataset21.getRowCount();
        java.lang.Number number25 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(categoryDataset21);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset27 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset21, (java.lang.Comparable) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertEquals("'" + number25 + "' != '" + 32.0d + "'", number25, 32.0d);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0195");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        java.lang.Object obj14 = xYIntervalDataItem10.clone();
        boolean boolean16 = xYIntervalDataItem10.equals((java.lang.Object) 0);
        int int17 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        org.jfree.data.DomainOrder domainOrder18 = xYIntervalSeriesCollection0.getDomainOrder();
        java.lang.Number number19 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj20 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries24 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries24.setMaximumItemCount((int) (short) 1);
        boolean boolean27 = xYIntervalSeries24.getAllowDuplicateXValues();
        boolean boolean28 = xYIntervalSeries24.getNotify();
        // The following exception was thrown during execution in test generation
        try {
            xYIntervalSeriesCollection0.addSeries(xYIntervalSeries24);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Listener org.jfree.data.xy.XYIntervalSeriesCollection@62d1bbaf is not of type class org.jfree.data.Range");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(domainOrder18);
        org.junit.Assert.assertNull(number19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0196");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number10 = xYIntervalSeriesCollection0.getStartX((-1), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0197");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener34 = null;
        categoryDataset22.removeChangeListener(datasetChangeListener34);
        java.lang.Number number36 = org.jfree.data.general.DatasetUtilities.findMinimumStackedRangeValue(categoryDataset22);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem43 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int45 = xYIntervalDataItem43.compareTo((java.lang.Object) 1.0f);
        double double46 = xYIntervalDataItem43.getXHighValue();
        org.jfree.data.Range range47 = null;
        org.jfree.data.Range range49 = org.jfree.data.Range.expandToInclude(range47, (double) 100);
        double double51 = range49.constrain((double) '4');
        boolean boolean52 = xYIntervalDataItem43.equals((java.lang.Object) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset53 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset22, (java.lang.Comparable) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertEquals("'" + number36 + "' != '" + (-6.0d) + "'", number36, (-6.0d));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 100.0d + "'", double51 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0198");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        int int24 = categoryDataset21.getColumnCount();
        org.jfree.data.KeyToGroupMap keyToGroupMap25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, keyToGroupMap25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0199");
        org.jfree.data.xy.TableXYDataset tableXYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double2 = org.jfree.data.general.DatasetUtilities.calculateStackTotal(tableXYDataset0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0200");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        java.lang.Object obj14 = xYIntervalDataItem10.clone();
        boolean boolean16 = xYIntervalDataItem10.equals((java.lang.Object) 0);
        int int17 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        org.jfree.data.DomainOrder domainOrder18 = xYIntervalSeriesCollection0.getDomainOrder();
        java.lang.Number number19 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj20 = xYIntervalSeriesCollection0.clone();
        // The following exception was thrown during execution in test generation
        try {
            double double23 = xYIntervalSeriesCollection0.getYValue(0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(domainOrder18);
        org.junit.Assert.assertNull(number19);
        org.junit.Assert.assertNotNull(obj20);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0201");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = xYIntervalSeriesCollection0.getStartXValue((int) (short) -1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0202");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem9 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int11 = xYIntervalDataItem9.compareTo((java.lang.Object) 1.0f);
        double double12 = xYIntervalDataItem9.getXHighValue();
        org.jfree.data.Range range13 = null;
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range13, (double) 100);
        double double17 = range15.constrain((double) '4');
        boolean boolean18 = xYIntervalDataItem9.equals((java.lang.Object) '4');
        org.jfree.data.Range range19 = null;
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range19, (double) 100);
        double double23 = range21.constrain((double) '4');
        int int24 = xYIntervalDataItem9.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray46 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray47 = new java.lang.Number[][] { numberArray31, numberArray34, numberArray37, numberArray40, numberArray43, numberArray46 };
        org.jfree.data.category.CategoryDataset categoryDataset48 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray47);
        org.jfree.data.category.CategoryDataset categoryDataset49 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray47);
        int int50 = xYIntervalDataItem9.compareTo((java.lang.Object) categoryDataset49);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener51 = null;
        categoryDataset49.removeChangeListener(datasetChangeListener51);
        org.jfree.data.general.DatasetGroup datasetGroup53 = categoryDataset49.getGroup();
        xYIntervalSeriesCollection0.setGroup(datasetGroup53);
        // The following exception was thrown during execution in test generation
        try {
            double double57 = xYIntervalSeriesCollection0.getXValue((int) (byte) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray46);
        org.junit.Assert.assertNotNull(numberArray47);
        org.junit.Assert.assertNotNull(categoryDataset48);
        org.junit.Assert.assertNotNull(categoryDataset49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(datasetGroup53);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0203");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range15 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        java.lang.Number number16 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number19 = xYIntervalSeriesCollection0.getStartX(0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNull(range15);
        org.junit.Assert.assertNull(number16);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0204");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        int int24 = categoryDataset21.getColumnCount();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem31 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int33 = xYIntervalDataItem31.compareTo((java.lang.Object) 1.0f);
        double double34 = xYIntervalDataItem31.getXHighValue();
        org.jfree.data.Range range35 = null;
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range35, (double) 100);
        double double39 = range37.constrain((double) '4');
        boolean boolean40 = xYIntervalDataItem31.equals((java.lang.Object) '4');
        org.jfree.data.Range range41 = null;
        org.jfree.data.Range range43 = org.jfree.data.Range.expandToInclude(range41, (double) 100);
        double double45 = range43.constrain((double) '4');
        int int46 = xYIntervalDataItem31.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray53 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray56 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray59 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray62 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray65 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray68 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray69 = new java.lang.Number[][] { numberArray53, numberArray56, numberArray59, numberArray62, numberArray65, numberArray68 };
        org.jfree.data.category.CategoryDataset categoryDataset70 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray69);
        org.jfree.data.category.CategoryDataset categoryDataset71 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray69);
        int int72 = xYIntervalDataItem31.compareTo((java.lang.Object) categoryDataset71);
        double double73 = xYIntervalDataItem31.getXHighValue();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset74 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset21, (java.lang.Comparable) double73);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(numberArray53);
        org.junit.Assert.assertNotNull(numberArray56);
        org.junit.Assert.assertNotNull(numberArray59);
        org.junit.Assert.assertNotNull(numberArray62);
        org.junit.Assert.assertNotNull(numberArray65);
        org.junit.Assert.assertNotNull(numberArray68);
        org.junit.Assert.assertNotNull(numberArray69);
        org.junit.Assert.assertNotNull(categoryDataset70);
        org.junit.Assert.assertNotNull(categoryDataset71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 100.0d + "'", double73 == 100.0d);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0205");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        org.jfree.data.KeyToGroupMap keyToGroupMap25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, keyToGroupMap25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0206");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        int int4 = xYIntervalSeriesCollection0.getSeriesCount();
        java.lang.Number number5 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(number5);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0207");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable13 = xYIntervalSeriesCollection0.getSeriesKey((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0208");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener48 = null;
        categoryDataset46.removeChangeListener(datasetChangeListener48);
        java.util.List list50 = categoryDataset46.getColumnKeys();
        java.lang.Number[] numberArray56 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray59 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray62 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray65 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray68 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray71 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray72 = new java.lang.Number[][] { numberArray56, numberArray59, numberArray62, numberArray65, numberArray68, numberArray71 };
        org.jfree.data.category.CategoryDataset categoryDataset73 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray72);
        java.util.List list74 = categoryDataset73.getRowKeys();
        org.jfree.data.Range range76 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset73, false);
        int int78 = categoryDataset73.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset80 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo81 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent82 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset80, datasetChangeInfo81);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent83 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset73, datasetChangeInfo81);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem90 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int92 = xYIntervalDataItem90.compareTo((java.lang.Object) 1.0f);
        int int93 = categoryDataset73.getColumnIndex((java.lang.Comparable) xYIntervalDataItem90);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset94 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset46, (java.lang.Comparable) int93);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(list50);
        org.junit.Assert.assertNotNull(numberArray56);
        org.junit.Assert.assertNotNull(numberArray59);
        org.junit.Assert.assertNotNull(numberArray62);
        org.junit.Assert.assertNotNull(numberArray65);
        org.junit.Assert.assertNotNull(numberArray68);
        org.junit.Assert.assertNotNull(numberArray71);
        org.junit.Assert.assertNotNull(numberArray72);
        org.junit.Assert.assertNotNull(categoryDataset73);
        org.junit.Assert.assertNotNull(list74);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0209");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = xYIntervalSeriesCollection0.getYValue((int) '4', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0210");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = xYIntervalSeriesCollection0.getItemCount((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0211");
        double[] doubleArray5 = new double[] { 1.0d, (byte) -1, 1.0d };
        double[][] doubleArray6 = new double[][] { doubleArray5 };
        org.jfree.data.category.CategoryDataset categoryDataset7 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "", doubleArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable9 = categoryDataset7.getRowKey((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(categoryDataset7);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0212");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection8 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection8.getDomainOrder();
        int int10 = xYIntervalSeriesCollection8.getSeriesCount();
        boolean boolean11 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection8);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        xYIntervalSeriesCollection8.validateObject();
        int int14 = xYIntervalSeriesCollection8.getSeriesCount();
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(number12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0213");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21, true);
        org.jfree.data.Range range29 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset31 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset21, 2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2147483647, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range29);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0214");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener12 = null;
        xYIntervalSeriesCollection0.addChangeListener(datasetChangeListener12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number16 = xYIntervalSeriesCollection0.getEndX(10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0215");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range23 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, 0.0d);
        java.util.List list26 = categoryDataset21.getRowKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset28 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset21, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(list26);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0216");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.removeAllSeries();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number15 = xYIntervalSeriesCollection0.getEndX((int) 'a', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0217");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.general.DatasetGroup datasetGroup13 = xYIntervalSeriesCollection0.getGroup();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem20 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int22 = xYIntervalDataItem20.compareTo((java.lang.Object) 1.0f);
        double double23 = xYIntervalDataItem20.getXHighValue();
        org.jfree.data.Range range24 = null;
        org.jfree.data.Range range26 = org.jfree.data.Range.expandToInclude(range24, (double) 100);
        double double28 = range26.constrain((double) '4');
        boolean boolean29 = xYIntervalDataItem20.equals((java.lang.Object) '4');
        org.jfree.data.Range range30 = null;
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range30, (double) 100);
        double double34 = range32.constrain((double) '4');
        int int35 = xYIntervalDataItem20.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray42 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray45 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray48 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray51 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray54 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray57 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray58 = new java.lang.Number[][] { numberArray42, numberArray45, numberArray48, numberArray51, numberArray54, numberArray57 };
        org.jfree.data.category.CategoryDataset categoryDataset59 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray58);
        org.jfree.data.category.CategoryDataset categoryDataset60 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray58);
        int int61 = xYIntervalDataItem20.compareTo((java.lang.Object) categoryDataset60);
        double double62 = xYIntervalDataItem20.getXHighValue();
        int int63 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) double62);
        java.lang.Number number64 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable66 = xYIntervalSeriesCollection0.getSeriesKey((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNotNull(datasetGroup13);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(numberArray51);
        org.junit.Assert.assertNotNull(numberArray54);
        org.junit.Assert.assertNotNull(numberArray57);
        org.junit.Assert.assertNotNull(numberArray58);
        org.junit.Assert.assertNotNull(categoryDataset59);
        org.junit.Assert.assertNotNull(categoryDataset60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 100.0d + "'", double62 == 100.0d);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNull(number64);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0218");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray24 = new java.lang.Number[][] { numberArray8, numberArray11, numberArray14, numberArray17, numberArray20, numberArray23 };
        org.jfree.data.category.CategoryDataset categoryDataset25 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray24);
        java.util.List list26 = categoryDataset25.getRowKeys();
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset25, false);
        int int30 = categoryDataset25.getColumnIndex((java.lang.Comparable) (-1L));
        boolean boolean31 = xYIntervalSeriesCollection0.equals((java.lang.Object) categoryDataset25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable33 = xYIntervalSeriesCollection0.getSeriesKey(32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(categoryDataset25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0219");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range23 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.pie.PieDataset pieDataset47 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset45, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState48 = pieDataset47.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset52 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset47, (java.lang.Comparable) 'a', (double) 10.0f, (int) (short) 10);
        java.util.List list53 = pieDataset52.getKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range55 = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(categoryDataset21, list53, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(pieDataset47);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState48);
        org.junit.Assert.assertNotNull(pieDataset52);
        org.junit.Assert.assertNotNull(list53);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0220");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.DomainOrder domainOrder2 = xYIntervalSeriesCollection0.getDomainOrder();
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        java.lang.Object obj4 = xYIntervalSeriesCollection0.clone();
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray24 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray25 = new java.lang.Number[][] { numberArray9, numberArray12, numberArray15, numberArray18, numberArray21, numberArray24 };
        org.jfree.data.category.CategoryDataset categoryDataset26 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray25);
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset26, true);
        org.jfree.data.general.DatasetGroup datasetGroup29 = categoryDataset26.getGroup();
        java.util.List list30 = categoryDataset26.getRowKeys();
        org.jfree.data.Range range31 = null;
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range31, (double) 100);
        double double35 = range33.constrain((-1.0d));
        org.jfree.data.Range range36 = null;
        org.jfree.data.Range range38 = org.jfree.data.Range.expandToInclude(range36, (double) 100);
        double double40 = range38.constrain((double) '4');
        double double41 = range38.getLength();
        org.jfree.data.Range range42 = null;
        org.jfree.data.Range range44 = org.jfree.data.Range.expandToInclude(range42, (double) 100);
        double double46 = range44.constrain((double) '4');
        boolean boolean47 = range38.intersects(range44);
        boolean boolean48 = range33.intersects(range38);
        org.jfree.data.Range range50 = org.jfree.data.Range.scale(range33, (double) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range52 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, list30, range50, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNotNull(domainOrder2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(numberArray25);
        org.junit.Assert.assertNotNull(categoryDataset26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(datasetGroup29);
        org.junit.Assert.assertNotNull(list30);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 100.0d + "'", double35 == 100.0d);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(range50);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0221");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection8 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection8.getDomainOrder();
        int int10 = xYIntervalSeriesCollection8.getSeriesCount();
        boolean boolean11 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection8);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = xYIntervalSeriesCollection8.getEndYValue((int) '4', 2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(number12);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0222");
        org.jfree.data.function.Function2D function2D0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYDataset xYDataset5 = org.jfree.data.general.DatasetUtilities.sampleFunction2D(function2D0, (double) 1, (double) (short) -1, 100, (java.lang.Comparable) "org.jfree.data.general.SeriesException: hi!1");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'f' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0223");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener48 = null;
        categoryDataset46.removeChangeListener(datasetChangeListener48);
        java.util.List list50 = categoryDataset46.getColumnKeys();
        int int51 = categoryDataset46.getRowCount();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(list50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 6 + "'", int51 == 6);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0224");
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries3 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        java.lang.Object obj5 = null;
        xYIntervalSeries3.firePropertyChange("", obj5, (java.lang.Object) "hi!");
        java.lang.Comparable comparable8 = xYIntervalSeries3.getKey();
        int int10 = xYIntervalSeries3.indexOf((java.lang.Comparable) 0.0f);
        xYIntervalSeries3.setNotify(true);
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray29 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray32 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray33 = new java.lang.Number[][] { numberArray17, numberArray20, numberArray23, numberArray26, numberArray29, numberArray32 };
        org.jfree.data.category.CategoryDataset categoryDataset34 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray33);
        java.util.List list35 = categoryDataset34.getRowKeys();
        org.jfree.data.Range range37 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset34, (double) (short) -1);
        boolean boolean38 = xYIntervalSeries3.equals((java.lang.Object) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            double double40 = xYIntervalSeries3.getYLowValue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + comparable8 + "' != '" + 10 + "'", comparable8, 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(numberArray33);
        org.junit.Assert.assertNotNull(categoryDataset34);
        org.junit.Assert.assertNotNull(list35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0225");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.general.DatasetGroup datasetGroup13 = xYIntervalSeriesCollection0.getGroup();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem20 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int22 = xYIntervalDataItem20.compareTo((java.lang.Object) 1.0f);
        double double23 = xYIntervalDataItem20.getXHighValue();
        org.jfree.data.Range range24 = null;
        org.jfree.data.Range range26 = org.jfree.data.Range.expandToInclude(range24, (double) 100);
        double double28 = range26.constrain((double) '4');
        boolean boolean29 = xYIntervalDataItem20.equals((java.lang.Object) '4');
        org.jfree.data.Range range30 = null;
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range30, (double) 100);
        double double34 = range32.constrain((double) '4');
        int int35 = xYIntervalDataItem20.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray42 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray45 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray48 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray51 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray54 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray57 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray58 = new java.lang.Number[][] { numberArray42, numberArray45, numberArray48, numberArray51, numberArray54, numberArray57 };
        org.jfree.data.category.CategoryDataset categoryDataset59 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray58);
        org.jfree.data.category.CategoryDataset categoryDataset60 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray58);
        int int61 = xYIntervalDataItem20.compareTo((java.lang.Object) categoryDataset60);
        double double62 = xYIntervalDataItem20.getXHighValue();
        int int63 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) double62);
        org.jfree.data.DomainOrder domainOrder64 = xYIntervalSeriesCollection0.getDomainOrder();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable66 = xYIntervalSeriesCollection0.getSeriesKey((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNotNull(datasetGroup13);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(numberArray51);
        org.junit.Assert.assertNotNull(numberArray54);
        org.junit.Assert.assertNotNull(numberArray57);
        org.junit.Assert.assertNotNull(numberArray58);
        org.junit.Assert.assertNotNull(categoryDataset59);
        org.junit.Assert.assertNotNull(categoryDataset60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 100.0d + "'", double62 == 100.0d);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(domainOrder64);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0226");
        java.lang.Number[] numberArray6 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray22 = new java.lang.Number[][] { numberArray6, numberArray9, numberArray12, numberArray15, numberArray18, numberArray21 };
        org.jfree.data.category.CategoryDataset categoryDataset23 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray22);
        org.jfree.data.category.CategoryDataset categoryDataset24 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray22);
        java.lang.Number[] numberArray29 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray32 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray35 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray38 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray41 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray44 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray45 = new java.lang.Number[][] { numberArray29, numberArray32, numberArray35, numberArray38, numberArray41, numberArray44 };
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray45);
        java.util.List list47 = categoryDataset46.getRowKeys();
        org.jfree.data.Range range49 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset46, (double) (short) -1);
        java.util.List list50 = categoryDataset46.getRowKeys();
        java.lang.Number number51 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset46);
        boolean boolean52 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset46);
        org.jfree.data.Range range53 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset46);
        java.lang.Number number54 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset46);
        int int55 = categoryDataset46.getColumnCount();
        java.util.List list56 = categoryDataset46.getRowKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range58 = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(categoryDataset24, list56, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray6);
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(categoryDataset23);
        org.junit.Assert.assertNotNull(categoryDataset24);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(numberArray35);
        org.junit.Assert.assertNotNull(numberArray38);
        org.junit.Assert.assertNotNull(numberArray41);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertNotNull(list47);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(list50);
        org.junit.Assert.assertEquals("'" + number51 + "' != '" + (-1.0d) + "'", number51, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertEquals("'" + number54 + "' != '" + (-1.0d) + "'", number54, (-1.0d));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(list56);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0227");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number16 = xYIntervalSeriesCollection0.getStartX(6, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0228");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection8 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection8.getDomainOrder();
        int int10 = xYIntervalSeriesCollection8.getSeriesCount();
        boolean boolean11 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable13 = xYIntervalSeriesCollection8.getSeriesKey((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0229");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState24 = pieDataset23.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset28 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset23, (java.lang.Comparable) 'a', (double) 10.0f, (int) (short) 10);
        java.lang.Number number30 = pieDataset28.getValue((int) (short) 100);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState31 = pieDataset28.getSelectionState();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState24);
        org.junit.Assert.assertNotNull(pieDataset28);
        org.junit.Assert.assertNull(number30);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState31);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0230");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray24 = new java.lang.Number[][] { numberArray8, numberArray11, numberArray14, numberArray17, numberArray20, numberArray23 };
        org.jfree.data.category.CategoryDataset categoryDataset25 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray24);
        java.util.List list26 = categoryDataset25.getRowKeys();
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset25, false);
        int int30 = categoryDataset25.getColumnIndex((java.lang.Comparable) (-1L));
        boolean boolean31 = xYIntervalSeriesCollection0.equals((java.lang.Object) categoryDataset25);
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj34 = xYIntervalSeriesCollection0.clone();
        // The following exception was thrown during execution in test generation
        try {
            int int36 = xYIntervalSeriesCollection0.getItemCount((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(categoryDataset25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(range33);
        org.junit.Assert.assertNotNull(obj34);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0231");
        org.jfree.data.xy.XYDataset xYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds(xYDataset0, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0232");
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries3 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        java.lang.Object obj5 = null;
        xYIntervalSeries3.firePropertyChange("", obj5, (java.lang.Object) "hi!");
        xYIntervalSeries3.setKey((java.lang.Comparable) (short) 1);
        xYIntervalSeries3.firePropertyChange("", (java.lang.Object) 100L, (java.lang.Object) 100.0f);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries17 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        boolean boolean18 = xYIntervalSeries17.getNotify();
        int int19 = xYIntervalSeries17.getItemCount();
        xYIntervalSeries17.clear();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries24 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries24.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo27 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent28 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo27);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo29 = null;
        seriesChangeEvent28.setSummary(seriesChangeInfo29);
        java.lang.Object obj31 = seriesChangeEvent28.getSource();
        xYIntervalSeries17.notifyListeners(seriesChangeEvent28);
        xYIntervalSeries3.notifyListeners(seriesChangeEvent28);
        java.lang.Number[] numberArray39 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray42 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray45 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray48 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray51 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray54 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray55 = new java.lang.Number[][] { numberArray39, numberArray42, numberArray45, numberArray48, numberArray51, numberArray54 };
        org.jfree.data.category.CategoryDataset categoryDataset56 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray55);
        java.util.List list57 = categoryDataset56.getRowKeys();
        org.jfree.data.Range range59 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset56, false);
        int int61 = categoryDataset56.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset63 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo64 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent65 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset63, datasetChangeInfo64);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent66 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset56, datasetChangeInfo64);
        org.jfree.data.Range range67 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset56);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener68 = null;
        categoryDataset56.removeChangeListener(datasetChangeListener68);
        boolean boolean70 = xYIntervalSeries3.equals((java.lang.Object) datasetChangeListener68);
        xYIntervalSeries3.setNotify(true);
        int int74 = xYIntervalSeries3.indexOf((java.lang.Comparable) (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + obj31 + "' != '" + ' ' + "'", obj31, ' ');
        org.junit.Assert.assertNotNull(numberArray39);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(numberArray51);
        org.junit.Assert.assertNotNull(numberArray54);
        org.junit.Assert.assertNotNull(numberArray55);
        org.junit.Assert.assertNotNull(categoryDataset56);
        org.junit.Assert.assertNotNull(list57);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0233");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        java.lang.Object obj9 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener10 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener10);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection12 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset14 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo15 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent16 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset14, datasetChangeInfo15);
        xYIntervalSeriesCollection12.notifyListeners(datasetChangeEvent16);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState18 = xYIntervalSeriesCollection12.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener19 = null;
        xYIntervalSeriesCollection12.removeChangeListener(datasetChangeListener19);
        java.lang.Number number21 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection12);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo22 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection12.fireDatasetChanged(datasetChangeInfo22);
        boolean boolean24 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection12);
        // The following exception was thrown during execution in test generation
        try {
            double double27 = xYIntervalSeriesCollection12.getEndXValue(10, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNull(xYDatasetSelectionState18);
        org.junit.Assert.assertNull(number21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0234");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range15 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range16 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            xYIntervalSeriesCollection0.removeSeries((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNull(range15);
        org.junit.Assert.assertNull(range16);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0235");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener48 = null;
        categoryDataset46.removeChangeListener(datasetChangeListener48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable51 = categoryDataset46.getRowKey(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0236");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        java.lang.Object obj14 = xYIntervalDataItem10.clone();
        boolean boolean16 = xYIntervalDataItem10.equals((java.lang.Object) 0);
        int int17 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        org.jfree.data.DomainOrder domainOrder18 = xYIntervalSeriesCollection0.getDomainOrder();
        java.lang.Number number19 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj20 = xYIntervalSeriesCollection0.clone();
        // The following exception was thrown during execution in test generation
        try {
            double double23 = xYIntervalSeriesCollection0.getStartXValue((int) (short) 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(domainOrder18);
        org.junit.Assert.assertNull(number19);
        org.junit.Assert.assertNotNull(obj20);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0237");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Class<?> wildcardClass14 = xYIntervalSeriesCollection0.getClass();
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0238");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem14 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int16 = xYIntervalDataItem14.compareTo((java.lang.Object) 1.0f);
        double double17 = xYIntervalDataItem14.getXHighValue();
        org.jfree.data.Range range18 = null;
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range18, (double) 100);
        double double22 = range20.constrain((double) '4');
        boolean boolean23 = xYIntervalDataItem14.equals((java.lang.Object) '4');
        org.jfree.data.Range range24 = null;
        org.jfree.data.Range range26 = org.jfree.data.Range.expandToInclude(range24, (double) 100);
        double double28 = range26.constrain((double) '4');
        int int29 = xYIntervalDataItem14.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray36 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray39 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray42 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray45 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray48 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray51 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray52 = new java.lang.Number[][] { numberArray36, numberArray39, numberArray42, numberArray45, numberArray48, numberArray51 };
        org.jfree.data.category.CategoryDataset categoryDataset53 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray52);
        org.jfree.data.category.CategoryDataset categoryDataset54 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray52);
        int int55 = xYIntervalDataItem14.compareTo((java.lang.Object) categoryDataset54);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener56 = null;
        categoryDataset54.removeChangeListener(datasetChangeListener56);
        org.jfree.data.general.DatasetGroup datasetGroup58 = categoryDataset54.getGroup();
        xYIntervalSeriesCollection0.setGroup(datasetGroup58);
        // The following exception was thrown during execution in test generation
        try {
            double double62 = xYIntervalSeriesCollection0.getYValue(1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(numberArray36);
        org.junit.Assert.assertNotNull(numberArray39);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(numberArray51);
        org.junit.Assert.assertNotNull(numberArray52);
        org.junit.Assert.assertNotNull(categoryDataset53);
        org.junit.Assert.assertNotNull(categoryDataset54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(datasetGroup58);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0239");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Number number3 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable5 = xYIntervalSeriesCollection0.getSeriesKey((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNull(number3);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0240");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState24 = pieDataset23.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset28 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset23, (java.lang.Comparable) (short) 0, (double) (short) 100, (int) ' ');
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem35 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int37 = xYIntervalDataItem35.compareTo((java.lang.Object) 1.0f);
        double double38 = xYIntervalDataItem35.getXHighValue();
        org.jfree.data.Range range39 = null;
        org.jfree.data.Range range41 = org.jfree.data.Range.expandToInclude(range39, (double) 100);
        double double43 = range41.constrain((double) '4');
        boolean boolean44 = xYIntervalDataItem35.equals((java.lang.Object) '4');
        org.jfree.data.Range range45 = null;
        org.jfree.data.Range range47 = org.jfree.data.Range.expandToInclude(range45, (double) 100);
        double double49 = range47.constrain((double) '4');
        int int50 = xYIntervalDataItem35.compareTo((java.lang.Object) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number51 = pieDataset23.getValue((java.lang.Comparable) int50);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.UnknownKeyException; message: The key (1) is not recognised.");
        } catch (org.jfree.data.UnknownKeyException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState24);
        org.junit.Assert.assertNotNull(pieDataset28);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 100.0d + "'", double43 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0241");
        org.jfree.data.function.Function2D function2D0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYSeries xYSeries5 = org.jfree.data.general.DatasetUtilities.sampleFunction2DToSeries(function2D0, (double) 1.0f, (double) 32, 10, (java.lang.Comparable) 1.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'f' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0242");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        java.lang.Object obj10 = xYIntervalDataItem6.clone();
        boolean boolean12 = xYIntervalDataItem6.equals((java.lang.Object) 0);
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray29 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray32 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray33 = new java.lang.Number[][] { numberArray17, numberArray20, numberArray23, numberArray26, numberArray29, numberArray32 };
        org.jfree.data.category.CategoryDataset categoryDataset34 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray33);
        org.jfree.data.pie.PieDataset pieDataset36 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset34, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState37 = pieDataset36.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset41 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset36, (java.lang.Comparable) (short) 0, (double) (short) 100, (int) ' ');
        org.jfree.data.category.CategoryDataset categoryDataset42 = org.jfree.data.general.DatasetUtilities.createCategoryDataset((java.lang.Comparable) xYIntervalDataItem6, (org.jfree.data.KeyedValues) pieDataset41);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem49 = new org.jfree.data.xy.XYIntervalDataItem(100.0d, (double) (byte) 1, (double) (byte) 1, 0.0d, 0.0d, 33.0d);
        double double50 = xYIntervalDataItem49.getXLowValue();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number51 = pieDataset41.getValue((java.lang.Comparable) double50);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.UnknownKeyException; message: The key (1.0) is not recognised.");
        } catch (org.jfree.data.UnknownKeyException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(numberArray33);
        org.junit.Assert.assertNotNull(categoryDataset34);
        org.junit.Assert.assertNotNull(pieDataset36);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState37);
        org.junit.Assert.assertNotNull(pieDataset41);
        org.junit.Assert.assertNotNull(categoryDataset42);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0243");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        java.lang.Object obj10 = xYIntervalDataItem6.clone();
        boolean boolean12 = xYIntervalDataItem6.equals((java.lang.Object) 0);
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray29 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray32 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray33 = new java.lang.Number[][] { numberArray17, numberArray20, numberArray23, numberArray26, numberArray29, numberArray32 };
        org.jfree.data.category.CategoryDataset categoryDataset34 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray33);
        org.jfree.data.pie.PieDataset pieDataset36 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset34, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState37 = pieDataset36.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset41 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset36, (java.lang.Comparable) (short) 0, (double) (short) 100, (int) ' ');
        org.jfree.data.category.CategoryDataset categoryDataset42 = org.jfree.data.general.DatasetUtilities.createCategoryDataset((java.lang.Comparable) xYIntervalDataItem6, (org.jfree.data.KeyedValues) pieDataset41);
        boolean boolean43 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(pieDataset41);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState44 = pieDataset41.getSelectionState();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(numberArray33);
        org.junit.Assert.assertNotNull(categoryDataset34);
        org.junit.Assert.assertNotNull(pieDataset36);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState37);
        org.junit.Assert.assertNotNull(pieDataset41);
        org.junit.Assert.assertNotNull(categoryDataset42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState44);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0244");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener9 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries14 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries14.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo17 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent18 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo17);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo19 = null;
        seriesChangeEvent18.setSummary(seriesChangeInfo19);
        java.lang.Object obj21 = seriesChangeEvent18.getSource();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent18);
        boolean boolean23 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = xYIntervalSeriesCollection0.getXValue((int) ' ', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + ' ' + "'", obj21, ' ');
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0245");
        org.jfree.data.xy.TableXYDataset tableXYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double2 = org.jfree.data.general.DatasetUtilities.calculateStackTotal(tableXYDataset0, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0246");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range15 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYIntervalSeries xYIntervalSeries17 = xYIntervalSeriesCollection0.getSeries((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNull(range15);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0247");
        org.jfree.data.function.Function2D function2D0 = null;
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        double double11 = xYIntervalDataItem10.getYLowValue();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYSeries xYSeries12 = org.jfree.data.general.DatasetUtilities.sampleFunction2DToSeries(function2D0, (double) (byte) 0, (double) 10.0f, (int) '#', (java.lang.Comparable) double11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'f' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0248");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection14 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset16 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo17 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent18 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset16, datasetChangeInfo17);
        xYIntervalSeriesCollection14.notifyListeners(datasetChangeEvent18);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries23 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries23.setMaximumItemCount((int) ' ');
        org.jfree.data.Range range27 = null;
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range27, (double) 100);
        double double31 = range29.constrain((double) '4');
        double double32 = range29.getLength();
        org.jfree.data.Range range33 = null;
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) 100);
        double double37 = range35.constrain((double) '4');
        boolean boolean38 = range29.intersects(range35);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries42 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries42.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo45 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent46 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo45);
        xYIntervalSeries23.firePropertyChange("", (java.lang.Object) boolean38, (java.lang.Object) ' ');
        xYIntervalSeriesCollection14.removeSeries(xYIntervalSeries23);
        // The following exception was thrown during execution in test generation
        try {
            xYIntervalSeriesCollection0.addSeries(xYIntervalSeries23);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Listener org.jfree.data.xy.XYIntervalSeriesCollection@461a382d is not of type class org.jfree.data.Range");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0249");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem39 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int41 = xYIntervalDataItem39.compareTo((java.lang.Object) 1.0f);
        int int42 = categoryDataset22.getColumnIndex((java.lang.Comparable) xYIntervalDataItem39);
        double double43 = xYIntervalDataItem39.getXLowValue();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection44 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder45 = xYIntervalSeriesCollection44.getDomainOrder();
        org.jfree.data.ComparableObjectItem comparableObjectItem46 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable) xYIntervalDataItem39, (java.lang.Object) domainOrder45);
        double double47 = xYIntervalDataItem39.getYValue();
        double double48 = xYIntervalDataItem39.getYHighValue();
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(domainOrder45);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.0d + "'", double48 == 100.0d);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0250");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range23 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener24 = null;
        categoryDataset21.removeChangeListener(datasetChangeListener24);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range23);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0251");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range15 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range16 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = xYIntervalSeriesCollection0.getItemCount(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNull(range15);
        org.junit.Assert.assertNull(range16);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0252");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        org.jfree.data.Range range48 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset46);
        org.jfree.data.Range range50 = org.jfree.data.Range.scale(range48, 10.0d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertNotNull(range50);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0253");
        org.jfree.data.ComparableObjectSeries comparableObjectSeries3 = new org.jfree.data.ComparableObjectSeries((java.lang.Comparable) (short) 0, true, false);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection4 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset6 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo7 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent8 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset6, datasetChangeInfo7);
        xYIntervalSeriesCollection4.notifyListeners(datasetChangeEvent8);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState10 = xYIntervalSeriesCollection4.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener11 = null;
        xYIntervalSeriesCollection4.removeChangeListener(datasetChangeListener11);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState13 = xYIntervalSeriesCollection4.getSelectionState();
        org.jfree.data.Range range15 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection4, false);
        // The following exception was thrown during execution in test generation
        try {
            comparableObjectSeries3.removeChangeListener((org.jfree.data.event.SeriesChangeListener) xYIntervalSeriesCollection4);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Listener org.jfree.data.xy.XYIntervalSeriesCollection@2730282c is not of type class org.jfree.data.Range");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState10);
        org.junit.Assert.assertNull(xYDatasetSelectionState13);
        org.junit.Assert.assertNull(range15);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0254");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = xYIntervalSeriesCollection0.getXValue(0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0255");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener48 = null;
        categoryDataset46.removeChangeListener(datasetChangeListener48);
        org.jfree.data.general.DatasetGroup datasetGroup50 = categoryDataset46.getGroup();
        java.lang.Number[] numberArray55 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray58 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray61 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray64 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray67 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray70 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray71 = new java.lang.Number[][] { numberArray55, numberArray58, numberArray61, numberArray64, numberArray67, numberArray70 };
        org.jfree.data.category.CategoryDataset categoryDataset72 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray71);
        java.util.List list73 = categoryDataset72.getRowKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range75 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset46, list73, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(datasetGroup50);
        org.junit.Assert.assertNotNull(numberArray55);
        org.junit.Assert.assertNotNull(numberArray58);
        org.junit.Assert.assertNotNull(numberArray61);
        org.junit.Assert.assertNotNull(numberArray64);
        org.junit.Assert.assertNotNull(numberArray67);
        org.junit.Assert.assertNotNull(numberArray70);
        org.junit.Assert.assertNotNull(numberArray71);
        org.junit.Assert.assertNotNull(categoryDataset72);
        org.junit.Assert.assertNotNull(list73);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0256");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.general.DatasetGroup datasetGroup2 = xYIntervalSeriesCollection0.getGroup();
        boolean boolean3 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = xYIntervalSeriesCollection0.getStartYValue((int) '#', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNotNull(datasetGroup2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0257");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.removeAllSeries();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number15 = xYIntervalSeriesCollection0.getStartX((-1), (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0258");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.removeAllSeries();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number15 = xYIntervalSeriesCollection0.getY(6, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0259");
        org.jfree.data.Range range0 = null;
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, true);
        org.jfree.data.Range range26 = org.jfree.data.Range.shift(range24, 0.0d);
        org.jfree.data.Range range27 = org.jfree.data.Range.combine(range0, range24);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range30 = org.jfree.data.Range.expand(range0, (-6.0d), 35.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'range' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range27);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0260");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray24 = new java.lang.Number[][] { numberArray8, numberArray11, numberArray14, numberArray17, numberArray20, numberArray23 };
        org.jfree.data.category.CategoryDataset categoryDataset25 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray24);
        java.util.List list26 = categoryDataset25.getRowKeys();
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset25, false);
        int int30 = categoryDataset25.getColumnIndex((java.lang.Comparable) (-1L));
        boolean boolean31 = xYIntervalSeriesCollection0.equals((java.lang.Object) categoryDataset25);
        // The following exception was thrown during execution in test generation
        try {
            int int33 = xYIntervalSeriesCollection0.getItemCount((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(categoryDataset25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0261");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState24 = pieDataset23.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset28 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset23, (java.lang.Comparable) 'a', (double) 10.0f, (int) (short) 10);
        org.jfree.data.pie.PieDataset pieDataset31 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset28, (java.lang.Comparable) 1.0f, 1.0d);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number33 = pieDataset31.getValue((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState24);
        org.junit.Assert.assertNotNull(pieDataset28);
        org.junit.Assert.assertNotNull(pieDataset31);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0262");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState7 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState7);
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray29 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray30 = new java.lang.Number[][] { numberArray14, numberArray17, numberArray20, numberArray23, numberArray26, numberArray29 };
        org.jfree.data.category.CategoryDataset categoryDataset31 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray30);
        java.util.List list32 = categoryDataset31.getRowKeys();
        org.jfree.data.Range range34 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset31, false);
        int int36 = categoryDataset31.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset38 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo39 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent40 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset38, datasetChangeInfo39);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent41 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset31, datasetChangeInfo39);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem48 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int50 = xYIntervalDataItem48.compareTo((java.lang.Object) 1.0f);
        int int51 = categoryDataset31.getColumnIndex((java.lang.Comparable) xYIntervalDataItem48);
        double double52 = xYIntervalDataItem48.getXLowValue();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection53 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder54 = xYIntervalSeriesCollection53.getDomainOrder();
        org.jfree.data.ComparableObjectItem comparableObjectItem55 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable) xYIntervalDataItem48, (java.lang.Object) domainOrder54);
        int int56 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) comparableObjectItem55);
        int int57 = xYIntervalSeriesCollection0.getSeriesCount();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYIntervalSeries xYIntervalSeries59 = xYIntervalSeriesCollection0.getSeries((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(numberArray30);
        org.junit.Assert.assertNotNull(categoryDataset31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertNotNull(domainOrder54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0263");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = xYIntervalSeriesCollection0.getItemCount(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0264");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = xYIntervalSeriesCollection0.getStartXValue(2, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNull(range2);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0265");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        java.util.List list48 = categoryDataset46.getColumnKeys();
        boolean boolean49 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset46);
        java.lang.Comparable comparable50 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number52 = categoryDataset46.getValue(comparable50, (java.lang.Comparable) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'rowKey' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(list48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0266");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21, true);
        org.jfree.data.Range range29 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (byte) 0);
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range29, 0.0d);
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range31, (double) 1L);
        boolean boolean35 = range31.contains((double) 0.0f);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0267");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range1 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0268");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection8 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection8.getDomainOrder();
        int int10 = xYIntervalSeriesCollection8.getSeriesCount();
        boolean boolean11 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection8);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        xYIntervalSeriesCollection8.validateObject();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener14 = null;
        xYIntervalSeriesCollection8.addChangeListener(datasetChangeListener14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number18 = xYIntervalSeriesCollection8.getEndY((int) ' ', 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(number12);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0269");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener12 = null;
        xYIntervalSeriesCollection0.addChangeListener(datasetChangeListener12);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYIntervalSeries xYIntervalSeries15 = xYIntervalSeriesCollection0.getSeries((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0270");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, (double) 100);
        double double4 = range2.constrain((double) '4');
        double double5 = range2.getLength();
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, (double) 100, false);
        org.jfree.data.Range range9 = null;
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range9, (double) 100);
        double double13 = range11.constrain((double) '4');
        double double14 = range11.getLength();
        org.jfree.data.Range range15 = null;
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range15, (double) 100);
        double double19 = range17.constrain((double) '4');
        boolean boolean20 = range11.intersects(range17);
        boolean boolean21 = range2.intersects(range11);
        org.jfree.data.Range range22 = null;
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range22, (double) 100);
        double double26 = range24.constrain((double) '4');
        double double27 = range24.getLength();
        double double28 = range24.getCentralValue();
        java.lang.Number[] numberArray33 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray36 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray39 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray42 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray45 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray48 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray49 = new java.lang.Number[][] { numberArray33, numberArray36, numberArray39, numberArray42, numberArray45, numberArray48 };
        org.jfree.data.category.CategoryDataset categoryDataset50 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray49);
        java.util.List list51 = categoryDataset50.getRowKeys();
        org.jfree.data.Range range53 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset50, (double) (short) -1);
        java.lang.Number number54 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset50);
        org.jfree.data.Range range55 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset50);
        boolean boolean56 = range24.intersects(range55);
        boolean boolean57 = range2.intersects(range55);
        org.jfree.data.Range range60 = org.jfree.data.Range.expand(range2, (double) (short) -1, 93.0d);
        org.junit.Assert.assertNotNull(range2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertNotNull(numberArray33);
        org.junit.Assert.assertNotNull(numberArray36);
        org.junit.Assert.assertNotNull(numberArray39);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(numberArray49);
        org.junit.Assert.assertNotNull(categoryDataset50);
        org.junit.Assert.assertNotNull(list51);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertEquals("'" + number54 + "' != '" + (-1.0d) + "'", number54, (-1.0d));
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(range60);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0271");
        java.lang.Number[] numberArray6 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray22 = new java.lang.Number[][] { numberArray6, numberArray9, numberArray12, numberArray15, numberArray18, numberArray21 };
        org.jfree.data.category.CategoryDataset categoryDataset23 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray22);
        org.jfree.data.category.CategoryDataset categoryDataset24 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("NOID", "org.jfree.data.event.SeriesChangeEvent[source= ]", numberArray22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable26 = categoryDataset24.getColumnKey((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray6);
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(categoryDataset23);
        org.junit.Assert.assertNotNull(categoryDataset24);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0272");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.general.DatasetGroup datasetGroup13 = xYIntervalSeriesCollection0.getGroup();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem20 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int22 = xYIntervalDataItem20.compareTo((java.lang.Object) 1.0f);
        double double23 = xYIntervalDataItem20.getXHighValue();
        org.jfree.data.Range range24 = null;
        org.jfree.data.Range range26 = org.jfree.data.Range.expandToInclude(range24, (double) 100);
        double double28 = range26.constrain((double) '4');
        boolean boolean29 = xYIntervalDataItem20.equals((java.lang.Object) '4');
        org.jfree.data.Range range30 = null;
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range30, (double) 100);
        double double34 = range32.constrain((double) '4');
        int int35 = xYIntervalDataItem20.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray42 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray45 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray48 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray51 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray54 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray57 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray58 = new java.lang.Number[][] { numberArray42, numberArray45, numberArray48, numberArray51, numberArray54, numberArray57 };
        org.jfree.data.category.CategoryDataset categoryDataset59 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray58);
        org.jfree.data.category.CategoryDataset categoryDataset60 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray58);
        int int61 = xYIntervalDataItem20.compareTo((java.lang.Object) categoryDataset60);
        double double62 = xYIntervalDataItem20.getXHighValue();
        int int63 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) double62);
        org.jfree.data.DomainOrder domainOrder64 = xYIntervalSeriesCollection0.getDomainOrder();
        // The following exception was thrown during execution in test generation
        try {
            double double67 = xYIntervalSeriesCollection0.getEndXValue((int) (byte) 1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNotNull(datasetGroup13);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(numberArray51);
        org.junit.Assert.assertNotNull(numberArray54);
        org.junit.Assert.assertNotNull(numberArray57);
        org.junit.Assert.assertNotNull(numberArray58);
        org.junit.Assert.assertNotNull(categoryDataset59);
        org.junit.Assert.assertNotNull(categoryDataset60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 100.0d + "'", double62 == 100.0d);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(domainOrder64);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0273");
        double[] doubleArray11 = new double[] { 1.0d, (byte) -1, 1.0d };
        double[][] doubleArray12 = new double[][] { doubleArray11 };
        org.jfree.data.category.CategoryDataset categoryDataset13 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "", doubleArray12);
        org.jfree.data.category.CategoryDataset categoryDataset14 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!1", "hi!", doubleArray12);
        org.jfree.data.category.CategoryDataset categoryDataset15 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("Range[100.0,100.0]", "org.jfree.data.event.SeriesChangeEvent[source= ]", doubleArray12);
        org.jfree.data.category.CategoryDataset categoryDataset16 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!1", "hi!", doubleArray12);
        org.jfree.data.KeyToGroupMap keyToGroupMap17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range18 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset16, keyToGroupMap17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(categoryDataset13);
        org.junit.Assert.assertNotNull(categoryDataset14);
        org.junit.Assert.assertNotNull(categoryDataset15);
        org.junit.Assert.assertNotNull(categoryDataset16);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0274");
        org.jfree.data.function.Function2D function2D0 = null;
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        org.jfree.data.Range range14 = null;
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range14, (double) 100);
        double double18 = range16.constrain((double) '4');
        boolean boolean19 = xYIntervalDataItem10.equals((java.lang.Object) '4');
        org.jfree.data.Range range20 = null;
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range20, (double) 100);
        double double24 = range22.constrain((double) '4');
        int int25 = xYIntervalDataItem10.compareTo((java.lang.Object) '4');
        double double26 = xYIntervalDataItem10.getXHighValue();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYDataset xYDataset27 = org.jfree.data.general.DatasetUtilities.sampleFunction2D(function2D0, 97.0d, 0.0d, (int) (short) -1, (java.lang.Comparable) double26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'f' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0275");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection26 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset28 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo29 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent30 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset28, datasetChangeInfo29);
        xYIntervalSeriesCollection26.notifyListeners(datasetChangeEvent30);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState32 = xYIntervalSeriesCollection26.getSelectionState();
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection26);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection34 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder35 = xYIntervalSeriesCollection34.getDomainOrder();
        int int36 = xYIntervalSeriesCollection34.getSeriesCount();
        boolean boolean37 = xYIntervalSeriesCollection26.hasListener((java.util.EventListener) xYIntervalSeriesCollection34);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo38 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent39 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) list25, (org.jfree.data.general.Dataset) xYIntervalSeriesCollection34, datasetChangeInfo38);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState40 = xYIntervalSeriesCollection34.getSelectionState();
        // The following exception was thrown during execution in test generation
        try {
            int int42 = xYIntervalSeriesCollection34.getItemCount(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNull(xYDatasetSelectionState32);
        org.junit.Assert.assertNull(range33);
        org.junit.Assert.assertNotNull(domainOrder35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(xYDatasetSelectionState40);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0276");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        int int24 = categoryDataset21.getRowCount();
        java.lang.Number number25 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(categoryDataset21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable27 = categoryDataset21.getRowKey((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertEquals("'" + number25 + "' != '" + 32.0d + "'", number25, 32.0d);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0277");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number27 = categoryDataset21.getValue(2, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0278");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.general.DatasetGroup datasetGroup2 = xYIntervalSeriesCollection0.getGroup();
        boolean boolean3 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = xYIntervalSeriesCollection0.getStartYValue(100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNotNull(datasetGroup2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0279");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        java.lang.Object obj14 = xYIntervalDataItem10.clone();
        boolean boolean16 = xYIntervalDataItem10.equals((java.lang.Object) 0);
        int int17 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        java.lang.Number number18 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.general.Dataset dataset20 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo21 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent22 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset20, datasetChangeInfo21);
        boolean boolean23 = xYIntervalSeriesCollection0.equals((java.lang.Object) datasetChangeInfo21);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = xYIntervalSeriesCollection0.getEndXValue((int) 'a', (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(number18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0280");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number14 = xYIntervalSeriesCollection0.getStartY((int) ' ', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0281");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        boolean boolean10 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number13 = xYIntervalSeriesCollection0.getStartX((int) 'a', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0282");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range23 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        org.jfree.data.general.DatasetGroup datasetGroup24 = categoryDataset21.getGroup();
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        boolean boolean26 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset28 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, (java.lang.Comparable) 10.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(datasetGroup24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0283");
        org.jfree.data.ComparableObjectSeries comparableObjectSeries3 = new org.jfree.data.ComparableObjectSeries((java.lang.Comparable) 0L, true, true);
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray24 = new java.lang.Number[][] { numberArray8, numberArray11, numberArray14, numberArray17, numberArray20, numberArray23 };
        org.jfree.data.category.CategoryDataset categoryDataset25 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray24);
        java.util.List list26 = categoryDataset25.getRowKeys();
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset25, (double) (short) -1);
        java.util.List list29 = categoryDataset25.getRowKeys();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection30 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset32 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo33 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent34 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset32, datasetChangeInfo33);
        xYIntervalSeriesCollection30.notifyListeners(datasetChangeEvent34);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState36 = xYIntervalSeriesCollection30.getSelectionState();
        org.jfree.data.Range range37 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection30);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection38 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder39 = xYIntervalSeriesCollection38.getDomainOrder();
        int int40 = xYIntervalSeriesCollection38.getSeriesCount();
        boolean boolean41 = xYIntervalSeriesCollection30.hasListener((java.util.EventListener) xYIntervalSeriesCollection38);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo42 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent43 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) list29, (org.jfree.data.general.Dataset) xYIntervalSeriesCollection38, datasetChangeInfo42);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState44 = xYIntervalSeriesCollection38.getSelectionState();
        // The following exception was thrown during execution in test generation
        try {
            comparableObjectSeries3.addChangeListener((org.jfree.data.event.SeriesChangeListener) xYIntervalSeriesCollection38);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Listener org.jfree.data.xy.XYIntervalSeriesCollection@1c31cf99 is not of type class org.jfree.data.xy.XYIntervalSeries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(categoryDataset25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNull(xYDatasetSelectionState36);
        org.junit.Assert.assertNull(range37);
        org.junit.Assert.assertNotNull(domainOrder39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(xYDatasetSelectionState44);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0284");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, (double) 100);
        double double4 = range2.constrain((double) '4');
        double double5 = range2.getLength();
        double double6 = range2.getCentralValue();
        boolean boolean9 = range2.intersects((double) 2147483647, (double) (short) 10);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection10 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset12 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo13 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent14 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset12, datasetChangeInfo13);
        xYIntervalSeriesCollection10.notifyListeners(datasetChangeEvent14);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState16 = xYIntervalSeriesCollection10.getSelectionState();
        org.jfree.data.Range range17 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection10);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection18 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset20 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo21 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent22 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset20, datasetChangeInfo21);
        xYIntervalSeriesCollection18.notifyListeners(datasetChangeEvent22);
        org.jfree.data.general.Dataset dataset24 = datasetChangeEvent22.getDataset();
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo25 = datasetChangeEvent22.getInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent26 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) range2, (org.jfree.data.general.Dataset) xYIntervalSeriesCollection10, datasetChangeInfo25);
        java.lang.Number[] numberArray32 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray35 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray38 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray41 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray44 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray47 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray48 = new java.lang.Number[][] { numberArray32, numberArray35, numberArray38, numberArray41, numberArray44, numberArray47 };
        org.jfree.data.category.CategoryDataset categoryDataset49 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray48);
        java.util.List list50 = categoryDataset49.getRowKeys();
        org.jfree.data.Range range52 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset49, false);
        int int54 = categoryDataset49.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset56 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo57 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent58 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset56, datasetChangeInfo57);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent59 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset49, datasetChangeInfo57);
        xYIntervalSeriesCollection10.notifyListeners(datasetChangeEvent59);
        // The following exception was thrown during execution in test generation
        try {
            double double63 = xYIntervalSeriesCollection10.getYValue((int) (short) 100, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(range2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(xYDatasetSelectionState16);
        org.junit.Assert.assertNull(range17);
        org.junit.Assert.assertNull(dataset24);
        org.junit.Assert.assertNotNull(datasetChangeInfo25);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(numberArray35);
        org.junit.Assert.assertNotNull(numberArray38);
        org.junit.Assert.assertNotNull(numberArray41);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(numberArray47);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(categoryDataset49);
        org.junit.Assert.assertNotNull(list50);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0285");
        java.lang.Number[] numberArray6 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray22 = new java.lang.Number[][] { numberArray6, numberArray9, numberArray12, numberArray15, numberArray18, numberArray21 };
        org.jfree.data.category.CategoryDataset categoryDataset23 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray22);
        org.jfree.data.category.CategoryDataset categoryDataset24 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray22);
        java.lang.Number number25 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(categoryDataset24);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset24, false);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem34 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int36 = xYIntervalDataItem34.compareTo((java.lang.Object) 1.0f);
        double double37 = xYIntervalDataItem34.getXHighValue();
        org.jfree.data.Range range38 = null;
        org.jfree.data.Range range40 = org.jfree.data.Range.expandToInclude(range38, (double) 100);
        double double42 = range40.constrain((double) '4');
        boolean boolean43 = xYIntervalDataItem34.equals((java.lang.Object) '4');
        boolean boolean45 = xYIntervalDataItem34.equals((java.lang.Object) 0.0f);
        java.lang.Object obj46 = xYIntervalDataItem34.clone();
        java.lang.Object obj47 = null;
        int int48 = xYIntervalDataItem34.compareTo(obj47);
        double double49 = xYIntervalDataItem34.getXLowValue();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset50 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset24, (java.lang.Comparable) double49);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray6);
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(categoryDataset23);
        org.junit.Assert.assertNotNull(categoryDataset24);
        org.junit.Assert.assertEquals("'" + number25 + "' != '" + 32.0d + "'", number25, 32.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 100.0d + "'", double42 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0286");
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries3 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        java.lang.Object obj5 = null;
        xYIntervalSeries3.firePropertyChange("", obj5, (java.lang.Object) "hi!");
        xYIntervalSeries3.setKey((java.lang.Comparable) (short) 1);
        xYIntervalSeries3.firePropertyChange("", (java.lang.Object) 100L, (java.lang.Object) 100.0f);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem21 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int23 = xYIntervalDataItem21.compareTo((java.lang.Object) 1.0f);
        double double24 = xYIntervalDataItem21.getXHighValue();
        java.lang.Object obj25 = xYIntervalDataItem21.clone();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries29 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        boolean boolean30 = xYIntervalSeries29.getNotify();
        int int31 = xYIntervalSeries29.getItemCount();
        boolean boolean32 = xYIntervalSeries29.getAutoSort();
        xYIntervalSeries29.fireSeriesChanged();
        xYIntervalSeries3.firePropertyChange("", obj25, (java.lang.Object) xYIntervalSeries29);
        xYIntervalSeries3.setKey((java.lang.Comparable) 33.0d);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection37 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset39 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo40 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent41 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset39, datasetChangeInfo40);
        xYIntervalSeriesCollection37.notifyListeners(datasetChangeEvent41);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState43 = xYIntervalSeriesCollection37.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener44 = null;
        xYIntervalSeriesCollection37.removeChangeListener(datasetChangeListener44);
        java.lang.Number number46 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection37);
        org.jfree.data.Range range48 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection37, true);
        xYIntervalSeriesCollection37.validateObject();
        // The following exception was thrown during execution in test generation
        try {
            xYIntervalSeries3.addChangeListener((org.jfree.data.event.SeriesChangeListener) xYIntervalSeriesCollection37);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Listener org.jfree.data.xy.XYIntervalSeriesCollection@7588152 is not of type class org.jfree.data.xy.XYIntervalSeries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(xYDatasetSelectionState43);
        org.junit.Assert.assertNull(number46);
        org.junit.Assert.assertNull(range48);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0287");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection8 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection8.getDomainOrder();
        int int10 = xYIntervalSeriesCollection8.getSeriesCount();
        boolean boolean11 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection8);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        java.util.List list13 = null;
        org.jfree.data.Range range14 = null;
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range14, (double) 100);
        double double18 = range16.constrain((double) '4');
        double double19 = range16.getLength();
        org.jfree.data.Range range20 = null;
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range20, (double) 100);
        double double24 = range22.constrain((double) '4');
        boolean boolean25 = range16.intersects(range22);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8, list13, range22, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'visibleSeriesKeys' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(number12);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0288");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        double double48 = xYIntervalDataItem6.getXHighValue();
        double double49 = xYIntervalDataItem6.getXLowValue();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.0d + "'", double48 == 100.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.0d + "'", double49 == 1.0d);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0289");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = xYIntervalSeriesCollection0.getEndXValue((int) (short) 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(number12);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0290");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range23 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        org.jfree.data.general.DatasetGroup datasetGroup24 = categoryDataset21.getGroup();
        java.lang.Object obj25 = datasetGroup24.clone();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(datasetGroup24);
        org.junit.Assert.assertNotNull(obj25);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0291");
        org.jfree.data.function.Function2D function2D0 = null;
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        boolean boolean14 = xYIntervalDataItem10.equals((java.lang.Object) 32);
        double double15 = xYIntervalDataItem10.getYValue();
        java.lang.Object obj16 = xYIntervalDataItem10.clone();
        double double17 = xYIntervalDataItem10.getXHighValue();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYSeries xYSeries18 = org.jfree.data.general.DatasetUtilities.sampleFunction2DToSeries(function2D0, 192.0d, (double) 100.0f, 2147483647, (java.lang.Comparable) xYIntervalDataItem10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'f' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0292");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number6 = xYIntervalSeriesCollection0.getEndX((int) (byte) 100, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0293");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        // The following exception was thrown during execution in test generation
        try {
            xYIntervalSeriesCollection0.removeSeries((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0294");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range23 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        org.jfree.data.general.DatasetGroup datasetGroup24 = categoryDataset21.getGroup();
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        boolean boolean26 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        java.lang.Number number27 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(categoryDataset21);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(datasetGroup24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + number27 + "' != '" + 32.0d + "'", number27, 32.0d);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0295");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        boolean boolean22 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        java.lang.Number number23 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21, true);
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range25, 198.0d);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + number23 + "' != '" + (-1.0d) + "'", number23, (-1.0d));
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0296");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number5 = xYIntervalSeriesCollection0.getY((int) (short) 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNull(range2);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0297");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener34 = null;
        categoryDataset22.removeChangeListener(datasetChangeListener34);
        java.util.List list36 = categoryDataset22.getColumnKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset38 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset22, (java.lang.Comparable) true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(list36);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0298");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number36 = categoryDataset22.getValue((int) ' ', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(range33);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0299");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        int int4 = xYIntervalSeriesCollection0.getSeriesCount();
        int int6 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 100.0d);
        org.jfree.data.DomainOrder domainOrder7 = xYIntervalSeriesCollection0.getDomainOrder();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = xYIntervalSeriesCollection0.getStartXValue((int) (short) 0, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(domainOrder7);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0300");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range15 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range16 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = xYIntervalSeriesCollection0.getEndXValue(1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNull(range15);
        org.junit.Assert.assertNull(range16);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0301");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.Range range4 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = xYIntervalSeriesCollection0.getEndYValue(10, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNull(range4);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0302");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener34 = null;
        categoryDataset22.addChangeListener(datasetChangeListener34);
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray46 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray49 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray52 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray55 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray56 = new java.lang.Number[][] { numberArray40, numberArray43, numberArray46, numberArray49, numberArray52, numberArray55 };
        org.jfree.data.category.CategoryDataset categoryDataset57 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray56);
        java.util.List list58 = categoryDataset57.getRowKeys();
        org.jfree.data.Range range60 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset57, (double) (short) -1);
        java.util.List list61 = categoryDataset57.getRowKeys();
        java.lang.Number number62 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset57);
        boolean boolean63 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset57);
        org.jfree.data.Range range64 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset57);
        java.lang.Number number65 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset57);
        int int66 = categoryDataset57.getColumnCount();
        java.util.List list67 = categoryDataset57.getRowKeys();
        org.jfree.data.Range range69 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, list67, false);
        int int70 = categoryDataset22.getRowCount();
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray46);
        org.junit.Assert.assertNotNull(numberArray49);
        org.junit.Assert.assertNotNull(numberArray52);
        org.junit.Assert.assertNotNull(numberArray55);
        org.junit.Assert.assertNotNull(numberArray56);
        org.junit.Assert.assertNotNull(categoryDataset57);
        org.junit.Assert.assertNotNull(list58);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertEquals("'" + number62 + "' != '" + (-1.0d) + "'", number62, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertEquals("'" + number65 + "' != '" + (-1.0d) + "'", number65, (-1.0d));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(list67);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 6 + "'", int70 == 6);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0303");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        int int4 = xYIntervalSeriesCollection0.getSeriesCount();
        int int6 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 100.0d);
        org.jfree.data.DomainOrder domainOrder7 = xYIntervalSeriesCollection0.getDomainOrder();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable9 = xYIntervalSeriesCollection0.getSeriesKey(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(domainOrder7);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0304");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        double double10 = xYIntervalDataItem6.getXLowValue();
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray24 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray27 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray30 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray31 = new java.lang.Number[][] { numberArray15, numberArray18, numberArray21, numberArray24, numberArray27, numberArray30 };
        org.jfree.data.category.CategoryDataset categoryDataset32 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray31);
        java.util.List list33 = categoryDataset32.getRowKeys();
        org.jfree.data.Range range35 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset32, (double) (short) -1);
        java.util.List list36 = categoryDataset32.getRowKeys();
        java.lang.Number number37 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset32);
        boolean boolean38 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset32);
        org.jfree.data.Range range39 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset32);
        org.jfree.data.Range range40 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset32);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection41 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset43 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo44 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent45 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset43, datasetChangeInfo44);
        xYIntervalSeriesCollection41.notifyListeners(datasetChangeEvent45);
        org.jfree.data.general.Dataset dataset47 = datasetChangeEvent45.getDataset();
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo48 = datasetChangeEvent45.getInfo();
        java.lang.Object obj49 = datasetChangeEvent45.getSource();
        org.jfree.data.general.Dataset dataset50 = datasetChangeEvent45.getDataset();
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo51 = datasetChangeEvent45.getInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent52 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) double10, (org.jfree.data.general.Dataset) categoryDataset32, datasetChangeInfo51);
        org.jfree.data.KeyToGroupMap keyToGroupMap53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range54 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset32, keyToGroupMap53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(numberArray27);
        org.junit.Assert.assertNotNull(numberArray30);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(categoryDataset32);
        org.junit.Assert.assertNotNull(list33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertEquals("'" + number37 + "' != '" + (-1.0d) + "'", number37, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNull(dataset47);
        org.junit.Assert.assertNotNull(datasetChangeInfo48);
        org.junit.Assert.assertEquals("'" + obj49 + "' != '" + (-1L) + "'", obj49, (-1L));
        org.junit.Assert.assertNull(dataset50);
        org.junit.Assert.assertNotNull(datasetChangeInfo51);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0305");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        java.lang.Object obj14 = xYIntervalDataItem10.clone();
        boolean boolean16 = xYIntervalDataItem10.equals((java.lang.Object) 0);
        int int17 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        org.jfree.data.Range range18 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number21 = xYIntervalSeriesCollection0.getY((int) (short) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(range18);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0306");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        java.lang.Object obj10 = xYIntervalDataItem6.clone();
        boolean boolean12 = xYIntervalDataItem6.equals((java.lang.Object) 0);
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray29 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray32 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray33 = new java.lang.Number[][] { numberArray17, numberArray20, numberArray23, numberArray26, numberArray29, numberArray32 };
        org.jfree.data.category.CategoryDataset categoryDataset34 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray33);
        org.jfree.data.pie.PieDataset pieDataset36 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset34, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState37 = pieDataset36.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset41 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset36, (java.lang.Comparable) (short) 0, (double) (short) 100, (int) ' ');
        org.jfree.data.category.CategoryDataset categoryDataset42 = org.jfree.data.general.DatasetUtilities.createCategoryDataset((java.lang.Comparable) xYIntervalDataItem6, (org.jfree.data.KeyedValues) pieDataset41);
        int int44 = pieDataset41.getIndex((java.lang.Comparable) 100L);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem51 = new org.jfree.data.xy.XYIntervalDataItem(100.0d, (double) (byte) 1, (double) (byte) 1, 0.0d, 0.0d, 33.0d);
        int int52 = pieDataset41.getIndex((java.lang.Comparable) xYIntervalDataItem51);
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent53 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) pieDataset41);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(numberArray33);
        org.junit.Assert.assertNotNull(categoryDataset34);
        org.junit.Assert.assertNotNull(pieDataset36);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState37);
        org.junit.Assert.assertNotNull(pieDataset41);
        org.junit.Assert.assertNotNull(categoryDataset42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0307");
        org.jfree.data.function.Function2D function2D0 = null;
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        boolean boolean14 = xYIntervalDataItem10.equals((java.lang.Object) 32);
        double double15 = xYIntervalDataItem10.getYValue();
        java.lang.Object obj16 = xYIntervalDataItem10.clone();
        double double17 = xYIntervalDataItem10.getXHighValue();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYSeries xYSeries18 = org.jfree.data.general.DatasetUtilities.sampleFunction2DToSeries(function2D0, (-6.0d), 32.0d, (int) (byte) 10, (java.lang.Comparable) xYIntervalDataItem10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'f' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0308");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState9);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = xYIntervalSeriesCollection0.getEndYValue((int) (short) 10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0309");
        org.jfree.data.xy.XYDataset xYDataset0 = null;
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem7 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int9 = xYIntervalDataItem7.compareTo((java.lang.Object) 1.0f);
        double double10 = xYIntervalDataItem7.getXHighValue();
        org.jfree.data.Range range11 = null;
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 100);
        double double15 = range13.constrain((double) '4');
        boolean boolean16 = xYIntervalDataItem7.equals((java.lang.Object) '4');
        org.jfree.data.Range range17 = null;
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range17, (double) 100);
        double double21 = range19.constrain((double) '4');
        int int22 = xYIntervalDataItem7.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray29 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray32 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray35 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray38 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray41 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray44 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray45 = new java.lang.Number[][] { numberArray29, numberArray32, numberArray35, numberArray38, numberArray41, numberArray44 };
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray45);
        org.jfree.data.category.CategoryDataset categoryDataset47 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray45);
        int int48 = xYIntervalDataItem7.compareTo((java.lang.Object) categoryDataset47);
        java.util.List list49 = categoryDataset47.getColumnKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range51 = org.jfree.data.general.DatasetUtilities.findDomainBounds(xYDataset0, list49, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(numberArray35);
        org.junit.Assert.assertNotNull(numberArray38);
        org.junit.Assert.assertNotNull(numberArray41);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertNotNull(categoryDataset47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(list49);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0310");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range3 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable5 = xYIntervalSeriesCollection0.getSeriesKey(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNull(range3);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0311");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState7 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = xYIntervalSeriesCollection0.getStartYValue(100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0312");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        org.jfree.data.general.Dataset dataset33 = datasetChangeEvent32.getDataset();
        org.jfree.data.general.Dataset dataset34 = datasetChangeEvent32.getDataset();
        org.jfree.data.general.Dataset dataset35 = datasetChangeEvent32.getDataset();
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(dataset33);
        org.junit.Assert.assertNotNull(dataset34);
        org.junit.Assert.assertNotNull(dataset35);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0313");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = xYIntervalSeriesCollection0.getStartXValue(2147483647, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2147483647, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0314");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray27 = new java.lang.Number[][] { numberArray11, numberArray14, numberArray17, numberArray20, numberArray23, numberArray26 };
        org.jfree.data.category.CategoryDataset categoryDataset28 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray27);
        org.jfree.data.pie.PieDataset pieDataset30 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset28, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState31 = pieDataset30.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset35 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset30, (java.lang.Comparable) 'a', (double) 10.0f, (int) (short) 10);
        java.util.List list36 = pieDataset35.getKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range38 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, list36, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray27);
        org.junit.Assert.assertNotNull(categoryDataset28);
        org.junit.Assert.assertNotNull(pieDataset30);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState31);
        org.junit.Assert.assertNotNull(pieDataset35);
        org.junit.Assert.assertNotNull(list36);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0315");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        java.lang.Object obj9 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener10 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener10);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection12 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset14 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo15 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent16 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset14, datasetChangeInfo15);
        xYIntervalSeriesCollection12.notifyListeners(datasetChangeEvent16);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState18 = xYIntervalSeriesCollection12.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener19 = null;
        xYIntervalSeriesCollection12.removeChangeListener(datasetChangeListener19);
        java.lang.Number number21 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection12);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo22 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection12.fireDatasetChanged(datasetChangeInfo22);
        boolean boolean24 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection12);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = xYIntervalSeriesCollection12.getItemCount(6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNull(xYDatasetSelectionState18);
        org.junit.Assert.assertNull(number21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0316");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState7 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState7);
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray29 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray30 = new java.lang.Number[][] { numberArray14, numberArray17, numberArray20, numberArray23, numberArray26, numberArray29 };
        org.jfree.data.category.CategoryDataset categoryDataset31 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray30);
        java.util.List list32 = categoryDataset31.getRowKeys();
        org.jfree.data.Range range34 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset31, false);
        int int36 = categoryDataset31.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset38 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo39 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent40 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset38, datasetChangeInfo39);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent41 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset31, datasetChangeInfo39);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem48 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int50 = xYIntervalDataItem48.compareTo((java.lang.Object) 1.0f);
        int int51 = categoryDataset31.getColumnIndex((java.lang.Comparable) xYIntervalDataItem48);
        double double52 = xYIntervalDataItem48.getXLowValue();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection53 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder54 = xYIntervalSeriesCollection53.getDomainOrder();
        org.jfree.data.ComparableObjectItem comparableObjectItem55 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable) xYIntervalDataItem48, (java.lang.Object) domainOrder54);
        int int56 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) comparableObjectItem55);
        // The following exception was thrown during execution in test generation
        try {
            double double59 = xYIntervalSeriesCollection0.getEndYValue((int) (short) 1, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(numberArray30);
        org.junit.Assert.assertNotNull(categoryDataset31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertNotNull(domainOrder54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0317");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray22 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray25 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray26 = new java.lang.Number[][] { numberArray10, numberArray13, numberArray16, numberArray19, numberArray22, numberArray25 };
        org.jfree.data.category.CategoryDataset categoryDataset27 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray26);
        java.util.List list28 = categoryDataset27.getRowKeys();
        org.jfree.data.Range range30 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset27, false);
        boolean boolean31 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset27);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener32 = null;
        categoryDataset27.removeChangeListener(datasetChangeListener32);
        java.lang.Number[] numberArray39 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray42 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray45 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray48 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray51 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray54 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray55 = new java.lang.Number[][] { numberArray39, numberArray42, numberArray45, numberArray48, numberArray51, numberArray54 };
        org.jfree.data.category.CategoryDataset categoryDataset56 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray55);
        java.util.List list57 = categoryDataset56.getRowKeys();
        org.jfree.data.Range range59 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset56, false);
        int int61 = categoryDataset56.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset63 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo64 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent65 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset63, datasetChangeInfo64);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent66 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset56, datasetChangeInfo64);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent67 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) xYIntervalSeriesCollection0, (org.jfree.data.general.Dataset) categoryDataset27, datasetChangeInfo64);
        java.lang.Comparable comparable68 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int69 = categoryDataset27.getColumnIndex(comparable68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'key' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(numberArray25);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(categoryDataset27);
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(numberArray39);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(numberArray51);
        org.junit.Assert.assertNotNull(numberArray54);
        org.junit.Assert.assertNotNull(numberArray55);
        org.junit.Assert.assertNotNull(categoryDataset56);
        org.junit.Assert.assertNotNull(list57);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0318");
        org.jfree.data.xy.TableXYDataset tableXYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(tableXYDataset0, (double) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0319");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection8 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection8.getDomainOrder();
        int int10 = xYIntervalSeriesCollection8.getSeriesCount();
        boolean boolean11 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection8);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = xYIntervalSeriesCollection8.getEndXValue((int) '#', 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(number12);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0320");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.removeAllSeries();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = xYIntervalSeriesCollection0.getEndYValue((int) '#', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0321");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray24 = new java.lang.Number[][] { numberArray8, numberArray11, numberArray14, numberArray17, numberArray20, numberArray23 };
        org.jfree.data.category.CategoryDataset categoryDataset25 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray24);
        java.util.List list26 = categoryDataset25.getRowKeys();
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset25, false);
        int int30 = categoryDataset25.getColumnIndex((java.lang.Comparable) (-1L));
        boolean boolean31 = xYIntervalSeriesCollection0.equals((java.lang.Object) categoryDataset25);
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Number number34 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double37 = xYIntervalSeriesCollection0.getStartXValue(10, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(categoryDataset25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(range33);
        org.junit.Assert.assertNull(number34);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0322");
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries3 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        java.lang.Object obj5 = null;
        xYIntervalSeries3.firePropertyChange("", obj5, (java.lang.Object) "hi!");
        java.lang.Comparable comparable8 = xYIntervalSeries3.getKey();
        int int10 = xYIntervalSeries3.indexOf((java.lang.Comparable) 0.0f);
        java.beans.PropertyChangeListener propertyChangeListener11 = null;
        xYIntervalSeries3.removePropertyChangeListener(propertyChangeListener11);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection13 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset15 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo16 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent17 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset15, datasetChangeInfo16);
        xYIntervalSeriesCollection13.notifyListeners(datasetChangeEvent17);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState19 = xYIntervalSeriesCollection13.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener20 = null;
        xYIntervalSeriesCollection13.removeChangeListener(datasetChangeListener20);
        java.lang.Number number22 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection13);
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection13, true);
        org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection13, true);
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection13, false);
        java.lang.Number number29 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection13);
        // The following exception was thrown during execution in test generation
        try {
            xYIntervalSeries3.addChangeListener((org.jfree.data.event.SeriesChangeListener) xYIntervalSeriesCollection13);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Listener org.jfree.data.xy.XYIntervalSeriesCollection@58137b9a is not of type class org.jfree.data.xy.XYIntervalSeries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + comparable8 + "' != '" + 10 + "'", comparable8, 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(xYDatasetSelectionState19);
        org.junit.Assert.assertNull(number22);
        org.junit.Assert.assertNull(range24);
        org.junit.Assert.assertNull(range26);
        org.junit.Assert.assertNull(range28);
        org.junit.Assert.assertNull(number29);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0323");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState24 = pieDataset23.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset28 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset23, (java.lang.Comparable) 'a', (double) 10.0f, (int) (short) 10);
        java.lang.Number number30 = pieDataset28.getValue((int) (short) 100);
        org.jfree.data.pie.PieDataset pieDataset33 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset28, (java.lang.Comparable) 'a', (double) 100L);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener34 = null;
        pieDataset28.removeChangeListener(datasetChangeListener34);
        java.util.List list36 = pieDataset28.getKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable38 = pieDataset28.getKey((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState24);
        org.junit.Assert.assertNotNull(pieDataset28);
        org.junit.Assert.assertNull(number30);
        org.junit.Assert.assertNotNull(pieDataset33);
        org.junit.Assert.assertNotNull(list36);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0324");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener25 = null;
        categoryDataset21.removeChangeListener(datasetChangeListener25);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset28 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset21, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0325");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.general.DatasetGroup datasetGroup13 = xYIntervalSeriesCollection0.getGroup();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number16 = xYIntervalSeriesCollection0.getY((int) (byte) 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNotNull(datasetGroup13);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0326");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState3 = xYIntervalSeriesCollection0.getSelectionState();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable5 = xYIntervalSeriesCollection0.getSeriesKey(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNull(xYDatasetSelectionState3);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0327");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection8 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection8.getDomainOrder();
        int int10 = xYIntervalSeriesCollection8.getSeriesCount();
        boolean boolean11 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection8);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        xYIntervalSeriesCollection8.validateObject();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener14 = null;
        xYIntervalSeriesCollection8.addChangeListener(datasetChangeListener14);
        org.jfree.data.Range range16 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = xYIntervalSeriesCollection8.getStartYValue((int) 'a', 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(number12);
        org.junit.Assert.assertNull(range16);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0328");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range3 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        xYIntervalSeriesCollection0.validateObject();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = xYIntervalSeriesCollection0.getXValue((int) (short) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNull(range3);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0329");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.Range range4 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = xYIntervalSeriesCollection0.getEndXValue(0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNull(range4);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0330");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener9 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries14 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries14.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo17 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent18 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo17);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo19 = null;
        seriesChangeEvent18.setSummary(seriesChangeInfo19);
        java.lang.Object obj21 = seriesChangeEvent18.getSource();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent18);
        boolean boolean23 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Number number24 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj25 = xYIntervalSeriesCollection0.clone();
        java.lang.Number[] numberArray30 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray33 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray36 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray39 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray42 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray45 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray46 = new java.lang.Number[][] { numberArray30, numberArray33, numberArray36, numberArray39, numberArray42, numberArray45 };
        org.jfree.data.category.CategoryDataset categoryDataset47 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray46);
        java.util.List list48 = categoryDataset47.getRowKeys();
        org.jfree.data.Range range50 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset47, (double) (short) -1);
        java.lang.Number number51 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset47);
        org.jfree.data.Range range52 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset47);
        java.util.List list53 = categoryDataset47.getColumnKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range55 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, list53, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + ' ' + "'", obj21, ' ');
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(number24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(numberArray30);
        org.junit.Assert.assertNotNull(numberArray33);
        org.junit.Assert.assertNotNull(numberArray36);
        org.junit.Assert.assertNotNull(numberArray39);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(numberArray46);
        org.junit.Assert.assertNotNull(categoryDataset47);
        org.junit.Assert.assertNotNull(list48);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertEquals("'" + number51 + "' != '" + (-1.0d) + "'", number51, (-1.0d));
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertNotNull(list53);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0331");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo22 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent23 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) "", seriesChangeInfo22);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0332");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray22 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray25 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray26 = new java.lang.Number[][] { numberArray10, numberArray13, numberArray16, numberArray19, numberArray22, numberArray25 };
        org.jfree.data.category.CategoryDataset categoryDataset27 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray26);
        java.util.List list28 = categoryDataset27.getRowKeys();
        org.jfree.data.Range range30 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset27, false);
        boolean boolean31 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset27);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener32 = null;
        categoryDataset27.removeChangeListener(datasetChangeListener32);
        java.lang.Number[] numberArray39 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray42 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray45 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray48 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray51 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray54 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray55 = new java.lang.Number[][] { numberArray39, numberArray42, numberArray45, numberArray48, numberArray51, numberArray54 };
        org.jfree.data.category.CategoryDataset categoryDataset56 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray55);
        java.util.List list57 = categoryDataset56.getRowKeys();
        org.jfree.data.Range range59 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset56, false);
        int int61 = categoryDataset56.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset63 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo64 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent65 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset63, datasetChangeInfo64);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent66 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset56, datasetChangeInfo64);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent67 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) xYIntervalSeriesCollection0, (org.jfree.data.general.Dataset) categoryDataset27, datasetChangeInfo64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number70 = xYIntervalSeriesCollection0.getEndX(0, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(numberArray25);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(categoryDataset27);
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(numberArray39);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(numberArray51);
        org.junit.Assert.assertNotNull(numberArray54);
        org.junit.Assert.assertNotNull(numberArray55);
        org.junit.Assert.assertNotNull(categoryDataset56);
        org.junit.Assert.assertNotNull(list57);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0333");
        org.jfree.data.function.Function2D function2D0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYDataset xYDataset5 = org.jfree.data.general.DatasetUtilities.sampleFunction2D(function2D0, (double) (short) 100, (double) 2, (int) 'a', (java.lang.Comparable) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'f' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0334");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset22, (double) (short) -1);
        java.util.List list26 = categoryDataset22.getRowKeys();
        java.lang.Number number27 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset22);
        boolean boolean28 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset22);
        org.jfree.data.Range range29 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset22);
        java.lang.Number number30 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset22);
        int int31 = categoryDataset22.getColumnCount();
        java.util.List list32 = categoryDataset22.getRowKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range34 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset0, list32, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertEquals("'" + number27 + "' != '" + (-1.0d) + "'", number27, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertEquals("'" + number30 + "' != '" + (-1.0d) + "'", number30, (-1.0d));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(list32);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0335");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        int int4 = xYIntervalSeriesCollection0.getSeriesCount();
        int int6 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 100.0d);
        org.jfree.data.DomainOrder domainOrder7 = xYIntervalSeriesCollection0.getDomainOrder();
        java.lang.Number number8 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = xYIntervalSeriesCollection0.getStartYValue(2147483647, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2147483647, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(domainOrder7);
        org.junit.Assert.assertNull(number8);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0336");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        double double25 = range24.getUpperBound();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 191.0d + "'", double25 == 191.0d);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0337");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj8 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.Range range9 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double12 = xYIntervalSeriesCollection0.getEndXValue(10, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNull(range9);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0338");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = xYIntervalSeriesCollection0.getStartYValue(1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(number12);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0339");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries17 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries17.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo20 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent21 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo20);
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number25 = xYIntervalSeriesCollection0.getY((int) (short) 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0340");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = xYIntervalSeriesCollection0.getStartXValue(32, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(number12);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0341");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range23 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range23, 0.0d);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range23, (double) 1L, (double) (-1L));
        boolean boolean31 = range28.intersects((double) (short) 100, 100.0d);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0342");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem39 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int41 = xYIntervalDataItem39.compareTo((java.lang.Object) 1.0f);
        int int42 = categoryDataset22.getColumnIndex((java.lang.Comparable) xYIntervalDataItem39);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem49 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int51 = xYIntervalDataItem49.compareTo((java.lang.Object) 1.0f);
        double double52 = xYIntervalDataItem49.getXHighValue();
        java.lang.Object obj53 = xYIntervalDataItem49.clone();
        boolean boolean55 = xYIntervalDataItem49.equals((java.lang.Object) 0);
        java.lang.Number[] numberArray60 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray63 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray66 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray69 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray72 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray75 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray76 = new java.lang.Number[][] { numberArray60, numberArray63, numberArray66, numberArray69, numberArray72, numberArray75 };
        org.jfree.data.category.CategoryDataset categoryDataset77 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray76);
        org.jfree.data.pie.PieDataset pieDataset79 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset77, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState80 = pieDataset79.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset84 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset79, (java.lang.Comparable) (short) 0, (double) (short) 100, (int) ' ');
        org.jfree.data.category.CategoryDataset categoryDataset85 = org.jfree.data.general.DatasetUtilities.createCategoryDataset((java.lang.Comparable) xYIntervalDataItem49, (org.jfree.data.KeyedValues) pieDataset84);
        int int87 = pieDataset84.getIndex((java.lang.Comparable) 100L);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem94 = new org.jfree.data.xy.XYIntervalDataItem(100.0d, (double) (byte) 1, (double) (byte) 1, 0.0d, 0.0d, 33.0d);
        int int95 = pieDataset84.getIndex((java.lang.Comparable) xYIntervalDataItem94);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset96 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset22, (java.lang.Comparable) xYIntervalDataItem94);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 100.0d + "'", double52 == 100.0d);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(numberArray60);
        org.junit.Assert.assertNotNull(numberArray63);
        org.junit.Assert.assertNotNull(numberArray66);
        org.junit.Assert.assertNotNull(numberArray69);
        org.junit.Assert.assertNotNull(numberArray72);
        org.junit.Assert.assertNotNull(numberArray75);
        org.junit.Assert.assertNotNull(numberArray76);
        org.junit.Assert.assertNotNull(categoryDataset77);
        org.junit.Assert.assertNotNull(pieDataset79);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState80);
        org.junit.Assert.assertNotNull(pieDataset84);
        org.junit.Assert.assertNotNull(categoryDataset85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0343");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo10 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection0.fireDatasetChanged(datasetChangeInfo10);
        xYIntervalSeriesCollection0.removeAllSeries();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number15 = xYIntervalSeriesCollection0.getX(0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0344");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        java.lang.Number number26 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        boolean boolean27 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset21);
        java.lang.Number number29 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        int int30 = categoryDataset21.getColumnCount();
        java.util.List list31 = categoryDataset21.getRowKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number34 = categoryDataset21.getValue((int) '4', 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertEquals("'" + number26 + "' != '" + (-1.0d) + "'", number26, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertEquals("'" + number29 + "' != '" + (-1.0d) + "'", number29, (-1.0d));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(list31);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0345");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection8 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection8.getDomainOrder();
        int int10 = xYIntervalSeriesCollection8.getSeriesCount();
        boolean boolean11 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection8);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable14 = xYIntervalSeriesCollection8.getSeriesKey(6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(number12);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0346");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range3 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        xYIntervalSeriesCollection0.validateObject();
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray22 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray25 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray26 = new java.lang.Number[][] { numberArray10, numberArray13, numberArray16, numberArray19, numberArray22, numberArray25 };
        org.jfree.data.category.CategoryDataset categoryDataset27 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray26);
        java.util.List list28 = categoryDataset27.getRowKeys();
        org.jfree.data.Range range30 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset27, false);
        int int32 = categoryDataset27.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset34 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo35 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent36 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset34, datasetChangeInfo35);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent37 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset27, datasetChangeInfo35);
        org.jfree.data.Range range38 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset27);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener39 = null;
        categoryDataset27.removeChangeListener(datasetChangeListener39);
        java.util.List list41 = categoryDataset27.getColumnKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range43 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, list41, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNull(range3);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(numberArray25);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(categoryDataset27);
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(list41);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0347");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries17 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries17.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo20 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent21 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo20);
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent21);
        java.lang.String str23 = seriesChangeEvent21.toString();
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org.jfree.data.event.SeriesChangeEvent[source= ]" + "'", str23, "org.jfree.data.event.SeriesChangeEvent[source= ]");
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0348");
        org.jfree.data.function.Function2D function2D0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYSeries xYSeries5 = org.jfree.data.general.DatasetUtilities.sampleFunction2DToSeries(function2D0, (double) 0, 191.0d, 2147483647, (java.lang.Comparable) (-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'f' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0349");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener34 = null;
        categoryDataset22.addChangeListener(datasetChangeListener34);
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray46 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray49 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray52 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray55 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray56 = new java.lang.Number[][] { numberArray40, numberArray43, numberArray46, numberArray49, numberArray52, numberArray55 };
        org.jfree.data.category.CategoryDataset categoryDataset57 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray56);
        java.util.List list58 = categoryDataset57.getRowKeys();
        org.jfree.data.Range range60 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset57, (double) (short) -1);
        java.util.List list61 = categoryDataset57.getRowKeys();
        java.lang.Number number62 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset57);
        boolean boolean63 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset57);
        org.jfree.data.Range range64 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset57);
        java.lang.Number number65 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset57);
        int int66 = categoryDataset57.getColumnCount();
        java.util.List list67 = categoryDataset57.getRowKeys();
        org.jfree.data.Range range69 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, list67, false);
        boolean boolean70 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset22);
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray46);
        org.junit.Assert.assertNotNull(numberArray49);
        org.junit.Assert.assertNotNull(numberArray52);
        org.junit.Assert.assertNotNull(numberArray55);
        org.junit.Assert.assertNotNull(numberArray56);
        org.junit.Assert.assertNotNull(categoryDataset57);
        org.junit.Assert.assertNotNull(list58);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertEquals("'" + number62 + "' != '" + (-1.0d) + "'", number62, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertEquals("'" + number65 + "' != '" + (-1.0d) + "'", number65, (-1.0d));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(list67);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0350");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        int int24 = categoryDataset21.getRowCount();
        java.lang.Number number25 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(categoryDataset21);
        java.lang.Number number26 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        int int27 = categoryDataset21.getRowCount();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertEquals("'" + number25 + "' != '" + 32.0d + "'", number25, 32.0d);
        org.junit.Assert.assertEquals("'" + number26 + "' != '" + (-1.0d) + "'", number26, (-1.0d));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0351");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener9 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries14 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries14.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo17 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent18 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo17);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo19 = null;
        seriesChangeEvent18.setSummary(seriesChangeInfo19);
        java.lang.Object obj21 = seriesChangeEvent18.getSource();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent18);
        boolean boolean23 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Number number24 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj25 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + ' ' + "'", obj21, ' ');
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(number24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNull(range27);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0352");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        int int26 = categoryDataset21.getRowIndex((java.lang.Comparable) "org.jfree.data.general.SeriesException: ");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable28 = categoryDataset21.getColumnKey((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0353");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection24 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder25 = xYIntervalSeriesCollection24.getDomainOrder();
        org.jfree.data.general.DatasetGroup datasetGroup26 = xYIntervalSeriesCollection24.getGroup();
        java.lang.Object obj27 = null;
        boolean boolean28 = datasetGroup26.equals(obj27);
        pieDataset23.setGroup(datasetGroup26);
        java.lang.String str30 = datasetGroup26.getID();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertNotNull(domainOrder25);
        org.junit.Assert.assertNotNull(datasetGroup26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "NOID" + "'", str30, "NOID");
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0354");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21, true);
        org.jfree.data.Range range29 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (byte) 0);
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range29, 0.0d);
        double double32 = range31.getUpperBound();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 192.0d + "'", double32 == 192.0d);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0355");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21, true);
        boolean boolean29 = range27.contains((double) (byte) 1);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range27, 1.0d, true);
        org.jfree.data.Range range33 = null;
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) 100);
        double double37 = range35.constrain((double) '4');
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range35, (double) (byte) 1, false);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range27, range40);
        double double42 = range41.getLowerBound();
        double double43 = range41.getLowerBound();
        org.jfree.data.Range range46 = org.jfree.data.Range.expand(range41, (double) 0, (double) 2147483647);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + (-1.0d) + "'", double42 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-1.0d) + "'", double43 == (-1.0d));
        org.junit.Assert.assertNotNull(range46);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0356");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem15 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int17 = xYIntervalDataItem15.compareTo((java.lang.Object) 1.0f);
        double double18 = xYIntervalDataItem15.getXHighValue();
        java.lang.Object obj19 = xYIntervalDataItem15.clone();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo20 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent21 = new org.jfree.data.event.SeriesChangeEvent(obj19, seriesChangeInfo20);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo22 = seriesChangeEvent21.getSummary();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent21);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries27 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries27.setMaximumItemCount((int) ' ');
        int int30 = xYIntervalSeries27.getMaximumItemCount();
        java.beans.PropertyChangeListener propertyChangeListener31 = null;
        xYIntervalSeries27.removePropertyChangeListener(propertyChangeListener31);
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries27);
        java.lang.Number number34 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double37 = xYIntervalSeriesCollection0.getStartYValue((int) ' ', 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNull(seriesChangeInfo22);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 32 + "'", int30 == 32);
        org.junit.Assert.assertNull(number34);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0357");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        int int2 = xYIntervalSeriesCollection0.getSeriesCount();
        java.lang.Number number3 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable5 = xYIntervalSeriesCollection0.getSeriesKey(6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(number3);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0358");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        java.lang.Object obj9 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener10 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener10);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection12 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset14 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo15 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent16 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset14, datasetChangeInfo15);
        xYIntervalSeriesCollection12.notifyListeners(datasetChangeEvent16);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState18 = xYIntervalSeriesCollection12.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener19 = null;
        xYIntervalSeriesCollection12.removeChangeListener(datasetChangeListener19);
        java.lang.Number number21 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection12);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo22 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection12.fireDatasetChanged(datasetChangeInfo22);
        boolean boolean24 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection12);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYIntervalSeries xYIntervalSeries26 = xYIntervalSeriesCollection12.getSeries(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNull(xYDatasetSelectionState18);
        org.junit.Assert.assertNull(number21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0359");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21, true);
        org.jfree.data.Range range29 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (byte) 0);
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range29, 0.0d);
        double double32 = range29.getCentralValue();
        double double33 = range29.getLowerBound();
        org.jfree.data.Range range34 = null;
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range34, (double) 100);
        double double38 = range36.constrain((double) '4');
        double double39 = range36.getLength();
        double double40 = range36.getCentralValue();
        double double42 = range36.constrain(1.0d);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range29, range36);
        org.jfree.data.Range range45 = org.jfree.data.Range.scale(range43, (double) 0);
        org.jfree.data.Range range46 = null;
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range46, (double) 100);
        double double50 = range48.constrain((double) '4');
        boolean boolean52 = range48.contains((double) 0.0f);
        org.jfree.data.Range range54 = org.jfree.data.Range.scale(range48, (double) (byte) 100);
        org.jfree.data.Range range55 = org.jfree.data.Range.combine(range45, range48);
        double double57 = range45.constrain(32.0d);
        java.lang.String str58 = range45.toString();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 93.0d + "'", double32 == 93.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-6.0d) + "'", double33 == (-6.0d));
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 100.0d + "'", double42 == 100.0d);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 100.0d + "'", double50 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Range[-0.0,0.0]" + "'", str58, "Range[-0.0,0.0]");
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0360");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        int int2 = xYIntervalSeriesCollection0.getSeriesCount();
        java.lang.Number number3 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Number number4 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            xYIntervalSeriesCollection0.removeSeries((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(number3);
        org.junit.Assert.assertNull(number4);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0361");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = xYIntervalSeriesCollection0.getStartXValue((int) (byte) -1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(number12);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0362");
        org.jfree.data.ComparableObjectSeries comparableObjectSeries3 = new org.jfree.data.ComparableObjectSeries((java.lang.Comparable) 0L, true, true);
        comparableObjectSeries3.fireSeriesChanged();
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray24 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray25 = new java.lang.Number[][] { numberArray9, numberArray12, numberArray15, numberArray18, numberArray21, numberArray24 };
        org.jfree.data.category.CategoryDataset categoryDataset26 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray25);
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset26, true);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range28, 0.0d);
        boolean boolean31 = comparableObjectSeries3.equals((java.lang.Object) range28);
        java.lang.String str32 = comparableObjectSeries3.getDescription();
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(numberArray25);
        org.junit.Assert.assertNotNull(categoryDataset26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0363");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range15 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        // The following exception was thrown during execution in test generation
        try {
            double double18 = xYIntervalSeriesCollection0.getEndXValue((int) ' ', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNull(range15);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0364");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        int int26 = categoryDataset21.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range27, (double) (byte) -1, 200.0d);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries32 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) "");
        boolean boolean33 = xYIntervalSeries32.getAllowDuplicateXValues();
        boolean boolean34 = range30.equals((java.lang.Object) xYIntervalSeries32);
        int int35 = xYIntervalSeries32.getMaximumItemCount();
        // The following exception was thrown during execution in test generation
        try {
            double double37 = xYIntervalSeries32.getYValue(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0365");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range23 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, 0.0d);
        java.util.List list26 = categoryDataset21.getRowKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable28 = categoryDataset21.getRowKey((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(list26);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0366");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        int int26 = categoryDataset21.getRowIndex((java.lang.Comparable) "org.jfree.data.general.SeriesException: ");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable28 = categoryDataset21.getColumnKey(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0367");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState24 = pieDataset23.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset28 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset23, (java.lang.Comparable) (short) 0, (double) (short) 100, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable30 = pieDataset23.getKey(2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2147483647, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState24);
        org.junit.Assert.assertNotNull(pieDataset28);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0368");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range9 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number12 = xYIntervalSeriesCollection0.getStartX((int) (short) 100, 2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNull(range9);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0369");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray24 = new java.lang.Number[][] { numberArray8, numberArray11, numberArray14, numberArray17, numberArray20, numberArray23 };
        org.jfree.data.category.CategoryDataset categoryDataset25 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray24);
        java.util.List list26 = categoryDataset25.getRowKeys();
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset25, false);
        int int30 = categoryDataset25.getColumnIndex((java.lang.Comparable) (-1L));
        boolean boolean31 = xYIntervalSeriesCollection0.equals((java.lang.Object) categoryDataset25);
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Number number34 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYIntervalSeries xYIntervalSeries36 = xYIntervalSeriesCollection0.getSeries((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(categoryDataset25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(range33);
        org.junit.Assert.assertNull(number34);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0370");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray24 = new java.lang.Number[][] { numberArray8, numberArray11, numberArray14, numberArray17, numberArray20, numberArray23 };
        org.jfree.data.category.CategoryDataset categoryDataset25 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray24);
        java.util.List list26 = categoryDataset25.getRowKeys();
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset25, false);
        int int30 = categoryDataset25.getColumnIndex((java.lang.Comparable) (-1L));
        boolean boolean31 = xYIntervalSeriesCollection0.equals((java.lang.Object) categoryDataset25);
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Number number34 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYIntervalSeries xYIntervalSeries36 = xYIntervalSeriesCollection0.getSeries((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(categoryDataset25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(range33);
        org.junit.Assert.assertNull(number34);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0371");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection9 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder10 = xYIntervalSeriesCollection9.getDomainOrder();
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection9);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem18 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int20 = xYIntervalDataItem18.compareTo((java.lang.Object) 1.0f);
        double double21 = xYIntervalDataItem18.getXHighValue();
        org.jfree.data.Range range22 = null;
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range22, (double) 100);
        double double26 = range24.constrain((double) '4');
        boolean boolean27 = xYIntervalDataItem18.equals((java.lang.Object) '4');
        org.jfree.data.Range range28 = null;
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range28, (double) 100);
        double double32 = range30.constrain((double) '4');
        int int33 = xYIntervalDataItem18.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray46 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray49 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray52 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray55 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray56 = new java.lang.Number[][] { numberArray40, numberArray43, numberArray46, numberArray49, numberArray52, numberArray55 };
        org.jfree.data.category.CategoryDataset categoryDataset57 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray56);
        org.jfree.data.category.CategoryDataset categoryDataset58 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray56);
        int int59 = xYIntervalDataItem18.compareTo((java.lang.Object) categoryDataset58);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener60 = null;
        categoryDataset58.removeChangeListener(datasetChangeListener60);
        org.jfree.data.general.DatasetGroup datasetGroup62 = categoryDataset58.getGroup();
        xYIntervalSeriesCollection9.setGroup(datasetGroup62);
        xYIntervalSeriesCollection0.setGroup(datasetGroup62);
        // The following exception was thrown during execution in test generation
        try {
            double double67 = xYIntervalSeriesCollection0.getStartXValue(10, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(domainOrder10);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray46);
        org.junit.Assert.assertNotNull(numberArray49);
        org.junit.Assert.assertNotNull(numberArray52);
        org.junit.Assert.assertNotNull(numberArray55);
        org.junit.Assert.assertNotNull(numberArray56);
        org.junit.Assert.assertNotNull(categoryDataset57);
        org.junit.Assert.assertNotNull(categoryDataset58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(datasetGroup62);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0372");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        xYIntervalSeriesCollection0.removeAllSeries();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = xYIntervalSeriesCollection0.getEndXValue((int) 'a', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNull(range2);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0373");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        java.util.List list1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range3 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset0, list1, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0374");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener4 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener4);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = xYIntervalSeriesCollection0.getStartYValue(2147483647, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2147483647, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0375");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray24 = new java.lang.Number[][] { numberArray8, numberArray11, numberArray14, numberArray17, numberArray20, numberArray23 };
        org.jfree.data.category.CategoryDataset categoryDataset25 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray24);
        java.util.List list26 = categoryDataset25.getRowKeys();
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset25, false);
        int int30 = categoryDataset25.getColumnIndex((java.lang.Comparable) (-1L));
        boolean boolean31 = xYIntervalSeriesCollection0.equals((java.lang.Object) categoryDataset25);
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj34 = xYIntervalSeriesCollection0.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number37 = xYIntervalSeriesCollection0.getEndX((int) '4', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(categoryDataset25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(range33);
        org.junit.Assert.assertNotNull(obj34);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0376");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener9 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries14 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries14.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo17 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent18 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo17);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo19 = null;
        seriesChangeEvent18.setSummary(seriesChangeInfo19);
        java.lang.Object obj21 = seriesChangeEvent18.getSource();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent18);
        boolean boolean23 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        xYIntervalSeriesCollection0.removeAllSeries();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double29 = xYIntervalSeriesCollection0.getYValue(10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + ' ' + "'", obj21, ' ');
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(range25);
        org.junit.Assert.assertNull(range26);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0377");
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries3 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        java.lang.Object obj5 = null;
        xYIntervalSeries3.firePropertyChange("", obj5, (java.lang.Object) "hi!");
        xYIntervalSeries3.setKey((java.lang.Comparable) (short) 1);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection10 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset12 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo13 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent14 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset12, datasetChangeInfo13);
        xYIntervalSeriesCollection10.notifyListeners(datasetChangeEvent14);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState16 = xYIntervalSeriesCollection10.getSelectionState();
        org.jfree.data.Range range17 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection10);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem24 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int26 = xYIntervalDataItem24.compareTo((java.lang.Object) 1.0f);
        double double27 = xYIntervalDataItem24.getXHighValue();
        org.jfree.data.Range range28 = null;
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range28, (double) 100);
        double double32 = range30.constrain((double) '4');
        boolean boolean33 = xYIntervalDataItem24.equals((java.lang.Object) '4');
        org.jfree.data.Range range34 = null;
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range34, (double) 100);
        double double38 = range36.constrain((double) '4');
        int int39 = xYIntervalDataItem24.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray46 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray49 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray52 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray55 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray58 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray61 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray62 = new java.lang.Number[][] { numberArray46, numberArray49, numberArray52, numberArray55, numberArray58, numberArray61 };
        org.jfree.data.category.CategoryDataset categoryDataset63 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray62);
        org.jfree.data.category.CategoryDataset categoryDataset64 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray62);
        int int65 = xYIntervalDataItem24.compareTo((java.lang.Object) categoryDataset64);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener66 = null;
        categoryDataset64.removeChangeListener(datasetChangeListener66);
        org.jfree.data.general.DatasetGroup datasetGroup68 = categoryDataset64.getGroup();
        xYIntervalSeriesCollection10.setGroup(datasetGroup68);
        boolean boolean70 = xYIntervalSeries3.equals((java.lang.Object) xYIntervalSeriesCollection10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number73 = xYIntervalSeriesCollection10.getY(1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState16);
        org.junit.Assert.assertNull(range17);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(numberArray46);
        org.junit.Assert.assertNotNull(numberArray49);
        org.junit.Assert.assertNotNull(numberArray52);
        org.junit.Assert.assertNotNull(numberArray55);
        org.junit.Assert.assertNotNull(numberArray58);
        org.junit.Assert.assertNotNull(numberArray61);
        org.junit.Assert.assertNotNull(numberArray62);
        org.junit.Assert.assertNotNull(categoryDataset63);
        org.junit.Assert.assertNotNull(categoryDataset64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(datasetGroup68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0378");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        java.lang.Number number48 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + number48 + "' != '" + 32.0d + "'", number48, 32.0d);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0379");
        double[] doubleArray11 = new double[] { 1.0d, (byte) -1, 1.0d };
        double[][] doubleArray12 = new double[][] { doubleArray11 };
        org.jfree.data.category.CategoryDataset categoryDataset13 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "", doubleArray12);
        org.jfree.data.category.CategoryDataset categoryDataset14 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!1", "hi!", doubleArray12);
        org.jfree.data.category.CategoryDataset categoryDataset15 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("Range[100.0,100.0]", "org.jfree.data.event.SeriesChangeEvent[source= ]", doubleArray12);
        org.jfree.data.category.CategoryDataset categoryDataset16 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!1", "hi!", doubleArray12);
        java.lang.Number number17 = org.jfree.data.general.DatasetUtilities.findMaximumStackedRangeValue(categoryDataset16);
        org.jfree.data.KeyToGroupMap keyToGroupMap18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range19 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset16, keyToGroupMap18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(categoryDataset13);
        org.junit.Assert.assertNotNull(categoryDataset14);
        org.junit.Assert.assertNotNull(categoryDataset15);
        org.junit.Assert.assertNotNull(categoryDataset16);
        org.junit.Assert.assertEquals("'" + number17 + "' != '" + 1.0d + "'", number17, 1.0d);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0380");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection8 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection8.getDomainOrder();
        int int10 = xYIntervalSeriesCollection8.getSeriesCount();
        boolean boolean11 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection8);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        xYIntervalSeriesCollection8.validateObject();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number16 = xYIntervalSeriesCollection8.getX(32, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(number12);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0381");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection8 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection8.getDomainOrder();
        int int10 = xYIntervalSeriesCollection8.getSeriesCount();
        boolean boolean11 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection8);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        xYIntervalSeriesCollection8.validateObject();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent14 = null;
        xYIntervalSeriesCollection8.notifyListeners(datasetChangeEvent14);
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray29 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray32 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray35 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray36 = new java.lang.Number[][] { numberArray20, numberArray23, numberArray26, numberArray29, numberArray32, numberArray35 };
        org.jfree.data.category.CategoryDataset categoryDataset37 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray36);
        org.jfree.data.pie.PieDataset pieDataset39 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset37, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState40 = pieDataset39.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset44 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset39, (java.lang.Comparable) 'a', (double) 10.0f, (int) (short) 10);
        java.lang.Number number46 = pieDataset44.getValue((int) (short) 100);
        org.jfree.data.pie.PieDataset pieDataset49 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset44, (java.lang.Comparable) 'a', (double) 100L);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener50 = null;
        pieDataset44.removeChangeListener(datasetChangeListener50);
        java.util.List list52 = pieDataset44.getKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range54 = org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8, list52, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(number12);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(numberArray35);
        org.junit.Assert.assertNotNull(numberArray36);
        org.junit.Assert.assertNotNull(categoryDataset37);
        org.junit.Assert.assertNotNull(pieDataset39);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState40);
        org.junit.Assert.assertNotNull(pieDataset44);
        org.junit.Assert.assertNull(number46);
        org.junit.Assert.assertNotNull(pieDataset49);
        org.junit.Assert.assertNotNull(list52);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0382");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries17 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries17.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo20 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent21 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo20);
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable24 = xYIntervalSeriesCollection0.getSeriesKey(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0383");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        java.util.List list48 = categoryDataset46.getColumnKeys();
        java.lang.Comparable comparable49 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number51 = categoryDataset46.getValue(comparable49, (java.lang.Comparable) "org.jfree.data.general.SeriesException: org.jfree.data.general.SeriesException: hi!1");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'rowKey' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(list48);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0384");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        java.lang.Number number26 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        boolean boolean27 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset21);
        java.lang.Number number29 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        int int30 = categoryDataset21.getColumnCount();
        java.util.List list31 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21, false);
        java.lang.Comparable comparable34 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int35 = categoryDataset21.getRowIndex(comparable34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'key' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertEquals("'" + number26 + "' != '" + (-1.0d) + "'", number26, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertEquals("'" + number29 + "' != '" + (-1.0d) + "'", number29, (-1.0d));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(list31);
        org.junit.Assert.assertNotNull(range33);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0385");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.general.DatasetGroup datasetGroup13 = xYIntervalSeriesCollection0.getGroup();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number16 = xYIntervalSeriesCollection0.getStartY((int) (short) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNotNull(datasetGroup13);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0386");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem29 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int31 = xYIntervalDataItem29.compareTo((java.lang.Object) 1.0f);
        double double32 = xYIntervalDataItem29.getXHighValue();
        java.lang.Object obj33 = xYIntervalDataItem29.clone();
        boolean boolean35 = xYIntervalDataItem29.equals((java.lang.Object) 0);
        java.lang.Object obj36 = xYIntervalDataItem29.clone();
        int int37 = categoryDataset21.getColumnIndex((java.lang.Comparable) xYIntervalDataItem29);
        double double38 = xYIntervalDataItem29.getYLowValue();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0387");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        java.lang.Object obj14 = xYIntervalDataItem10.clone();
        boolean boolean16 = xYIntervalDataItem10.equals((java.lang.Object) 0);
        int int17 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries21 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        boolean boolean22 = xYIntervalSeries21.getNotify();
        int int23 = xYIntervalSeries21.getItemCount();
        boolean boolean24 = xYIntervalSeries21.getAutoSort();
        xYIntervalSeries21.fireSeriesChanged();
        xYIntervalSeries21.setMaximumItemCount((int) (short) 0);
        xYIntervalSeries21.clear();
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number32 = xYIntervalSeriesCollection0.getX(0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0388");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState24 = pieDataset23.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset28 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset23, (java.lang.Comparable) 'a', (double) 10.0f, (int) (short) 10);
        java.lang.Number number30 = pieDataset28.getValue((int) (short) 100);
        org.jfree.data.pie.PieDataset pieDataset33 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset28, (java.lang.Comparable) 'a', (double) 100L);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener34 = null;
        pieDataset28.removeChangeListener(datasetChangeListener34);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState36 = pieDataset28.getSelectionState();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState24);
        org.junit.Assert.assertNotNull(pieDataset28);
        org.junit.Assert.assertNull(number30);
        org.junit.Assert.assertNotNull(pieDataset33);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState36);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0389");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries12 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 32.0d);
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries12);
        boolean boolean14 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number17 = xYIntervalSeriesCollection0.getEndY((-1), (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0390");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.removeAllSeries();
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number16 = xYIntervalSeriesCollection0.getEndY(0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0391");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range15 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        int int16 = xYIntervalSeriesCollection0.getSeriesCount();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener17 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener17);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = xYIntervalSeriesCollection0.getEndXValue(1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNull(range15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0392");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener9 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries14 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries14.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo17 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent18 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo17);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo19 = null;
        seriesChangeEvent18.setSummary(seriesChangeInfo19);
        java.lang.Object obj21 = seriesChangeEvent18.getSource();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent18);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener23 = null;
        xYIntervalSeriesCollection0.addChangeListener(datasetChangeListener23);
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double28 = xYIntervalSeriesCollection0.getStartYValue(32, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + ' ' + "'", obj21, ' ');
        org.junit.Assert.assertNull(range25);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0393");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener12 = null;
        xYIntervalSeriesCollection0.addChangeListener(datasetChangeListener12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number16 = xYIntervalSeriesCollection0.getEndX(32, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0394");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        java.lang.Comparable comparable1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset2 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset0, comparable1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0395");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState9);
        java.lang.Number number11 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable13 = xYIntervalSeriesCollection0.getSeriesKey(2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(number11);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0396");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        org.jfree.data.ComparableObjectSeries comparableObjectSeries9 = new org.jfree.data.ComparableObjectSeries((java.lang.Comparable) (short) 1, true, true);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection10 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset12 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo13 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent14 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset12, datasetChangeInfo13);
        xYIntervalSeriesCollection10.notifyListeners(datasetChangeEvent14);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState16 = xYIntervalSeriesCollection10.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener17 = null;
        xYIntervalSeriesCollection10.removeChangeListener(datasetChangeListener17);
        org.jfree.data.DomainOrder domainOrder19 = xYIntervalSeriesCollection10.getDomainOrder();
        org.jfree.data.Range range21 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection10, true);
        // The following exception was thrown during execution in test generation
        try {
            comparableObjectSeries9.addChangeListener((org.jfree.data.event.SeriesChangeListener) xYIntervalSeriesCollection10);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Listener org.jfree.data.xy.XYIntervalSeriesCollection@7c9f4526 is not of type class org.jfree.data.Range");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState16);
        org.junit.Assert.assertNotNull(domainOrder19);
        org.junit.Assert.assertNull(range21);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0397");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        java.util.List list48 = categoryDataset46.getColumnKeys();
        org.jfree.data.KeyToGroupMap keyToGroupMap49 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range50 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset46, keyToGroupMap49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(list48);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0398");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection26 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset28 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo29 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent30 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset28, datasetChangeInfo29);
        xYIntervalSeriesCollection26.notifyListeners(datasetChangeEvent30);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState32 = xYIntervalSeriesCollection26.getSelectionState();
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection26);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection34 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder35 = xYIntervalSeriesCollection34.getDomainOrder();
        int int36 = xYIntervalSeriesCollection34.getSeriesCount();
        boolean boolean37 = xYIntervalSeriesCollection26.hasListener((java.util.EventListener) xYIntervalSeriesCollection34);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo38 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent39 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) list25, (org.jfree.data.general.Dataset) xYIntervalSeriesCollection34, datasetChangeInfo38);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState40 = xYIntervalSeriesCollection34.getSelectionState();
        org.jfree.data.Range range41 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number44 = xYIntervalSeriesCollection34.getStartX((-1), (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNull(xYDatasetSelectionState32);
        org.junit.Assert.assertNull(range33);
        org.junit.Assert.assertNotNull(domainOrder35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(xYDatasetSelectionState40);
        org.junit.Assert.assertNull(range41);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0399");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range3 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number6 = xYIntervalSeriesCollection0.getEndX((int) (short) 10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNull(range3);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0400");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState3 = xYIntervalSeriesCollection0.getSelectionState();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = xYIntervalSeriesCollection0.getStartYValue(1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNull(xYDatasetSelectionState3);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0401");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range22 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21);
        org.jfree.data.Range range23 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21);
        boolean boolean26 = range23.intersects((double) 2147483647, 97.0d);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0402");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener34 = null;
        categoryDataset22.removeChangeListener(datasetChangeListener34);
        java.util.List list36 = categoryDataset22.getColumnKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset38 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset22, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(list36);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0403");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem15 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int17 = xYIntervalDataItem15.compareTo((java.lang.Object) 1.0f);
        double double18 = xYIntervalDataItem15.getXHighValue();
        java.lang.Object obj19 = xYIntervalDataItem15.clone();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo20 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent21 = new org.jfree.data.event.SeriesChangeEvent(obj19, seriesChangeInfo20);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo22 = seriesChangeEvent21.getSummary();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent21);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries27 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries27.setMaximumItemCount((int) ' ');
        int int30 = xYIntervalSeries27.getMaximumItemCount();
        java.beans.PropertyChangeListener propertyChangeListener31 = null;
        xYIntervalSeries27.removePropertyChangeListener(propertyChangeListener31);
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries27);
        java.lang.Number number34 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double37 = xYIntervalSeriesCollection0.getEndYValue((int) (byte) 0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNull(seriesChangeInfo22);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 32 + "'", int30 == 32);
        org.junit.Assert.assertNull(number34);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0404");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset0, (double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0405");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray22 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray25 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray26 = new java.lang.Number[][] { numberArray10, numberArray13, numberArray16, numberArray19, numberArray22, numberArray25 };
        org.jfree.data.category.CategoryDataset categoryDataset27 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray26);
        java.util.List list28 = categoryDataset27.getRowKeys();
        org.jfree.data.Range range30 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset27, false);
        boolean boolean31 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset27);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener32 = null;
        categoryDataset27.removeChangeListener(datasetChangeListener32);
        java.lang.Number[] numberArray39 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray42 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray45 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray48 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray51 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray54 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray55 = new java.lang.Number[][] { numberArray39, numberArray42, numberArray45, numberArray48, numberArray51, numberArray54 };
        org.jfree.data.category.CategoryDataset categoryDataset56 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray55);
        java.util.List list57 = categoryDataset56.getRowKeys();
        org.jfree.data.Range range59 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset56, false);
        int int61 = categoryDataset56.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset63 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo64 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent65 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset63, datasetChangeInfo64);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent66 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset56, datasetChangeInfo64);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent67 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) xYIntervalSeriesCollection0, (org.jfree.data.general.Dataset) categoryDataset27, datasetChangeInfo64);
        // The following exception was thrown during execution in test generation
        try {
            double double70 = xYIntervalSeriesCollection0.getXValue((int) (byte) 1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(numberArray25);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(categoryDataset27);
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(numberArray39);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(numberArray51);
        org.junit.Assert.assertNotNull(numberArray54);
        org.junit.Assert.assertNotNull(numberArray55);
        org.junit.Assert.assertNotNull(categoryDataset56);
        org.junit.Assert.assertNotNull(list57);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0406");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = xYIntervalSeriesCollection0.getEndXValue(6, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0407");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number26 = categoryDataset21.getValue(6, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Size: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0408");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener48 = null;
        categoryDataset46.removeChangeListener(datasetChangeListener48);
        int int50 = categoryDataset46.getColumnCount();
        int int52 = categoryDataset46.getRowIndex((java.lang.Comparable) (-1.0d));
        java.lang.Number number53 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(categoryDataset46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable55 = categoryDataset46.getColumnKey((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertEquals("'" + number53 + "' != '" + 32.0d + "'", number53, 32.0d);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0409");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable4 = xYIntervalSeriesCollection0.getSeriesKey((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0410");
        org.jfree.data.function.Function2D function2D0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYDataset xYDataset5 = org.jfree.data.general.DatasetUtilities.sampleFunction2D(function2D0, (double) (short) 0, (double) 100L, (-1), (java.lang.Comparable) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'f' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0411");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener9 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries14 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries14.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo17 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent18 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo17);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo19 = null;
        seriesChangeEvent18.setSummary(seriesChangeInfo19);
        java.lang.Object obj21 = seriesChangeEvent18.getSource();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent18);
        boolean boolean23 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        xYIntervalSeriesCollection0.removeAllSeries();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double28 = xYIntervalSeriesCollection0.getEndYValue(32, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + ' ' + "'", obj21, ' ');
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(range25);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0412");
        org.jfree.data.xy.TableXYDataset tableXYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double2 = org.jfree.data.general.DatasetUtilities.calculateStackTotal(tableXYDataset0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0413");
        org.jfree.data.ComparableObjectSeries comparableObjectSeries3 = new org.jfree.data.ComparableObjectSeries((java.lang.Comparable) (short) 0, false, true);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        org.jfree.data.Range range14 = null;
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range14, (double) 100);
        double double18 = range16.constrain((double) '4');
        boolean boolean19 = xYIntervalDataItem10.equals((java.lang.Object) '4');
        boolean boolean21 = xYIntervalDataItem10.equals((java.lang.Object) 0.0f);
        java.lang.Object obj22 = xYIntervalDataItem10.clone();
        int int23 = comparableObjectSeries3.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection24 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset26 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo27 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent28 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset26, datasetChangeInfo27);
        xYIntervalSeriesCollection24.notifyListeners(datasetChangeEvent28);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState30 = xYIntervalSeriesCollection24.getSelectionState();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection31 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset33 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo34 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent35 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset33, datasetChangeInfo34);
        xYIntervalSeriesCollection31.notifyListeners(datasetChangeEvent35);
        org.jfree.data.general.Dataset dataset37 = datasetChangeEvent35.getDataset();
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo38 = datasetChangeEvent35.getInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent39 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) int23, (org.jfree.data.general.Dataset) xYIntervalSeriesCollection24, datasetChangeInfo38);
        java.util.List list40 = null;
        org.jfree.data.Range range41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range43 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection24, list40, range41, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'visibleSeriesKeys' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(xYDatasetSelectionState30);
        org.junit.Assert.assertNull(dataset37);
        org.junit.Assert.assertNotNull(datasetChangeInfo38);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0414");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection8 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection8.getDomainOrder();
        int int10 = xYIntervalSeriesCollection8.getSeriesCount();
        boolean boolean11 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection8);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries15 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries15.setMaximumItemCount((int) (short) 1);
        boolean boolean18 = xYIntervalSeries15.getAllowDuplicateXValues();
        xYIntervalSeries15.setDescription("org.jfree.data.general.SeriesException: ");
        // The following exception was thrown during execution in test generation
        try {
            xYIntervalSeriesCollection8.addSeries(xYIntervalSeries15);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Listener org.jfree.data.xy.XYIntervalSeriesCollection@2a4b1262 is not of type class org.jfree.data.Range");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0415");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable13 = xYIntervalSeriesCollection0.getSeriesKey(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0416");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range3 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        boolean boolean4 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number7 = xYIntervalSeriesCollection0.getEndX(32, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNull(range3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0417");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        int int26 = categoryDataset21.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range27, (double) (byte) -1, 200.0d);
        double double31 = range27.getLength();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 33.0d + "'", double31 == 33.0d);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0418");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = xYIntervalSeriesCollection0.getEndXValue((int) (byte) -1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0419");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21, true);
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset21);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset30 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, (java.lang.Comparable) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range28);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0420");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo10 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection0.fireDatasetChanged(datasetChangeInfo10);
        xYIntervalSeriesCollection0.removeAllSeries();
        org.jfree.data.DomainOrder domainOrder13 = xYIntervalSeriesCollection0.getDomainOrder();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number16 = xYIntervalSeriesCollection0.getY((int) (short) 10, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNotNull(domainOrder13);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0421");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        xYIntervalSeriesCollection0.removeAllSeries();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries5 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) "");
        boolean boolean6 = xYIntervalSeries5.getAllowDuplicateXValues();
        // The following exception was thrown during execution in test generation
        try {
            xYIntervalSeriesCollection0.addSeries(xYIntervalSeries5);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Listener org.jfree.data.xy.XYIntervalSeriesCollection@7e08f834 is not of type class org.jfree.data.Range");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0422");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener4 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener4);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = xYIntervalSeriesCollection0.getYValue(0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0423");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        java.lang.Object obj14 = xYIntervalDataItem10.clone();
        boolean boolean16 = xYIntervalDataItem10.equals((java.lang.Object) 0);
        int int17 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        java.lang.Number number18 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj19 = xYIntervalSeriesCollection0.clone();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = xYIntervalSeriesCollection0.getItemCount(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(number18);
        org.junit.Assert.assertNotNull(obj19);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0424");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range15 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        int int16 = xYIntervalSeriesCollection0.getSeriesCount();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener17 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener17);
        java.lang.Number number19 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNull(range15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(number19);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0425");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = xYIntervalSeriesCollection0.getStartXValue((int) (short) 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0426");
        java.lang.Object obj0 = null;
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection1 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset3 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo4 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent5 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset3, datasetChangeInfo4);
        xYIntervalSeriesCollection1.notifyListeners(datasetChangeEvent5);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState7 = xYIntervalSeriesCollection1.getSelectionState();
        int int9 = xYIntervalSeriesCollection1.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener10 = null;
        xYIntervalSeriesCollection1.removeChangeListener(datasetChangeListener10);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries15 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries15.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo18 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent19 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo18);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo20 = null;
        seriesChangeEvent19.setSummary(seriesChangeInfo20);
        java.lang.Object obj22 = seriesChangeEvent19.getSource();
        xYIntervalSeriesCollection1.seriesChanged(seriesChangeEvent19);
        boolean boolean24 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection1);
        xYIntervalSeriesCollection1.removeAllSeries();
        org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection1);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection27 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder28 = xYIntervalSeriesCollection27.getDomainOrder();
        org.jfree.data.DomainOrder domainOrder29 = xYIntervalSeriesCollection27.getDomainOrder();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection30 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset32 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo33 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent34 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset32, datasetChangeInfo33);
        xYIntervalSeriesCollection30.notifyListeners(datasetChangeEvent34);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState36 = xYIntervalSeriesCollection30.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener37 = null;
        xYIntervalSeriesCollection30.removeChangeListener(datasetChangeListener37);
        java.lang.Number number39 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection30);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo40 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection30.fireDatasetChanged(datasetChangeInfo40);
        xYIntervalSeriesCollection27.fireDatasetChanged(datasetChangeInfo40);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.event.DatasetChangeEvent datasetChangeEvent43 = new org.jfree.data.event.DatasetChangeEvent(obj0, (org.jfree.data.general.Dataset) xYIntervalSeriesCollection1, datasetChangeInfo40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null source");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + ' ' + "'", obj22, ' ');
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(range26);
        org.junit.Assert.assertNotNull(domainOrder28);
        org.junit.Assert.assertNotNull(domainOrder29);
        org.junit.Assert.assertNull(xYDatasetSelectionState36);
        org.junit.Assert.assertNull(number39);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0427");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range23 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range23, 0.0d);
        java.lang.Class<?> wildcardClass26 = range25.getClass();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0428");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener9 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries14 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries14.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo17 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent18 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo17);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo19 = null;
        seriesChangeEvent18.setSummary(seriesChangeInfo19);
        java.lang.Object obj21 = seriesChangeEvent18.getSource();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent18);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener23 = null;
        xYIntervalSeriesCollection0.addChangeListener(datasetChangeListener23);
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number28 = xYIntervalSeriesCollection0.getStartY((int) (short) 100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + ' ' + "'", obj21, ' ');
        org.junit.Assert.assertNull(range25);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0429");
        double[][] doubleArray2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.category.CategoryDataset categoryDataset3 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("org.jfree.data.event.SeriesChangeEvent[source= ]", "org.jfree.data.general.SeriesException: hi!1", doubleArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0430");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj8 = xYIntervalSeriesCollection0.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number11 = xYIntervalSeriesCollection0.getStartY((int) '4', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(obj8);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0431");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range4 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener5 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener5);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = xYIntervalSeriesCollection0.getStartXValue((int) (byte) -1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNull(range4);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0432");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        java.lang.Object obj14 = xYIntervalDataItem10.clone();
        boolean boolean16 = xYIntervalDataItem10.equals((java.lang.Object) 0);
        int int17 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        java.lang.Number number18 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.general.Dataset dataset20 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo21 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent22 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset20, datasetChangeInfo21);
        boolean boolean23 = xYIntervalSeriesCollection0.equals((java.lang.Object) datasetChangeInfo21);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState24 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState24);
        java.lang.Number number26 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(number18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(number26);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0433");
        org.jfree.data.xy.TableXYDataset tableXYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(tableXYDataset0, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0434");
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries3 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries3.setMaximumItemCount((int) ' ');
        xYIntervalSeries3.setDescription("");
        java.lang.Object obj8 = xYIntervalSeries3.clone();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection9 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset11 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo12 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent13 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset11, datasetChangeInfo12);
        xYIntervalSeriesCollection9.notifyListeners(datasetChangeEvent13);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState15 = xYIntervalSeriesCollection9.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener16 = null;
        xYIntervalSeriesCollection9.removeChangeListener(datasetChangeListener16);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState18 = xYIntervalSeriesCollection9.getSelectionState();
        org.jfree.data.Range range19 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection9);
        // The following exception was thrown during execution in test generation
        try {
            xYIntervalSeries3.removeChangeListener((org.jfree.data.event.SeriesChangeListener) xYIntervalSeriesCollection9);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Listener org.jfree.data.xy.XYIntervalSeriesCollection@1755fd0c is not of type class org.jfree.data.Range");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNull(xYDatasetSelectionState15);
        org.junit.Assert.assertNull(xYDatasetSelectionState18);
        org.junit.Assert.assertNull(range19);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0435");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        // The following exception was thrown during execution in test generation
        try {
            double double16 = xYIntervalSeriesCollection0.getYValue((int) (byte) -1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0436");
        org.jfree.data.function.Function2D function2D0 = null;
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) 0.0f, 100.0d, (double) 1, 1.0d, 1.0d, (double) 10L);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYDataset xYDataset11 = org.jfree.data.general.DatasetUtilities.sampleFunction2D(function2D0, 1.0d, 1.0d, (int) '#', (java.lang.Comparable) xYIntervalDataItem10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'f' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0437");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries17 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries17.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo20 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent21 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo20);
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent21);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = xYIntervalSeriesCollection0.getItemCount((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0438");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener9 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries14 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries14.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo17 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent18 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo17);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo19 = null;
        seriesChangeEvent18.setSummary(seriesChangeInfo19);
        java.lang.Object obj21 = seriesChangeEvent18.getSource();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent18);
        boolean boolean23 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Number number24 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number27 = xYIntervalSeriesCollection0.getEndY(0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + ' ' + "'", obj21, ' ');
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(number24);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0439");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        boolean boolean22 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        java.lang.Number number23 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        boolean boolean24 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number28 = categoryDataset21.getValue((int) (byte) 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + number23 + "' != '" + (-1.0d) + "'", number23, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0440");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        int int24 = categoryDataset21.getRowIndex((java.lang.Comparable) 32);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection25 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset27 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo28 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent29 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset27, datasetChangeInfo28);
        xYIntervalSeriesCollection25.notifyListeners(datasetChangeEvent29);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState31 = xYIntervalSeriesCollection25.getSelectionState();
        org.jfree.data.Range range32 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection25);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem39 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int41 = xYIntervalDataItem39.compareTo((java.lang.Object) 1.0f);
        double double42 = xYIntervalDataItem39.getXHighValue();
        org.jfree.data.Range range43 = null;
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range43, (double) 100);
        double double47 = range45.constrain((double) '4');
        boolean boolean48 = xYIntervalDataItem39.equals((java.lang.Object) '4');
        org.jfree.data.Range range49 = null;
        org.jfree.data.Range range51 = org.jfree.data.Range.expandToInclude(range49, (double) 100);
        double double53 = range51.constrain((double) '4');
        int int54 = xYIntervalDataItem39.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray61 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray64 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray67 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray70 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray73 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray76 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray77 = new java.lang.Number[][] { numberArray61, numberArray64, numberArray67, numberArray70, numberArray73, numberArray76 };
        org.jfree.data.category.CategoryDataset categoryDataset78 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray77);
        org.jfree.data.category.CategoryDataset categoryDataset79 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray77);
        int int80 = xYIntervalDataItem39.compareTo((java.lang.Object) categoryDataset79);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener81 = null;
        categoryDataset79.removeChangeListener(datasetChangeListener81);
        org.jfree.data.general.DatasetGroup datasetGroup83 = categoryDataset79.getGroup();
        xYIntervalSeriesCollection25.setGroup(datasetGroup83);
        categoryDataset21.setGroup(datasetGroup83);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(xYDatasetSelectionState31);
        org.junit.Assert.assertNull(range32);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 100.0d + "'", double42 == 100.0d);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 100.0d + "'", double53 == 100.0d);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(numberArray61);
        org.junit.Assert.assertNotNull(numberArray64);
        org.junit.Assert.assertNotNull(numberArray67);
        org.junit.Assert.assertNotNull(numberArray70);
        org.junit.Assert.assertNotNull(numberArray73);
        org.junit.Assert.assertNotNull(numberArray76);
        org.junit.Assert.assertNotNull(numberArray77);
        org.junit.Assert.assertNotNull(categoryDataset78);
        org.junit.Assert.assertNotNull(categoryDataset79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(datasetGroup83);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0441");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21, true);
        org.jfree.data.Range range29 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (byte) 0);
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range29, 0.0d);
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range31, (double) 1L);
        double double34 = range31.getLowerBound();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-6.0d) + "'", double34 == (-6.0d));
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0442");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range9 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState10 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState10);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = xYIntervalSeriesCollection0.getStartXValue(1, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNull(range9);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0443");
        org.jfree.data.xy.TableXYDataset tableXYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double2 = org.jfree.data.general.DatasetUtilities.calculateStackTotal(tableXYDataset0, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0444");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.DomainOrder domainOrder13 = xYIntervalSeriesCollection0.getDomainOrder();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number16 = xYIntervalSeriesCollection0.getX((int) (byte) 10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(number12);
        org.junit.Assert.assertNotNull(domainOrder13);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0445");
        double[] doubleArray11 = new double[] { 1.0d, (byte) -1, 1.0d };
        double[][] doubleArray12 = new double[][] { doubleArray11 };
        org.jfree.data.category.CategoryDataset categoryDataset13 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "", doubleArray12);
        org.jfree.data.category.CategoryDataset categoryDataset14 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!1", "hi!", doubleArray12);
        org.jfree.data.category.CategoryDataset categoryDataset15 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("Range[100.0,100.0]", "org.jfree.data.event.SeriesChangeEvent[source= ]", doubleArray12);
        org.jfree.data.category.CategoryDataset categoryDataset16 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!1", "hi!", doubleArray12);
        java.lang.Number number17 = org.jfree.data.general.DatasetUtilities.findMaximumStackedRangeValue(categoryDataset16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable19 = categoryDataset16.getRowKey((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(categoryDataset13);
        org.junit.Assert.assertNotNull(categoryDataset14);
        org.junit.Assert.assertNotNull(categoryDataset15);
        org.junit.Assert.assertNotNull(categoryDataset16);
        org.junit.Assert.assertEquals("'" + number17 + "' != '" + 1.0d + "'", number17, 1.0d);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0446");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray46 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray49 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray52 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray53 = new java.lang.Number[][] { numberArray37, numberArray40, numberArray43, numberArray46, numberArray49, numberArray52 };
        org.jfree.data.category.CategoryDataset categoryDataset54 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray53);
        java.util.List list55 = categoryDataset54.getRowKeys();
        org.jfree.data.Range range57 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset54, (double) (short) -1);
        java.util.List list58 = categoryDataset54.getRowKeys();
        org.jfree.data.Range range60 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, list58, false);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem67 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int69 = xYIntervalDataItem67.compareTo((java.lang.Object) 1.0f);
        double double70 = xYIntervalDataItem67.getXHighValue();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset71 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset22, (java.lang.Comparable) double70);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray46);
        org.junit.Assert.assertNotNull(numberArray49);
        org.junit.Assert.assertNotNull(numberArray52);
        org.junit.Assert.assertNotNull(numberArray53);
        org.junit.Assert.assertNotNull(categoryDataset54);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(list58);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 100.0d + "'", double70 == 100.0d);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0447");
        org.jfree.data.function.Function2D function2D0 = null;
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        org.jfree.data.Range range14 = null;
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range14, (double) 100);
        double double18 = range16.constrain((double) '4');
        boolean boolean19 = xYIntervalDataItem10.equals((java.lang.Object) '4');
        org.jfree.data.Range range20 = null;
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range20, (double) 100);
        double double24 = range22.constrain((double) '4');
        int int25 = xYIntervalDataItem10.compareTo((java.lang.Object) '4');
        double double26 = xYIntervalDataItem10.getXHighValue();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYSeries xYSeries27 = org.jfree.data.general.DatasetUtilities.sampleFunction2DToSeries(function2D0, (double) 10L, 31.0d, (int) (short) 100, (java.lang.Comparable) double26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'f' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0448");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        int int4 = xYIntervalSeriesCollection0.getSeriesCount();
        int int6 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 100.0d);
        org.jfree.data.DomainOrder domainOrder7 = xYIntervalSeriesCollection0.getDomainOrder();
        // The following exception was thrown during execution in test generation
        try {
            int int9 = xYIntervalSeriesCollection0.getItemCount(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(domainOrder7);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0449");
        java.lang.Number[] numberArray6 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray22 = new java.lang.Number[][] { numberArray6, numberArray9, numberArray12, numberArray15, numberArray18, numberArray21 };
        org.jfree.data.category.CategoryDataset categoryDataset23 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray22);
        org.jfree.data.category.CategoryDataset categoryDataset24 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray22);
        java.lang.Number number25 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(categoryDataset24);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset24, false);
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset24);
        org.junit.Assert.assertNotNull(numberArray6);
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(categoryDataset23);
        org.junit.Assert.assertNotNull(categoryDataset24);
        org.junit.Assert.assertEquals("'" + number25 + "' != '" + 32.0d + "'", number25, 32.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range28);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0450");
        org.jfree.data.function.Function2D function2D0 = null;
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray24 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray25 = new java.lang.Number[][] { numberArray9, numberArray12, numberArray15, numberArray18, numberArray21, numberArray24 };
        org.jfree.data.category.CategoryDataset categoryDataset26 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray25);
        java.util.List list27 = categoryDataset26.getRowKeys();
        org.jfree.data.Range range29 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset26, false);
        int int31 = categoryDataset26.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset33 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo34 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent35 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset33, datasetChangeInfo34);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent36 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset26, datasetChangeInfo34);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem43 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int45 = xYIntervalDataItem43.compareTo((java.lang.Object) 1.0f);
        int int46 = categoryDataset26.getColumnIndex((java.lang.Comparable) xYIntervalDataItem43);
        double double47 = xYIntervalDataItem43.getXLowValue();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection48 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder49 = xYIntervalSeriesCollection48.getDomainOrder();
        org.jfree.data.ComparableObjectItem comparableObjectItem50 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable) xYIntervalDataItem43, (java.lang.Object) domainOrder49);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYSeries xYSeries51 = org.jfree.data.general.DatasetUtilities.sampleFunction2DToSeries(function2D0, 31.0d, 0.0d, 6, (java.lang.Comparable) comparableObjectItem50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'f' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(numberArray25);
        org.junit.Assert.assertNotNull(categoryDataset26);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(domainOrder49);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0451");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        double double10 = xYIntervalDataItem6.getXLowValue();
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray24 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray27 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray30 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray31 = new java.lang.Number[][] { numberArray15, numberArray18, numberArray21, numberArray24, numberArray27, numberArray30 };
        org.jfree.data.category.CategoryDataset categoryDataset32 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray31);
        java.util.List list33 = categoryDataset32.getRowKeys();
        org.jfree.data.Range range35 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset32, (double) (short) -1);
        java.util.List list36 = categoryDataset32.getRowKeys();
        java.lang.Number number37 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset32);
        boolean boolean38 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset32);
        org.jfree.data.Range range39 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset32);
        org.jfree.data.Range range40 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset32);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection41 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset43 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo44 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent45 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset43, datasetChangeInfo44);
        xYIntervalSeriesCollection41.notifyListeners(datasetChangeEvent45);
        org.jfree.data.general.Dataset dataset47 = datasetChangeEvent45.getDataset();
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo48 = datasetChangeEvent45.getInfo();
        java.lang.Object obj49 = datasetChangeEvent45.getSource();
        org.jfree.data.general.Dataset dataset50 = datasetChangeEvent45.getDataset();
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo51 = datasetChangeEvent45.getInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent52 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) double10, (org.jfree.data.general.Dataset) categoryDataset32, datasetChangeInfo51);
        org.jfree.data.Range range53 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset32);
        double double54 = range53.getLength();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(numberArray27);
        org.junit.Assert.assertNotNull(numberArray30);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(categoryDataset32);
        org.junit.Assert.assertNotNull(list33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertEquals("'" + number37 + "' != '" + (-1.0d) + "'", number37, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNull(dataset47);
        org.junit.Assert.assertNotNull(datasetChangeInfo48);
        org.junit.Assert.assertEquals("'" + obj49 + "' != '" + (-1L) + "'", obj49, (-1L));
        org.junit.Assert.assertNull(dataset50);
        org.junit.Assert.assertNotNull(datasetChangeInfo51);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 33.0d + "'", double54 == 33.0d);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0452");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener25 = null;
        categoryDataset21.removeChangeListener(datasetChangeListener25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable28 = categoryDataset21.getColumnKey((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0453");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset2 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset0, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0454");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = xYIntervalSeriesCollection0.getYValue(0, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNull(range2);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0455");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        java.lang.Number number26 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        boolean boolean27 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset21);
        java.lang.Number number29 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        org.jfree.data.pie.PieDataset pieDataset31 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, (int) (short) 0);
        org.jfree.data.Range range32 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset21);
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray46 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray49 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray52 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray53 = new java.lang.Number[][] { numberArray37, numberArray40, numberArray43, numberArray46, numberArray49, numberArray52 };
        org.jfree.data.category.CategoryDataset categoryDataset54 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray53);
        java.util.List list55 = categoryDataset54.getRowKeys();
        org.jfree.data.Range range57 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset54, (double) (short) -1);
        java.util.List list58 = categoryDataset54.getRowKeys();
        java.lang.Number number59 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset54);
        boolean boolean60 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset54);
        org.jfree.data.Range range61 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset54);
        java.lang.Number number62 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset54);
        int int63 = categoryDataset54.getColumnCount();
        java.util.List list64 = categoryDataset54.getRowKeys();
        java.util.List list65 = categoryDataset54.getColumnKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range67 = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(categoryDataset21, list65, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertEquals("'" + number26 + "' != '" + (-1.0d) + "'", number26, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertEquals("'" + number29 + "' != '" + (-1.0d) + "'", number29, (-1.0d));
        org.junit.Assert.assertNotNull(pieDataset31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray46);
        org.junit.Assert.assertNotNull(numberArray49);
        org.junit.Assert.assertNotNull(numberArray52);
        org.junit.Assert.assertNotNull(numberArray53);
        org.junit.Assert.assertNotNull(categoryDataset54);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(list58);
        org.junit.Assert.assertEquals("'" + number59 + "' != '" + (-1.0d) + "'", number59, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertEquals("'" + number62 + "' != '" + (-1.0d) + "'", number62, (-1.0d));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(list64);
        org.junit.Assert.assertNotNull(list65);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0456");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        java.lang.Object obj14 = xYIntervalDataItem10.clone();
        boolean boolean16 = xYIntervalDataItem10.equals((java.lang.Object) 0);
        int int17 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        org.jfree.data.DomainOrder domainOrder18 = xYIntervalSeriesCollection0.getDomainOrder();
        java.lang.Number number19 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent20 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) xYIntervalSeriesCollection0);
        java.lang.Object obj21 = xYIntervalSeriesCollection0.clone();
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(domainOrder18);
        org.junit.Assert.assertNull(number19);
        org.junit.Assert.assertNotNull(obj21);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0457");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem15 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int17 = xYIntervalDataItem15.compareTo((java.lang.Object) 1.0f);
        double double18 = xYIntervalDataItem15.getXHighValue();
        java.lang.Object obj19 = xYIntervalDataItem15.clone();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo20 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent21 = new org.jfree.data.event.SeriesChangeEvent(obj19, seriesChangeInfo20);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo22 = seriesChangeEvent21.getSummary();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent21);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries27 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries27.setMaximumItemCount((int) ' ');
        int int30 = xYIntervalSeries27.getMaximumItemCount();
        java.beans.PropertyChangeListener propertyChangeListener31 = null;
        xYIntervalSeries27.removePropertyChangeListener(propertyChangeListener31);
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries27);
        java.lang.Number number34 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Number number35 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double38 = xYIntervalSeriesCollection0.getYValue((int) (byte) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNull(seriesChangeInfo22);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 32 + "'", int30 == 32);
        org.junit.Assert.assertNull(number34);
        org.junit.Assert.assertNull(number35);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0458");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection8 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection8.getDomainOrder();
        int int10 = xYIntervalSeriesCollection8.getSeriesCount();
        boolean boolean11 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection8);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        java.lang.Number number13 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray24 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray27 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray30 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray33 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray34 = new java.lang.Number[][] { numberArray18, numberArray21, numberArray24, numberArray27, numberArray30, numberArray33 };
        org.jfree.data.category.CategoryDataset categoryDataset35 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray34);
        java.util.List list36 = categoryDataset35.getRowKeys();
        org.jfree.data.Range range38 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset35, (double) (short) -1);
        java.util.List list39 = categoryDataset35.getRowKeys();
        java.lang.Number number40 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset35);
        boolean boolean41 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset35);
        org.jfree.data.Range range42 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset35);
        java.lang.Number number43 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset35);
        org.jfree.data.pie.PieDataset pieDataset45 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset35, (int) (short) 0);
        int int46 = pieDataset45.getItemCount();
        java.util.List list47 = pieDataset45.getKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range49 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8, list47, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(number12);
        org.junit.Assert.assertNull(number13);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(numberArray27);
        org.junit.Assert.assertNotNull(numberArray30);
        org.junit.Assert.assertNotNull(numberArray33);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(categoryDataset35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(list39);
        org.junit.Assert.assertEquals("'" + number40 + "' != '" + (-1.0d) + "'", number40, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertEquals("'" + number43 + "' != '" + (-1.0d) + "'", number43, (-1.0d));
        org.junit.Assert.assertNotNull(pieDataset45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(list47);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0459");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range24, 35.0d, true);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range27, (double) 100L, false);
        double double31 = range27.getCentralValue();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 127.0d + "'", double31 == 127.0d);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0460");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        boolean boolean22 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        java.lang.Number number23 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem30 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int32 = xYIntervalDataItem30.compareTo((java.lang.Object) 1.0f);
        boolean boolean34 = xYIntervalDataItem30.equals((java.lang.Object) 32);
        double double35 = xYIntervalDataItem30.getYValue();
        java.lang.Object obj36 = xYIntervalDataItem30.clone();
        java.lang.Number[] numberArray41 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray44 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray47 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray50 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray53 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray56 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray57 = new java.lang.Number[][] { numberArray41, numberArray44, numberArray47, numberArray50, numberArray53, numberArray56 };
        org.jfree.data.category.CategoryDataset categoryDataset58 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray57);
        java.util.List list59 = categoryDataset58.getRowKeys();
        org.jfree.data.Range range61 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset58, false);
        int int63 = categoryDataset58.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.Range range64 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset58);
        org.jfree.data.Range range67 = org.jfree.data.Range.expand(range64, (double) (byte) -1, 200.0d);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries69 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) "");
        boolean boolean70 = xYIntervalSeries69.getAllowDuplicateXValues();
        boolean boolean71 = range67.equals((java.lang.Object) xYIntervalSeries69);
        org.jfree.data.ComparableObjectItem comparableObjectItem72 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable) xYIntervalDataItem30, (java.lang.Object) xYIntervalSeries69);
        int int73 = categoryDataset21.getRowIndex((java.lang.Comparable) xYIntervalDataItem30);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + number23 + "' != '" + (-1.0d) + "'", number23, (-1.0d));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(numberArray41);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(numberArray47);
        org.junit.Assert.assertNotNull(numberArray50);
        org.junit.Assert.assertNotNull(numberArray53);
        org.junit.Assert.assertNotNull(numberArray56);
        org.junit.Assert.assertNotNull(numberArray57);
        org.junit.Assert.assertNotNull(categoryDataset58);
        org.junit.Assert.assertNotNull(list59);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0461");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        java.lang.Number number26 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        boolean boolean27 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset21);
        java.lang.Number number29 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        int int30 = categoryDataset21.getColumnCount();
        java.util.List list31 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (byte) 0);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertEquals("'" + number26 + "' != '" + (-1.0d) + "'", number26, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertEquals("'" + number29 + "' != '" + (-1.0d) + "'", number29, (-1.0d));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(list31);
        org.junit.Assert.assertNotNull(range33);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0462");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        org.jfree.data.Range range48 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset46);
        org.jfree.data.KeyToGroupMap keyToGroupMap49 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range50 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset46, keyToGroupMap49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(range48);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0463");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        java.lang.Number number25 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(categoryDataset21);
        java.lang.Comparable comparable26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset27 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset21, comparable26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'key' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertEquals("'" + number25 + "' != '" + 32.0d + "'", number25, 32.0d);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0464");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener9 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries14 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries14.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo17 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent18 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo17);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo19 = null;
        seriesChangeEvent18.setSummary(seriesChangeInfo19);
        java.lang.Object obj21 = seriesChangeEvent18.getSource();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent18);
        boolean boolean23 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Number number24 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number27 = xYIntervalSeriesCollection0.getEndY(10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + ' ' + "'", obj21, ' ');
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(number24);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0465");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range23 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        org.jfree.data.general.DatasetGroup datasetGroup24 = categoryDataset21.getGroup();
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection27 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder28 = xYIntervalSeriesCollection27.getDomainOrder();
        org.jfree.data.Range range29 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection27);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem36 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int38 = xYIntervalDataItem36.compareTo((java.lang.Object) 1.0f);
        double double39 = xYIntervalDataItem36.getXHighValue();
        org.jfree.data.Range range40 = null;
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range40, (double) 100);
        double double44 = range42.constrain((double) '4');
        boolean boolean45 = xYIntervalDataItem36.equals((java.lang.Object) '4');
        org.jfree.data.Range range46 = null;
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range46, (double) 100);
        double double50 = range48.constrain((double) '4');
        int int51 = xYIntervalDataItem36.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray58 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray61 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray64 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray67 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray70 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray73 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray74 = new java.lang.Number[][] { numberArray58, numberArray61, numberArray64, numberArray67, numberArray70, numberArray73 };
        org.jfree.data.category.CategoryDataset categoryDataset75 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray74);
        org.jfree.data.category.CategoryDataset categoryDataset76 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray74);
        int int77 = xYIntervalDataItem36.compareTo((java.lang.Object) categoryDataset76);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener78 = null;
        categoryDataset76.removeChangeListener(datasetChangeListener78);
        org.jfree.data.general.DatasetGroup datasetGroup80 = categoryDataset76.getGroup();
        xYIntervalSeriesCollection27.setGroup(datasetGroup80);
        categoryDataset21.setGroup(datasetGroup80);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(datasetGroup24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(domainOrder28);
        org.junit.Assert.assertNull(range29);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 100.0d + "'", double44 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 100.0d + "'", double50 == 100.0d);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(numberArray58);
        org.junit.Assert.assertNotNull(numberArray61);
        org.junit.Assert.assertNotNull(numberArray64);
        org.junit.Assert.assertNotNull(numberArray67);
        org.junit.Assert.assertNotNull(numberArray70);
        org.junit.Assert.assertNotNull(numberArray73);
        org.junit.Assert.assertNotNull(numberArray74);
        org.junit.Assert.assertNotNull(categoryDataset75);
        org.junit.Assert.assertNotNull(categoryDataset76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(datasetGroup80);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0466");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable13 = xYIntervalSeriesCollection0.getSeriesKey(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0467");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection8 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection8.getDomainOrder();
        int int10 = xYIntervalSeriesCollection8.getSeriesCount();
        boolean boolean11 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection8);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        xYIntervalSeriesCollection8.validateObject();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent14 = null;
        xYIntervalSeriesCollection8.notifyListeners(datasetChangeEvent14);
        // The following exception was thrown during execution in test generation
        try {
            double double18 = xYIntervalSeriesCollection8.getYValue((int) '4', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(number12);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0468");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, (double) 100);
        double double4 = range2.constrain((double) '4');
        double double5 = range2.getLength();
        double double6 = range2.getCentralValue();
        boolean boolean9 = range2.intersects((double) 2147483647, (double) (short) 10);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection10 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset12 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo13 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent14 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset12, datasetChangeInfo13);
        xYIntervalSeriesCollection10.notifyListeners(datasetChangeEvent14);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState16 = xYIntervalSeriesCollection10.getSelectionState();
        org.jfree.data.Range range17 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection10);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection18 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset20 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo21 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent22 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset20, datasetChangeInfo21);
        xYIntervalSeriesCollection18.notifyListeners(datasetChangeEvent22);
        org.jfree.data.general.Dataset dataset24 = datasetChangeEvent22.getDataset();
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo25 = datasetChangeEvent22.getInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent26 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) range2, (org.jfree.data.general.Dataset) xYIntervalSeriesCollection10, datasetChangeInfo25);
        xYIntervalSeriesCollection10.removeAllSeries();
        // The following exception was thrown during execution in test generation
        try {
            double double30 = xYIntervalSeriesCollection10.getXValue((int) (byte) -1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(range2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(xYDatasetSelectionState16);
        org.junit.Assert.assertNull(range17);
        org.junit.Assert.assertNull(dataset24);
        org.junit.Assert.assertNotNull(datasetChangeInfo25);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0469");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range15 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        java.lang.Number number16 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number19 = xYIntervalSeriesCollection0.getEndX((int) ' ', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNull(range15);
        org.junit.Assert.assertNull(number16);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0470");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range9 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem16 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int18 = xYIntervalDataItem16.compareTo((java.lang.Object) 1.0f);
        double double19 = xYIntervalDataItem16.getXHighValue();
        org.jfree.data.Range range20 = null;
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range20, (double) 100);
        double double24 = range22.constrain((double) '4');
        boolean boolean25 = xYIntervalDataItem16.equals((java.lang.Object) '4');
        boolean boolean27 = xYIntervalDataItem16.equals((java.lang.Object) 0.0f);
        java.lang.Object obj28 = xYIntervalDataItem16.clone();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries29 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) xYIntervalDataItem16);
        int int30 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number33 = xYIntervalSeriesCollection0.getX(32, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNull(range9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0471");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener9 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries14 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries14.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo17 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent18 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo17);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo19 = null;
        seriesChangeEvent18.setSummary(seriesChangeInfo19);
        java.lang.Object obj21 = seriesChangeEvent18.getSource();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent18);
        boolean boolean23 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Number number24 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj25 = xYIntervalSeriesCollection0.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number28 = xYIntervalSeriesCollection0.getStartY(0, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + ' ' + "'", obj21, ' ');
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(number24);
        org.junit.Assert.assertNotNull(obj25);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0472");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj12 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection13 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset15 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo16 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent17 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset15, datasetChangeInfo16);
        xYIntervalSeriesCollection13.notifyListeners(datasetChangeEvent17);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState19 = xYIntervalSeriesCollection13.getSelectionState();
        int int21 = xYIntervalSeriesCollection13.indexOf((java.lang.Comparable) 10.0f);
        java.lang.Object obj22 = xYIntervalSeriesCollection13.clone();
        int int23 = xYIntervalSeriesCollection13.getSeriesCount();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries27 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        boolean boolean28 = xYIntervalSeries27.getNotify();
        int int29 = xYIntervalSeries27.getItemCount();
        boolean boolean30 = xYIntervalSeries27.getAutoSort();
        xYIntervalSeries27.fireSeriesChanged();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries36 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        java.lang.Object obj38 = null;
        xYIntervalSeries36.firePropertyChange("", obj38, (java.lang.Object) "hi!");
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries44 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries44.setMaximumItemCount((int) ' ');
        org.jfree.data.Range range48 = null;
        org.jfree.data.Range range50 = org.jfree.data.Range.expandToInclude(range48, (double) 100);
        double double52 = range50.constrain((double) '4');
        double double53 = range50.getLength();
        org.jfree.data.Range range54 = null;
        org.jfree.data.Range range56 = org.jfree.data.Range.expandToInclude(range54, (double) 100);
        double double58 = range56.constrain((double) '4');
        boolean boolean59 = range50.intersects(range56);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries63 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries63.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo66 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent67 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo66);
        xYIntervalSeries44.firePropertyChange("", (java.lang.Object) boolean59, (java.lang.Object) ' ');
        xYIntervalSeries44.fireSeriesChanged();
        xYIntervalSeries27.firePropertyChange("org.jfree.data.event.DatasetChangeEvent[source=-1]", (java.lang.Object) "hi!", (java.lang.Object) xYIntervalSeries44);
        xYIntervalSeriesCollection13.removeSeries(xYIntervalSeries27);
        // The following exception was thrown during execution in test generation
        try {
            xYIntervalSeriesCollection0.addSeries(xYIntervalSeries27);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Listener org.jfree.data.xy.XYIntervalSeriesCollection@58648397 is not of type class org.jfree.data.Range");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNull(xYDatasetSelectionState19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 100.0d + "'", double52 == 100.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 100.0d + "'", double58 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0473");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range15 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        java.lang.Number number16 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        int int18 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            double double21 = xYIntervalSeriesCollection0.getEndYValue((-1), (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNull(range15);
        org.junit.Assert.assertNull(number16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0474");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Number number3 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = xYIntervalSeriesCollection0.getXValue((int) 'a', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNull(number3);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0475");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection8 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection8.getDomainOrder();
        int int10 = xYIntervalSeriesCollection8.getSeriesCount();
        boolean boolean11 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection8);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        xYIntervalSeriesCollection8.validateObject();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener14 = null;
        xYIntervalSeriesCollection8.addChangeListener(datasetChangeListener14);
        org.jfree.data.Range range16 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = xYIntervalSeriesCollection8.getStartYValue((int) '#', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(number12);
        org.junit.Assert.assertNull(range16);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0476");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection8 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection8.getDomainOrder();
        int int10 = xYIntervalSeriesCollection8.getSeriesCount();
        boolean boolean11 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection8);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        java.lang.Number number13 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        org.jfree.data.Range range15 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8, true);
        org.jfree.data.Range range16 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number19 = xYIntervalSeriesCollection8.getX(0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(number12);
        org.junit.Assert.assertNull(number13);
        org.junit.Assert.assertNull(range15);
        org.junit.Assert.assertNull(range16);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0477");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        java.lang.Object obj14 = xYIntervalDataItem10.clone();
        boolean boolean16 = xYIntervalDataItem10.equals((java.lang.Object) 0);
        int int17 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        org.jfree.data.DomainOrder domainOrder18 = xYIntervalSeriesCollection0.getDomainOrder();
        // The following exception was thrown during execution in test generation
        try {
            xYIntervalSeriesCollection0.removeSeries((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(domainOrder18);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0478");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem9 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int11 = xYIntervalDataItem9.compareTo((java.lang.Object) 1.0f);
        double double12 = xYIntervalDataItem9.getXHighValue();
        org.jfree.data.Range range13 = null;
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range13, (double) 100);
        double double17 = range15.constrain((double) '4');
        boolean boolean18 = xYIntervalDataItem9.equals((java.lang.Object) '4');
        org.jfree.data.Range range19 = null;
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range19, (double) 100);
        double double23 = range21.constrain((double) '4');
        int int24 = xYIntervalDataItem9.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray46 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray47 = new java.lang.Number[][] { numberArray31, numberArray34, numberArray37, numberArray40, numberArray43, numberArray46 };
        org.jfree.data.category.CategoryDataset categoryDataset48 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray47);
        org.jfree.data.category.CategoryDataset categoryDataset49 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray47);
        int int50 = xYIntervalDataItem9.compareTo((java.lang.Object) categoryDataset49);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener51 = null;
        categoryDataset49.removeChangeListener(datasetChangeListener51);
        org.jfree.data.general.DatasetGroup datasetGroup53 = categoryDataset49.getGroup();
        xYIntervalSeriesCollection0.setGroup(datasetGroup53);
        // The following exception was thrown during execution in test generation
        try {
            double double57 = xYIntervalSeriesCollection0.getEndXValue((int) ' ', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray46);
        org.junit.Assert.assertNotNull(numberArray47);
        org.junit.Assert.assertNotNull(categoryDataset48);
        org.junit.Assert.assertNotNull(categoryDataset49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(datasetGroup53);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0479");
        org.jfree.data.xy.TableXYDataset tableXYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double2 = org.jfree.data.general.DatasetUtilities.calculateStackTotal(tableXYDataset0, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0480");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.Range range6 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        int int7 = xYIntervalSeriesCollection0.getSeriesCount();
        org.jfree.data.general.DatasetGroup datasetGroup8 = xYIntervalSeriesCollection0.getGroup();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection9 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset11 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo12 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent13 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset11, datasetChangeInfo12);
        xYIntervalSeriesCollection9.notifyListeners(datasetChangeEvent13);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState15 = xYIntervalSeriesCollection9.getSelectionState();
        int int17 = xYIntervalSeriesCollection9.indexOf((java.lang.Comparable) 10.0f);
        java.lang.Object obj18 = xYIntervalSeriesCollection9.clone();
        int int19 = xYIntervalSeriesCollection9.getSeriesCount();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries23 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        boolean boolean24 = xYIntervalSeries23.getNotify();
        int int25 = xYIntervalSeries23.getItemCount();
        boolean boolean26 = xYIntervalSeries23.getAutoSort();
        xYIntervalSeries23.fireSeriesChanged();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries32 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        java.lang.Object obj34 = null;
        xYIntervalSeries32.firePropertyChange("", obj34, (java.lang.Object) "hi!");
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries40 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries40.setMaximumItemCount((int) ' ');
        org.jfree.data.Range range44 = null;
        org.jfree.data.Range range46 = org.jfree.data.Range.expandToInclude(range44, (double) 100);
        double double48 = range46.constrain((double) '4');
        double double49 = range46.getLength();
        org.jfree.data.Range range50 = null;
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range50, (double) 100);
        double double54 = range52.constrain((double) '4');
        boolean boolean55 = range46.intersects(range52);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries59 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries59.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo62 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent63 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo62);
        xYIntervalSeries40.firePropertyChange("", (java.lang.Object) boolean55, (java.lang.Object) ' ');
        xYIntervalSeries40.fireSeriesChanged();
        xYIntervalSeries23.firePropertyChange("org.jfree.data.event.DatasetChangeEvent[source=-1]", (java.lang.Object) "hi!", (java.lang.Object) xYIntervalSeries40);
        xYIntervalSeriesCollection9.removeSeries(xYIntervalSeries23);
        boolean boolean68 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection9);
        // The following exception was thrown during execution in test generation
        try {
            double double71 = xYIntervalSeriesCollection0.getStartYValue((int) (short) 100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(datasetGroup8);
        org.junit.Assert.assertNull(xYDatasetSelectionState15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.0d + "'", double48 == 100.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 100.0d + "'", double54 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0481");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        int int26 = categoryDataset21.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range27, (double) (byte) -1, 200.0d);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries32 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) "");
        boolean boolean33 = xYIntervalSeries32.getAllowDuplicateXValues();
        boolean boolean34 = range30.equals((java.lang.Object) xYIntervalSeries32);
        xYIntervalSeries32.setMaximumItemCount(0);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0482");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.Range range6 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        int int7 = xYIntervalSeriesCollection0.getSeriesCount();
        org.jfree.data.general.DatasetGroup datasetGroup8 = xYIntervalSeriesCollection0.getGroup();
        org.jfree.data.Range range9 = null;
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range9, (double) 100);
        double double13 = range11.constrain((double) '4');
        boolean boolean14 = datasetGroup8.equals((java.lang.Object) range11);
        org.junit.Assert.assertNull(range6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(datasetGroup8);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0483");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection26 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset28 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo29 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent30 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset28, datasetChangeInfo29);
        xYIntervalSeriesCollection26.notifyListeners(datasetChangeEvent30);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState32 = xYIntervalSeriesCollection26.getSelectionState();
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection26);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection34 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder35 = xYIntervalSeriesCollection34.getDomainOrder();
        int int36 = xYIntervalSeriesCollection34.getSeriesCount();
        boolean boolean37 = xYIntervalSeriesCollection26.hasListener((java.util.EventListener) xYIntervalSeriesCollection34);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo38 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent39 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) list25, (org.jfree.data.general.Dataset) xYIntervalSeriesCollection34, datasetChangeInfo38);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState40 = xYIntervalSeriesCollection34.getSelectionState();
        // The following exception was thrown during execution in test generation
        try {
            int int42 = xYIntervalSeriesCollection34.getItemCount((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNull(xYDatasetSelectionState32);
        org.junit.Assert.assertNull(range33);
        org.junit.Assert.assertNotNull(domainOrder35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(xYDatasetSelectionState40);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0484");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener9 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries14 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries14.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo17 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent18 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo17);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo19 = null;
        seriesChangeEvent18.setSummary(seriesChangeInfo19);
        java.lang.Object obj21 = seriesChangeEvent18.getSource();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent18);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener23 = null;
        xYIntervalSeriesCollection0.addChangeListener(datasetChangeListener23);
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Number number26 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double29 = xYIntervalSeriesCollection0.getStartYValue(0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + ' ' + "'", obj21, ' ');
        org.junit.Assert.assertNull(range25);
        org.junit.Assert.assertNull(number26);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0485");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range15 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        java.lang.Number number16 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        int int18 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            int int20 = xYIntervalSeriesCollection0.getItemCount((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNull(range15);
        org.junit.Assert.assertNull(number16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0486");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener34 = null;
        categoryDataset22.removeChangeListener(datasetChangeListener34);
        java.util.List list36 = categoryDataset22.getColumnKeys();
        org.jfree.data.KeyToGroupMap keyToGroupMap37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range38 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset22, keyToGroupMap37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(list36);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0487");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.lang.Number number25 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset21);
        java.lang.Comparable comparable28 = categoryDataset21.getRowKey(0);
        org.jfree.data.Range range30 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds(categoryDataset21, false);
        java.lang.Number number31 = org.jfree.data.general.DatasetUtilities.findMinimumStackedRangeValue(categoryDataset21);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertEquals("'" + number25 + "' != '" + (-1.0d) + "'", number25, (-1.0d));
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertEquals("'" + comparable28 + "' != '" + "hi!1" + "'", comparable28, "hi!1");
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertEquals("'" + number31 + "' != '" + (-6.0d) + "'", number31, (-6.0d));
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0488");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range23 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range23, 0.0d);
        org.jfree.data.Range range28 = org.jfree.data.Range.expand(range23, (double) 1L, (double) (-1L));
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range23, (double) (byte) 100);
        double double31 = range30.getLength();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 132.0d + "'", double31 == 132.0d);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0489");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        java.lang.Number number33 = org.jfree.data.general.DatasetUtilities.findMaximumStackedRangeValue(categoryDataset22);
        java.lang.Number number34 = org.jfree.data.general.DatasetUtilities.findMaximumStackedRangeValue(categoryDataset22);
        org.jfree.data.Range range36 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset22, true);
        org.jfree.data.Range range37 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset22);
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertEquals("'" + number33 + "' != '" + 192.0d + "'", number33, 192.0d);
        org.junit.Assert.assertEquals("'" + number34 + "' != '" + 192.0d + "'", number34, 192.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(range37);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0490");
        double[] doubleArray11 = new double[] { 1.0d, (byte) -1, 1.0d };
        double[][] doubleArray12 = new double[][] { doubleArray11 };
        org.jfree.data.category.CategoryDataset categoryDataset13 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "", doubleArray12);
        org.jfree.data.category.CategoryDataset categoryDataset14 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!1", "hi!", doubleArray12);
        org.jfree.data.category.CategoryDataset categoryDataset15 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("Range[100.0,100.0]", "org.jfree.data.event.SeriesChangeEvent[source= ]", doubleArray12);
        org.jfree.data.category.CategoryDataset categoryDataset16 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!1", "hi!", doubleArray12);
        org.jfree.data.Range range17 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset16);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem24 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int26 = xYIntervalDataItem24.compareTo((java.lang.Object) 1.0f);
        double double27 = xYIntervalDataItem24.getXHighValue();
        org.jfree.data.Range range28 = null;
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range28, (double) 100);
        double double32 = range30.constrain((double) '4');
        boolean boolean33 = xYIntervalDataItem24.equals((java.lang.Object) '4');
        org.jfree.data.Range range34 = null;
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range34, (double) 100);
        double double38 = range36.constrain((double) '4');
        int int39 = xYIntervalDataItem24.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray46 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray49 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray52 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray55 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray58 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray61 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray62 = new java.lang.Number[][] { numberArray46, numberArray49, numberArray52, numberArray55, numberArray58, numberArray61 };
        org.jfree.data.category.CategoryDataset categoryDataset63 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray62);
        org.jfree.data.category.CategoryDataset categoryDataset64 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray62);
        int int65 = xYIntervalDataItem24.compareTo((java.lang.Object) categoryDataset64);
        java.util.List list66 = categoryDataset64.getColumnKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range68 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset16, list66, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(categoryDataset13);
        org.junit.Assert.assertNotNull(categoryDataset14);
        org.junit.Assert.assertNotNull(categoryDataset15);
        org.junit.Assert.assertNotNull(categoryDataset16);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(numberArray46);
        org.junit.Assert.assertNotNull(numberArray49);
        org.junit.Assert.assertNotNull(numberArray52);
        org.junit.Assert.assertNotNull(numberArray55);
        org.junit.Assert.assertNotNull(numberArray58);
        org.junit.Assert.assertNotNull(numberArray61);
        org.junit.Assert.assertNotNull(numberArray62);
        org.junit.Assert.assertNotNull(categoryDataset63);
        org.junit.Assert.assertNotNull(categoryDataset64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(list66);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0491");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        java.lang.Object obj14 = xYIntervalDataItem10.clone();
        boolean boolean16 = xYIntervalDataItem10.equals((java.lang.Object) 0);
        int int17 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        org.jfree.data.DomainOrder domainOrder18 = xYIntervalSeriesCollection0.getDomainOrder();
        // The following exception was thrown during execution in test generation
        try {
            double double21 = xYIntervalSeriesCollection0.getYValue(1, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(domainOrder18);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0492");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener25 = null;
        categoryDataset21.removeChangeListener(datasetChangeListener25);
        java.lang.Number number27 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(categoryDataset21);
        boolean boolean28 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertEquals("'" + number27 + "' != '" + 32.0d + "'", number27, 32.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0493");
        org.jfree.data.xy.TableXYDataset tableXYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(tableXYDataset0, (double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0494");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState24 = pieDataset23.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset28 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset23, (java.lang.Comparable) 'a', (double) 10.0f, (int) (short) 10);
        java.util.List list29 = pieDataset28.getKeys();
        org.jfree.data.pie.PieDataset pieDataset33 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset28, (java.lang.Comparable) 100.0f, (double) (-1L), (-1));
        java.lang.Number number35 = pieDataset28.getValue((int) '4');
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState24);
        org.junit.Assert.assertNotNull(pieDataset28);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(pieDataset33);
        org.junit.Assert.assertNull(number35);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0495");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        java.lang.Object obj14 = xYIntervalDataItem10.clone();
        boolean boolean16 = xYIntervalDataItem10.equals((java.lang.Object) 0);
        int int17 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = xYIntervalSeriesCollection0.getEndYValue(0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0496");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState24 = pieDataset23.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset28 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset23, (java.lang.Comparable) 'a', (double) 10.0f, (int) (short) 10);
        java.lang.Number number30 = pieDataset28.getValue((int) (short) 100);
        org.jfree.data.pie.PieDataset pieDataset33 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset28, (java.lang.Comparable) 'a', (double) 100L);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener34 = null;
        pieDataset28.removeChangeListener(datasetChangeListener34);
        java.util.List list36 = pieDataset28.getKeys();
        boolean boolean37 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(pieDataset28);
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray46 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray49 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray52 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray55 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray58 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray59 = new java.lang.Number[][] { numberArray43, numberArray46, numberArray49, numberArray52, numberArray55, numberArray58 };
        org.jfree.data.category.CategoryDataset categoryDataset60 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray59);
        java.util.List list61 = categoryDataset60.getRowKeys();
        org.jfree.data.Range range63 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset60, false);
        int int65 = categoryDataset60.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset67 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo68 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent69 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset67, datasetChangeInfo68);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent70 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset60, datasetChangeInfo68);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem77 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int79 = xYIntervalDataItem77.compareTo((java.lang.Object) 1.0f);
        int int80 = categoryDataset60.getColumnIndex((java.lang.Comparable) xYIntervalDataItem77);
        double double81 = xYIntervalDataItem77.getXLowValue();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection82 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder83 = xYIntervalSeriesCollection82.getDomainOrder();
        org.jfree.data.ComparableObjectItem comparableObjectItem84 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable) xYIntervalDataItem77, (java.lang.Object) domainOrder83);
        double double85 = xYIntervalDataItem77.getYValue();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number86 = pieDataset28.getValue((java.lang.Comparable) double85);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.UnknownKeyException; message: The key (0.0) is not recognised.");
        } catch (org.jfree.data.UnknownKeyException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState24);
        org.junit.Assert.assertNotNull(pieDataset28);
        org.junit.Assert.assertNull(number30);
        org.junit.Assert.assertNotNull(pieDataset33);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray46);
        org.junit.Assert.assertNotNull(numberArray49);
        org.junit.Assert.assertNotNull(numberArray52);
        org.junit.Assert.assertNotNull(numberArray55);
        org.junit.Assert.assertNotNull(numberArray58);
        org.junit.Assert.assertNotNull(numberArray59);
        org.junit.Assert.assertNotNull(categoryDataset60);
        org.junit.Assert.assertNotNull(list61);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 1.0d + "'", double81 == 1.0d);
        org.junit.Assert.assertNotNull(domainOrder83);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0497");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21, true);
        org.jfree.data.Range range29 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (byte) 0);
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range29, 0.0d);
        double double32 = range29.getCentralValue();
        double double33 = range29.getLowerBound();
        org.jfree.data.Range range34 = null;
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range34, (double) 100);
        double double38 = range36.constrain((double) '4');
        double double39 = range36.getLength();
        double double40 = range36.getCentralValue();
        double double42 = range36.constrain(1.0d);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range29, range36);
        boolean boolean45 = range29.contains(0.0d);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 93.0d + "'", double32 == 93.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-6.0d) + "'", double33 == (-6.0d));
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 100.0d + "'", double42 == 100.0d);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0498");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, (double) 100);
        double double4 = range2.constrain((double) '4');
        double double5 = range2.getLength();
        double double6 = range2.getCentralValue();
        boolean boolean9 = range2.intersects((double) 2147483647, (double) (short) 10);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection10 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset12 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo13 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent14 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset12, datasetChangeInfo13);
        xYIntervalSeriesCollection10.notifyListeners(datasetChangeEvent14);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState16 = xYIntervalSeriesCollection10.getSelectionState();
        org.jfree.data.Range range17 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection10);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection18 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset20 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo21 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent22 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset20, datasetChangeInfo21);
        xYIntervalSeriesCollection18.notifyListeners(datasetChangeEvent22);
        org.jfree.data.general.Dataset dataset24 = datasetChangeEvent22.getDataset();
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo25 = datasetChangeEvent22.getInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent26 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) range2, (org.jfree.data.general.Dataset) xYIntervalSeriesCollection10, datasetChangeInfo25);
        java.lang.Number[] numberArray32 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray35 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray38 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray41 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray44 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray47 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray48 = new java.lang.Number[][] { numberArray32, numberArray35, numberArray38, numberArray41, numberArray44, numberArray47 };
        org.jfree.data.category.CategoryDataset categoryDataset49 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray48);
        java.util.List list50 = categoryDataset49.getRowKeys();
        org.jfree.data.Range range52 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset49, false);
        int int54 = categoryDataset49.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset56 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo57 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent58 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset56, datasetChangeInfo57);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent59 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset49, datasetChangeInfo57);
        xYIntervalSeriesCollection10.notifyListeners(datasetChangeEvent59);
        // The following exception was thrown during execution in test generation
        try {
            double double63 = xYIntervalSeriesCollection10.getYValue((int) '4', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(range2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(xYDatasetSelectionState16);
        org.junit.Assert.assertNull(range17);
        org.junit.Assert.assertNull(dataset24);
        org.junit.Assert.assertNotNull(datasetChangeInfo25);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(numberArray35);
        org.junit.Assert.assertNotNull(numberArray38);
        org.junit.Assert.assertNotNull(numberArray41);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(numberArray47);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(categoryDataset49);
        org.junit.Assert.assertNotNull(list50);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0499");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        java.lang.Number number26 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        boolean boolean27 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        int int28 = categoryDataset21.getColumnCount();
        org.jfree.data.Range range30 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        double double31 = range30.getUpperBound();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertEquals("'" + number26 + "' != '" + (-1.0d) + "'", number26, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 32.0d + "'", double31 == 32.0d);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest0.test0500");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        java.lang.Object obj14 = xYIntervalDataItem10.clone();
        boolean boolean16 = xYIntervalDataItem10.equals((java.lang.Object) 0);
        int int17 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        org.jfree.data.Range range18 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range20 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(range18);
        org.junit.Assert.assertNull(range20);
    }
}
