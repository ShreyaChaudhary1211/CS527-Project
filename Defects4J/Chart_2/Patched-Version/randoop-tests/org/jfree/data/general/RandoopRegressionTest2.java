package org.jfree.data.general;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RandoopRegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1001");
        org.jfree.data.xy.XYInterval xYInterval5 = new org.jfree.data.xy.XYInterval((double) 10, 93.0d, (double) (-1L), (double) 0, (double) ' ');
        double double6 = xYInterval5.getY();
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray24 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray27 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray28 = new java.lang.Number[][] { numberArray12, numberArray15, numberArray18, numberArray21, numberArray24, numberArray27 };
        org.jfree.data.category.CategoryDataset categoryDataset29 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray28);
        java.util.List list30 = categoryDataset29.getRowKeys();
        org.jfree.data.Range range32 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset29, false);
        int int34 = categoryDataset29.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset36 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo37 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent38 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset36, datasetChangeInfo37);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent39 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset29, datasetChangeInfo37);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem46 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int48 = xYIntervalDataItem46.compareTo((java.lang.Object) 1.0f);
        int int49 = categoryDataset29.getColumnIndex((java.lang.Comparable) xYIntervalDataItem46);
        org.jfree.data.Range range51 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset29, true);
        boolean boolean52 = xYInterval5.equals((java.lang.Object) range51);
        double double53 = xYInterval5.getY();
        double double54 = xYInterval5.getY();
        double double55 = xYInterval5.getYHigh();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(numberArray27);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(categoryDataset29);
        org.junit.Assert.assertNotNull(list30);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1.0d) + "'", double53 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1.0d) + "'", double54 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 32.0d + "'", double55 == 32.0d);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1002");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener25 = null;
        categoryDataset21.removeChangeListener(datasetChangeListener25);
        java.lang.Number number27 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(categoryDataset21);
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertEquals("'" + number27 + "' != '" + 32.0d + "'", number27, 32.0d);
        org.junit.Assert.assertNotNull(range28);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1003");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        boolean boolean22 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem29 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int31 = xYIntervalDataItem29.compareTo((java.lang.Object) 1.0f);
        double double32 = xYIntervalDataItem29.getXHighValue();
        org.jfree.data.Range range33 = null;
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) 100);
        double double37 = range35.constrain((double) '4');
        boolean boolean38 = xYIntervalDataItem29.equals((java.lang.Object) '4');
        org.jfree.data.Range range39 = null;
        org.jfree.data.Range range41 = org.jfree.data.Range.expandToInclude(range39, (double) 100);
        double double43 = range41.constrain((double) '4');
        int int44 = xYIntervalDataItem29.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray51 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray54 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray57 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray60 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray63 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray66 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray67 = new java.lang.Number[][] { numberArray51, numberArray54, numberArray57, numberArray60, numberArray63, numberArray66 };
        org.jfree.data.category.CategoryDataset categoryDataset68 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray67);
        org.jfree.data.category.CategoryDataset categoryDataset69 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray67);
        int int70 = xYIntervalDataItem29.compareTo((java.lang.Object) categoryDataset69);
        java.util.List list71 = categoryDataset69.getColumnKeys();
        org.jfree.data.Range range73 = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(categoryDataset21, list71, true);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset75 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 100.0d + "'", double43 == 100.0d);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(numberArray51);
        org.junit.Assert.assertNotNull(numberArray54);
        org.junit.Assert.assertNotNull(numberArray57);
        org.junit.Assert.assertNotNull(numberArray60);
        org.junit.Assert.assertNotNull(numberArray63);
        org.junit.Assert.assertNotNull(numberArray66);
        org.junit.Assert.assertNotNull(numberArray67);
        org.junit.Assert.assertNotNull(categoryDataset68);
        org.junit.Assert.assertNotNull(categoryDataset69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(list71);
        org.junit.Assert.assertNotNull(range73);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1004");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem14 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int16 = xYIntervalDataItem14.compareTo((java.lang.Object) 1.0f);
        double double17 = xYIntervalDataItem14.getXHighValue();
        org.jfree.data.Range range18 = null;
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range18, (double) 100);
        double double22 = range20.constrain((double) '4');
        boolean boolean23 = xYIntervalDataItem14.equals((java.lang.Object) '4');
        org.jfree.data.Range range24 = null;
        org.jfree.data.Range range26 = org.jfree.data.Range.expandToInclude(range24, (double) 100);
        double double28 = range26.constrain((double) '4');
        int int29 = xYIntervalDataItem14.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray36 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray39 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray42 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray45 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray48 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray51 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray52 = new java.lang.Number[][] { numberArray36, numberArray39, numberArray42, numberArray45, numberArray48, numberArray51 };
        org.jfree.data.category.CategoryDataset categoryDataset53 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray52);
        org.jfree.data.category.CategoryDataset categoryDataset54 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray52);
        int int55 = xYIntervalDataItem14.compareTo((java.lang.Object) categoryDataset54);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener56 = null;
        categoryDataset54.removeChangeListener(datasetChangeListener56);
        org.jfree.data.general.DatasetGroup datasetGroup58 = categoryDataset54.getGroup();
        xYIntervalSeriesCollection0.setGroup(datasetGroup58);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries63 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries63.setMaximumItemCount((int) ' ');
        xYIntervalSeries63.setDescription("");
        boolean boolean68 = xYIntervalSeries63.isEmpty();
        xYIntervalSeries63.fireSeriesChanged();
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries63);
        int int71 = xYIntervalSeriesCollection0.getSeriesCount();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number74 = xYIntervalSeriesCollection0.getEndX(32, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(numberArray36);
        org.junit.Assert.assertNotNull(numberArray39);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(numberArray51);
        org.junit.Assert.assertNotNull(numberArray52);
        org.junit.Assert.assertNotNull(categoryDataset53);
        org.junit.Assert.assertNotNull(categoryDataset54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(datasetGroup58);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1005");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener9 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries14 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries14.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo17 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent18 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo17);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo19 = null;
        seriesChangeEvent18.setSummary(seriesChangeInfo19);
        java.lang.Object obj21 = seriesChangeEvent18.getSource();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent18);
        boolean boolean23 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        xYIntervalSeriesCollection0.removeAllSeries();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj27 = xYIntervalSeriesCollection0.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable29 = xYIntervalSeriesCollection0.getSeriesKey((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + ' ' + "'", obj21, ' ');
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(range25);
        org.junit.Assert.assertNull(range26);
        org.junit.Assert.assertNotNull(obj27);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1006");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        java.lang.Object obj14 = xYIntervalDataItem10.clone();
        boolean boolean16 = xYIntervalDataItem10.equals((java.lang.Object) 0);
        int int17 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        java.lang.Number number18 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.general.Dataset dataset20 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo21 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent22 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset20, datasetChangeInfo21);
        boolean boolean23 = xYIntervalSeriesCollection0.equals((java.lang.Object) datasetChangeInfo21);
        int int24 = xYIntervalSeriesCollection0.getSeriesCount();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number27 = xYIntervalSeriesCollection0.getEndY((int) (short) 1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(number18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1007");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState24 = pieDataset23.getSelectionState();
        java.util.List list25 = pieDataset23.getKeys();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem32 = new org.jfree.data.xy.XYIntervalDataItem((double) 1, 93.0d, 0.0d, 67.0d, (double) 2, (-1.0d));
        org.jfree.data.pie.PieDataset pieDataset35 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset23, (java.lang.Comparable) xYIntervalDataItem32, 93.0d, 2147483647);
        boolean boolean36 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(pieDataset35);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(pieDataset35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1008");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        int int2 = xYIntervalSeriesCollection0.getSeriesCount();
        java.lang.Number number3 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.general.DatasetGroup datasetGroup5 = new org.jfree.data.general.DatasetGroup("org.jfree.data.event.SeriesChangeEvent[source= ]");
        xYIntervalSeriesCollection0.setGroup(datasetGroup5);
        java.lang.String str7 = datasetGroup5.getID();
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(number3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.jfree.data.event.SeriesChangeEvent[source= ]" + "'", str7, "org.jfree.data.event.SeriesChangeEvent[source= ]");
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1009");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        int int26 = categoryDataset21.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range27, (double) (byte) -1, 200.0d);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries32 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) "");
        boolean boolean33 = xYIntervalSeries32.getAllowDuplicateXValues();
        boolean boolean34 = range30.equals((java.lang.Object) xYIntervalSeries32);
        int int35 = xYIntervalSeries32.getMaximumItemCount();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.ComparableObjectItem comparableObjectItem37 = xYIntervalSeries32.remove((java.lang.Comparable) "org.jfree.data.event.DatasetChangeEvent[source=-1]");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2147483647 + "'", int35 == 2147483647);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1010");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        java.lang.Number number25 = org.jfree.data.general.DatasetUtilities.findMinimumStackedRangeValue(categoryDataset21);
        java.lang.Number number26 = org.jfree.data.general.DatasetUtilities.findMinimumStackedRangeValue(categoryDataset21);
        java.lang.Comparable comparable28 = categoryDataset21.getRowKey(2);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset30 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset21, (java.lang.Comparable) "org.jfree.data.event.SeriesChangeEvent[source=198.0]");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertEquals("'" + number25 + "' != '" + (-6.0d) + "'", number25, (-6.0d));
        org.junit.Assert.assertEquals("'" + number26 + "' != '" + (-6.0d) + "'", number26, (-6.0d));
        org.junit.Assert.assertEquals("'" + comparable28 + "' != '" + "hi!3" + "'", comparable28, "hi!3");
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1011");
        java.lang.Comparable comparable0 = null;
        double[] doubleArray10 = new double[] { 1.0d, (byte) -1, 1.0d };
        double[][] doubleArray11 = new double[][] { doubleArray10 };
        org.jfree.data.category.CategoryDataset categoryDataset12 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "", doubleArray11);
        org.jfree.data.category.CategoryDataset categoryDataset13 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!1", "hi!", doubleArray11);
        org.jfree.data.category.CategoryDataset categoryDataset14 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("Range[100.0,100.0]", "org.jfree.data.general.SeriesException: ", doubleArray11);
        org.jfree.data.pie.PieDataset pieDataset16 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset14, 0);
        java.lang.Number number17 = org.jfree.data.general.DatasetUtilities.findMaximumStackedRangeValue(categoryDataset14);
        org.jfree.data.Range range19 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds(categoryDataset14, false);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.ComparableObjectItem comparableObjectItem20 = new org.jfree.data.ComparableObjectItem(comparable0, (java.lang.Object) range19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'x' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(categoryDataset12);
        org.junit.Assert.assertNotNull(categoryDataset13);
        org.junit.Assert.assertNotNull(categoryDataset14);
        org.junit.Assert.assertNotNull(pieDataset16);
        org.junit.Assert.assertEquals("'" + number17 + "' != '" + 1.0d + "'", number17, 1.0d);
        org.junit.Assert.assertNotNull(range19);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1012");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.Range range6 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range8 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            xYIntervalSeriesCollection0.removeSeries((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNull(range8);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1013");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection9 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder10 = xYIntervalSeriesCollection9.getDomainOrder();
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection9);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem18 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int20 = xYIntervalDataItem18.compareTo((java.lang.Object) 1.0f);
        double double21 = xYIntervalDataItem18.getXHighValue();
        org.jfree.data.Range range22 = null;
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range22, (double) 100);
        double double26 = range24.constrain((double) '4');
        boolean boolean27 = xYIntervalDataItem18.equals((java.lang.Object) '4');
        org.jfree.data.Range range28 = null;
        org.jfree.data.Range range30 = org.jfree.data.Range.expandToInclude(range28, (double) 100);
        double double32 = range30.constrain((double) '4');
        int int33 = xYIntervalDataItem18.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray46 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray49 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray52 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray55 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray56 = new java.lang.Number[][] { numberArray40, numberArray43, numberArray46, numberArray49, numberArray52, numberArray55 };
        org.jfree.data.category.CategoryDataset categoryDataset57 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray56);
        org.jfree.data.category.CategoryDataset categoryDataset58 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray56);
        int int59 = xYIntervalDataItem18.compareTo((java.lang.Object) categoryDataset58);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener60 = null;
        categoryDataset58.removeChangeListener(datasetChangeListener60);
        org.jfree.data.general.DatasetGroup datasetGroup62 = categoryDataset58.getGroup();
        xYIntervalSeriesCollection9.setGroup(datasetGroup62);
        xYIntervalSeriesCollection0.setGroup(datasetGroup62);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYIntervalSeries xYIntervalSeries66 = xYIntervalSeriesCollection0.getSeries((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(domainOrder10);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray46);
        org.junit.Assert.assertNotNull(numberArray49);
        org.junit.Assert.assertNotNull(numberArray52);
        org.junit.Assert.assertNotNull(numberArray55);
        org.junit.Assert.assertNotNull(numberArray56);
        org.junit.Assert.assertNotNull(categoryDataset57);
        org.junit.Assert.assertNotNull(categoryDataset58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(datasetGroup62);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1014");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener9 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries14 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries14.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo17 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent18 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo17);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo19 = null;
        seriesChangeEvent18.setSummary(seriesChangeInfo19);
        java.lang.Object obj21 = seriesChangeEvent18.getSource();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent18);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection23 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset25 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo26 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent27 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset25, datasetChangeInfo26);
        xYIntervalSeriesCollection23.notifyListeners(datasetChangeEvent27);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState29 = xYIntervalSeriesCollection23.getSelectionState();
        org.jfree.data.Range range30 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection23);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection31 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder32 = xYIntervalSeriesCollection31.getDomainOrder();
        int int33 = xYIntervalSeriesCollection31.getSeriesCount();
        boolean boolean34 = xYIntervalSeriesCollection23.hasListener((java.util.EventListener) xYIntervalSeriesCollection31);
        xYIntervalSeriesCollection31.validateObject();
        org.jfree.data.general.Dataset dataset37 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo38 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent39 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset37, datasetChangeInfo38);
        org.jfree.data.general.Dataset dataset40 = datasetChangeEvent39.getDataset();
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo41 = datasetChangeEvent39.getInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent42 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) xYIntervalSeriesCollection0, (org.jfree.data.general.Dataset) xYIntervalSeriesCollection31, datasetChangeInfo41);
        // The following exception was thrown during execution in test generation
        try {
            int int44 = xYIntervalSeriesCollection0.getItemCount(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + ' ' + "'", obj21, ' ');
        org.junit.Assert.assertNull(xYDatasetSelectionState29);
        org.junit.Assert.assertNull(range30);
        org.junit.Assert.assertNotNull(domainOrder32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(dataset40);
        org.junit.Assert.assertNotNull(datasetChangeInfo41);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1015");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        org.jfree.data.Range range48 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset46);
        org.jfree.data.Range range49 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertNotNull(range49);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1016");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        int int26 = categoryDataset21.getRowIndex((java.lang.Comparable) "org.jfree.data.general.SeriesException: ");
        int int27 = categoryDataset21.getRowCount();
        org.jfree.data.Range range29 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertNotNull(range29);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1017");
        org.jfree.data.xy.XYDataset xYDataset0 = null;
        java.util.List list1 = null;
        org.jfree.data.Range range2 = null;
        org.jfree.data.Range range4 = org.jfree.data.Range.expandToInclude(range2, (double) 100);
        double double6 = range4.constrain((double) '4');
        double double7 = range4.getLength();
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range4, (double) 100, false);
        org.jfree.data.Range range11 = null;
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 100);
        double double15 = range13.constrain((double) '4');
        double double16 = range13.getLength();
        org.jfree.data.Range range17 = null;
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range17, (double) 100);
        double double21 = range19.constrain((double) '4');
        boolean boolean22 = range13.intersects(range19);
        boolean boolean23 = range4.intersects(range13);
        boolean boolean26 = range13.intersects((double) 1L, 35.0d);
        double double28 = range13.constrain((double) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range30 = org.jfree.data.general.DatasetUtilities.findRangeBounds(xYDataset0, list1, range13, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1018");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range22 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21);
        int int24 = categoryDataset21.getColumnIndex((java.lang.Comparable) 6.0d);
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(range25);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1019");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        double double26 = range24.constrain((double) (byte) -1);
        boolean boolean28 = range24.contains((double) 3);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1020");
        double[] doubleArray11 = new double[] { 1.0d, (byte) -1, 1.0d };
        double[][] doubleArray12 = new double[][] { doubleArray11 };
        org.jfree.data.category.CategoryDataset categoryDataset13 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "", doubleArray12);
        org.jfree.data.category.CategoryDataset categoryDataset14 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!1", "hi!", doubleArray12);
        org.jfree.data.category.CategoryDataset categoryDataset15 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("Range[100.0,100.0]", "org.jfree.data.event.SeriesChangeEvent[source= ]", doubleArray12);
        org.jfree.data.category.CategoryDataset categoryDataset16 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!1", "hi!", doubleArray12);
        java.lang.Number number17 = org.jfree.data.general.DatasetUtilities.findMaximumStackedRangeValue(categoryDataset16);
        java.lang.Number number18 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(categoryDataset16);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(categoryDataset13);
        org.junit.Assert.assertNotNull(categoryDataset14);
        org.junit.Assert.assertNotNull(categoryDataset15);
        org.junit.Assert.assertNotNull(categoryDataset16);
        org.junit.Assert.assertEquals("'" + number17 + "' != '" + 1.0d + "'", number17, 1.0d);
        org.junit.Assert.assertEquals("'" + number18 + "' != '" + 1.0d + "'", number18, 1.0d);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1021");
        org.jfree.data.xy.TableXYDataset tableXYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(tableXYDataset0, (double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1022");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState24 = pieDataset23.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset28 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset23, (java.lang.Comparable) 'a', (double) 10.0f, (int) (short) 10);
        java.lang.Number number30 = pieDataset28.getValue((int) (short) 100);
        org.jfree.data.pie.PieDataset pieDataset33 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset28, (java.lang.Comparable) 'a', (double) 100L);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener34 = null;
        pieDataset28.removeChangeListener(datasetChangeListener34);
        java.util.List list36 = pieDataset28.getKeys();
        boolean boolean37 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(pieDataset28);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState38 = pieDataset28.getSelectionState();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState24);
        org.junit.Assert.assertNotNull(pieDataset28);
        org.junit.Assert.assertNull(number30);
        org.junit.Assert.assertNotNull(pieDataset33);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState38);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1023");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range15 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range16 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj17 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent18 = null;
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent18);
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNull(range15);
        org.junit.Assert.assertNull(range16);
        org.junit.Assert.assertNotNull(obj17);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1024");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        int int4 = xYIntervalSeriesCollection0.getSeriesCount();
        int int6 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 100.0d);
        org.jfree.data.DomainOrder domainOrder7 = xYIntervalSeriesCollection0.getDomainOrder();
        java.lang.Number number8 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener9 = null;
        xYIntervalSeriesCollection0.addChangeListener(datasetChangeListener9);
        java.lang.Number number11 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        int int12 = xYIntervalSeriesCollection0.getSeriesCount();
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState13 = xYIntervalSeriesCollection0.getSelectionState();
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(domainOrder7);
        org.junit.Assert.assertNull(number8);
        org.junit.Assert.assertNull(number11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(xYDatasetSelectionState13);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1025");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState24 = pieDataset23.getSelectionState();
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState25 = pieDataset23.getSelectionState();
        java.lang.Number number27 = pieDataset23.getValue((int) ' ');
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState24);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState25);
        org.junit.Assert.assertNull(number27);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1026");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries12 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 32.0d);
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries12);
        boolean boolean14 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Number number15 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        int int16 = xYIntervalSeriesCollection0.getSeriesCount();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem23 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int25 = xYIntervalDataItem23.compareTo((java.lang.Object) 1.0f);
        double double26 = xYIntervalDataItem23.getXHighValue();
        org.jfree.data.Range range27 = null;
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range27, (double) 100);
        double double31 = range29.constrain((double) '4');
        boolean boolean32 = xYIntervalDataItem23.equals((java.lang.Object) '4');
        org.jfree.data.Range range33 = null;
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) 100);
        double double37 = range35.constrain((double) '4');
        int int38 = xYIntervalDataItem23.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray45 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray48 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray51 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray54 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray57 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray60 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray61 = new java.lang.Number[][] { numberArray45, numberArray48, numberArray51, numberArray54, numberArray57, numberArray60 };
        org.jfree.data.category.CategoryDataset categoryDataset62 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray61);
        org.jfree.data.category.CategoryDataset categoryDataset63 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray61);
        int int64 = xYIntervalDataItem23.compareTo((java.lang.Object) categoryDataset63);
        org.jfree.data.general.DatasetGroup datasetGroup65 = categoryDataset63.getGroup();
        xYIntervalSeriesCollection0.setGroup(datasetGroup65);
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(number15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(numberArray51);
        org.junit.Assert.assertNotNull(numberArray54);
        org.junit.Assert.assertNotNull(numberArray57);
        org.junit.Assert.assertNotNull(numberArray60);
        org.junit.Assert.assertNotNull(numberArray61);
        org.junit.Assert.assertNotNull(categoryDataset62);
        org.junit.Assert.assertNotNull(categoryDataset63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(datasetGroup65);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1027");
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray24 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray27 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray28 = new java.lang.Number[][] { numberArray12, numberArray15, numberArray18, numberArray21, numberArray24, numberArray27 };
        org.jfree.data.category.CategoryDataset categoryDataset29 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray28);
        org.jfree.data.category.CategoryDataset categoryDataset30 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray28);
        org.jfree.data.category.CategoryDataset categoryDataset31 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "org.jfree.data.event.SeriesChangeEvent[source= ]", numberArray28);
        org.jfree.data.category.CategoryDataset categoryDataset32 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("1", "hi!", numberArray28);
        org.jfree.data.category.CategoryDataset categoryDataset33 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("org.jfree.data.general.SeriesException: org.jfree.data.general.SeriesException: hi!1", "", numberArray28);
        java.util.List list34 = categoryDataset33.getRowKeys();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener35 = null;
        categoryDataset33.addChangeListener(datasetChangeListener35);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(numberArray27);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(categoryDataset29);
        org.junit.Assert.assertNotNull(categoryDataset30);
        org.junit.Assert.assertNotNull(categoryDataset31);
        org.junit.Assert.assertNotNull(categoryDataset32);
        org.junit.Assert.assertNotNull(categoryDataset33);
        org.junit.Assert.assertNotNull(list34);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1028");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState9);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.general.DatasetGroup datasetGroup12 = xYIntervalSeriesCollection0.getGroup();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number15 = xYIntervalSeriesCollection0.getEndX(2147483647, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2147483647, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNotNull(datasetGroup12);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1029");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener34 = null;
        categoryDataset22.removeChangeListener(datasetChangeListener34);
        int int36 = categoryDataset22.getRowCount();
        org.jfree.data.Range range37 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset22);
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 6 + "'", int36 == 6);
        org.junit.Assert.assertNotNull(range37);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1030");
        org.jfree.data.function.Function2D function2D0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYDataset xYDataset5 = org.jfree.data.general.DatasetUtilities.sampleFunction2D(function2D0, 0.0d, 67.0d, 10, (java.lang.Comparable) "1");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'f' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1031");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range9 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem16 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int18 = xYIntervalDataItem16.compareTo((java.lang.Object) 1.0f);
        double double19 = xYIntervalDataItem16.getXHighValue();
        org.jfree.data.Range range20 = null;
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range20, (double) 100);
        double double24 = range22.constrain((double) '4');
        boolean boolean25 = xYIntervalDataItem16.equals((java.lang.Object) '4');
        boolean boolean27 = xYIntervalDataItem16.equals((java.lang.Object) 0.0f);
        java.lang.Object obj28 = xYIntervalDataItem16.clone();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries29 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) xYIntervalDataItem16);
        int int30 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number33 = xYIntervalSeriesCollection0.getEndX(2, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNull(range9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1032");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range10 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double13 = xYIntervalSeriesCollection0.getStartXValue(3, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 3, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(range10);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1033");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState3 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.DomainOrder domainOrder4 = xYIntervalSeriesCollection0.getDomainOrder();
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNull(xYDatasetSelectionState3);
        org.junit.Assert.assertNotNull(domainOrder4);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1034");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range3 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray24 = new java.lang.Number[][] { numberArray8, numberArray11, numberArray14, numberArray17, numberArray20, numberArray23 };
        org.jfree.data.category.CategoryDataset categoryDataset25 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray24);
        java.util.List list26 = categoryDataset25.getRowKeys();
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset25, false);
        int int30 = categoryDataset25.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.Range range31 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset25);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range31, (double) (byte) -1, 200.0d);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries36 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) "");
        boolean boolean37 = xYIntervalSeries36.getAllowDuplicateXValues();
        boolean boolean38 = range34.equals((java.lang.Object) xYIntervalSeries36);
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries36);
        java.lang.Object obj41 = null;
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries45 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        boolean boolean46 = xYIntervalSeries45.getNotify();
        int int47 = xYIntervalSeries45.getItemCount();
        xYIntervalSeries45.clear();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries52 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries52.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo55 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent56 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo55);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo57 = null;
        seriesChangeEvent56.setSummary(seriesChangeInfo57);
        java.lang.Object obj59 = seriesChangeEvent56.getSource();
        xYIntervalSeries45.notifyListeners(seriesChangeEvent56);
        boolean boolean61 = xYIntervalSeries45.getNotify();
        xYIntervalSeries45.add((double) 100, (double) (short) 100, (-1.0d), 0.0d, (double) (-1.0f), (double) 1L);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem75 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int77 = xYIntervalDataItem75.compareTo((java.lang.Object) 1.0f);
        double double78 = xYIntervalDataItem75.getXHighValue();
        org.jfree.data.Range range79 = null;
        org.jfree.data.Range range81 = org.jfree.data.Range.expandToInclude(range79, (double) 100);
        double double83 = range81.constrain((double) '4');
        boolean boolean84 = xYIntervalDataItem75.equals((java.lang.Object) '4');
        boolean boolean86 = xYIntervalDataItem75.equals((java.lang.Object) 0.0f);
        java.lang.Object obj87 = xYIntervalDataItem75.clone();
        double double88 = xYIntervalDataItem75.getYLowValue();
        int int89 = xYIntervalSeries45.indexOf((java.lang.Comparable) double88);
        xYIntervalSeries36.firePropertyChange("Range[-0.0,0.0]", obj41, (java.lang.Object) double88);
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNull(range3);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(categoryDataset25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + obj59 + "' != '" + ' ' + "'", obj59, ' ');
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 100.0d + "'", double78 == 100.0d);
        org.junit.Assert.assertNotNull(range81);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 100.0d + "'", double83 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 100.0d + "'", double88 == 100.0d);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1035");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener48 = null;
        categoryDataset46.removeChangeListener(datasetChangeListener48);
        int int50 = categoryDataset46.getColumnCount();
        org.jfree.data.Range range51 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset46);
        org.jfree.data.pie.PieDataset pieDataset53 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset46, (int) (short) 1);
        java.lang.Number number55 = pieDataset53.getValue(0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(pieDataset53);
        org.junit.Assert.assertEquals("'" + number55 + "' != '" + (short) -1 + "'", number55, (short) -1);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1036");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener48 = null;
        categoryDataset46.removeChangeListener(datasetChangeListener48);
        org.jfree.data.general.DatasetGroup datasetGroup50 = categoryDataset46.getGroup();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener51 = null;
        categoryDataset46.addChangeListener(datasetChangeListener51);
        java.lang.Comparable comparable54 = categoryDataset46.getColumnKey((int) (short) 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(datasetGroup50);
        org.junit.Assert.assertEquals("'" + comparable54 + "' != '" + "hi!1" + "'", comparable54, "hi!1");
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1037");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        int int24 = categoryDataset21.getRowCount();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21);
        java.lang.Number number26 = org.jfree.data.general.DatasetUtilities.findMinimumStackedRangeValue(categoryDataset21);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem33 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int35 = xYIntervalDataItem33.compareTo((java.lang.Object) 1.0f);
        double double36 = xYIntervalDataItem33.getXHighValue();
        java.lang.Object obj37 = xYIntervalDataItem33.clone();
        boolean boolean39 = xYIntervalDataItem33.equals((java.lang.Object) 0);
        java.lang.Object obj40 = xYIntervalDataItem33.clone();
        double double41 = xYIntervalDataItem33.getYValue();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem48 = new org.jfree.data.xy.XYIntervalDataItem((double) 1, (double) 1L, (double) (byte) 100, (double) 1, (double) 'a', 52.0d);
        double[] doubleArray58 = new double[] { 1.0d, (byte) -1, 1.0d };
        double[][] doubleArray59 = new double[][] { doubleArray58 };
        org.jfree.data.category.CategoryDataset categoryDataset60 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "", doubleArray59);
        org.jfree.data.category.CategoryDataset categoryDataset61 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!1", "hi!", doubleArray59);
        org.jfree.data.category.CategoryDataset categoryDataset62 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("Range[100.0,100.0]", "org.jfree.data.general.SeriesException: ", doubleArray59);
        org.jfree.data.ComparableObjectItem comparableObjectItem63 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable) 'a', (java.lang.Object) "org.jfree.data.general.SeriesException: ");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number64 = categoryDataset21.getValue((java.lang.Comparable) double41, (java.lang.Comparable) comparableObjectItem63);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.UnknownKeyException; message: Row key (0.0) not recognised.");
        } catch (org.jfree.data.UnknownKeyException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertEquals("'" + number26 + "' != '" + (-6.0d) + "'", number26, (-6.0d));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(categoryDataset60);
        org.junit.Assert.assertNotNull(categoryDataset61);
        org.junit.Assert.assertNotNull(categoryDataset62);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1038");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection26 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset28 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo29 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent30 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset28, datasetChangeInfo29);
        xYIntervalSeriesCollection26.notifyListeners(datasetChangeEvent30);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState32 = xYIntervalSeriesCollection26.getSelectionState();
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection26);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection34 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder35 = xYIntervalSeriesCollection34.getDomainOrder();
        int int36 = xYIntervalSeriesCollection34.getSeriesCount();
        boolean boolean37 = xYIntervalSeriesCollection26.hasListener((java.util.EventListener) xYIntervalSeriesCollection34);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo38 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent39 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) list25, (org.jfree.data.general.Dataset) xYIntervalSeriesCollection34, datasetChangeInfo38);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState40 = xYIntervalSeriesCollection34.getSelectionState();
        org.jfree.data.Range range41 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection34);
        org.jfree.data.Range range43 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection34, true);
        org.jfree.data.Range range44 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number47 = xYIntervalSeriesCollection34.getY((int) (short) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNull(xYDatasetSelectionState32);
        org.junit.Assert.assertNull(range33);
        org.junit.Assert.assertNotNull(domainOrder35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(xYDatasetSelectionState40);
        org.junit.Assert.assertNull(range41);
        org.junit.Assert.assertNull(range43);
        org.junit.Assert.assertNull(range44);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1039");
        org.jfree.data.xy.TableXYDataset tableXYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(tableXYDataset0, (double) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1040");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        int int4 = xYIntervalSeriesCollection0.getSeriesCount();
        int int6 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 100.0d);
        org.jfree.data.DomainOrder domainOrder7 = xYIntervalSeriesCollection0.getDomainOrder();
        java.lang.Number number8 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener9 = null;
        xYIntervalSeriesCollection0.addChangeListener(datasetChangeListener9);
        java.lang.Number number11 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        int int12 = xYIntervalSeriesCollection0.getSeriesCount();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = xYIntervalSeriesCollection0.getEndYValue((int) (byte) -1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(domainOrder7);
        org.junit.Assert.assertNull(number8);
        org.junit.Assert.assertNull(number11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1041");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        java.lang.Number[] numberArray30 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray33 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray36 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray39 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray42 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray45 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray46 = new java.lang.Number[][] { numberArray30, numberArray33, numberArray36, numberArray39, numberArray42, numberArray45 };
        org.jfree.data.category.CategoryDataset categoryDataset47 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray46);
        org.jfree.data.Range range49 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset47, true);
        org.jfree.data.Range range51 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset47, 0.0d);
        java.util.List list52 = categoryDataset47.getRowKeys();
        org.jfree.data.Range range54 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, list52, false);
        java.lang.Number number55 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(categoryDataset21);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem62 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int64 = xYIntervalDataItem62.compareTo((java.lang.Object) 1.0f);
        double double65 = xYIntervalDataItem62.getXHighValue();
        double double66 = xYIntervalDataItem62.getYValue();
        double double67 = xYIntervalDataItem62.getXHighValue();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset68 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset21, (java.lang.Comparable) double67);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(numberArray30);
        org.junit.Assert.assertNotNull(numberArray33);
        org.junit.Assert.assertNotNull(numberArray36);
        org.junit.Assert.assertNotNull(numberArray39);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(numberArray46);
        org.junit.Assert.assertNotNull(categoryDataset47);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(list52);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertEquals("'" + number55 + "' != '" + 32.0d + "'", number55, 32.0d);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 100.0d + "'", double65 == 100.0d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 100.0d + "'", double67 == 100.0d);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1042");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range15 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range16 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj17 = xYIntervalSeriesCollection0.clone();
        xYIntervalSeriesCollection0.validateObject();
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNull(range15);
        org.junit.Assert.assertNull(range16);
        org.junit.Assert.assertNotNull(obj17);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1043");
        java.lang.Number[] numberArray6 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray22 = new java.lang.Number[][] { numberArray6, numberArray9, numberArray12, numberArray15, numberArray18, numberArray21 };
        org.jfree.data.category.CategoryDataset categoryDataset23 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray22);
        org.jfree.data.category.CategoryDataset categoryDataset24 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray22);
        java.util.List list25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(categoryDataset24, list25, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'visibleSeriesKeys' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray6);
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(categoryDataset23);
        org.junit.Assert.assertNotNull(categoryDataset24);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1044");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener48 = null;
        categoryDataset46.removeChangeListener(datasetChangeListener48);
        java.util.List list50 = categoryDataset46.getColumnKeys();
        org.jfree.data.Range range52 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset46, false);
        java.lang.Number number53 = org.jfree.data.general.DatasetUtilities.findMinimumStackedRangeValue(categoryDataset46);
        org.jfree.data.Range range54 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset46);
        org.jfree.data.Range range56 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds(categoryDataset46, false);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset58 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset46, (java.lang.Comparable) "org.jfree.data.event.SeriesChangeEvent[source=true]");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(list50);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertEquals("'" + number53 + "' != '" + (-6.0d) + "'", number53, (-6.0d));
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range56);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1045");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent13 = null;
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent13);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = xYIntervalSeriesCollection0.getEndXValue(10, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1046");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener48 = null;
        categoryDataset46.removeChangeListener(datasetChangeListener48);
        java.util.List list50 = categoryDataset46.getColumnKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable52 = categoryDataset46.getColumnKey((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(list50);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1047");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21, true);
        java.lang.Number[] numberArray32 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray35 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray38 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray41 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray44 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray47 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray48 = new java.lang.Number[][] { numberArray32, numberArray35, numberArray38, numberArray41, numberArray44, numberArray47 };
        org.jfree.data.category.CategoryDataset categoryDataset49 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray48);
        java.util.List list50 = categoryDataset49.getRowKeys();
        org.jfree.data.Range range52 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset49, false);
        boolean boolean53 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset49);
        org.jfree.data.Range range55 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset49, true);
        java.util.List list56 = categoryDataset49.getColumnKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range58 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, list56, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(numberArray35);
        org.junit.Assert.assertNotNull(numberArray38);
        org.junit.Assert.assertNotNull(numberArray41);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(numberArray47);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(categoryDataset49);
        org.junit.Assert.assertNotNull(list50);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(list56);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1048");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem(191.0d, 198.0d, (double) 32, (double) 100L, 15.5d, (double) (short) 0);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem13 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int15 = xYIntervalDataItem13.compareTo((java.lang.Object) 1.0f);
        double double16 = xYIntervalDataItem13.getXHighValue();
        org.jfree.data.Range range17 = null;
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range17, (double) 100);
        double double21 = range19.constrain((double) '4');
        boolean boolean22 = xYIntervalDataItem13.equals((java.lang.Object) '4');
        boolean boolean24 = xYIntervalDataItem13.equals((java.lang.Object) 0.0f);
        java.lang.Object obj25 = xYIntervalDataItem13.clone();
        java.lang.Object obj26 = null;
        int int27 = xYIntervalDataItem13.compareTo(obj26);
        double double28 = xYIntervalDataItem13.getXLowValue();
        org.jfree.data.ComparableObjectSeries comparableObjectSeries29 = new org.jfree.data.ComparableObjectSeries((java.lang.Comparable) xYIntervalDataItem13);
        org.jfree.data.ComparableObjectItem comparableObjectItem30 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable) 198.0d, (java.lang.Object) comparableObjectSeries29);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection31 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset33 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo34 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent35 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset33, datasetChangeInfo34);
        xYIntervalSeriesCollection31.notifyListeners(datasetChangeEvent35);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState37 = xYIntervalSeriesCollection31.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener38 = null;
        xYIntervalSeriesCollection31.removeChangeListener(datasetChangeListener38);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState40 = xYIntervalSeriesCollection31.getSelectionState();
        org.jfree.data.Range range42 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection31, false);
        java.lang.Number number43 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection31);
        org.jfree.data.Range range45 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection31, false);
        xYIntervalSeriesCollection31.validateObject();
        // The following exception was thrown during execution in test generation
        try {
            comparableObjectSeries29.removeChangeListener((org.jfree.data.event.SeriesChangeListener) xYIntervalSeriesCollection31);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Listener org.jfree.data.xy.XYIntervalSeriesCollection@6adb03af is not of type class org.jfree.data.xy.XYIntervalSeries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0d + "'", double28 == 1.0d);
        org.junit.Assert.assertNull(xYDatasetSelectionState37);
        org.junit.Assert.assertNull(xYDatasetSelectionState40);
        org.junit.Assert.assertNull(range42);
        org.junit.Assert.assertNull(number43);
        org.junit.Assert.assertNull(range45);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1049");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        xYIntervalSeriesCollection0.removeAllSeries();
        org.jfree.data.DomainOrder domainOrder4 = xYIntervalSeriesCollection0.getDomainOrder();
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(domainOrder4);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1050");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo10 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection0.fireDatasetChanged(datasetChangeInfo10);
        xYIntervalSeriesCollection0.removeAllSeries();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable14 = xYIntervalSeriesCollection0.getSeriesKey((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1051");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range15 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        int int16 = xYIntervalSeriesCollection0.getSeriesCount();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener17 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener17);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = xYIntervalSeriesCollection0.getYValue(2, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNull(range15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1052");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener9 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries14 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries14.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo17 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent18 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo17);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo19 = null;
        seriesChangeEvent18.setSummary(seriesChangeInfo19);
        java.lang.Object obj21 = seriesChangeEvent18.getSource();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent18);
        boolean boolean23 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        xYIntervalSeriesCollection0.removeAllSeries();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem33 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int35 = xYIntervalDataItem33.compareTo((java.lang.Object) 1.0f);
        double double36 = xYIntervalDataItem33.getXHighValue();
        org.jfree.data.Range range37 = null;
        org.jfree.data.Range range39 = org.jfree.data.Range.expandToInclude(range37, (double) 100);
        double double41 = range39.constrain((double) '4');
        boolean boolean42 = xYIntervalDataItem33.equals((java.lang.Object) '4');
        org.jfree.data.Range range43 = null;
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range43, (double) 100);
        double double47 = range45.constrain((double) '4');
        int int48 = xYIntervalDataItem33.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray55 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray58 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray61 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray64 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray67 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray70 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray71 = new java.lang.Number[][] { numberArray55, numberArray58, numberArray61, numberArray64, numberArray67, numberArray70 };
        org.jfree.data.category.CategoryDataset categoryDataset72 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray71);
        org.jfree.data.category.CategoryDataset categoryDataset73 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray71);
        int int74 = xYIntervalDataItem33.compareTo((java.lang.Object) categoryDataset73);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener75 = null;
        categoryDataset73.removeChangeListener(datasetChangeListener75);
        org.jfree.data.general.DatasetGroup datasetGroup77 = categoryDataset73.getGroup();
        xYIntervalSeriesCollection0.setGroup(datasetGroup77);
        boolean boolean79 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + ' ' + "'", obj21, ' ');
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(range25);
        org.junit.Assert.assertNull(range26);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(numberArray55);
        org.junit.Assert.assertNotNull(numberArray58);
        org.junit.Assert.assertNotNull(numberArray61);
        org.junit.Assert.assertNotNull(numberArray64);
        org.junit.Assert.assertNotNull(numberArray67);
        org.junit.Assert.assertNotNull(numberArray70);
        org.junit.Assert.assertNotNull(numberArray71);
        org.junit.Assert.assertNotNull(categoryDataset72);
        org.junit.Assert.assertNotNull(categoryDataset73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(datasetGroup77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1053");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        boolean boolean10 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.Range range14 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number17 = xYIntervalSeriesCollection0.getStartX((int) (byte) -1, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range14);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1054");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState9);
        java.lang.Number number11 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries15 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        java.lang.Object obj17 = null;
        xYIntervalSeries15.firePropertyChange("", obj17, (java.lang.Object) "hi!");
        xYIntervalSeries15.setKey((java.lang.Comparable) (short) 1);
        xYIntervalSeries15.firePropertyChange("", (java.lang.Object) 100L, (java.lang.Object) 100.0f);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries29 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        boolean boolean30 = xYIntervalSeries29.getNotify();
        int int31 = xYIntervalSeries29.getItemCount();
        xYIntervalSeries29.clear();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries36 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries36.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo39 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent40 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo39);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo41 = null;
        seriesChangeEvent40.setSummary(seriesChangeInfo41);
        java.lang.Object obj43 = seriesChangeEvent40.getSource();
        xYIntervalSeries29.notifyListeners(seriesChangeEvent40);
        xYIntervalSeries15.notifyListeners(seriesChangeEvent40);
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries15);
        java.lang.Number number47 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        xYIntervalSeriesCollection0.removeAllSeries();
        java.lang.Number number49 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(number11);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + obj43 + "' != '" + ' ' + "'", obj43, ' ');
        org.junit.Assert.assertNull(number47);
        org.junit.Assert.assertNull(number49);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1055");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj12 = xYIntervalSeriesCollection0.clone();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = xYIntervalSeriesCollection0.getEndXValue((int) (byte) 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNotNull(obj12);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1056");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        int int26 = categoryDataset21.getRowIndex((java.lang.Comparable) "org.jfree.data.general.SeriesException: ");
        int int27 = categoryDataset21.getRowCount();
        java.lang.Number number28 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        org.jfree.data.Range range29 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset21);
        double double30 = range29.getCentralValue();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertEquals("'" + number28 + "' != '" + (-1.0d) + "'", number28, (-1.0d));
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 15.0d + "'", double30 == 15.0d);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1057");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        double double10 = xYIntervalDataItem6.getXLowValue();
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray24 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray27 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray30 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray31 = new java.lang.Number[][] { numberArray15, numberArray18, numberArray21, numberArray24, numberArray27, numberArray30 };
        org.jfree.data.category.CategoryDataset categoryDataset32 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray31);
        java.util.List list33 = categoryDataset32.getRowKeys();
        org.jfree.data.Range range35 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset32, (double) (short) -1);
        java.util.List list36 = categoryDataset32.getRowKeys();
        java.lang.Number number37 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset32);
        boolean boolean38 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset32);
        org.jfree.data.Range range39 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset32);
        org.jfree.data.Range range40 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset32);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection41 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset43 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo44 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent45 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset43, datasetChangeInfo44);
        xYIntervalSeriesCollection41.notifyListeners(datasetChangeEvent45);
        org.jfree.data.general.Dataset dataset47 = datasetChangeEvent45.getDataset();
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo48 = datasetChangeEvent45.getInfo();
        java.lang.Object obj49 = datasetChangeEvent45.getSource();
        org.jfree.data.general.Dataset dataset50 = datasetChangeEvent45.getDataset();
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo51 = datasetChangeEvent45.getInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent52 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) double10, (org.jfree.data.general.Dataset) categoryDataset32, datasetChangeInfo51);
        java.lang.Number number53 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(categoryDataset32);
        int int54 = categoryDataset32.getColumnCount();
        org.jfree.data.Range range56 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds(categoryDataset32, false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(numberArray27);
        org.junit.Assert.assertNotNull(numberArray30);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(categoryDataset32);
        org.junit.Assert.assertNotNull(list33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertEquals("'" + number37 + "' != '" + (-1.0d) + "'", number37, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNull(dataset47);
        org.junit.Assert.assertNotNull(datasetChangeInfo48);
        org.junit.Assert.assertEquals("'" + obj49 + "' != '" + (-1L) + "'", obj49, (-1L));
        org.junit.Assert.assertNull(dataset50);
        org.junit.Assert.assertNotNull(datasetChangeInfo51);
        org.junit.Assert.assertEquals("'" + number53 + "' != '" + 32.0d + "'", number53, 32.0d);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(range56);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1058");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        boolean boolean24 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(pieDataset23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number26 = pieDataset23.getValue((java.lang.Comparable) 1);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.UnknownKeyException; message: The key (1) is not recognised.");
        } catch (org.jfree.data.UnknownKeyException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1059");
        java.lang.Number[] numberArray6 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray22 = new java.lang.Number[][] { numberArray6, numberArray9, numberArray12, numberArray15, numberArray18, numberArray21 };
        org.jfree.data.category.CategoryDataset categoryDataset23 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray22);
        org.jfree.data.category.CategoryDataset categoryDataset24 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray22);
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset24);
        org.junit.Assert.assertNotNull(numberArray6);
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(categoryDataset23);
        org.junit.Assert.assertNotNull(categoryDataset24);
        org.junit.Assert.assertNotNull(range25);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1060");
        org.jfree.data.function.Function2D function2D0 = null;
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        double double14 = xYIntervalDataItem10.getYValue();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection15 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset17 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo18 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent19 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset17, datasetChangeInfo18);
        xYIntervalSeriesCollection15.notifyListeners(datasetChangeEvent19);
        int int22 = xYIntervalSeriesCollection15.indexOf((java.lang.Comparable) 100L);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener23 = null;
        xYIntervalSeriesCollection15.removeChangeListener(datasetChangeListener23);
        org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection15, true);
        org.jfree.data.ComparableObjectItem comparableObjectItem27 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable) xYIntervalDataItem10, (java.lang.Object) true);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYSeries xYSeries28 = org.jfree.data.general.DatasetUtilities.sampleFunction2DToSeries(function2D0, (double) 100.0f, (double) 3, (int) 'a', (java.lang.Comparable) xYIntervalDataItem10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'f' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(range26);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1061");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray46 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray49 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray52 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray53 = new java.lang.Number[][] { numberArray37, numberArray40, numberArray43, numberArray46, numberArray49, numberArray52 };
        org.jfree.data.category.CategoryDataset categoryDataset54 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray53);
        java.util.List list55 = categoryDataset54.getRowKeys();
        org.jfree.data.Range range57 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset54, (double) (short) -1);
        java.util.List list58 = categoryDataset54.getRowKeys();
        org.jfree.data.Range range60 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, list58, false);
        org.jfree.data.Range range62 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset22, 67.0d);
        boolean boolean63 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset22);
        int int64 = categoryDataset22.getColumnCount();
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray46);
        org.junit.Assert.assertNotNull(numberArray49);
        org.junit.Assert.assertNotNull(numberArray52);
        org.junit.Assert.assertNotNull(numberArray53);
        org.junit.Assert.assertNotNull(categoryDataset54);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(list58);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1062");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range9 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem16 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int18 = xYIntervalDataItem16.compareTo((java.lang.Object) 1.0f);
        double double19 = xYIntervalDataItem16.getXHighValue();
        org.jfree.data.Range range20 = null;
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range20, (double) 100);
        double double24 = range22.constrain((double) '4');
        boolean boolean25 = xYIntervalDataItem16.equals((java.lang.Object) '4');
        boolean boolean27 = xYIntervalDataItem16.equals((java.lang.Object) 0.0f);
        java.lang.Object obj28 = xYIntervalDataItem16.clone();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries29 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) xYIntervalDataItem16);
        int int30 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem16);
        java.lang.Number[] numberArray35 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray38 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray41 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray44 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray47 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray50 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray51 = new java.lang.Number[][] { numberArray35, numberArray38, numberArray41, numberArray44, numberArray47, numberArray50 };
        org.jfree.data.category.CategoryDataset categoryDataset52 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray51);
        org.jfree.data.pie.PieDataset pieDataset54 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset52, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState55 = pieDataset54.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset59 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset54, (java.lang.Comparable) 'a', (double) 10.0f, (int) (short) 10);
        java.lang.Number number61 = pieDataset59.getValue((int) (short) 100);
        org.jfree.data.pie.PieDataset pieDataset64 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset59, (java.lang.Comparable) 'a', (double) 100L);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener65 = null;
        pieDataset59.removeChangeListener(datasetChangeListener65);
        java.util.List list67 = pieDataset59.getKeys();
        org.jfree.data.category.CategoryDataset categoryDataset68 = org.jfree.data.general.DatasetUtilities.createCategoryDataset((java.lang.Comparable) int30, (org.jfree.data.KeyedValues) pieDataset59);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number71 = categoryDataset68.getValue((int) (byte) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNull(range9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(numberArray35);
        org.junit.Assert.assertNotNull(numberArray38);
        org.junit.Assert.assertNotNull(numberArray41);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(numberArray47);
        org.junit.Assert.assertNotNull(numberArray50);
        org.junit.Assert.assertNotNull(numberArray51);
        org.junit.Assert.assertNotNull(categoryDataset52);
        org.junit.Assert.assertNotNull(pieDataset54);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState55);
        org.junit.Assert.assertNotNull(pieDataset59);
        org.junit.Assert.assertNull(number61);
        org.junit.Assert.assertNotNull(pieDataset64);
        org.junit.Assert.assertNotNull(list67);
        org.junit.Assert.assertNotNull(categoryDataset68);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1063");
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray24 = new java.lang.Number[][] { numberArray8, numberArray11, numberArray14, numberArray17, numberArray20, numberArray23 };
        org.jfree.data.category.CategoryDataset categoryDataset25 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray24);
        org.jfree.data.category.CategoryDataset categoryDataset26 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray24);
        org.jfree.data.category.CategoryDataset categoryDataset27 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "org.jfree.data.event.SeriesChangeEvent[source= ]", numberArray24);
        java.lang.Comparable comparable29 = categoryDataset27.getRowKey((int) (short) 1);
        java.lang.Number number30 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset27);
        org.jfree.data.Range range31 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset27);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(categoryDataset25);
        org.junit.Assert.assertNotNull(categoryDataset26);
        org.junit.Assert.assertNotNull(categoryDataset27);
        org.junit.Assert.assertEquals("'" + comparable29 + "' != '" + "2" + "'", comparable29, "2");
        org.junit.Assert.assertEquals("'" + number30 + "' != '" + (-1.0d) + "'", number30, (-1.0d));
        org.junit.Assert.assertNotNull(range31);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1064");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray24 = new java.lang.Number[][] { numberArray8, numberArray11, numberArray14, numberArray17, numberArray20, numberArray23 };
        org.jfree.data.category.CategoryDataset categoryDataset25 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray24);
        java.util.List list26 = categoryDataset25.getRowKeys();
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset25, false);
        int int30 = categoryDataset25.getColumnIndex((java.lang.Comparable) (-1L));
        boolean boolean31 = xYIntervalSeriesCollection0.equals((java.lang.Object) categoryDataset25);
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener34 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number38 = xYIntervalSeriesCollection0.getY(10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(categoryDataset25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(range33);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1065");
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries3 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries3.setMaximumItemCount((int) ' ');
        xYIntervalSeries3.setDescription("");
        boolean boolean8 = xYIntervalSeries3.isEmpty();
        int int9 = xYIntervalSeries3.getItemCount();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        org.jfree.data.Range range14 = org.jfree.data.Range.scale(range12, (double) (byte) 0);
        boolean boolean17 = range14.intersects((double) 100.0f, 100.0d);
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range14, (double) 10.0f);
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range14, (double) (byte) -1);
        boolean boolean22 = xYIntervalSeries3.equals((java.lang.Object) (byte) -1);
        boolean boolean23 = xYIntervalSeries3.getAllowDuplicateXValues();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection24 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset26 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo27 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent28 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset26, datasetChangeInfo27);
        xYIntervalSeriesCollection24.notifyListeners(datasetChangeEvent28);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState30 = xYIntervalSeriesCollection24.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener31 = null;
        xYIntervalSeriesCollection24.removeChangeListener(datasetChangeListener31);
        java.lang.Number number33 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection24);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo34 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection24.fireDatasetChanged(datasetChangeInfo34);
        xYIntervalSeriesCollection24.removeAllSeries();
        org.jfree.data.DomainOrder domainOrder37 = xYIntervalSeriesCollection24.getDomainOrder();
        java.lang.Number number38 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection24);
        // The following exception was thrown during execution in test generation
        try {
            xYIntervalSeries3.addChangeListener((org.jfree.data.event.SeriesChangeListener) xYIntervalSeriesCollection24);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Listener org.jfree.data.xy.XYIntervalSeriesCollection@4d5fb7e9 is not of type class org.jfree.data.xy.XYIntervalSeries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(range14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(xYDatasetSelectionState30);
        org.junit.Assert.assertNull(number33);
        org.junit.Assert.assertNotNull(domainOrder37);
        org.junit.Assert.assertNull(number38);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1066");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        xYIntervalSeriesCollection0.removeAllSeries();
        org.jfree.data.xy.XYInterval xYInterval9 = new org.jfree.data.xy.XYInterval((double) (byte) 10, (double) 'a', (double) (-1L), (double) (byte) 100, (double) 100);
        double double10 = xYInterval9.getXLow();
        double double11 = xYInterval9.getXLow();
        boolean boolean12 = xYIntervalSeriesCollection0.equals((java.lang.Object) double11);
        org.jfree.data.Range range14 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number17 = xYIntervalSeriesCollection0.getStartX((int) (short) -1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(range14);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1067");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        boolean boolean24 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(pieDataset23);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem31 = new org.jfree.data.xy.XYIntervalDataItem((double) 6, 0.0d, 198.0d, (double) 2, (double) (short) 1, (double) 10L);
        org.jfree.data.pie.PieDataset pieDataset34 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset23, (java.lang.Comparable) 0.0d, (double) 2147483647, (int) (short) 10);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(pieDataset34);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1068");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray46 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray49 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray52 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray53 = new java.lang.Number[][] { numberArray37, numberArray40, numberArray43, numberArray46, numberArray49, numberArray52 };
        org.jfree.data.category.CategoryDataset categoryDataset54 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray53);
        java.util.List list55 = categoryDataset54.getRowKeys();
        org.jfree.data.Range range57 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset54, (double) (short) -1);
        java.util.List list58 = categoryDataset54.getRowKeys();
        org.jfree.data.Range range60 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, list58, false);
        org.jfree.data.Range range62 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, true);
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray46);
        org.junit.Assert.assertNotNull(numberArray49);
        org.junit.Assert.assertNotNull(numberArray52);
        org.junit.Assert.assertNotNull(numberArray53);
        org.junit.Assert.assertNotNull(categoryDataset54);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(list58);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range62);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1069");
        double[] doubleArray9 = new double[] { 1.0d, (byte) -1, 1.0d };
        double[][] doubleArray10 = new double[][] { doubleArray9 };
        org.jfree.data.category.CategoryDataset categoryDataset11 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "", doubleArray10);
        org.jfree.data.category.CategoryDataset categoryDataset12 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!2", "", doubleArray10);
        org.jfree.data.category.CategoryDataset categoryDataset13 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("NOID", "", doubleArray10);
        org.jfree.data.Range range15 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds(categoryDataset13, true);
        org.jfree.data.Range range18 = org.jfree.data.Range.shift(range15, (double) (byte) 0, true);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(categoryDataset11);
        org.junit.Assert.assertNotNull(categoryDataset12);
        org.junit.Assert.assertNotNull(categoryDataset13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertNotNull(range18);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1070");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState24 = pieDataset23.getSelectionState();
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState25 = pieDataset23.getSelectionState();
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState26 = pieDataset23.getSelectionState();
        int int27 = pieDataset23.getItemCount();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState24);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState25);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1071");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        java.lang.Object obj9 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener10 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener10);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection12 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset14 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo15 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent16 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset14, datasetChangeInfo15);
        xYIntervalSeriesCollection12.notifyListeners(datasetChangeEvent16);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState18 = xYIntervalSeriesCollection12.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener19 = null;
        xYIntervalSeriesCollection12.removeChangeListener(datasetChangeListener19);
        java.lang.Number number21 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection12);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo22 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection12.fireDatasetChanged(datasetChangeInfo22);
        boolean boolean24 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection12);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = xYIntervalSeriesCollection12.getItemCount((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNull(xYDatasetSelectionState18);
        org.junit.Assert.assertNull(number21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1072");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem7 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int9 = xYIntervalDataItem7.compareTo((java.lang.Object) 1.0f);
        double double10 = xYIntervalDataItem7.getXHighValue();
        org.jfree.data.Range range11 = null;
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 100);
        double double15 = range13.constrain((double) '4');
        boolean boolean16 = xYIntervalDataItem7.equals((java.lang.Object) '4');
        org.jfree.data.Range range17 = null;
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range17, (double) 100);
        double double21 = range19.constrain((double) '4');
        int int22 = xYIntervalDataItem7.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray29 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray32 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray35 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray38 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray41 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray44 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray45 = new java.lang.Number[][] { numberArray29, numberArray32, numberArray35, numberArray38, numberArray41, numberArray44 };
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray45);
        org.jfree.data.category.CategoryDataset categoryDataset47 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray45);
        int int48 = xYIntervalDataItem7.compareTo((java.lang.Object) categoryDataset47);
        int int50 = categoryDataset47.getRowIndex((java.lang.Comparable) "org.jfree.data.event.DatasetChangeEvent[source=-1]");
        java.util.List list51 = categoryDataset47.getRowKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range53 = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(categoryDataset0, list51, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(numberArray35);
        org.junit.Assert.assertNotNull(numberArray38);
        org.junit.Assert.assertNotNull(numberArray41);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertNotNull(categoryDataset47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(list51);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1073");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        java.util.List list48 = categoryDataset46.getColumnKeys();
        org.jfree.data.Range range50 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset46, (double) 1L);
        int int51 = categoryDataset46.getColumnCount();
        org.jfree.data.Range range53 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset46, false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(list48);
        org.junit.Assert.assertNotNull(range50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(range53);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1074");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState7 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState7);
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray29 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray30 = new java.lang.Number[][] { numberArray14, numberArray17, numberArray20, numberArray23, numberArray26, numberArray29 };
        org.jfree.data.category.CategoryDataset categoryDataset31 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray30);
        java.util.List list32 = categoryDataset31.getRowKeys();
        org.jfree.data.Range range34 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset31, false);
        int int36 = categoryDataset31.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset38 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo39 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent40 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset38, datasetChangeInfo39);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent41 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset31, datasetChangeInfo39);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem48 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int50 = xYIntervalDataItem48.compareTo((java.lang.Object) 1.0f);
        int int51 = categoryDataset31.getColumnIndex((java.lang.Comparable) xYIntervalDataItem48);
        double double52 = xYIntervalDataItem48.getXLowValue();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection53 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder54 = xYIntervalSeriesCollection53.getDomainOrder();
        org.jfree.data.ComparableObjectItem comparableObjectItem55 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable) xYIntervalDataItem48, (java.lang.Object) domainOrder54);
        int int56 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) comparableObjectItem55);
        org.jfree.data.Range range57 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        int int58 = xYIntervalSeriesCollection0.getSeriesCount();
        org.jfree.data.Range range59 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double62 = xYIntervalSeriesCollection0.getXValue((int) (short) 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(numberArray30);
        org.junit.Assert.assertNotNull(categoryDataset31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertNotNull(domainOrder54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNull(range57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNull(range59);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1075");
        java.lang.Number[] numberArray6 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray22 = new java.lang.Number[][] { numberArray6, numberArray9, numberArray12, numberArray15, numberArray18, numberArray21 };
        org.jfree.data.category.CategoryDataset categoryDataset23 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray22);
        org.jfree.data.category.CategoryDataset categoryDataset24 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("NOID", "org.jfree.data.event.SeriesChangeEvent[source= ]", numberArray22);
        org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset24, true);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset24);
        double double28 = range27.getCentralValue();
        org.junit.Assert.assertNotNull(numberArray6);
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(categoryDataset23);
        org.junit.Assert.assertNotNull(categoryDataset24);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 15.5d + "'", double28 == 15.5d);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1076");
        org.jfree.data.xy.XYInterval xYInterval5 = new org.jfree.data.xy.XYInterval(15.5d, (double) 1, (double) 2, (double) '#', 192.0d);
        double double6 = xYInterval5.getXLow();
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray27 = new java.lang.Number[][] { numberArray11, numberArray14, numberArray17, numberArray20, numberArray23, numberArray26 };
        org.jfree.data.category.CategoryDataset categoryDataset28 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray27);
        org.jfree.data.Range range30 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset28, true);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, 0.0d);
        double double33 = range32.getCentralValue();
        org.jfree.data.Range range35 = org.jfree.data.Range.scale(range32, (double) 1);
        boolean boolean36 = xYInterval5.equals((java.lang.Object) 1);
        double double37 = xYInterval5.getXLow();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 15.5d + "'", double6 == 15.5d);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray27);
        org.junit.Assert.assertNotNull(categoryDataset28);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 15.5d + "'", double33 == 15.5d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 15.5d + "'", double37 == 15.5d);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1077");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range15 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range16 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range18 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries22 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        boolean boolean23 = xYIntervalSeries22.getNotify();
        int int24 = xYIntervalSeries22.getItemCount();
        xYIntervalSeries22.clear();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries29 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries29.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo32 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent33 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo32);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo34 = null;
        seriesChangeEvent33.setSummary(seriesChangeInfo34);
        java.lang.Object obj36 = seriesChangeEvent33.getSource();
        xYIntervalSeries22.notifyListeners(seriesChangeEvent33);
        // The following exception was thrown during execution in test generation
        try {
            xYIntervalSeriesCollection0.addSeries(xYIntervalSeries22);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Listener org.jfree.data.xy.XYIntervalSeriesCollection@4506691d is not of type class org.jfree.data.xy.XYIntervalSeries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNull(range15);
        org.junit.Assert.assertNull(range16);
        org.junit.Assert.assertNull(range18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + obj36 + "' != '" + ' ' + "'", obj36, ' ');
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1078");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range15 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range16 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range18 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = xYIntervalSeriesCollection0.getStartYValue((int) '#', (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNull(range15);
        org.junit.Assert.assertNull(range16);
        org.junit.Assert.assertNull(range18);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1079");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        java.lang.Object obj10 = xYIntervalDataItem6.clone();
        boolean boolean12 = xYIntervalDataItem6.equals((java.lang.Object) 0);
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray29 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray32 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray33 = new java.lang.Number[][] { numberArray17, numberArray20, numberArray23, numberArray26, numberArray29, numberArray32 };
        org.jfree.data.category.CategoryDataset categoryDataset34 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray33);
        org.jfree.data.pie.PieDataset pieDataset36 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset34, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState37 = pieDataset36.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset41 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset36, (java.lang.Comparable) (short) 0, (double) (short) 100, (int) ' ');
        org.jfree.data.category.CategoryDataset categoryDataset42 = org.jfree.data.general.DatasetUtilities.createCategoryDataset((java.lang.Comparable) xYIntervalDataItem6, (org.jfree.data.KeyedValues) pieDataset41);
        int int44 = pieDataset41.getIndex((java.lang.Comparable) 100L);
        java.lang.Comparable comparable46 = pieDataset41.getKey((int) (short) 1);
        double double47 = org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(pieDataset41);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(numberArray33);
        org.junit.Assert.assertNotNull(categoryDataset34);
        org.junit.Assert.assertNotNull(pieDataset36);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState37);
        org.junit.Assert.assertNotNull(pieDataset41);
        org.junit.Assert.assertNotNull(categoryDataset42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertEquals("'" + comparable46 + "' != '" + "2" + "'", comparable46, "2");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 32.0d + "'", double47 == 32.0d);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1080");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (byte) -1, (double) 2, 15.5d, 31.0d, (double) (-1L), 198.0d);
        org.jfree.data.ComparableObjectSeries comparableObjectSeries10 = new org.jfree.data.ComparableObjectSeries((java.lang.Comparable) (short) 0, false, true);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem17 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int19 = xYIntervalDataItem17.compareTo((java.lang.Object) 1.0f);
        double double20 = xYIntervalDataItem17.getXHighValue();
        org.jfree.data.Range range21 = null;
        org.jfree.data.Range range23 = org.jfree.data.Range.expandToInclude(range21, (double) 100);
        double double25 = range23.constrain((double) '4');
        boolean boolean26 = xYIntervalDataItem17.equals((java.lang.Object) '4');
        boolean boolean28 = xYIntervalDataItem17.equals((java.lang.Object) 0.0f);
        java.lang.Object obj29 = xYIntervalDataItem17.clone();
        int int30 = comparableObjectSeries10.indexOf((java.lang.Comparable) xYIntervalDataItem17);
        double[] doubleArray40 = new double[] { 1.0d, (byte) -1, 1.0d };
        double[][] doubleArray41 = new double[][] { doubleArray40 };
        org.jfree.data.category.CategoryDataset categoryDataset42 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "", doubleArray41);
        org.jfree.data.category.CategoryDataset categoryDataset43 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!1", "hi!", doubleArray41);
        org.jfree.data.category.CategoryDataset categoryDataset44 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("Range[100.0,100.0]", "org.jfree.data.general.SeriesException: ", doubleArray41);
        org.jfree.data.pie.PieDataset pieDataset46 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset44, 0);
        org.jfree.data.category.CategoryDataset categoryDataset47 = org.jfree.data.general.DatasetUtilities.createCategoryDataset((java.lang.Comparable) int30, (org.jfree.data.KeyedValues) pieDataset46);
        org.jfree.data.Range range48 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset47);
        org.jfree.data.ComparableObjectItem comparableObjectItem49 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable) 2, (java.lang.Object) range48);
        java.lang.Object obj50 = comparableObjectItem49.clone();
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(categoryDataset42);
        org.junit.Assert.assertNotNull(categoryDataset43);
        org.junit.Assert.assertNotNull(categoryDataset44);
        org.junit.Assert.assertNotNull(pieDataset46);
        org.junit.Assert.assertNotNull(categoryDataset47);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertNotNull(obj50);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1081");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection0.getDomainOrder();
        boolean boolean10 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Number number11 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(number11);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1082");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState24 = pieDataset23.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset28 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset23, (java.lang.Comparable) 'a', (double) 10.0f, (int) (short) 10);
        org.jfree.data.pie.PieDataset pieDataset31 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset28, (java.lang.Comparable) 192.0d, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable33 = pieDataset28.getKey((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState24);
        org.junit.Assert.assertNotNull(pieDataset28);
        org.junit.Assert.assertNotNull(pieDataset31);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1083");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        java.lang.Object obj14 = xYIntervalDataItem10.clone();
        boolean boolean16 = xYIntervalDataItem10.equals((java.lang.Object) 0);
        int int17 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        org.jfree.data.DomainOrder domainOrder18 = xYIntervalSeriesCollection0.getDomainOrder();
        java.lang.Number number19 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Number number20 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent21 = null;
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent21);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = xYIntervalSeriesCollection0.getEndXValue((int) (short) 1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(domainOrder18);
        org.junit.Assert.assertNull(number19);
        org.junit.Assert.assertNull(number20);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1084");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries12 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 32.0d);
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries12);
        boolean boolean14 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection15 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset17 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo18 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent19 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset17, datasetChangeInfo18);
        xYIntervalSeriesCollection15.notifyListeners(datasetChangeEvent19);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState21 = xYIntervalSeriesCollection15.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener22 = null;
        xYIntervalSeriesCollection15.removeChangeListener(datasetChangeListener22);
        java.lang.Number number24 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection15);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo25 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection15.fireDatasetChanged(datasetChangeInfo25);
        xYIntervalSeriesCollection15.removeAllSeries();
        java.lang.Number number28 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection15);
        boolean boolean29 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection15);
        java.lang.Number number30 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection15);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries34 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries34.setMaximumItemCount((int) ' ');
        xYIntervalSeries34.setDescription("");
        boolean boolean39 = xYIntervalSeries34.isEmpty();
        boolean boolean40 = xYIntervalSeries34.getAllowDuplicateXValues();
        java.lang.Object obj41 = xYIntervalSeries34.clone();
        xYIntervalSeriesCollection15.removeSeries(xYIntervalSeries34);
        java.lang.Object obj43 = xYIntervalSeriesCollection15.clone();
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(xYDatasetSelectionState21);
        org.junit.Assert.assertNull(number24);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(number30);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(obj43);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1085");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection8 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection8.getDomainOrder();
        int int10 = xYIntervalSeriesCollection8.getSeriesCount();
        boolean boolean11 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection8);
        xYIntervalSeriesCollection8.validateObject();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent13 = null;
        xYIntervalSeriesCollection8.notifyListeners(datasetChangeEvent13);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = xYIntervalSeriesCollection8.getEndXValue(0, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1086");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener48 = null;
        categoryDataset46.removeChangeListener(datasetChangeListener48);
        int int50 = categoryDataset46.getColumnCount();
        org.jfree.data.Range range51 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset46);
        java.lang.Number number52 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset46);
        int int53 = categoryDataset46.getRowCount();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertEquals("'" + number52 + "' != '" + (-1.0d) + "'", number52, (-1.0d));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1087");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        xYIntervalSeriesCollection0.removeAllSeries();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries7 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        boolean boolean8 = xYIntervalSeries7.getNotify();
        int int9 = xYIntervalSeries7.getItemCount();
        boolean boolean10 = xYIntervalSeries7.getAutoSort();
        xYIntervalSeries7.fireSeriesChanged();
        boolean boolean12 = xYIntervalSeries7.getNotify();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener13 = null;
        xYIntervalSeries7.addChangeListener(seriesChangeListener13);
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries7);
        // The following exception was thrown during execution in test generation
        try {
            double double18 = xYIntervalSeriesCollection0.getStartYValue((int) (byte) 10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1088");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        int int7 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 100L);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener8 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener8);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries13 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        java.lang.Object obj15 = null;
        xYIntervalSeries13.firePropertyChange("", obj15, (java.lang.Object) "hi!");
        xYIntervalSeries13.setKey((java.lang.Comparable) (short) 1);
        xYIntervalSeries13.firePropertyChange("", (java.lang.Object) 100L, (java.lang.Object) 100.0f);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries27 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        boolean boolean28 = xYIntervalSeries27.getNotify();
        int int29 = xYIntervalSeries27.getItemCount();
        xYIntervalSeries27.clear();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries34 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries34.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo37 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent38 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo37);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo39 = null;
        seriesChangeEvent38.setSummary(seriesChangeInfo39);
        java.lang.Object obj41 = seriesChangeEvent38.getSource();
        xYIntervalSeries27.notifyListeners(seriesChangeEvent38);
        xYIntervalSeries13.notifyListeners(seriesChangeEvent38);
        java.lang.Number[] numberArray49 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray52 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray55 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray58 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray61 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray64 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray65 = new java.lang.Number[][] { numberArray49, numberArray52, numberArray55, numberArray58, numberArray61, numberArray64 };
        org.jfree.data.category.CategoryDataset categoryDataset66 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray65);
        java.util.List list67 = categoryDataset66.getRowKeys();
        org.jfree.data.Range range69 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset66, false);
        int int71 = categoryDataset66.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset73 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo74 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent75 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset73, datasetChangeInfo74);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent76 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset66, datasetChangeInfo74);
        org.jfree.data.Range range77 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset66);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener78 = null;
        categoryDataset66.removeChangeListener(datasetChangeListener78);
        boolean boolean80 = xYIntervalSeries13.equals((java.lang.Object) datasetChangeListener78);
        // The following exception was thrown during execution in test generation
        try {
            xYIntervalSeriesCollection0.addSeries(xYIntervalSeries13);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Listener org.jfree.data.xy.XYIntervalSeriesCollection@42bfee76 is not of type class org.jfree.data.xy.XYIntervalSeries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + obj41 + "' != '" + ' ' + "'", obj41, ' ');
        org.junit.Assert.assertNotNull(numberArray49);
        org.junit.Assert.assertNotNull(numberArray52);
        org.junit.Assert.assertNotNull(numberArray55);
        org.junit.Assert.assertNotNull(numberArray58);
        org.junit.Assert.assertNotNull(numberArray61);
        org.junit.Assert.assertNotNull(numberArray64);
        org.junit.Assert.assertNotNull(numberArray65);
        org.junit.Assert.assertNotNull(categoryDataset66);
        org.junit.Assert.assertNotNull(list67);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(range77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1089");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range9 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem16 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int18 = xYIntervalDataItem16.compareTo((java.lang.Object) 1.0f);
        double double19 = xYIntervalDataItem16.getXHighValue();
        java.lang.Object obj20 = xYIntervalDataItem16.clone();
        double double21 = xYIntervalDataItem16.getXHighValue();
        int int22 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem16);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection23 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset25 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo26 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent27 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset25, datasetChangeInfo26);
        xYIntervalSeriesCollection23.notifyListeners(datasetChangeEvent27);
        int int30 = xYIntervalSeriesCollection23.indexOf((java.lang.Comparable) 100L);
        int int31 = xYIntervalSeriesCollection23.getSeriesCount();
        boolean boolean32 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection23);
        // The following exception was thrown during execution in test generation
        try {
            double double35 = xYIntervalSeriesCollection23.getEndYValue((int) (short) 0, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNull(range9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1090");
        org.jfree.data.ComparableObjectSeries comparableObjectSeries3 = new org.jfree.data.ComparableObjectSeries((java.lang.Comparable) (short) 0, false, true);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        org.jfree.data.Range range14 = null;
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range14, (double) 100);
        double double18 = range16.constrain((double) '4');
        boolean boolean19 = xYIntervalDataItem10.equals((java.lang.Object) '4');
        boolean boolean21 = xYIntervalDataItem10.equals((java.lang.Object) 0.0f);
        java.lang.Object obj22 = xYIntervalDataItem10.clone();
        int int23 = comparableObjectSeries3.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection24 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset26 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo27 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent28 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset26, datasetChangeInfo27);
        xYIntervalSeriesCollection24.notifyListeners(datasetChangeEvent28);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState30 = xYIntervalSeriesCollection24.getSelectionState();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection31 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset33 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo34 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent35 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset33, datasetChangeInfo34);
        xYIntervalSeriesCollection31.notifyListeners(datasetChangeEvent35);
        org.jfree.data.general.Dataset dataset37 = datasetChangeEvent35.getDataset();
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo38 = datasetChangeEvent35.getInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent39 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) int23, (org.jfree.data.general.Dataset) xYIntervalSeriesCollection24, datasetChangeInfo38);
        java.lang.Number number40 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection24);
        org.jfree.data.Range range41 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection24);
        // The following exception was thrown during execution in test generation
        try {
            double double44 = xYIntervalSeriesCollection24.getYValue(0, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(xYDatasetSelectionState30);
        org.junit.Assert.assertNull(dataset37);
        org.junit.Assert.assertNotNull(datasetChangeInfo38);
        org.junit.Assert.assertNull(number40);
        org.junit.Assert.assertNull(range41);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1091");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) 1, (double) 1L, (double) (byte) 100, (double) 1, (double) 'a', 52.0d);
        double[] doubleArray16 = new double[] { 1.0d, (byte) -1, 1.0d };
        double[][] doubleArray17 = new double[][] { doubleArray16 };
        org.jfree.data.category.CategoryDataset categoryDataset18 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "", doubleArray17);
        org.jfree.data.category.CategoryDataset categoryDataset19 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!1", "hi!", doubleArray17);
        org.jfree.data.category.CategoryDataset categoryDataset20 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("Range[100.0,100.0]", "org.jfree.data.general.SeriesException: ", doubleArray17);
        org.jfree.data.ComparableObjectItem comparableObjectItem21 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable) 'a', (java.lang.Object) "org.jfree.data.general.SeriesException: ");
        java.lang.Number[] numberArray27 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray30 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray33 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray36 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray39 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray42 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray43 = new java.lang.Number[][] { numberArray27, numberArray30, numberArray33, numberArray36, numberArray39, numberArray42 };
        org.jfree.data.category.CategoryDataset categoryDataset44 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray43);
        java.util.List list45 = categoryDataset44.getRowKeys();
        org.jfree.data.Range range47 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset44, false);
        int int49 = categoryDataset44.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset51 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo52 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent53 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset51, datasetChangeInfo52);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent54 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset44, datasetChangeInfo52);
        java.lang.Number number55 = org.jfree.data.general.DatasetUtilities.findMaximumStackedRangeValue(categoryDataset44);
        java.lang.Number number56 = org.jfree.data.general.DatasetUtilities.findMaximumStackedRangeValue(categoryDataset44);
        org.jfree.data.Range range58 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset44, true);
        java.lang.Number number59 = org.jfree.data.general.DatasetUtilities.findMinimumStackedRangeValue(categoryDataset44);
        org.jfree.data.pie.PieDataset pieDataset61 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset44, 0);
        org.jfree.data.category.CategoryDataset categoryDataset62 = org.jfree.data.general.DatasetUtilities.createCategoryDataset((java.lang.Comparable) comparableObjectItem21, (org.jfree.data.KeyedValues) pieDataset61);
        java.util.List list63 = categoryDataset62.getColumnKeys();
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(categoryDataset18);
        org.junit.Assert.assertNotNull(categoryDataset19);
        org.junit.Assert.assertNotNull(categoryDataset20);
        org.junit.Assert.assertNotNull(numberArray27);
        org.junit.Assert.assertNotNull(numberArray30);
        org.junit.Assert.assertNotNull(numberArray33);
        org.junit.Assert.assertNotNull(numberArray36);
        org.junit.Assert.assertNotNull(numberArray39);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(categoryDataset44);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertEquals("'" + number55 + "' != '" + 192.0d + "'", number55, 192.0d);
        org.junit.Assert.assertEquals("'" + number56 + "' != '" + 192.0d + "'", number56, 192.0d);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertEquals("'" + number59 + "' != '" + (-6.0d) + "'", number59, (-6.0d));
        org.junit.Assert.assertNotNull(pieDataset61);
        org.junit.Assert.assertNotNull(categoryDataset62);
        org.junit.Assert.assertNotNull(list63);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1092");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        int int4 = xYIntervalSeriesCollection0.getSeriesCount();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number7 = xYIntervalSeriesCollection0.getStartY((int) (byte) 0, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1093");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.DomainOrder domainOrder14 = xYIntervalSeriesCollection0.getDomainOrder();
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNotNull(domainOrder14);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1094");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.DomainOrder domainOrder13 = xYIntervalSeriesCollection0.getDomainOrder();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number16 = xYIntervalSeriesCollection0.getEndY((int) (byte) 1, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(number12);
        org.junit.Assert.assertNotNull(domainOrder13);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1095");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray24 = new java.lang.Number[][] { numberArray8, numberArray11, numberArray14, numberArray17, numberArray20, numberArray23 };
        org.jfree.data.category.CategoryDataset categoryDataset25 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray24);
        java.util.List list26 = categoryDataset25.getRowKeys();
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset25, false);
        int int30 = categoryDataset25.getColumnIndex((java.lang.Comparable) (-1L));
        boolean boolean31 = xYIntervalSeriesCollection0.equals((java.lang.Object) categoryDataset25);
        org.jfree.data.Range range32 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState33 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState33);
        // The following exception was thrown during execution in test generation
        try {
            double double37 = xYIntervalSeriesCollection0.getXValue((int) 'a', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(categoryDataset25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(range32);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1096");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection8 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection8.getDomainOrder();
        int int10 = xYIntervalSeriesCollection8.getSeriesCount();
        boolean boolean11 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection8);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        xYIntervalSeriesCollection8.validateObject();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener14 = null;
        xYIntervalSeriesCollection8.addChangeListener(datasetChangeListener14);
        org.jfree.data.Range range16 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        org.jfree.data.DomainOrder domainOrder17 = xYIntervalSeriesCollection8.getDomainOrder();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number20 = xYIntervalSeriesCollection8.getStartX((int) '4', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(number12);
        org.junit.Assert.assertNull(range16);
        org.junit.Assert.assertNotNull(domainOrder17);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1097");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range9 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem16 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int18 = xYIntervalDataItem16.compareTo((java.lang.Object) 1.0f);
        double double19 = xYIntervalDataItem16.getXHighValue();
        java.lang.Object obj20 = xYIntervalDataItem16.clone();
        double double21 = xYIntervalDataItem16.getXHighValue();
        int int22 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem16);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection23 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset25 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo26 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent27 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset25, datasetChangeInfo26);
        xYIntervalSeriesCollection23.notifyListeners(datasetChangeEvent27);
        int int30 = xYIntervalSeriesCollection23.indexOf((java.lang.Comparable) 100L);
        int int31 = xYIntervalSeriesCollection23.getSeriesCount();
        boolean boolean32 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection23);
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNull(range9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(range33);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1098");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries12 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 32.0d);
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries12);
        boolean boolean14 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        int int15 = xYIntervalSeriesCollection0.getSeriesCount();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection16 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset18 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo19 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent20 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset18, datasetChangeInfo19);
        xYIntervalSeriesCollection16.notifyListeners(datasetChangeEvent20);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState22 = xYIntervalSeriesCollection16.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener23 = null;
        xYIntervalSeriesCollection16.removeChangeListener(datasetChangeListener23);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState25 = xYIntervalSeriesCollection16.getSelectionState();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent26 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) xYIntervalSeriesCollection16);
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent26);
        java.lang.Number[] numberArray32 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray35 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray38 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray41 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray44 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray47 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray48 = new java.lang.Number[][] { numberArray32, numberArray35, numberArray38, numberArray41, numberArray44, numberArray47 };
        org.jfree.data.category.CategoryDataset categoryDataset49 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray48);
        java.util.List list50 = categoryDataset49.getRowKeys();
        org.jfree.data.Range range52 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset49, false);
        boolean boolean53 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset49);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener54 = null;
        categoryDataset49.removeChangeListener(datasetChangeListener54);
        java.util.List list56 = categoryDataset49.getColumnKeys();
        java.util.List list57 = categoryDataset49.getRowKeys();
        org.jfree.data.Range range58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range60 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, list57, range58, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'xRange' argument");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(xYDatasetSelectionState22);
        org.junit.Assert.assertNull(xYDatasetSelectionState25);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(numberArray35);
        org.junit.Assert.assertNotNull(numberArray38);
        org.junit.Assert.assertNotNull(numberArray41);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(numberArray47);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(categoryDataset49);
        org.junit.Assert.assertNotNull(list50);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(list56);
        org.junit.Assert.assertNotNull(list57);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1099");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        int int4 = xYIntervalSeriesCollection0.getSeriesCount();
        int int6 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 100.0d);
        org.jfree.data.DomainOrder domainOrder7 = xYIntervalSeriesCollection0.getDomainOrder();
        java.lang.Number number8 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = xYIntervalSeriesCollection0.getStartYValue(2147483647, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2147483647, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(domainOrder7);
        org.junit.Assert.assertNull(number8);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1100");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener25 = null;
        categoryDataset21.removeChangeListener(datasetChangeListener25);
        org.jfree.data.pie.PieDataset pieDataset28 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable30 = categoryDataset21.getColumnKey((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(pieDataset28);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1101");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo4 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent5 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) xYIntervalSeriesCollection0, seriesChangeInfo4);
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNull(range7);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1102");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        java.lang.Number number33 = org.jfree.data.general.DatasetUtilities.findMaximumStackedRangeValue(categoryDataset22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number36 = categoryDataset22.getValue((int) (byte) 100, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertEquals("'" + number33 + "' != '" + 192.0d + "'", number33, 192.0d);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1103");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem14 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int16 = xYIntervalDataItem14.compareTo((java.lang.Object) 1.0f);
        double double17 = xYIntervalDataItem14.getXHighValue();
        org.jfree.data.Range range18 = null;
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range18, (double) 100);
        double double22 = range20.constrain((double) '4');
        boolean boolean23 = xYIntervalDataItem14.equals((java.lang.Object) '4');
        org.jfree.data.Range range24 = null;
        org.jfree.data.Range range26 = org.jfree.data.Range.expandToInclude(range24, (double) 100);
        double double28 = range26.constrain((double) '4');
        int int29 = xYIntervalDataItem14.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray36 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray39 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray42 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray45 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray48 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray51 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray52 = new java.lang.Number[][] { numberArray36, numberArray39, numberArray42, numberArray45, numberArray48, numberArray51 };
        org.jfree.data.category.CategoryDataset categoryDataset53 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray52);
        org.jfree.data.category.CategoryDataset categoryDataset54 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray52);
        int int55 = xYIntervalDataItem14.compareTo((java.lang.Object) categoryDataset54);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener56 = null;
        categoryDataset54.removeChangeListener(datasetChangeListener56);
        org.jfree.data.general.DatasetGroup datasetGroup58 = categoryDataset54.getGroup();
        xYIntervalSeriesCollection0.setGroup(datasetGroup58);
        xYIntervalSeriesCollection0.removeAllSeries();
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo61 = null;
        // The following exception was thrown during execution in test generation
        try {
            xYIntervalSeriesCollection0.fireDatasetChanged(datasetChangeInfo61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'info' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(numberArray36);
        org.junit.Assert.assertNotNull(numberArray39);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(numberArray51);
        org.junit.Assert.assertNotNull(numberArray52);
        org.junit.Assert.assertNotNull(categoryDataset53);
        org.junit.Assert.assertNotNull(categoryDataset54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(datasetGroup58);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1104");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener9 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries14 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries14.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo17 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent18 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo17);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo19 = null;
        seriesChangeEvent18.setSummary(seriesChangeInfo19);
        java.lang.Object obj21 = seriesChangeEvent18.getSource();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent18);
        boolean boolean23 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Number number24 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj25 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries29 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries29.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo32 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent33 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo32);
        java.lang.Object obj34 = seriesChangeEvent33.getSource();
        java.lang.Object obj35 = seriesChangeEvent33.getSource();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent33);
        java.lang.Number[] numberArray41 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray44 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray47 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray50 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray53 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray56 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray57 = new java.lang.Number[][] { numberArray41, numberArray44, numberArray47, numberArray50, numberArray53, numberArray56 };
        org.jfree.data.category.CategoryDataset categoryDataset58 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray57);
        java.util.List list59 = categoryDataset58.getRowKeys();
        org.jfree.data.Range range61 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset58, (double) (short) -1);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener62 = null;
        categoryDataset58.removeChangeListener(datasetChangeListener62);
        java.lang.Number[] numberArray68 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray71 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray74 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray77 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray80 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray83 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray84 = new java.lang.Number[][] { numberArray68, numberArray71, numberArray74, numberArray77, numberArray80, numberArray83 };
        org.jfree.data.category.CategoryDataset categoryDataset85 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray84);
        java.util.List list86 = categoryDataset85.getRowKeys();
        org.jfree.data.Range range88 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset58, list86, false);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range90 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, list86, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + ' ' + "'", obj21, ' ');
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(number24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + ' ' + "'", obj34, ' ');
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + ' ' + "'", obj35, ' ');
        org.junit.Assert.assertNotNull(numberArray41);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(numberArray47);
        org.junit.Assert.assertNotNull(numberArray50);
        org.junit.Assert.assertNotNull(numberArray53);
        org.junit.Assert.assertNotNull(numberArray56);
        org.junit.Assert.assertNotNull(numberArray57);
        org.junit.Assert.assertNotNull(categoryDataset58);
        org.junit.Assert.assertNotNull(list59);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertNotNull(numberArray68);
        org.junit.Assert.assertNotNull(numberArray71);
        org.junit.Assert.assertNotNull(numberArray74);
        org.junit.Assert.assertNotNull(numberArray77);
        org.junit.Assert.assertNotNull(numberArray80);
        org.junit.Assert.assertNotNull(numberArray83);
        org.junit.Assert.assertNotNull(numberArray84);
        org.junit.Assert.assertNotNull(categoryDataset85);
        org.junit.Assert.assertNotNull(list86);
        org.junit.Assert.assertNotNull(range88);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1105");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj8 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.Range range9 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        xYIntervalSeriesCollection0.validateObject();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = xYIntervalSeriesCollection0.getStartYValue(32, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNull(range9);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1106");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection8 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection8.getDomainOrder();
        int int10 = xYIntervalSeriesCollection8.getSeriesCount();
        boolean boolean11 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection8);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        xYIntervalSeriesCollection8.validateObject();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent14 = null;
        xYIntervalSeriesCollection8.notifyListeners(datasetChangeEvent14);
        // The following exception was thrown during execution in test generation
        try {
            double double18 = xYIntervalSeriesCollection8.getEndYValue((int) (short) 1, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(number12);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1107");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range23 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        org.jfree.data.general.DatasetGroup datasetGroup24 = categoryDataset21.getGroup();
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        java.util.List list26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, list26, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'visibleSeriesKeys' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(datasetGroup24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1108");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range10 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray22 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray25 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray32 = new java.lang.Number[][] { numberArray16, numberArray19, numberArray22, numberArray25, numberArray28, numberArray31 };
        org.jfree.data.category.CategoryDataset categoryDataset33 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray32);
        java.util.List list34 = categoryDataset33.getRowKeys();
        org.jfree.data.Range range36 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset33, false);
        int int38 = categoryDataset33.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset40 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo41 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent42 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset40, datasetChangeInfo41);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent43 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset33, datasetChangeInfo41);
        org.jfree.data.Range range44 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset33);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener45 = null;
        categoryDataset33.removeChangeListener(datasetChangeListener45);
        java.util.List list47 = categoryDataset33.getColumnKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range49 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, list47, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(range10);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(numberArray25);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(categoryDataset33);
        org.junit.Assert.assertNotNull(list34);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(range44);
        org.junit.Assert.assertNotNull(list47);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1109");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState9);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.general.DatasetGroup datasetGroup12 = xYIntervalSeriesCollection0.getGroup();
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            xYIntervalSeriesCollection0.removeSeries(2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNotNull(datasetGroup12);
        org.junit.Assert.assertNull(range13);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1110");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState24 = pieDataset23.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset28 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset23, (java.lang.Comparable) 'a', (double) 10.0f, (int) (short) 10);
        java.util.List list29 = pieDataset28.getKeys();
        org.jfree.data.pie.PieDataset pieDataset33 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset28, (java.lang.Comparable) 100.0f, (double) (-1L), (-1));
        int int35 = pieDataset28.getIndex((java.lang.Comparable) "Range[100.0,100.0]");
        java.lang.Number number37 = pieDataset28.getValue((int) (byte) 10);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState24);
        org.junit.Assert.assertNotNull(pieDataset28);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(pieDataset33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNull(number37);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1111");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.DomainOrder domainOrder2 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection3 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset5 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo6 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent7 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset5, datasetChangeInfo6);
        xYIntervalSeriesCollection3.notifyListeners(datasetChangeEvent7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection3.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener10 = null;
        xYIntervalSeriesCollection3.removeChangeListener(datasetChangeListener10);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection3);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo13 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection3.fireDatasetChanged(datasetChangeInfo13);
        xYIntervalSeriesCollection0.fireDatasetChanged(datasetChangeInfo13);
        org.jfree.data.Range range16 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Number number17 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = xYIntervalSeriesCollection0.getYValue((int) (short) 1, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNotNull(domainOrder2);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(number12);
        org.junit.Assert.assertNull(range16);
        org.junit.Assert.assertNull(number17);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1112");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range23 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        org.jfree.data.general.DatasetGroup datasetGroup24 = categoryDataset21.getGroup();
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        boolean boolean26 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21);
        boolean boolean28 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(datasetGroup24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1113");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener26 = null;
        categoryDataset21.removeChangeListener(datasetChangeListener26);
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21);
        java.lang.Number number29 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertEquals("'" + number29 + "' != '" + (-1.0d) + "'", number29, (-1.0d));
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1114");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.jfree.data.Range range4 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNull(range4);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1115");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj14 = xYIntervalSeriesCollection0.clone();
        int int16 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 0.0f);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = xYIntervalSeriesCollection0.getYValue(10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1116");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray24 = new java.lang.Number[][] { numberArray8, numberArray11, numberArray14, numberArray17, numberArray20, numberArray23 };
        org.jfree.data.category.CategoryDataset categoryDataset25 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray24);
        java.util.List list26 = categoryDataset25.getRowKeys();
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset25, false);
        int int30 = categoryDataset25.getColumnIndex((java.lang.Comparable) (-1L));
        boolean boolean31 = xYIntervalSeriesCollection0.equals((java.lang.Object) categoryDataset25);
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.removeAllSeries();
        java.lang.Number number35 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range36 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Number number37 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(categoryDataset25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(range33);
        org.junit.Assert.assertNull(number35);
        org.junit.Assert.assertNull(range36);
        org.junit.Assert.assertNull(number37);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1117");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        int int26 = categoryDataset21.getRowIndex((java.lang.Comparable) "org.jfree.data.general.SeriesException: ");
        int int27 = categoryDataset21.getRowCount();
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable30 = categoryDataset21.getColumnKey((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertNotNull(range28);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1118");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        java.lang.Object obj14 = xYIntervalDataItem10.clone();
        boolean boolean16 = xYIntervalDataItem10.equals((java.lang.Object) 0);
        int int17 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        org.jfree.data.Range range18 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double21 = xYIntervalSeriesCollection0.getStartYValue((int) (short) 0, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(range18);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1119");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem39 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int41 = xYIntervalDataItem39.compareTo((java.lang.Object) 1.0f);
        int int42 = categoryDataset22.getColumnIndex((java.lang.Comparable) xYIntervalDataItem39);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener43 = null;
        categoryDataset22.addChangeListener(datasetChangeListener43);
        java.lang.Number[] numberArray49 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray52 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray55 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray58 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray61 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray64 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray65 = new java.lang.Number[][] { numberArray49, numberArray52, numberArray55, numberArray58, numberArray61, numberArray64 };
        org.jfree.data.category.CategoryDataset categoryDataset66 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray65);
        java.util.List list67 = categoryDataset66.getRowKeys();
        org.jfree.data.Range range69 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset66, false);
        boolean boolean70 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset66);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener71 = null;
        categoryDataset66.removeChangeListener(datasetChangeListener71);
        java.util.List list73 = categoryDataset66.getColumnKeys();
        java.util.List list74 = categoryDataset66.getRowKeys();
        org.jfree.data.Range range76 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, list74, false);
        int int77 = categoryDataset22.getColumnCount();
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(numberArray49);
        org.junit.Assert.assertNotNull(numberArray52);
        org.junit.Assert.assertNotNull(numberArray55);
        org.junit.Assert.assertNotNull(numberArray58);
        org.junit.Assert.assertNotNull(numberArray61);
        org.junit.Assert.assertNotNull(numberArray64);
        org.junit.Assert.assertNotNull(numberArray65);
        org.junit.Assert.assertNotNull(categoryDataset66);
        org.junit.Assert.assertNotNull(list67);
        org.junit.Assert.assertNotNull(range69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(list73);
        org.junit.Assert.assertNotNull(list74);
        org.junit.Assert.assertNotNull(range76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1120");
        org.jfree.data.xy.TableXYDataset tableXYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double2 = org.jfree.data.general.DatasetUtilities.calculateStackTotal(tableXYDataset0, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1121");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.Range range6 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        int int9 = xYIntervalSeriesCollection0.getSeriesCount();
        org.junit.Assert.assertNull(range6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1122");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection8 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection8.getDomainOrder();
        int int10 = xYIntervalSeriesCollection8.getSeriesCount();
        boolean boolean11 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection8);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        xYIntervalSeriesCollection8.validateObject();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener14 = null;
        xYIntervalSeriesCollection8.addChangeListener(datasetChangeListener14);
        org.jfree.data.Range range16 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState17 = xYIntervalSeriesCollection8.getSelectionState();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries21 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        java.lang.Object obj23 = null;
        xYIntervalSeries21.firePropertyChange("", obj23, (java.lang.Object) "hi!");
        xYIntervalSeries21.setKey((java.lang.Comparable) (short) 1);
        xYIntervalSeries21.firePropertyChange("", (java.lang.Object) 100L, (java.lang.Object) 100.0f);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem39 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int41 = xYIntervalDataItem39.compareTo((java.lang.Object) 1.0f);
        double double42 = xYIntervalDataItem39.getXHighValue();
        java.lang.Object obj43 = xYIntervalDataItem39.clone();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries47 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        boolean boolean48 = xYIntervalSeries47.getNotify();
        int int49 = xYIntervalSeries47.getItemCount();
        boolean boolean50 = xYIntervalSeries47.getAutoSort();
        xYIntervalSeries47.fireSeriesChanged();
        xYIntervalSeries21.firePropertyChange("", obj43, (java.lang.Object) xYIntervalSeries47);
        java.lang.Object obj53 = xYIntervalSeries21.clone();
        xYIntervalSeriesCollection8.removeSeries(xYIntervalSeries21);
        // The following exception was thrown during execution in test generation
        try {
            double double57 = xYIntervalSeriesCollection8.getYValue((int) (byte) 10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(number12);
        org.junit.Assert.assertNull(range16);
        org.junit.Assert.assertNull(xYDatasetSelectionState17);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 100.0d + "'", double42 == 100.0d);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(obj53);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1123");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState9);
        java.lang.Number number11 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries15 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        java.lang.Object obj17 = null;
        xYIntervalSeries15.firePropertyChange("", obj17, (java.lang.Object) "hi!");
        xYIntervalSeries15.setKey((java.lang.Comparable) (short) 1);
        xYIntervalSeries15.firePropertyChange("", (java.lang.Object) 100L, (java.lang.Object) 100.0f);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries29 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        boolean boolean30 = xYIntervalSeries29.getNotify();
        int int31 = xYIntervalSeries29.getItemCount();
        xYIntervalSeries29.clear();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries36 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries36.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo39 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent40 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo39);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo41 = null;
        seriesChangeEvent40.setSummary(seriesChangeInfo41);
        java.lang.Object obj43 = seriesChangeEvent40.getSource();
        xYIntervalSeries29.notifyListeners(seriesChangeEvent40);
        xYIntervalSeries15.notifyListeners(seriesChangeEvent40);
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries15);
        java.lang.Number number47 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range48 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double51 = xYIntervalSeriesCollection0.getEndYValue((-1), (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(number11);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + obj43 + "' != '" + ' ' + "'", obj43, ' ');
        org.junit.Assert.assertNull(number47);
        org.junit.Assert.assertNull(range48);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1124");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.general.DatasetGroup datasetGroup13 = xYIntervalSeriesCollection0.getGroup();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem20 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int22 = xYIntervalDataItem20.compareTo((java.lang.Object) 1.0f);
        double double23 = xYIntervalDataItem20.getXHighValue();
        org.jfree.data.Range range24 = null;
        org.jfree.data.Range range26 = org.jfree.data.Range.expandToInclude(range24, (double) 100);
        double double28 = range26.constrain((double) '4');
        boolean boolean29 = xYIntervalDataItem20.equals((java.lang.Object) '4');
        org.jfree.data.Range range30 = null;
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range30, (double) 100);
        double double34 = range32.constrain((double) '4');
        int int35 = xYIntervalDataItem20.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray42 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray45 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray48 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray51 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray54 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray57 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray58 = new java.lang.Number[][] { numberArray42, numberArray45, numberArray48, numberArray51, numberArray54, numberArray57 };
        org.jfree.data.category.CategoryDataset categoryDataset59 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray58);
        org.jfree.data.category.CategoryDataset categoryDataset60 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray58);
        int int61 = xYIntervalDataItem20.compareTo((java.lang.Object) categoryDataset60);
        double double62 = xYIntervalDataItem20.getXHighValue();
        int int63 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) double62);
        org.jfree.data.Range range64 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj65 = xYIntervalSeriesCollection0.clone();
        // The following exception was thrown during execution in test generation
        try {
            double double68 = xYIntervalSeriesCollection0.getEndYValue(0, 2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNotNull(datasetGroup13);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(numberArray51);
        org.junit.Assert.assertNotNull(numberArray54);
        org.junit.Assert.assertNotNull(numberArray57);
        org.junit.Assert.assertNotNull(numberArray58);
        org.junit.Assert.assertNotNull(categoryDataset59);
        org.junit.Assert.assertNotNull(categoryDataset60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 100.0d + "'", double62 == 100.0d);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNull(range64);
        org.junit.Assert.assertNotNull(obj65);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1125");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable27 = categoryDataset21.getRowKey((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1126");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21, true);
        boolean boolean29 = range27.contains((double) (byte) 1);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range27, 1.0d, true);
        double double33 = range27.getLength();
        boolean boolean35 = range27.contains(52.0d);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 33.0d + "'", double33 == 33.0d);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1127");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range23 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        org.jfree.data.general.DatasetGroup datasetGroup24 = categoryDataset21.getGroup();
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21);
        int int27 = categoryDataset21.getRowCount();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(datasetGroup24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1128");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.DomainOrder domainOrder13 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener14 = null;
        xYIntervalSeriesCollection0.addChangeListener(datasetChangeListener14);
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNotNull(domainOrder13);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1129");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState9);
        int int12 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) "org.jfree.data.general.SeriesException: hi!1");
        org.jfree.data.Range range14 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = xYIntervalSeriesCollection0.getStartYValue(10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(range14);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1130");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range3 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray24 = new java.lang.Number[][] { numberArray8, numberArray11, numberArray14, numberArray17, numberArray20, numberArray23 };
        org.jfree.data.category.CategoryDataset categoryDataset25 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray24);
        java.util.List list26 = categoryDataset25.getRowKeys();
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset25, false);
        int int30 = categoryDataset25.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.Range range31 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset25);
        org.jfree.data.Range range34 = org.jfree.data.Range.expand(range31, (double) (byte) -1, 200.0d);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries36 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) "");
        boolean boolean37 = xYIntervalSeries36.getAllowDuplicateXValues();
        boolean boolean38 = range34.equals((java.lang.Object) xYIntervalSeries36);
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries36);
        xYIntervalSeries36.setMaximumItemCount((int) 'a');
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNull(range3);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(categoryDataset25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1131");
        java.lang.Number[] numberArray6 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray22 = new java.lang.Number[][] { numberArray6, numberArray9, numberArray12, numberArray15, numberArray18, numberArray21 };
        org.jfree.data.category.CategoryDataset categoryDataset23 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray22);
        org.jfree.data.category.CategoryDataset categoryDataset24 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("NOID", "org.jfree.data.event.SeriesChangeEvent[source= ]", numberArray22);
        org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset24, false);
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset24, 52.0d);
        double double29 = range28.getLowerBound();
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range28, (double) 10);
        double double32 = range28.getUpperBound();
        org.junit.Assert.assertNotNull(numberArray6);
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(categoryDataset23);
        org.junit.Assert.assertNotNull(categoryDataset24);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 46.0d + "'", double29 == 46.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 244.0d + "'", double32 == 244.0d);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1132");
        double[] doubleArray11 = new double[] { 1.0d, (byte) -1, 1.0d };
        double[][] doubleArray12 = new double[][] { doubleArray11 };
        org.jfree.data.category.CategoryDataset categoryDataset13 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "", doubleArray12);
        org.jfree.data.category.CategoryDataset categoryDataset14 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!1", "hi!", doubleArray12);
        org.jfree.data.category.CategoryDataset categoryDataset15 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("Range[100.0,100.0]", "org.jfree.data.event.SeriesChangeEvent[source= ]", doubleArray12);
        org.jfree.data.category.CategoryDataset categoryDataset16 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!1", "hi!", doubleArray12);
        org.jfree.data.pie.PieDataset pieDataset18 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset16, 1);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection19 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset21 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo22 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent23 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset21, datasetChangeInfo22);
        xYIntervalSeriesCollection19.notifyListeners(datasetChangeEvent23);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState25 = xYIntervalSeriesCollection19.getSelectionState();
        org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection19);
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection19, false);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem35 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int37 = xYIntervalDataItem35.compareTo((java.lang.Object) 1.0f);
        double double38 = xYIntervalDataItem35.getXHighValue();
        org.jfree.data.Range range39 = null;
        org.jfree.data.Range range41 = org.jfree.data.Range.expandToInclude(range39, (double) 100);
        double double43 = range41.constrain((double) '4');
        boolean boolean44 = xYIntervalDataItem35.equals((java.lang.Object) '4');
        org.jfree.data.Range range45 = null;
        org.jfree.data.Range range47 = org.jfree.data.Range.expandToInclude(range45, (double) 100);
        double double49 = range47.constrain((double) '4');
        int int50 = xYIntervalDataItem35.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray57 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray60 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray63 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray66 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray69 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray72 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray73 = new java.lang.Number[][] { numberArray57, numberArray60, numberArray63, numberArray66, numberArray69, numberArray72 };
        org.jfree.data.category.CategoryDataset categoryDataset74 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray73);
        org.jfree.data.category.CategoryDataset categoryDataset75 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray73);
        int int76 = xYIntervalDataItem35.compareTo((java.lang.Object) categoryDataset75);
        java.lang.Object obj77 = xYIntervalDataItem35.clone();
        int int78 = xYIntervalSeriesCollection19.indexOf((java.lang.Comparable) xYIntervalDataItem35);
        int int79 = categoryDataset16.getRowIndex((java.lang.Comparable) xYIntervalDataItem35);
        org.jfree.data.Range range80 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset16);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset82 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset16, (java.lang.Comparable) 101.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(categoryDataset13);
        org.junit.Assert.assertNotNull(categoryDataset14);
        org.junit.Assert.assertNotNull(categoryDataset15);
        org.junit.Assert.assertNotNull(categoryDataset16);
        org.junit.Assert.assertNotNull(pieDataset18);
        org.junit.Assert.assertNull(xYDatasetSelectionState25);
        org.junit.Assert.assertNull(range26);
        org.junit.Assert.assertNull(range28);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 100.0d + "'", double43 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(numberArray57);
        org.junit.Assert.assertNotNull(numberArray60);
        org.junit.Assert.assertNotNull(numberArray63);
        org.junit.Assert.assertNotNull(numberArray66);
        org.junit.Assert.assertNotNull(numberArray69);
        org.junit.Assert.assertNotNull(numberArray72);
        org.junit.Assert.assertNotNull(numberArray73);
        org.junit.Assert.assertNotNull(categoryDataset74);
        org.junit.Assert.assertNotNull(categoryDataset75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(range80);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1133");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        java.lang.Number number33 = org.jfree.data.general.DatasetUtilities.findMaximumStackedRangeValue(categoryDataset22);
        java.lang.Number number34 = org.jfree.data.general.DatasetUtilities.findMaximumStackedRangeValue(categoryDataset22);
        org.jfree.data.Range range36 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset22, true);
        java.lang.Number number37 = org.jfree.data.general.DatasetUtilities.findMinimumStackedRangeValue(categoryDataset22);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset39 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset22, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertEquals("'" + number33 + "' != '" + 192.0d + "'", number33, 192.0d);
        org.junit.Assert.assertEquals("'" + number34 + "' != '" + 192.0d + "'", number34, 192.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertEquals("'" + number37 + "' != '" + (-6.0d) + "'", number37, (-6.0d));
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1134");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState24 = pieDataset23.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset28 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset23, (java.lang.Comparable) 'a', (double) 10.0f, (int) (short) 10);
        java.util.List list29 = pieDataset28.getKeys();
        org.jfree.data.pie.PieDataset pieDataset33 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset28, (java.lang.Comparable) '4', (double) (byte) 0, (-1));
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState34 = pieDataset28.getSelectionState();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState24);
        org.junit.Assert.assertNotNull(pieDataset28);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(pieDataset33);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState34);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1135");
        java.lang.Number[] numberArray6 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray22 = new java.lang.Number[][] { numberArray6, numberArray9, numberArray12, numberArray15, numberArray18, numberArray21 };
        org.jfree.data.category.CategoryDataset categoryDataset23 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray22);
        org.jfree.data.category.CategoryDataset categoryDataset24 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("NOID", "org.jfree.data.event.SeriesChangeEvent[source= ]", numberArray22);
        org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset24, false);
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset24, 52.0d);
        double double29 = range28.getLowerBound();
        java.lang.String str30 = range28.toString();
        org.junit.Assert.assertNotNull(numberArray6);
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(categoryDataset23);
        org.junit.Assert.assertNotNull(categoryDataset24);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 46.0d + "'", double29 == 46.0d);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Range[46.0,244.0]" + "'", str30, "Range[46.0,244.0]");
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1136");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray24 = new java.lang.Number[][] { numberArray8, numberArray11, numberArray14, numberArray17, numberArray20, numberArray23 };
        org.jfree.data.category.CategoryDataset categoryDataset25 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray24);
        java.util.List list26 = categoryDataset25.getRowKeys();
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset25, false);
        int int30 = categoryDataset25.getColumnIndex((java.lang.Comparable) (-1L));
        boolean boolean31 = xYIntervalSeriesCollection0.equals((java.lang.Object) categoryDataset25);
        org.jfree.data.Range range32 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number35 = xYIntervalSeriesCollection0.getX((int) '4', 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(categoryDataset25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(range32);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1137");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener34 = null;
        categoryDataset22.removeChangeListener(datasetChangeListener34);
        java.util.List list36 = categoryDataset22.getColumnKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable38 = categoryDataset22.getRowKey((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(list36);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1138");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState7 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState7);
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray29 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray30 = new java.lang.Number[][] { numberArray14, numberArray17, numberArray20, numberArray23, numberArray26, numberArray29 };
        org.jfree.data.category.CategoryDataset categoryDataset31 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray30);
        java.util.List list32 = categoryDataset31.getRowKeys();
        org.jfree.data.Range range34 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset31, false);
        int int36 = categoryDataset31.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset38 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo39 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent40 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset38, datasetChangeInfo39);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent41 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset31, datasetChangeInfo39);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem48 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int50 = xYIntervalDataItem48.compareTo((java.lang.Object) 1.0f);
        int int51 = categoryDataset31.getColumnIndex((java.lang.Comparable) xYIntervalDataItem48);
        double double52 = xYIntervalDataItem48.getXLowValue();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection53 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder54 = xYIntervalSeriesCollection53.getDomainOrder();
        org.jfree.data.ComparableObjectItem comparableObjectItem55 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable) xYIntervalDataItem48, (java.lang.Object) domainOrder54);
        int int56 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) comparableObjectItem55);
        org.jfree.data.Range range57 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj58 = xYIntervalSeriesCollection0.clone();
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(numberArray30);
        org.junit.Assert.assertNotNull(categoryDataset31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertNotNull(domainOrder54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNull(range57);
        org.junit.Assert.assertNotNull(obj58);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1139");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range3 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.DomainOrder domainOrder4 = xYIntervalSeriesCollection0.getDomainOrder();
        java.lang.Number number5 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number8 = xYIntervalSeriesCollection0.getStartY((-1), 32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNull(range3);
        org.junit.Assert.assertNotNull(domainOrder4);
        org.junit.Assert.assertNull(number5);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1140");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.general.DatasetGroup datasetGroup13 = xYIntervalSeriesCollection0.getGroup();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem20 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int22 = xYIntervalDataItem20.compareTo((java.lang.Object) 1.0f);
        double double23 = xYIntervalDataItem20.getXHighValue();
        org.jfree.data.Range range24 = null;
        org.jfree.data.Range range26 = org.jfree.data.Range.expandToInclude(range24, (double) 100);
        double double28 = range26.constrain((double) '4');
        boolean boolean29 = xYIntervalDataItem20.equals((java.lang.Object) '4');
        org.jfree.data.Range range30 = null;
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range30, (double) 100);
        double double34 = range32.constrain((double) '4');
        int int35 = xYIntervalDataItem20.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray42 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray45 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray48 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray51 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray54 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray57 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray58 = new java.lang.Number[][] { numberArray42, numberArray45, numberArray48, numberArray51, numberArray54, numberArray57 };
        org.jfree.data.category.CategoryDataset categoryDataset59 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray58);
        org.jfree.data.category.CategoryDataset categoryDataset60 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray58);
        int int61 = xYIntervalDataItem20.compareTo((java.lang.Object) categoryDataset60);
        double double62 = xYIntervalDataItem20.getXHighValue();
        int int63 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) double62);
        java.lang.Number number64 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number67 = xYIntervalSeriesCollection0.getY((int) (byte) 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNotNull(datasetGroup13);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(numberArray51);
        org.junit.Assert.assertNotNull(numberArray54);
        org.junit.Assert.assertNotNull(numberArray57);
        org.junit.Assert.assertNotNull(numberArray58);
        org.junit.Assert.assertNotNull(categoryDataset59);
        org.junit.Assert.assertNotNull(categoryDataset60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 100.0d + "'", double62 == 100.0d);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNull(number64);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1141");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent13 = null;
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent13);
        xYIntervalSeriesCollection0.validateObject();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable17 = xYIntervalSeriesCollection0.getSeriesKey(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1142");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        org.jfree.data.pie.PieDataset pieDataset27 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset23, (java.lang.Comparable) 1, 35.0d, (int) '4');
        int int29 = pieDataset27.getIndex((java.lang.Comparable) false);
        java.lang.Number number31 = pieDataset27.getValue(0);
        java.util.List list32 = pieDataset27.getKeys();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertNotNull(pieDataset27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertEquals("'" + number31 + "' != '" + (short) -1 + "'", number31, (short) -1);
        org.junit.Assert.assertNotNull(list32);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1143");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection8 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection8.getDomainOrder();
        int int10 = xYIntervalSeriesCollection8.getSeriesCount();
        boolean boolean11 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection8);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        xYIntervalSeriesCollection8.validateObject();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener14 = null;
        xYIntervalSeriesCollection8.addChangeListener(datasetChangeListener14);
        org.jfree.data.Range range16 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        org.jfree.data.DomainOrder domainOrder17 = xYIntervalSeriesCollection8.getDomainOrder();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = xYIntervalSeriesCollection8.getEndYValue((int) '4', 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(number12);
        org.junit.Assert.assertNull(range16);
        org.junit.Assert.assertNotNull(domainOrder17);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1144");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range3 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.DomainOrder domainOrder4 = xYIntervalSeriesCollection0.getDomainOrder();
        java.lang.Number number5 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range6 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNull(range3);
        org.junit.Assert.assertNotNull(domainOrder4);
        org.junit.Assert.assertNull(number5);
        org.junit.Assert.assertNull(range6);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1145");
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray22 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray25 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray26 = new java.lang.Number[][] { numberArray10, numberArray13, numberArray16, numberArray19, numberArray22, numberArray25 };
        org.jfree.data.category.CategoryDataset categoryDataset27 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray26);
        org.jfree.data.category.CategoryDataset categoryDataset28 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray26);
        org.jfree.data.category.CategoryDataset categoryDataset29 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "org.jfree.data.event.SeriesChangeEvent[source= ]", numberArray26);
        org.jfree.data.category.CategoryDataset categoryDataset30 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("1", "hi!", numberArray26);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem37 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int39 = xYIntervalDataItem37.compareTo((java.lang.Object) 1.0f);
        double double40 = xYIntervalDataItem37.getXHighValue();
        double double41 = xYIntervalDataItem37.getYLowValue();
        double double42 = xYIntervalDataItem37.getXLowValue();
        java.lang.Comparable comparable43 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number44 = categoryDataset30.getValue((java.lang.Comparable) double42, comparable43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'columnKey' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(numberArray25);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(categoryDataset27);
        org.junit.Assert.assertNotNull(categoryDataset28);
        org.junit.Assert.assertNotNull(categoryDataset29);
        org.junit.Assert.assertNotNull(categoryDataset30);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1146");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range3 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        xYIntervalSeriesCollection0.validateObject();
        xYIntervalSeriesCollection0.validateObject();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = xYIntervalSeriesCollection0.getStartXValue((int) 'a', (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNull(range3);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1147");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo10 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection0.fireDatasetChanged(datasetChangeInfo10);
        xYIntervalSeriesCollection0.removeAllSeries();
        org.jfree.data.DomainOrder domainOrder13 = xYIntervalSeriesCollection0.getDomainOrder();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number16 = xYIntervalSeriesCollection0.getY((int) (byte) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNotNull(domainOrder13);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1148");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        int int26 = categoryDataset21.getRowIndex((java.lang.Comparable) "org.jfree.data.general.SeriesException: ");
        java.lang.Number number27 = org.jfree.data.general.DatasetUtilities.findMinimumStackedRangeValue(categoryDataset21);
        int int28 = categoryDataset21.getColumnCount();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener29 = null;
        categoryDataset21.removeChangeListener(datasetChangeListener29);
        org.jfree.data.pie.PieDataset pieDataset32 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset21, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable34 = categoryDataset21.getColumnKey((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertEquals("'" + number27 + "' != '" + (-6.0d) + "'", number27, (-6.0d));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(pieDataset32);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1149");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        double double10 = xYIntervalDataItem6.getYLowValue();
        double double11 = xYIntervalDataItem6.getXLowValue();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem18 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int20 = xYIntervalDataItem18.compareTo((java.lang.Object) 1.0f);
        double double21 = xYIntervalDataItem18.getXHighValue();
        double double22 = xYIntervalDataItem18.getXLowValue();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem29 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1), 0.0d, (double) (byte) 10, 0.0d, 10.0d, (double) (short) -1);
        java.lang.Comparable[] comparableArray30 = new java.lang.Comparable[] { double11, xYIntervalDataItem18, (byte) 10 };
        java.lang.Comparable[] comparableArray31 = null;
        double[] doubleArray37 = new double[] { 1.0d, (byte) -1, 1.0d };
        double[][] doubleArray38 = new double[][] { doubleArray37 };
        org.jfree.data.category.CategoryDataset categoryDataset39 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "", doubleArray38);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.category.CategoryDataset categoryDataset40 = org.jfree.data.general.DatasetUtilities.createCategoryDataset(comparableArray30, comparableArray31, doubleArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'columnKeys' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(comparableArray30);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(categoryDataset39);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1150");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray24 = new java.lang.Number[][] { numberArray8, numberArray11, numberArray14, numberArray17, numberArray20, numberArray23 };
        org.jfree.data.category.CategoryDataset categoryDataset25 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray24);
        java.util.List list26 = categoryDataset25.getRowKeys();
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset25, false);
        int int30 = categoryDataset25.getColumnIndex((java.lang.Comparable) (-1L));
        boolean boolean31 = xYIntervalSeriesCollection0.equals((java.lang.Object) categoryDataset25);
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener34 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener34);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem42 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int44 = xYIntervalDataItem42.compareTo((java.lang.Object) 1.0f);
        double double45 = xYIntervalDataItem42.getXHighValue();
        double double46 = xYIntervalDataItem42.getYValue();
        double double47 = xYIntervalDataItem42.getXHighValue();
        int int48 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) double47);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number51 = xYIntervalSeriesCollection0.getY((int) (short) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(categoryDataset25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(range33);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1151");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener48 = null;
        categoryDataset46.removeChangeListener(datasetChangeListener48);
        int int50 = categoryDataset46.getColumnCount();
        org.jfree.data.Range range51 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset46);
        java.lang.Number number52 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset46);
        java.lang.Comparable comparable53 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int54 = categoryDataset46.getRowIndex(comparable53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'key' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertEquals("'" + number52 + "' != '" + (-1.0d) + "'", number52, (-1.0d));
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1152");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener34 = null;
        categoryDataset22.addChangeListener(datasetChangeListener34);
        org.jfree.data.pie.PieDataset pieDataset37 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset22, 0);
        java.util.List list38 = categoryDataset22.getColumnKeys();
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(pieDataset37);
        org.junit.Assert.assertNotNull(list38);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1153");
        org.jfree.data.xy.XYInterval xYInterval5 = new org.jfree.data.xy.XYInterval((-6.0d), (double) 10, 67.0d, (double) (short) 100, 67.0d);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem12 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int14 = xYIntervalDataItem12.compareTo((java.lang.Object) 1.0f);
        double double15 = xYIntervalDataItem12.getXHighValue();
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        boolean boolean21 = xYIntervalDataItem12.equals((java.lang.Object) '4');
        org.jfree.data.Range range22 = null;
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range22, (double) 100);
        double double26 = range24.constrain((double) '4');
        int int27 = xYIntervalDataItem12.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray46 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray49 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray50 = new java.lang.Number[][] { numberArray34, numberArray37, numberArray40, numberArray43, numberArray46, numberArray49 };
        org.jfree.data.category.CategoryDataset categoryDataset51 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray50);
        org.jfree.data.category.CategoryDataset categoryDataset52 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray50);
        int int53 = xYIntervalDataItem12.compareTo((java.lang.Object) categoryDataset52);
        boolean boolean54 = xYInterval5.equals((java.lang.Object) categoryDataset52);
        double double55 = xYInterval5.getYLow();
        double double56 = xYInterval5.getXHigh();
        double double57 = xYInterval5.getXLow();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray46);
        org.junit.Assert.assertNotNull(numberArray49);
        org.junit.Assert.assertNotNull(numberArray50);
        org.junit.Assert.assertNotNull(categoryDataset51);
        org.junit.Assert.assertNotNull(categoryDataset52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 100.0d + "'", double55 == 100.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 10.0d + "'", double56 == 10.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-6.0d) + "'", double57 == (-6.0d));
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1154");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1155");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        int int24 = categoryDataset21.getRowCount();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(range25);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1156");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener48 = null;
        categoryDataset46.removeChangeListener(datasetChangeListener48);
        java.util.List list50 = categoryDataset46.getColumnKeys();
        org.jfree.data.Range range52 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset46, false);
        java.lang.Number number53 = org.jfree.data.general.DatasetUtilities.findMinimumStackedRangeValue(categoryDataset46);
        org.jfree.data.Range range54 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset46);
        double double55 = range54.getCentralValue();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(list50);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertEquals("'" + number53 + "' != '" + (-6.0d) + "'", number53, (-6.0d));
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 93.0d + "'", double55 == 93.0d);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1157");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range10 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj11 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.Range range12 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = xYIntervalSeriesCollection0.getEndYValue(32, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(range10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNull(range12);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1158");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range10 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number13 = xYIntervalSeriesCollection0.getStartY((-1), 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(range10);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1159");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries12 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 32.0d);
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries12);
        boolean boolean14 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Number number15 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range16 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(number15);
        org.junit.Assert.assertNull(range16);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1160");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj8 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.Range range9 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        xYIntervalSeriesCollection0.validateObject();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number13 = xYIntervalSeriesCollection0.getEndX((int) ' ', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNull(range9);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1161");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener34 = null;
        categoryDataset22.removeChangeListener(datasetChangeListener34);
        int int36 = categoryDataset22.getRowCount();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem43 = new org.jfree.data.xy.XYIntervalDataItem((double) 1, 93.0d, 0.0d, 67.0d, (double) 2, (-1.0d));
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries47 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        java.lang.Object obj49 = null;
        xYIntervalSeries47.firePropertyChange("", obj49, (java.lang.Object) "hi!");
        xYIntervalSeries47.setKey((java.lang.Comparable) (short) 1);
        xYIntervalSeries47.add((double) 100, (double) 0, (double) (byte) -1, (double) (short) -1, (double) 100, (double) 0);
        java.lang.String str61 = xYIntervalSeries47.getDescription();
        xYIntervalSeries47.setDescription("org.jfree.data.event.SeriesChangeEvent[source= ]");
        boolean boolean64 = xYIntervalDataItem43.equals((java.lang.Object) xYIntervalSeries47);
        int int65 = categoryDataset22.getColumnIndex((java.lang.Comparable) boolean64);
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 6 + "'", int36 == 6);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1162");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.lang.Number number25 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset21);
        double double27 = range26.getCentralValue();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertEquals("'" + number25 + "' != '" + (-1.0d) + "'", number25, (-1.0d));
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 15.0d + "'", double27 == 15.0d);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1163");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        int int26 = categoryDataset21.getRowIndex((java.lang.Comparable) "org.jfree.data.general.SeriesException: ");
        java.lang.Number number27 = org.jfree.data.general.DatasetUtilities.findMinimumStackedRangeValue(categoryDataset21);
        int int28 = categoryDataset21.getColumnCount();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener29 = null;
        categoryDataset21.removeChangeListener(datasetChangeListener29);
        org.jfree.data.pie.PieDataset pieDataset32 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset21, 0);
        org.jfree.data.Range range34 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertEquals("'" + number27 + "' != '" + (-6.0d) + "'", number27, (-6.0d));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(pieDataset32);
        org.junit.Assert.assertNotNull(range34);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1164");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener9 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries14 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries14.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo17 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent18 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo17);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo19 = null;
        seriesChangeEvent18.setSummary(seriesChangeInfo19);
        java.lang.Object obj21 = seriesChangeEvent18.getSource();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent18);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection23 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset25 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo26 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent27 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset25, datasetChangeInfo26);
        xYIntervalSeriesCollection23.notifyListeners(datasetChangeEvent27);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState29 = xYIntervalSeriesCollection23.getSelectionState();
        org.jfree.data.Range range30 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection23);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection31 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder32 = xYIntervalSeriesCollection31.getDomainOrder();
        int int33 = xYIntervalSeriesCollection31.getSeriesCount();
        boolean boolean34 = xYIntervalSeriesCollection23.hasListener((java.util.EventListener) xYIntervalSeriesCollection31);
        xYIntervalSeriesCollection31.validateObject();
        org.jfree.data.general.Dataset dataset37 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo38 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent39 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset37, datasetChangeInfo38);
        org.jfree.data.general.Dataset dataset40 = datasetChangeEvent39.getDataset();
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo41 = datasetChangeEvent39.getInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent42 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) xYIntervalSeriesCollection0, (org.jfree.data.general.Dataset) xYIntervalSeriesCollection31, datasetChangeInfo41);
        // The following exception was thrown during execution in test generation
        try {
            double double45 = xYIntervalSeriesCollection31.getYValue((int) (byte) -1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + ' ' + "'", obj21, ' ');
        org.junit.Assert.assertNull(xYDatasetSelectionState29);
        org.junit.Assert.assertNull(range30);
        org.junit.Assert.assertNotNull(domainOrder32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(dataset40);
        org.junit.Assert.assertNotNull(datasetChangeInfo41);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1165");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range4 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener5 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener5);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = xYIntervalSeriesCollection0.getYValue(10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNull(range4);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1166");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener9 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries14 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries14.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo17 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent18 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo17);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo19 = null;
        seriesChangeEvent18.setSummary(seriesChangeInfo19);
        java.lang.Object obj21 = seriesChangeEvent18.getSource();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent18);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection23 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset25 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo26 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent27 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset25, datasetChangeInfo26);
        xYIntervalSeriesCollection23.notifyListeners(datasetChangeEvent27);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState29 = xYIntervalSeriesCollection23.getSelectionState();
        org.jfree.data.Range range30 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection23);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection31 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder32 = xYIntervalSeriesCollection31.getDomainOrder();
        int int33 = xYIntervalSeriesCollection31.getSeriesCount();
        boolean boolean34 = xYIntervalSeriesCollection23.hasListener((java.util.EventListener) xYIntervalSeriesCollection31);
        xYIntervalSeriesCollection31.validateObject();
        org.jfree.data.general.Dataset dataset37 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo38 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent39 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset37, datasetChangeInfo38);
        org.jfree.data.general.Dataset dataset40 = datasetChangeEvent39.getDataset();
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo41 = datasetChangeEvent39.getInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent42 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) xYIntervalSeriesCollection0, (org.jfree.data.general.Dataset) xYIntervalSeriesCollection31, datasetChangeInfo41);
        java.lang.Number[] numberArray47 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray50 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray53 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray56 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray59 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray62 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray63 = new java.lang.Number[][] { numberArray47, numberArray50, numberArray53, numberArray56, numberArray59, numberArray62 };
        org.jfree.data.category.CategoryDataset categoryDataset64 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray63);
        org.jfree.data.pie.PieDataset pieDataset66 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset64, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState67 = pieDataset66.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset71 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset66, (java.lang.Comparable) 'a', (double) 10.0f, (int) (short) 10);
        java.lang.Number number73 = pieDataset71.getValue((int) (short) 100);
        org.jfree.data.pie.PieDataset pieDataset76 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset71, (java.lang.Comparable) 'a', (double) 100L);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener77 = null;
        pieDataset71.removeChangeListener(datasetChangeListener77);
        java.util.List list79 = pieDataset71.getKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range81 = org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection31, list79, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + ' ' + "'", obj21, ' ');
        org.junit.Assert.assertNull(xYDatasetSelectionState29);
        org.junit.Assert.assertNull(range30);
        org.junit.Assert.assertNotNull(domainOrder32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(dataset40);
        org.junit.Assert.assertNotNull(datasetChangeInfo41);
        org.junit.Assert.assertNotNull(numberArray47);
        org.junit.Assert.assertNotNull(numberArray50);
        org.junit.Assert.assertNotNull(numberArray53);
        org.junit.Assert.assertNotNull(numberArray56);
        org.junit.Assert.assertNotNull(numberArray59);
        org.junit.Assert.assertNotNull(numberArray62);
        org.junit.Assert.assertNotNull(numberArray63);
        org.junit.Assert.assertNotNull(categoryDataset64);
        org.junit.Assert.assertNotNull(pieDataset66);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState67);
        org.junit.Assert.assertNotNull(pieDataset71);
        org.junit.Assert.assertNull(number73);
        org.junit.Assert.assertNotNull(pieDataset76);
        org.junit.Assert.assertNotNull(list79);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1167");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range4 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener5 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener5);
        java.lang.Object obj7 = xYIntervalSeriesCollection0.clone();
        java.lang.Number number8 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj9 = xYIntervalSeriesCollection0.clone();
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNull(range4);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNull(number8);
        org.junit.Assert.assertNotNull(obj9);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1168");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        java.lang.Object obj48 = xYIntervalDataItem6.clone();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection49 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset51 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo52 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent53 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset51, datasetChangeInfo52);
        xYIntervalSeriesCollection49.notifyListeners(datasetChangeEvent53);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries58 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries58.setMaximumItemCount((int) ' ');
        org.jfree.data.Range range62 = null;
        org.jfree.data.Range range64 = org.jfree.data.Range.expandToInclude(range62, (double) 100);
        double double66 = range64.constrain((double) '4');
        double double67 = range64.getLength();
        org.jfree.data.Range range68 = null;
        org.jfree.data.Range range70 = org.jfree.data.Range.expandToInclude(range68, (double) 100);
        double double72 = range70.constrain((double) '4');
        boolean boolean73 = range64.intersects(range70);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries77 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries77.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo80 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent81 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo80);
        xYIntervalSeries58.firePropertyChange("", (java.lang.Object) boolean73, (java.lang.Object) ' ');
        xYIntervalSeriesCollection49.removeSeries(xYIntervalSeries58);
        xYIntervalSeries58.fireSeriesChanged();
        int int85 = xYIntervalDataItem6.compareTo((java.lang.Object) xYIntervalSeries58);
        double double86 = xYIntervalDataItem6.getXHighValue();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 100.0d + "'", double66 == 100.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(range70);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 100.0d + "'", double72 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 100.0d + "'", double86 == 100.0d);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1169");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range14 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = xYIntervalSeriesCollection0.getEndYValue(32, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNull(range14);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1170");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        org.jfree.data.pie.PieDataset pieDataset27 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset23, (java.lang.Comparable) 1, 35.0d, (int) '4');
        java.lang.Comparable comparable29 = pieDataset23.getKey((int) (short) 0);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem36 = new org.jfree.data.xy.XYIntervalDataItem((double) 0.0f, 100.0d, (double) 1, 1.0d, 1.0d, (double) 10L);
        org.jfree.data.pie.PieDataset pieDataset38 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset23, (java.lang.Comparable) 10L, 15.0d);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertNotNull(pieDataset27);
        org.junit.Assert.assertEquals("'" + comparable29 + "' != '" + "1" + "'", comparable29, "1");
        org.junit.Assert.assertNotNull(pieDataset38);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1171");
        org.jfree.data.general.DatasetGroup datasetGroup0 = new org.jfree.data.general.DatasetGroup();
        java.lang.String str1 = datasetGroup0.getID();
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray22 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray23 = new java.lang.Number[][] { numberArray7, numberArray10, numberArray13, numberArray16, numberArray19, numberArray22 };
        org.jfree.data.category.CategoryDataset categoryDataset24 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray23);
        java.util.List list25 = categoryDataset24.getRowKeys();
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset24, false);
        int int29 = categoryDataset24.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset31 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo32 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent33 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset31, datasetChangeInfo32);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent34 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset24, datasetChangeInfo32);
        org.jfree.data.Range range35 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset24);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener36 = null;
        categoryDataset24.removeChangeListener(datasetChangeListener36);
        java.util.List list38 = categoryDataset24.getColumnKeys();
        org.jfree.data.Range range40 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset24, true);
        boolean boolean41 = datasetGroup0.equals((java.lang.Object) categoryDataset24);
        java.lang.Comparable comparable43 = categoryDataset24.getColumnKey(0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NOID" + "'", str1, "NOID");
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(categoryDataset24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + comparable43 + "' != '" + "1" + "'", comparable43, "1");
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1172");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        java.lang.Object obj10 = xYIntervalDataItem6.clone();
        boolean boolean12 = xYIntervalDataItem6.equals((java.lang.Object) 0);
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray29 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray32 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray33 = new java.lang.Number[][] { numberArray17, numberArray20, numberArray23, numberArray26, numberArray29, numberArray32 };
        org.jfree.data.category.CategoryDataset categoryDataset34 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray33);
        org.jfree.data.pie.PieDataset pieDataset36 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset34, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState37 = pieDataset36.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset41 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset36, (java.lang.Comparable) (short) 0, (double) (short) 100, (int) ' ');
        org.jfree.data.category.CategoryDataset categoryDataset42 = org.jfree.data.general.DatasetUtilities.createCategoryDataset((java.lang.Comparable) xYIntervalDataItem6, (org.jfree.data.KeyedValues) pieDataset41);
        int int44 = pieDataset41.getIndex((java.lang.Comparable) 100L);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem51 = new org.jfree.data.xy.XYIntervalDataItem(100.0d, (double) (byte) 1, (double) (byte) 1, 0.0d, 0.0d, 33.0d);
        int int52 = pieDataset41.getIndex((java.lang.Comparable) xYIntervalDataItem51);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState53 = pieDataset41.getSelectionState();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number55 = pieDataset41.getValue((java.lang.Comparable) ' ');
            org.junit.Assert.fail("Expected exception of type org.jfree.data.UnknownKeyException; message: The key ( ) is not recognised.");
        } catch (org.jfree.data.UnknownKeyException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(numberArray33);
        org.junit.Assert.assertNotNull(categoryDataset34);
        org.junit.Assert.assertNotNull(pieDataset36);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState37);
        org.junit.Assert.assertNotNull(pieDataset41);
        org.junit.Assert.assertNotNull(categoryDataset42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(pieDatasetSelectionState53);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1173");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries9 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries9.setMaximumItemCount((int) ' ');
        org.jfree.data.Range range13 = null;
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range13, (double) 100);
        double double17 = range15.constrain((double) '4');
        double double18 = range15.getLength();
        org.jfree.data.Range range19 = null;
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range19, (double) 100);
        double double23 = range21.constrain((double) '4');
        boolean boolean24 = range15.intersects(range21);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries28 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries28.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo31 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent32 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo31);
        xYIntervalSeries9.firePropertyChange("", (java.lang.Object) boolean24, (java.lang.Object) ' ');
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries9);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection35 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range37 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection35, true);
        java.lang.Object obj38 = xYIntervalSeriesCollection35.clone();
        boolean boolean39 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection35);
        // The following exception was thrown during execution in test generation
        try {
            double double42 = xYIntervalSeriesCollection35.getStartYValue(6, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(range37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1174");
        org.jfree.data.general.DatasetGroup datasetGroup0 = new org.jfree.data.general.DatasetGroup();
        java.lang.String str1 = datasetGroup0.getID();
        java.lang.Number[] numberArray6 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray22 = new java.lang.Number[][] { numberArray6, numberArray9, numberArray12, numberArray15, numberArray18, numberArray21 };
        org.jfree.data.category.CategoryDataset categoryDataset23 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray22);
        org.jfree.data.pie.PieDataset pieDataset25 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset23, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState26 = pieDataset25.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset30 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset25, (java.lang.Comparable) 'a', (double) 10.0f, (int) (short) 10);
        java.util.List list31 = pieDataset30.getKeys();
        int int33 = pieDataset30.getIndex((java.lang.Comparable) (byte) 1);
        boolean boolean34 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(pieDataset30);
        boolean boolean35 = datasetGroup0.equals((java.lang.Object) pieDataset30);
        java.util.List list36 = pieDataset30.getKeys();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NOID" + "'", str1, "NOID");
        org.junit.Assert.assertNotNull(numberArray6);
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(categoryDataset23);
        org.junit.Assert.assertNotNull(pieDataset25);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState26);
        org.junit.Assert.assertNotNull(pieDataset30);
        org.junit.Assert.assertNotNull(list31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(list36);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1175");
        org.jfree.data.xy.TableXYDataset tableXYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(tableXYDataset0, 50.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1176");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        int int4 = xYIntervalSeriesCollection0.getSeriesCount();
        int int6 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 100.0d);
        org.jfree.data.DomainOrder domainOrder7 = xYIntervalSeriesCollection0.getDomainOrder();
        java.lang.Number number8 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number11 = xYIntervalSeriesCollection0.getEndX((int) (short) 100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(domainOrder7);
        org.junit.Assert.assertNull(number8);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1177");
        org.jfree.data.function.Function2D function2D0 = null;
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        org.jfree.data.Range range14 = null;
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range14, (double) 100);
        double double18 = range16.constrain((double) '4');
        boolean boolean19 = xYIntervalDataItem10.equals((java.lang.Object) '4');
        boolean boolean21 = xYIntervalDataItem10.equals((java.lang.Object) 0.0f);
        java.lang.Object obj22 = xYIntervalDataItem10.clone();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries23 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) xYIntervalDataItem10);
        double double24 = xYIntervalDataItem10.getXHighValue();
        double double25 = xYIntervalDataItem10.getXHighValue();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYDataset xYDataset26 = org.jfree.data.general.DatasetUtilities.sampleFunction2D(function2D0, (double) ' ', (double) '4', (int) '4', (java.lang.Comparable) double25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'f' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1178");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState9);
        java.lang.Number number11 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number14 = xYIntervalSeriesCollection0.getX((int) (byte) 100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(number11);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1179");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        boolean boolean22 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem29 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int31 = xYIntervalDataItem29.compareTo((java.lang.Object) 1.0f);
        double double32 = xYIntervalDataItem29.getXHighValue();
        org.jfree.data.Range range33 = null;
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) 100);
        double double37 = range35.constrain((double) '4');
        boolean boolean38 = xYIntervalDataItem29.equals((java.lang.Object) '4');
        org.jfree.data.Range range39 = null;
        org.jfree.data.Range range41 = org.jfree.data.Range.expandToInclude(range39, (double) 100);
        double double43 = range41.constrain((double) '4');
        int int44 = xYIntervalDataItem29.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray51 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray54 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray57 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray60 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray63 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray66 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray67 = new java.lang.Number[][] { numberArray51, numberArray54, numberArray57, numberArray60, numberArray63, numberArray66 };
        org.jfree.data.category.CategoryDataset categoryDataset68 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray67);
        org.jfree.data.category.CategoryDataset categoryDataset69 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray67);
        int int70 = xYIntervalDataItem29.compareTo((java.lang.Object) categoryDataset69);
        java.util.List list71 = categoryDataset69.getColumnKeys();
        org.jfree.data.Range range73 = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(categoryDataset21, list71, true);
        org.jfree.data.Range range75 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21, false);
        org.jfree.data.Range range76 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 100.0d + "'", double43 == 100.0d);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(numberArray51);
        org.junit.Assert.assertNotNull(numberArray54);
        org.junit.Assert.assertNotNull(numberArray57);
        org.junit.Assert.assertNotNull(numberArray60);
        org.junit.Assert.assertNotNull(numberArray63);
        org.junit.Assert.assertNotNull(numberArray66);
        org.junit.Assert.assertNotNull(numberArray67);
        org.junit.Assert.assertNotNull(categoryDataset68);
        org.junit.Assert.assertNotNull(categoryDataset69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(list71);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertNotNull(range75);
        org.junit.Assert.assertNotNull(range76);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1180");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        int int7 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 100L);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener8 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener8);
        java.lang.Number number10 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(number10);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1181");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection8 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection8.getDomainOrder();
        int int10 = xYIntervalSeriesCollection8.getSeriesCount();
        boolean boolean11 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection8);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        xYIntervalSeriesCollection8.validateObject();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener14 = null;
        xYIntervalSeriesCollection8.addChangeListener(datasetChangeListener14);
        org.jfree.data.Range range16 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState17 = xYIntervalSeriesCollection8.getSelectionState();
        java.lang.Object obj18 = xYIntervalSeriesCollection8.clone();
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(number12);
        org.junit.Assert.assertNull(range16);
        org.junit.Assert.assertNull(xYDatasetSelectionState17);
        org.junit.Assert.assertNotNull(obj18);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1182");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range15 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        java.lang.Number number16 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        int int18 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) (-1L));
        org.jfree.data.xy.XYInterval xYInterval24 = new org.jfree.data.xy.XYInterval(52.0d, (double) 0L, (double) (short) 0, (double) 10L, (double) 1.0f);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem31 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int33 = xYIntervalDataItem31.compareTo((java.lang.Object) 1.0f);
        double double34 = xYIntervalDataItem31.getXHighValue();
        org.jfree.data.Range range35 = null;
        org.jfree.data.Range range37 = org.jfree.data.Range.expandToInclude(range35, (double) 100);
        double double39 = range37.constrain((double) '4');
        boolean boolean40 = xYIntervalDataItem31.equals((java.lang.Object) '4');
        org.jfree.data.Range range41 = null;
        org.jfree.data.Range range43 = org.jfree.data.Range.expandToInclude(range41, (double) 100);
        double double45 = range43.constrain((double) '4');
        int int46 = xYIntervalDataItem31.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray53 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray56 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray59 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray62 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray65 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray68 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray69 = new java.lang.Number[][] { numberArray53, numberArray56, numberArray59, numberArray62, numberArray65, numberArray68 };
        org.jfree.data.category.CategoryDataset categoryDataset70 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray69);
        org.jfree.data.category.CategoryDataset categoryDataset71 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray69);
        int int72 = xYIntervalDataItem31.compareTo((java.lang.Object) categoryDataset71);
        org.jfree.data.general.DatasetGroup datasetGroup73 = categoryDataset71.getGroup();
        boolean boolean74 = xYInterval24.equals((java.lang.Object) datasetGroup73);
        xYIntervalSeriesCollection0.setGroup(datasetGroup73);
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNull(range15);
        org.junit.Assert.assertNull(number16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(numberArray53);
        org.junit.Assert.assertNotNull(numberArray56);
        org.junit.Assert.assertNotNull(numberArray59);
        org.junit.Assert.assertNotNull(numberArray62);
        org.junit.Assert.assertNotNull(numberArray65);
        org.junit.Assert.assertNotNull(numberArray68);
        org.junit.Assert.assertNotNull(numberArray69);
        org.junit.Assert.assertNotNull(categoryDataset70);
        org.junit.Assert.assertNotNull(categoryDataset71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(datasetGroup73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1183");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries12 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 32.0d);
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries12);
        boolean boolean14 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Number number15 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        int int16 = xYIntervalSeriesCollection0.getSeriesCount();
        java.lang.Object obj17 = xYIntervalSeriesCollection0.clone();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = xYIntervalSeriesCollection0.getStartYValue(1, 2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(number15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(obj17);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1184");
        org.jfree.data.function.Function2D function2D0 = null;
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem(31.0d, (double) 1, 0.0d, (double) 1, (double) (-1.0f), (double) 100L);
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray22 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray25 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray32 = new java.lang.Number[][] { numberArray16, numberArray19, numberArray22, numberArray25, numberArray28, numberArray31 };
        org.jfree.data.category.CategoryDataset categoryDataset33 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray32);
        java.util.List list34 = categoryDataset33.getRowKeys();
        org.jfree.data.Range range36 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset33, false);
        int int38 = categoryDataset33.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset40 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo41 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent42 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset40, datasetChangeInfo41);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent43 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset33, datasetChangeInfo41);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem50 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int52 = xYIntervalDataItem50.compareTo((java.lang.Object) 1.0f);
        int int53 = categoryDataset33.getColumnIndex((java.lang.Comparable) xYIntervalDataItem50);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries56 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) xYIntervalDataItem50, false, false);
        int int57 = xYIntervalDataItem10.compareTo((java.lang.Object) false);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYDataset xYDataset58 = org.jfree.data.general.DatasetUtilities.sampleFunction2D(function2D0, 0.0d, (double) (-1.0f), (int) (byte) -1, (java.lang.Comparable) false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'f' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(numberArray25);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(categoryDataset33);
        org.junit.Assert.assertNotNull(list34);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1185");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.general.DatasetGroup datasetGroup2 = xYIntervalSeriesCollection0.getGroup();
        boolean boolean3 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYInterval xYInterval9 = new org.jfree.data.xy.XYInterval(0.0d, (double) 1.0f, (double) (-1), (double) '#', (double) 100L);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries13 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries13.setMaximumItemCount((int) ' ');
        xYIntervalSeries13.setDescription("hi!");
        boolean boolean18 = xYInterval9.equals((java.lang.Object) xYIntervalSeries13);
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number22 = xYIntervalSeriesCollection0.getEndX(10, 2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNotNull(datasetGroup2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1186");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, (double) 100);
        double double4 = range2.constrain((double) '4');
        double double5 = range2.getLength();
        double double6 = range2.getCentralValue();
        boolean boolean9 = range2.intersects((double) 2147483647, (double) (short) 10);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection10 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset12 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo13 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent14 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset12, datasetChangeInfo13);
        xYIntervalSeriesCollection10.notifyListeners(datasetChangeEvent14);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState16 = xYIntervalSeriesCollection10.getSelectionState();
        org.jfree.data.Range range17 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection10);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection18 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset20 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo21 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent22 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset20, datasetChangeInfo21);
        xYIntervalSeriesCollection18.notifyListeners(datasetChangeEvent22);
        org.jfree.data.general.Dataset dataset24 = datasetChangeEvent22.getDataset();
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo25 = datasetChangeEvent22.getInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent26 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) range2, (org.jfree.data.general.Dataset) xYIntervalSeriesCollection10, datasetChangeInfo25);
        int int27 = xYIntervalSeriesCollection10.getSeriesCount();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number30 = xYIntervalSeriesCollection10.getY(3, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 3, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(range2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(xYDatasetSelectionState16);
        org.junit.Assert.assertNull(range17);
        org.junit.Assert.assertNull(dataset24);
        org.junit.Assert.assertNotNull(datasetChangeInfo25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1187");
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries3 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        java.lang.Object obj5 = null;
        xYIntervalSeries3.firePropertyChange("", obj5, (java.lang.Object) "hi!");
        xYIntervalSeries3.setKey((java.lang.Comparable) (short) 1);
        xYIntervalSeries3.firePropertyChange("", (java.lang.Object) 100L, (java.lang.Object) 100.0f);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries17 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        boolean boolean18 = xYIntervalSeries17.getNotify();
        int int19 = xYIntervalSeries17.getItemCount();
        xYIntervalSeries17.clear();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries24 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries24.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo27 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent28 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo27);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo29 = null;
        seriesChangeEvent28.setSummary(seriesChangeInfo29);
        java.lang.Object obj31 = seriesChangeEvent28.getSource();
        xYIntervalSeries17.notifyListeners(seriesChangeEvent28);
        xYIntervalSeries3.notifyListeners(seriesChangeEvent28);
        java.lang.Number[] numberArray39 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray42 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray45 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray48 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray51 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray54 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray55 = new java.lang.Number[][] { numberArray39, numberArray42, numberArray45, numberArray48, numberArray51, numberArray54 };
        org.jfree.data.category.CategoryDataset categoryDataset56 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray55);
        java.util.List list57 = categoryDataset56.getRowKeys();
        org.jfree.data.Range range59 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset56, false);
        int int61 = categoryDataset56.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset63 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo64 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent65 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset63, datasetChangeInfo64);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent66 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset56, datasetChangeInfo64);
        org.jfree.data.Range range67 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset56);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener68 = null;
        categoryDataset56.removeChangeListener(datasetChangeListener68);
        boolean boolean70 = xYIntervalSeries3.equals((java.lang.Object) datasetChangeListener68);
        xYIntervalSeries3.clear();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem78 = new org.jfree.data.xy.XYIntervalDataItem((double) 10L, 102.0d, 0.0d, 0.0d, 0.0d, 93.0d);
        double double79 = xYIntervalDataItem78.getYHighValue();
        int int80 = xYIntervalSeries3.indexOf((java.lang.Comparable) xYIntervalDataItem78);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + obj31 + "' != '" + ' ' + "'", obj31, ' ');
        org.junit.Assert.assertNotNull(numberArray39);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(numberArray51);
        org.junit.Assert.assertNotNull(numberArray54);
        org.junit.Assert.assertNotNull(numberArray55);
        org.junit.Assert.assertNotNull(categoryDataset56);
        org.junit.Assert.assertNotNull(list57);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 93.0d + "'", double79 == 93.0d);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1188");
        org.jfree.data.xy.XYInterval xYInterval5 = new org.jfree.data.xy.XYInterval(52.0d, (double) 0L, (double) (short) 0, (double) 10L, (double) 1.0f);
        double double6 = xYInterval5.getYLow();
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray24 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray27 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray28 = new java.lang.Number[][] { numberArray12, numberArray15, numberArray18, numberArray21, numberArray24, numberArray27 };
        org.jfree.data.category.CategoryDataset categoryDataset29 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray28);
        java.util.List list30 = categoryDataset29.getRowKeys();
        org.jfree.data.Range range32 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset29, false);
        int int34 = categoryDataset29.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset36 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo37 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent38 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset36, datasetChangeInfo37);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent39 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset29, datasetChangeInfo37);
        org.jfree.data.Range range40 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset29);
        boolean boolean41 = xYInterval5.equals((java.lang.Object) range40);
        double double42 = xYInterval5.getXLow();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(numberArray27);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(categoryDataset29);
        org.junit.Assert.assertNotNull(list30);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 52.0d + "'", double42 == 52.0d);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1189");
        double[] doubleArray7 = new double[] { 1.0d, (byte) -1, 1.0d };
        double[][] doubleArray8 = new double[][] { doubleArray7 };
        org.jfree.data.category.CategoryDataset categoryDataset9 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "", doubleArray8);
        org.jfree.data.category.CategoryDataset categoryDataset10 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("org.jfree.data.general.SeriesException: ", "", doubleArray8);
        org.jfree.data.pie.PieDataset pieDataset12 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset10, (int) (byte) 0);
        int int13 = pieDataset12.getItemCount();
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState14 = pieDataset12.getSelectionState();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable16 = pieDataset12.getKey((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(categoryDataset9);
        org.junit.Assert.assertNotNull(categoryDataset10);
        org.junit.Assert.assertNotNull(pieDataset12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState14);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1190");
        org.jfree.data.ComparableObjectSeries comparableObjectSeries3 = new org.jfree.data.ComparableObjectSeries((java.lang.Comparable) 198.0d, false, true);
        org.jfree.data.Range range5 = null;
        org.jfree.data.Range range7 = org.jfree.data.Range.expandToInclude(range5, 52.0d);
        org.jfree.data.Range range8 = null;
        org.jfree.data.Range range10 = org.jfree.data.Range.expandToInclude(range8, (double) 100);
        double double12 = range10.constrain((double) '4');
        double double13 = range10.getLength();
        org.jfree.data.Range range16 = org.jfree.data.Range.shift(range10, (double) 100, false);
        org.jfree.data.Range range17 = null;
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range17, (double) 100);
        double double21 = range19.constrain((double) '4');
        double double22 = range19.getLength();
        org.jfree.data.Range range23 = null;
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range23, (double) 100);
        double double27 = range25.constrain((double) '4');
        boolean boolean28 = range19.intersects(range25);
        boolean boolean29 = range10.intersects(range19);
        org.jfree.data.Range range30 = null;
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range30, (double) 100);
        double double34 = range32.constrain((double) '4');
        double double35 = range32.getLength();
        double double36 = range32.getCentralValue();
        java.lang.Number[] numberArray41 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray44 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray47 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray50 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray53 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray56 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray57 = new java.lang.Number[][] { numberArray41, numberArray44, numberArray47, numberArray50, numberArray53, numberArray56 };
        org.jfree.data.category.CategoryDataset categoryDataset58 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray57);
        java.util.List list59 = categoryDataset58.getRowKeys();
        org.jfree.data.Range range61 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset58, (double) (short) -1);
        java.lang.Number number62 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset58);
        org.jfree.data.Range range63 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset58);
        boolean boolean64 = range32.intersects(range63);
        boolean boolean65 = range10.intersects(range63);
        boolean boolean66 = range7.intersects(range63);
        java.lang.String str67 = range63.toString();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection68 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset70 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo71 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent72 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset70, datasetChangeInfo71);
        xYIntervalSeriesCollection68.notifyListeners(datasetChangeEvent72);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState74 = xYIntervalSeriesCollection68.getSelectionState();
        int int76 = xYIntervalSeriesCollection68.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState77 = null;
        xYIntervalSeriesCollection68.setSelectionState(xYDatasetSelectionState77);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries80 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 32.0d);
        xYIntervalSeriesCollection68.removeSeries(xYIntervalSeries80);
        boolean boolean82 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection68);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection83 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset85 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo86 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent87 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset85, datasetChangeInfo86);
        xYIntervalSeriesCollection83.notifyListeners(datasetChangeEvent87);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState89 = xYIntervalSeriesCollection83.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener90 = null;
        xYIntervalSeriesCollection83.removeChangeListener(datasetChangeListener90);
        java.lang.Number number92 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection83);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo93 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection83.fireDatasetChanged(datasetChangeInfo93);
        xYIntervalSeriesCollection83.removeAllSeries();
        java.lang.Number number96 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection83);
        boolean boolean97 = xYIntervalSeriesCollection68.hasListener((java.util.EventListener) xYIntervalSeriesCollection83);
        java.lang.Number number98 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection83);
        comparableObjectSeries3.firePropertyChange("org.jfree.data.general.SeriesException: hi!1", (java.lang.Object) str67, (java.lang.Object) xYIntervalSeriesCollection83);
        org.junit.Assert.assertNotNull(range7);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertNotNull(numberArray41);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(numberArray47);
        org.junit.Assert.assertNotNull(numberArray50);
        org.junit.Assert.assertNotNull(numberArray53);
        org.junit.Assert.assertNotNull(numberArray56);
        org.junit.Assert.assertNotNull(numberArray57);
        org.junit.Assert.assertNotNull(categoryDataset58);
        org.junit.Assert.assertNotNull(list59);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertEquals("'" + number62 + "' != '" + (-1.0d) + "'", number62, (-1.0d));
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Range[-1.0,31.0]" + "'", str67, "Range[-1.0,31.0]");
        org.junit.Assert.assertNull(xYDatasetSelectionState74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNull(xYDatasetSelectionState89);
        org.junit.Assert.assertNull(number92);
        org.junit.Assert.assertNull(number96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNull(number98);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1191");
        org.jfree.data.xy.XYInterval xYInterval5 = new org.jfree.data.xy.XYInterval(0.0d, (double) 1.0f, (double) (-1), (double) '#', (double) 100L);
        double double6 = xYInterval5.getYHigh();
        boolean boolean8 = xYInterval5.equals((java.lang.Object) 100);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries12 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) (byte) 10, false, false);
        boolean boolean13 = xYInterval5.equals((java.lang.Object) false);
        double double14 = xYInterval5.getXLow();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection15 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder16 = xYIntervalSeriesCollection15.getDomainOrder();
        org.jfree.data.Range range17 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection15);
        xYIntervalSeriesCollection15.removeAllSeries();
        org.jfree.data.xy.XYInterval xYInterval24 = new org.jfree.data.xy.XYInterval((double) (byte) 10, (double) 'a', (double) (-1L), (double) (byte) 100, (double) 100);
        double double25 = xYInterval24.getXLow();
        double double26 = xYInterval24.getXLow();
        boolean boolean27 = xYIntervalSeriesCollection15.equals((java.lang.Object) double26);
        boolean boolean28 = xYInterval5.equals((java.lang.Object) double26);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(domainOrder16);
        org.junit.Assert.assertNull(range17);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1192");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        java.lang.Number number26 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        boolean boolean27 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset21);
        org.jfree.data.Range range29 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21);
        double double30 = range29.getLowerBound();
        boolean boolean32 = range29.contains((-1.0d));
        double double33 = range29.getCentralValue();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertEquals("'" + number26 + "' != '" + (-1.0d) + "'", number26, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 15.5d + "'", double33 == 15.5d);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1193");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        int int4 = xYIntervalSeriesCollection0.getSeriesCount();
        int int6 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 100.0d);
        java.lang.Number number7 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range9 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        int int10 = xYIntervalSeriesCollection0.getSeriesCount();
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(number7);
        org.junit.Assert.assertNull(range9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1194");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range14 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.jfree.data.Range range16 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = xYIntervalSeriesCollection0.getEndXValue((int) (byte) -1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(number12);
        org.junit.Assert.assertNull(range14);
        org.junit.Assert.assertNull(range16);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1195");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection24 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder25 = xYIntervalSeriesCollection24.getDomainOrder();
        org.jfree.data.general.DatasetGroup datasetGroup26 = xYIntervalSeriesCollection24.getGroup();
        java.lang.Object obj27 = null;
        boolean boolean28 = datasetGroup26.equals(obj27);
        pieDataset23.setGroup(datasetGroup26);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem36 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int38 = xYIntervalDataItem36.compareTo((java.lang.Object) 1.0f);
        double double39 = xYIntervalDataItem36.getXHighValue();
        java.lang.Object obj40 = xYIntervalDataItem36.clone();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries44 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        java.lang.Object obj46 = null;
        xYIntervalSeries44.firePropertyChange("", obj46, (java.lang.Object) "hi!");
        xYIntervalSeries44.setKey((java.lang.Comparable) (short) 1);
        xYIntervalSeries44.add((double) 100, (double) 0, (double) (byte) -1, (double) (short) -1, (double) 100, (double) 0);
        boolean boolean58 = xYIntervalDataItem36.equals((java.lang.Object) 100);
        double double59 = xYIntervalDataItem36.getYLowValue();
        org.jfree.data.pie.PieDataset pieDataset61 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset23, (java.lang.Comparable) xYIntervalDataItem36, (double) (byte) 0);
        int int62 = pieDataset61.getItemCount();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertNotNull(domainOrder25);
        org.junit.Assert.assertNotNull(datasetGroup26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
        org.junit.Assert.assertNotNull(pieDataset61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1196");
        org.jfree.data.function.Function2D function2D0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYDataset xYDataset5 = org.jfree.data.general.DatasetUtilities.sampleFunction2D(function2D0, (double) (byte) -1, (double) (short) 100, (int) ' ', (java.lang.Comparable) 244.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'f' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1197");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        int int26 = categoryDataset21.getRowIndex((java.lang.Comparable) "org.jfree.data.general.SeriesException: ");
        java.lang.Number number27 = org.jfree.data.general.DatasetUtilities.findMinimumStackedRangeValue(categoryDataset21);
        int int28 = categoryDataset21.getColumnCount();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener29 = null;
        categoryDataset21.removeChangeListener(datasetChangeListener29);
        java.lang.Number number31 = org.jfree.data.general.DatasetUtilities.findMaximumStackedRangeValue(categoryDataset21);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertEquals("'" + number27 + "' != '" + (-6.0d) + "'", number27, (-6.0d));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertEquals("'" + number31 + "' != '" + 192.0d + "'", number31, 192.0d);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1198");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range15 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range16 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range18 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable20 = xYIntervalSeriesCollection0.getSeriesKey(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNull(range15);
        org.junit.Assert.assertNull(range16);
        org.junit.Assert.assertNull(range18);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1199");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo10 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection0.fireDatasetChanged(datasetChangeInfo10);
        xYIntervalSeriesCollection0.removeAllSeries();
        org.jfree.data.Range range14 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range14);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1200");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries48 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) xYIntervalDataItem6);
        boolean boolean49 = xYIntervalSeries48.getAllowDuplicateXValues();
        // The following exception was thrown during execution in test generation
        try {
            double double51 = xYIntervalSeries48.getXHighValue(32);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1201");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.removeAllSeries();
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.DomainOrder domainOrder14 = xYIntervalSeriesCollection0.getDomainOrder();
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNotNull(domainOrder14);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1202");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range23 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range23, 0.0d);
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range23, 192.0d);
        double double28 = range23.getLowerBound();
        org.jfree.data.Range range31 = org.jfree.data.Range.expand(range23, (double) 10, 244.0d);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-1.0d) + "'", double28 == (-1.0d));
        org.junit.Assert.assertNotNull(range31);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1203");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        int int26 = categoryDataset21.getRowIndex((java.lang.Comparable) "org.jfree.data.general.SeriesException: ");
        int int27 = categoryDataset21.getRowCount();
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21);
        java.lang.Number number31 = categoryDataset21.getValue((int) (byte) 0, (int) (short) 0);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertEquals("'" + number31 + "' != '" + (short) -1 + "'", number31, (short) -1);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1204");
        org.jfree.data.function.Function2D function2D0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYDataset xYDataset5 = org.jfree.data.general.DatasetUtilities.sampleFunction2D(function2D0, 0.0d, 4.0d, (int) (byte) 10, (java.lang.Comparable) "2");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'f' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1205");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        java.util.List list48 = categoryDataset46.getColumnKeys();
        boolean boolean49 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset46);
        int int51 = categoryDataset46.getColumnIndex((java.lang.Comparable) "2");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable53 = categoryDataset46.getColumnKey((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(list48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1206");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        org.jfree.data.pie.PieDataset pieDataset26 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset23, (java.lang.Comparable) 15.5d, (-1.0d));
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem33 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int35 = xYIntervalDataItem33.compareTo((java.lang.Object) 1.0f);
        double double36 = xYIntervalDataItem33.getXHighValue();
        java.lang.Object obj37 = xYIntervalDataItem33.clone();
        boolean boolean39 = xYIntervalDataItem33.equals((java.lang.Object) 0);
        java.lang.Object obj40 = xYIntervalDataItem33.clone();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries41 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) xYIntervalDataItem33);
        org.jfree.data.ComparableObjectSeries comparableObjectSeries42 = new org.jfree.data.ComparableObjectSeries((java.lang.Comparable) xYIntervalDataItem33);
        org.jfree.data.pie.PieDataset pieDataset44 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset23, (java.lang.Comparable) xYIntervalDataItem33, 0.0d);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertNotNull(pieDataset26);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNotNull(pieDataset44);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1207");
        double[] doubleArray9 = new double[] { 1.0d, (byte) -1, 1.0d };
        double[][] doubleArray10 = new double[][] { doubleArray9 };
        org.jfree.data.category.CategoryDataset categoryDataset11 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "", doubleArray10);
        org.jfree.data.category.CategoryDataset categoryDataset12 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!1", "hi!", doubleArray10);
        org.jfree.data.category.CategoryDataset categoryDataset13 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("Range[100.0,100.0]", "org.jfree.data.general.SeriesException: ", doubleArray10);
        java.util.List list14 = categoryDataset13.getRowKeys();
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(categoryDataset11);
        org.junit.Assert.assertNotNull(categoryDataset12);
        org.junit.Assert.assertNotNull(categoryDataset13);
        org.junit.Assert.assertNotNull(list14);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1208");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        java.lang.Object obj14 = xYIntervalDataItem10.clone();
        boolean boolean16 = xYIntervalDataItem10.equals((java.lang.Object) 0);
        int int17 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries21 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        boolean boolean22 = xYIntervalSeries21.getNotify();
        int int23 = xYIntervalSeries21.getItemCount();
        boolean boolean24 = xYIntervalSeries21.getAutoSort();
        xYIntervalSeries21.fireSeriesChanged();
        xYIntervalSeries21.setMaximumItemCount((int) (short) 0);
        xYIntervalSeries21.clear();
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries21);
        // The following exception was thrown during execution in test generation
        try {
            double double32 = xYIntervalSeriesCollection0.getEndYValue((int) (byte) -1, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1209");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray24 = new java.lang.Number[][] { numberArray8, numberArray11, numberArray14, numberArray17, numberArray20, numberArray23 };
        org.jfree.data.category.CategoryDataset categoryDataset25 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray24);
        java.util.List list26 = categoryDataset25.getRowKeys();
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset25, false);
        int int30 = categoryDataset25.getColumnIndex((java.lang.Comparable) (-1L));
        boolean boolean31 = xYIntervalSeriesCollection0.equals((java.lang.Object) categoryDataset25);
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.removeAllSeries();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries38 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries38.setMaximumItemCount((int) ' ');
        xYIntervalSeries38.setDescription("");
        boolean boolean43 = xYIntervalSeries38.isEmpty();
        boolean boolean44 = xYIntervalSeries38.getAllowDuplicateXValues();
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries38);
        // The following exception was thrown during execution in test generation
        try {
            double double48 = xYIntervalSeriesCollection0.getYValue(10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(categoryDataset25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(range33);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1210");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        int int26 = categoryDataset21.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range27, (double) (byte) -1, 200.0d);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries32 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) "");
        boolean boolean33 = xYIntervalSeries32.getAllowDuplicateXValues();
        boolean boolean34 = range30.equals((java.lang.Object) xYIntervalSeries32);
        int int36 = xYIntervalSeries32.indexOf((java.lang.Comparable) "Range[100.0,100.0]");
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1211");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21, true);
        double double28 = range27.getUpperBound();
        org.jfree.data.Range range30 = org.jfree.data.Range.scale(range27, 101.0d);
        org.jfree.data.Range range31 = null;
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range31, (double) 100);
        double double35 = range33.constrain((double) '4');
        double double36 = range33.getLength();
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range33, (double) 100, false);
        org.jfree.data.Range range40 = null;
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range40, (double) 100);
        double double44 = range42.constrain((double) '4');
        double double45 = range42.getLength();
        org.jfree.data.Range range46 = null;
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range46, (double) 100);
        double double50 = range48.constrain((double) '4');
        boolean boolean51 = range42.intersects(range48);
        boolean boolean52 = range33.intersects(range42);
        boolean boolean55 = range42.intersects((double) 1L, 35.0d);
        boolean boolean56 = range30.intersects(range42);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 32.0d + "'", double28 == 32.0d);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 100.0d + "'", double35 == 100.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 100.0d + "'", double44 == 100.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 100.0d + "'", double50 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1212");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener48 = null;
        categoryDataset46.removeChangeListener(datasetChangeListener48);
        java.util.List list50 = categoryDataset46.getColumnKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset52 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset46, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(list50);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1213");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo4 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent5 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) xYIntervalSeriesCollection0, seriesChangeInfo4);
        org.jfree.data.DomainOrder domainOrder6 = xYIntervalSeriesCollection0.getDomainOrder();
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(domainOrder6);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1214");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        java.lang.Number number26 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        boolean boolean27 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset21);
        java.lang.Number number29 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        int int30 = categoryDataset21.getColumnCount();
        java.util.List list31 = categoryDataset21.getRowKeys();
        java.lang.Number number32 = org.jfree.data.general.DatasetUtilities.findMaximumStackedRangeValue(categoryDataset21);
        org.jfree.data.Range range34 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertEquals("'" + number26 + "' != '" + (-1.0d) + "'", number26, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertEquals("'" + number29 + "' != '" + (-1.0d) + "'", number29, (-1.0d));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(list31);
        org.junit.Assert.assertEquals("'" + number32 + "' != '" + 192.0d + "'", number32, 192.0d);
        org.junit.Assert.assertNotNull(range34);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1215");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries12 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 32.0d);
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries12);
        boolean boolean14 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        int int15 = xYIntervalSeriesCollection0.getSeriesCount();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = xYIntervalSeriesCollection0.getEndYValue((-1), (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1216");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range9 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = xYIntervalSeriesCollection0.getItemCount((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNull(range9);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1217");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        org.jfree.data.general.DatasetGroup datasetGroup48 = categoryDataset46.getGroup();
        org.jfree.data.Range range49 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset46);
        java.lang.Number number50 = org.jfree.data.general.DatasetUtilities.findMinimumStackedRangeValue(categoryDataset46);
        int int51 = categoryDataset46.getRowCount();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(datasetGroup48);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertEquals("'" + number50 + "' != '" + (-6.0d) + "'", number50, (-6.0d));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 6 + "'", int51 == 6);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1218");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray24 = new java.lang.Number[][] { numberArray8, numberArray11, numberArray14, numberArray17, numberArray20, numberArray23 };
        org.jfree.data.category.CategoryDataset categoryDataset25 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray24);
        java.util.List list26 = categoryDataset25.getRowKeys();
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset25, false);
        int int30 = categoryDataset25.getColumnIndex((java.lang.Comparable) (-1L));
        boolean boolean31 = xYIntervalSeriesCollection0.equals((java.lang.Object) categoryDataset25);
        org.jfree.data.general.DatasetGroup datasetGroup32 = xYIntervalSeriesCollection0.getGroup();
        org.jfree.data.DomainOrder domainOrder33 = xYIntervalSeriesCollection0.getDomainOrder();
        // The following exception was thrown during execution in test generation
        try {
            double double36 = xYIntervalSeriesCollection0.getYValue((int) (byte) 10, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(categoryDataset25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(datasetGroup32);
        org.junit.Assert.assertNotNull(domainOrder33);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1219");
        org.jfree.data.ComparableObjectSeries comparableObjectSeries3 = new org.jfree.data.ComparableObjectSeries((java.lang.Comparable) (short) 0, false, true);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        org.jfree.data.Range range14 = null;
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range14, (double) 100);
        double double18 = range16.constrain((double) '4');
        boolean boolean19 = xYIntervalDataItem10.equals((java.lang.Object) '4');
        boolean boolean21 = xYIntervalDataItem10.equals((java.lang.Object) 0.0f);
        java.lang.Object obj22 = xYIntervalDataItem10.clone();
        int int23 = comparableObjectSeries3.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        double[] doubleArray33 = new double[] { 1.0d, (byte) -1, 1.0d };
        double[][] doubleArray34 = new double[][] { doubleArray33 };
        org.jfree.data.category.CategoryDataset categoryDataset35 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "", doubleArray34);
        org.jfree.data.category.CategoryDataset categoryDataset36 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!1", "hi!", doubleArray34);
        org.jfree.data.category.CategoryDataset categoryDataset37 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("Range[100.0,100.0]", "org.jfree.data.general.SeriesException: ", doubleArray34);
        org.jfree.data.pie.PieDataset pieDataset39 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset37, 0);
        org.jfree.data.category.CategoryDataset categoryDataset40 = org.jfree.data.general.DatasetUtilities.createCategoryDataset((java.lang.Comparable) int23, (org.jfree.data.KeyedValues) pieDataset39);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem47 = new org.jfree.data.xy.XYIntervalDataItem(100.0d, (double) (byte) 1, (double) (byte) 1, 0.0d, 0.0d, 33.0d);
        double double48 = xYIntervalDataItem47.getXLowValue();
        double double49 = xYIntervalDataItem47.getYLowValue();
        int int50 = pieDataset39.getIndex((java.lang.Comparable) double49);
        java.lang.Comparable comparable52 = pieDataset39.getKey((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(categoryDataset35);
        org.junit.Assert.assertNotNull(categoryDataset36);
        org.junit.Assert.assertNotNull(categoryDataset37);
        org.junit.Assert.assertNotNull(pieDataset39);
        org.junit.Assert.assertNotNull(categoryDataset40);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertEquals("'" + comparable52 + "' != '" + "org.jfree.data.general.SeriesException: 1" + "'", comparable52, "org.jfree.data.general.SeriesException: 1");
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1220");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        boolean boolean10 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        xYIntervalSeriesCollection0.validateObject();
        int int13 = xYIntervalSeriesCollection0.getSeriesCount();
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1221");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.Range range14 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = xYIntervalSeriesCollection0.getStartYValue(100, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range14);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1222");
        java.lang.Number[] numberArray6 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray22 = new java.lang.Number[][] { numberArray6, numberArray9, numberArray12, numberArray15, numberArray18, numberArray21 };
        org.jfree.data.category.CategoryDataset categoryDataset23 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray22);
        org.jfree.data.category.CategoryDataset categoryDataset24 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("NOID", "org.jfree.data.event.SeriesChangeEvent[source= ]", numberArray22);
        java.lang.Number number25 = org.jfree.data.general.DatasetUtilities.findMinimumStackedRangeValue(categoryDataset24);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds(categoryDataset24, false);
        int int28 = categoryDataset24.getColumnCount();
        org.junit.Assert.assertNotNull(numberArray6);
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(categoryDataset23);
        org.junit.Assert.assertNotNull(categoryDataset24);
        org.junit.Assert.assertEquals("'" + number25 + "' != '" + (-6.0d) + "'", number25, (-6.0d));
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1223");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range25, 0.0d);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range25, 33.0d, (double) (byte) 0);
        org.jfree.data.ComparableObjectItem comparableObjectItem31 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable) "Range[-0.0,0.0]", (java.lang.Object) 33.0d);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries32 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) comparableObjectItem31);
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range30);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1224");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset22);
        double double34 = range33.getLowerBound();
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + (-6.0d) + "'", double34 == (-6.0d));
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1225");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        java.lang.Object obj14 = xYIntervalDataItem10.clone();
        boolean boolean16 = xYIntervalDataItem10.equals((java.lang.Object) 0);
        int int17 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        org.jfree.data.DomainOrder domainOrder18 = xYIntervalSeriesCollection0.getDomainOrder();
        java.lang.Number number19 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent20 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) xYIntervalSeriesCollection0);
        xYIntervalSeriesCollection0.removeAllSeries();
        int int22 = xYIntervalSeriesCollection0.getSeriesCount();
        org.jfree.data.general.DatasetGroup datasetGroup23 = xYIntervalSeriesCollection0.getGroup();
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(domainOrder18);
        org.junit.Assert.assertNull(number19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(datasetGroup23);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1226");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        java.lang.Object obj14 = xYIntervalDataItem10.clone();
        boolean boolean16 = xYIntervalDataItem10.equals((java.lang.Object) 0);
        int int17 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        org.jfree.data.DomainOrder domainOrder18 = xYIntervalSeriesCollection0.getDomainOrder();
        java.lang.Number number19 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Number number20 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number23 = xYIntervalSeriesCollection0.getStartX((int) (short) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(domainOrder18);
        org.junit.Assert.assertNull(number19);
        org.junit.Assert.assertNull(number20);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1227");
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries3 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        boolean boolean4 = xYIntervalSeries3.getNotify();
        int int5 = xYIntervalSeries3.getItemCount();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo6 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent7 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) xYIntervalSeries3, seriesChangeInfo6);
        boolean boolean8 = xYIntervalSeries3.getAutoSort();
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray22 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray25 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray29 = new java.lang.Number[][] { numberArray13, numberArray16, numberArray19, numberArray22, numberArray25, numberArray28 };
        org.jfree.data.category.CategoryDataset categoryDataset30 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray29);
        boolean boolean31 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset30);
        java.lang.Number number32 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset30);
        java.util.List list33 = categoryDataset30.getColumnKeys();
        boolean boolean34 = xYIntervalSeries3.equals((java.lang.Object) list33);
        java.lang.Class<?> wildcardClass35 = list33.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(numberArray25);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(categoryDataset30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + number32 + "' != '" + (-1.0d) + "'", number32, (-1.0d));
        org.junit.Assert.assertNotNull(list33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1228");
        org.jfree.data.function.Function2D function2D0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYDataset xYDataset5 = org.jfree.data.general.DatasetUtilities.sampleFunction2D(function2D0, (double) 'a', (double) (short) 100, (int) (byte) 100, (java.lang.Comparable) "org.jfree.data.event.SeriesChangeEvent[source=org.jfree.data.event.SeriesChangeEvent[source=class org.jfree.data.Range]]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'f' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1229");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        java.lang.Object obj14 = xYIntervalDataItem10.clone();
        boolean boolean16 = xYIntervalDataItem10.equals((java.lang.Object) 0);
        int int17 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        org.jfree.data.DomainOrder domainOrder18 = xYIntervalSeriesCollection0.getDomainOrder();
        java.lang.Number number19 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent20 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) xYIntervalSeriesCollection0);
        xYIntervalSeriesCollection0.removeAllSeries();
        int int22 = xYIntervalSeriesCollection0.getSeriesCount();
        int int23 = xYIntervalSeriesCollection0.getSeriesCount();
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(domainOrder18);
        org.junit.Assert.assertNull(number19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1230");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries9 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries9.setMaximumItemCount((int) ' ');
        org.jfree.data.Range range13 = null;
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range13, (double) 100);
        double double17 = range15.constrain((double) '4');
        double double18 = range15.getLength();
        org.jfree.data.Range range19 = null;
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range19, (double) 100);
        double double23 = range21.constrain((double) '4');
        boolean boolean24 = range15.intersects(range21);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries28 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries28.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo31 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent32 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo31);
        xYIntervalSeries9.firePropertyChange("", (java.lang.Object) boolean24, (java.lang.Object) ' ');
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries9);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection35 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range37 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection35, true);
        java.lang.Object obj38 = xYIntervalSeriesCollection35.clone();
        boolean boolean39 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection35);
        // The following exception was thrown during execution in test generation
        try {
            double double42 = xYIntervalSeriesCollection35.getYValue((int) (byte) -1, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(range37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1231");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range15 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.jfree.data.general.DatasetGroup datasetGroup16 = xYIntervalSeriesCollection0.getGroup();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number19 = xYIntervalSeriesCollection0.getStartX((int) (byte) 1, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNull(range15);
        org.junit.Assert.assertNotNull(datasetGroup16);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1232");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        org.jfree.data.pie.PieDataset pieDataset24 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset22, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState25 = pieDataset24.getSelectionState();
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState26 = pieDataset24.getSelectionState();
        org.jfree.data.general.DatasetGroup datasetGroup27 = pieDataset24.getGroup();
        org.jfree.data.category.CategoryDataset categoryDataset28 = org.jfree.data.general.DatasetUtilities.createCategoryDataset((java.lang.Comparable) '#', (org.jfree.data.KeyedValues) pieDataset24);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset30 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset28, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(pieDataset24);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState25);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState26);
        org.junit.Assert.assertNotNull(datasetGroup27);
        org.junit.Assert.assertNotNull(categoryDataset28);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1233");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo10 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection0.fireDatasetChanged(datasetChangeInfo10);
        xYIntervalSeriesCollection0.removeAllSeries();
        org.jfree.data.general.DatasetGroup datasetGroup13 = xYIntervalSeriesCollection0.getGroup();
        org.jfree.data.Range range14 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNotNull(datasetGroup13);
        org.junit.Assert.assertNull(range14);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1234");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        java.lang.Number number10 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection11 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset13 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo14 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent15 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset13, datasetChangeInfo14);
        xYIntervalSeriesCollection11.notifyListeners(datasetChangeEvent15);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState17 = xYIntervalSeriesCollection11.getSelectionState();
        org.jfree.data.Range range18 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection11);
        org.jfree.data.Range range20 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection11, false);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem27 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int29 = xYIntervalDataItem27.compareTo((java.lang.Object) 1.0f);
        double double30 = xYIntervalDataItem27.getXHighValue();
        org.jfree.data.Range range31 = null;
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range31, (double) 100);
        double double35 = range33.constrain((double) '4');
        boolean boolean36 = xYIntervalDataItem27.equals((java.lang.Object) '4');
        org.jfree.data.Range range37 = null;
        org.jfree.data.Range range39 = org.jfree.data.Range.expandToInclude(range37, (double) 100);
        double double41 = range39.constrain((double) '4');
        int int42 = xYIntervalDataItem27.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray49 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray52 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray55 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray58 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray61 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray64 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray65 = new java.lang.Number[][] { numberArray49, numberArray52, numberArray55, numberArray58, numberArray61, numberArray64 };
        org.jfree.data.category.CategoryDataset categoryDataset66 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray65);
        org.jfree.data.category.CategoryDataset categoryDataset67 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray65);
        int int68 = xYIntervalDataItem27.compareTo((java.lang.Object) categoryDataset67);
        java.lang.Object obj69 = xYIntervalDataItem27.clone();
        int int70 = xYIntervalSeriesCollection11.indexOf((java.lang.Comparable) xYIntervalDataItem27);
        int int71 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) int70);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener72 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener72);
        java.lang.Object obj74 = xYIntervalSeriesCollection0.clone();
        // The following exception was thrown during execution in test generation
        try {
            double double77 = xYIntervalSeriesCollection0.getStartXValue(0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(number10);
        org.junit.Assert.assertNull(xYDatasetSelectionState17);
        org.junit.Assert.assertNull(range18);
        org.junit.Assert.assertNull(range20);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 100.0d + "'", double35 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(numberArray49);
        org.junit.Assert.assertNotNull(numberArray52);
        org.junit.Assert.assertNotNull(numberArray55);
        org.junit.Assert.assertNotNull(numberArray58);
        org.junit.Assert.assertNotNull(numberArray61);
        org.junit.Assert.assertNotNull(numberArray64);
        org.junit.Assert.assertNotNull(numberArray65);
        org.junit.Assert.assertNotNull(categoryDataset66);
        org.junit.Assert.assertNotNull(categoryDataset67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(obj74);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1235");
        org.jfree.data.ComparableObjectSeries comparableObjectSeries3 = new org.jfree.data.ComparableObjectSeries((java.lang.Comparable) (short) 0, false, true);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        org.jfree.data.Range range14 = null;
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range14, (double) 100);
        double double18 = range16.constrain((double) '4');
        boolean boolean19 = xYIntervalDataItem10.equals((java.lang.Object) '4');
        boolean boolean21 = xYIntervalDataItem10.equals((java.lang.Object) 0.0f);
        java.lang.Object obj22 = xYIntervalDataItem10.clone();
        int int23 = comparableObjectSeries3.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection24 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset26 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo27 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent28 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset26, datasetChangeInfo27);
        xYIntervalSeriesCollection24.notifyListeners(datasetChangeEvent28);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState30 = xYIntervalSeriesCollection24.getSelectionState();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection31 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset33 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo34 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent35 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset33, datasetChangeInfo34);
        xYIntervalSeriesCollection31.notifyListeners(datasetChangeEvent35);
        org.jfree.data.general.Dataset dataset37 = datasetChangeEvent35.getDataset();
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo38 = datasetChangeEvent35.getInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent39 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) int23, (org.jfree.data.general.Dataset) xYIntervalSeriesCollection24, datasetChangeInfo38);
        java.lang.Number number40 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection24);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = xYIntervalSeriesCollection24.getEndYValue((int) (byte) 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(xYDatasetSelectionState30);
        org.junit.Assert.assertNull(dataset37);
        org.junit.Assert.assertNotNull(datasetChangeInfo38);
        org.junit.Assert.assertNull(number40);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1236");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj12 = xYIntervalSeriesCollection0.clone();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = xYIntervalSeriesCollection0.getEndYValue(0, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNotNull(obj12);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1237");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener9 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries14 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries14.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo17 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent18 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo17);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo19 = null;
        seriesChangeEvent18.setSummary(seriesChangeInfo19);
        java.lang.Object obj21 = seriesChangeEvent18.getSource();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent18);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener23 = null;
        xYIntervalSeriesCollection0.addChangeListener(datasetChangeListener23);
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Number number26 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState27 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState27);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState29 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range30 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + ' ' + "'", obj21, ' ');
        org.junit.Assert.assertNull(range25);
        org.junit.Assert.assertNull(number26);
        org.junit.Assert.assertNull(xYDatasetSelectionState29);
        org.junit.Assert.assertNull(range30);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1238");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range23 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, 0.0d);
        java.lang.Comparable comparable26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number28 = categoryDataset21.getValue(comparable26, (java.lang.Comparable) "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'rowKey' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range25);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1239");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        xYIntervalSeriesCollection0.validateObject();
        int int14 = xYIntervalSeriesCollection0.getSeriesCount();
        // The following exception was thrown during execution in test generation
        try {
            xYIntervalSeriesCollection0.removeSeries((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1240");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        boolean boolean22 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem29 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int31 = xYIntervalDataItem29.compareTo((java.lang.Object) 1.0f);
        double double32 = xYIntervalDataItem29.getXHighValue();
        org.jfree.data.Range range33 = null;
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) 100);
        double double37 = range35.constrain((double) '4');
        boolean boolean38 = xYIntervalDataItem29.equals((java.lang.Object) '4');
        org.jfree.data.Range range39 = null;
        org.jfree.data.Range range41 = org.jfree.data.Range.expandToInclude(range39, (double) 100);
        double double43 = range41.constrain((double) '4');
        int int44 = xYIntervalDataItem29.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray51 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray54 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray57 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray60 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray63 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray66 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray67 = new java.lang.Number[][] { numberArray51, numberArray54, numberArray57, numberArray60, numberArray63, numberArray66 };
        org.jfree.data.category.CategoryDataset categoryDataset68 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray67);
        org.jfree.data.category.CategoryDataset categoryDataset69 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray67);
        int int70 = xYIntervalDataItem29.compareTo((java.lang.Object) categoryDataset69);
        java.util.List list71 = categoryDataset69.getColumnKeys();
        org.jfree.data.Range range73 = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(categoryDataset21, list71, true);
        org.jfree.data.Range range74 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset21);
        int int75 = categoryDataset21.getRowCount();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 100.0d + "'", double43 == 100.0d);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(numberArray51);
        org.junit.Assert.assertNotNull(numberArray54);
        org.junit.Assert.assertNotNull(numberArray57);
        org.junit.Assert.assertNotNull(numberArray60);
        org.junit.Assert.assertNotNull(numberArray63);
        org.junit.Assert.assertNotNull(numberArray66);
        org.junit.Assert.assertNotNull(numberArray67);
        org.junit.Assert.assertNotNull(categoryDataset68);
        org.junit.Assert.assertNotNull(categoryDataset69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(list71);
        org.junit.Assert.assertNotNull(range73);
        org.junit.Assert.assertNotNull(range74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 6 + "'", int75 == 6);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1241");
        java.lang.Number[] numberArray6 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray22 = new java.lang.Number[][] { numberArray6, numberArray9, numberArray12, numberArray15, numberArray18, numberArray21 };
        org.jfree.data.category.CategoryDataset categoryDataset23 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray22);
        org.jfree.data.category.CategoryDataset categoryDataset24 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("NOID", "org.jfree.data.event.SeriesChangeEvent[source= ]", numberArray22);
        org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset24, false);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset24);
        int int28 = categoryDataset24.getColumnCount();
        boolean boolean29 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset24);
        org.jfree.data.Range range30 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset24);
        java.lang.Comparable comparable31 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int32 = categoryDataset24.getColumnIndex(comparable31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'key' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray6);
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(categoryDataset23);
        org.junit.Assert.assertNotNull(categoryDataset24);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range30);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1242");
        java.lang.Number[] numberArray6 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray22 = new java.lang.Number[][] { numberArray6, numberArray9, numberArray12, numberArray15, numberArray18, numberArray21 };
        org.jfree.data.category.CategoryDataset categoryDataset23 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray22);
        org.jfree.data.category.CategoryDataset categoryDataset24 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("NOID", "org.jfree.data.event.SeriesChangeEvent[source= ]", numberArray22);
        org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset24, false);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset24);
        int int28 = categoryDataset24.getColumnCount();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener29 = null;
        categoryDataset24.addChangeListener(datasetChangeListener29);
        org.junit.Assert.assertNotNull(numberArray6);
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(categoryDataset23);
        org.junit.Assert.assertNotNull(categoryDataset24);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1243");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray24 = new java.lang.Number[][] { numberArray8, numberArray11, numberArray14, numberArray17, numberArray20, numberArray23 };
        org.jfree.data.category.CategoryDataset categoryDataset25 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray24);
        java.util.List list26 = categoryDataset25.getRowKeys();
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset25, false);
        int int30 = categoryDataset25.getColumnIndex((java.lang.Comparable) (-1L));
        boolean boolean31 = xYIntervalSeriesCollection0.equals((java.lang.Object) categoryDataset25);
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.removeAllSeries();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries38 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries38.setMaximumItemCount((int) ' ');
        xYIntervalSeries38.setDescription("");
        boolean boolean43 = xYIntervalSeries38.isEmpty();
        boolean boolean44 = xYIntervalSeries38.getAllowDuplicateXValues();
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries38);
        org.jfree.data.Range range46 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries50 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        java.lang.Object obj52 = null;
        xYIntervalSeries50.firePropertyChange("", obj52, (java.lang.Object) "hi!");
        xYIntervalSeries50.setKey((java.lang.Comparable) (short) 1);
        xYIntervalSeries50.firePropertyChange("", (java.lang.Object) 100L, (java.lang.Object) 100.0f);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem68 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int70 = xYIntervalDataItem68.compareTo((java.lang.Object) 1.0f);
        double double71 = xYIntervalDataItem68.getXHighValue();
        java.lang.Object obj72 = xYIntervalDataItem68.clone();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries76 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        boolean boolean77 = xYIntervalSeries76.getNotify();
        int int78 = xYIntervalSeries76.getItemCount();
        boolean boolean79 = xYIntervalSeries76.getAutoSort();
        xYIntervalSeries76.fireSeriesChanged();
        xYIntervalSeries50.firePropertyChange("", obj72, (java.lang.Object) xYIntervalSeries76);
        boolean boolean82 = xYIntervalSeries50.isEmpty();
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries50);
        java.lang.Object obj84 = xYIntervalSeriesCollection0.clone();
        // The following exception was thrown during execution in test generation
        try {
            double double87 = xYIntervalSeriesCollection0.getStartXValue((int) (byte) 0, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(categoryDataset25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(range33);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(range46);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 100.0d + "'", double71 == 100.0d);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(obj84);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1244");
        org.jfree.data.function.Function2D function2D0 = null;
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray24 = new java.lang.Number[][] { numberArray8, numberArray11, numberArray14, numberArray17, numberArray20, numberArray23 };
        org.jfree.data.category.CategoryDataset categoryDataset25 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray24);
        java.util.List list26 = categoryDataset25.getRowKeys();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem33 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int35 = xYIntervalDataItem33.compareTo((java.lang.Object) 1.0f);
        double double36 = xYIntervalDataItem33.getXHighValue();
        java.lang.Object obj37 = xYIntervalDataItem33.clone();
        boolean boolean39 = xYIntervalDataItem33.equals((java.lang.Object) 0);
        java.lang.Object obj40 = xYIntervalDataItem33.clone();
        int int41 = categoryDataset25.getColumnIndex((java.lang.Comparable) xYIntervalDataItem33);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYSeries xYSeries42 = org.jfree.data.general.DatasetUtilities.sampleFunction2DToSeries(function2D0, 46.0d, (double) (short) 100, 10, (java.lang.Comparable) int41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'f' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(categoryDataset25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1245");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        boolean boolean22 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        java.lang.Number number23 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21, true);
        boolean boolean26 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        java.lang.Number number27 = org.jfree.data.general.DatasetUtilities.findMinimumStackedRangeValue(categoryDataset21);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + number23 + "' != '" + (-1.0d) + "'", number23, (-1.0d));
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + number27 + "' != '" + (-6.0d) + "'", number27, (-6.0d));
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1246");
        org.jfree.data.pie.PieDataset pieDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset3 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (java.lang.Comparable) "hi!2", (double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1247");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Number number3 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.DomainOrder domainOrder4 = xYIntervalSeriesCollection0.getDomainOrder();
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNull(number3);
        org.junit.Assert.assertNotNull(domainOrder4);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1248");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        java.lang.Object obj10 = xYIntervalDataItem6.clone();
        boolean boolean12 = xYIntervalDataItem6.equals((java.lang.Object) 0);
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray29 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray32 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray33 = new java.lang.Number[][] { numberArray17, numberArray20, numberArray23, numberArray26, numberArray29, numberArray32 };
        org.jfree.data.category.CategoryDataset categoryDataset34 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray33);
        org.jfree.data.pie.PieDataset pieDataset36 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset34, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState37 = pieDataset36.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset41 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset36, (java.lang.Comparable) (short) 0, (double) (short) 100, (int) ' ');
        org.jfree.data.category.CategoryDataset categoryDataset42 = org.jfree.data.general.DatasetUtilities.createCategoryDataset((java.lang.Comparable) xYIntervalDataItem6, (org.jfree.data.KeyedValues) pieDataset41);
        int int44 = pieDataset41.getIndex((java.lang.Comparable) 100L);
        java.lang.Comparable comparable46 = pieDataset41.getKey((int) (short) 1);
        boolean boolean47 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(pieDataset41);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(numberArray33);
        org.junit.Assert.assertNotNull(categoryDataset34);
        org.junit.Assert.assertNotNull(pieDataset36);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState37);
        org.junit.Assert.assertNotNull(pieDataset41);
        org.junit.Assert.assertNotNull(categoryDataset42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertEquals("'" + comparable46 + "' != '" + "2" + "'", comparable46, "2");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1249");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.jfree.data.general.DatasetGroup datasetGroup14 = xYIntervalSeriesCollection0.getGroup();
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray22 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray25 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray35 = new java.lang.Number[][] { numberArray19, numberArray22, numberArray25, numberArray28, numberArray31, numberArray34 };
        org.jfree.data.category.CategoryDataset categoryDataset36 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray35);
        java.util.List list37 = categoryDataset36.getRowKeys();
        org.jfree.data.Range range39 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset36, (double) (short) -1);
        java.util.List list40 = categoryDataset36.getRowKeys();
        java.lang.Number number41 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset36);
        boolean boolean42 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset36);
        org.jfree.data.pie.PieDataset pieDataset44 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset36, 0);
        java.util.List list45 = pieDataset44.getKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range47 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, list45, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNotNull(datasetGroup14);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(numberArray25);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray35);
        org.junit.Assert.assertNotNull(categoryDataset36);
        org.junit.Assert.assertNotNull(list37);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertEquals("'" + number41 + "' != '" + (-1.0d) + "'", number41, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(pieDataset44);
        org.junit.Assert.assertNotNull(list45);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1250");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState3 = xYIntervalSeriesCollection0.getSelectionState();
        java.lang.Object obj4 = xYIntervalSeriesCollection0.clone();
        java.lang.Object obj5 = xYIntervalSeriesCollection0.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number8 = xYIntervalSeriesCollection0.getEndX(100, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNull(xYDatasetSelectionState3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(obj5);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1251");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range23 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range23, 0.0d);
        org.jfree.data.Range range27 = org.jfree.data.Range.expandToInclude(range23, 192.0d);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range27, 93.0d, false);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range30);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1252");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.removeAllSeries();
        xYIntervalSeriesCollection0.validateObject();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = xYIntervalSeriesCollection0.getEndXValue((int) 'a', 2147483647);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1253");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.Range range6 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        int int7 = xYIntervalSeriesCollection0.getSeriesCount();
        org.jfree.data.general.DatasetGroup datasetGroup8 = xYIntervalSeriesCollection0.getGroup();
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection0.getDomainOrder();
        org.junit.Assert.assertNull(range6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(datasetGroup8);
        org.junit.Assert.assertNotNull(domainOrder9);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1254");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem39 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int41 = xYIntervalDataItem39.compareTo((java.lang.Object) 1.0f);
        int int42 = categoryDataset22.getColumnIndex((java.lang.Comparable) xYIntervalDataItem39);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries45 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) xYIntervalDataItem39, false, false);
        // The following exception was thrown during execution in test generation
        try {
            double double47 = xYIntervalSeries45.getYValue((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1255");
        org.jfree.data.ComparableObjectSeries comparableObjectSeries1 = new org.jfree.data.ComparableObjectSeries((java.lang.Comparable) 127.0d);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem8 = new org.jfree.data.xy.XYIntervalDataItem((double) 1, (double) 1L, (double) (byte) 100, (double) 1, (double) 'a', 52.0d);
        double[] doubleArray18 = new double[] { 1.0d, (byte) -1, 1.0d };
        double[][] doubleArray19 = new double[][] { doubleArray18 };
        org.jfree.data.category.CategoryDataset categoryDataset20 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "", doubleArray19);
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!1", "hi!", doubleArray19);
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("Range[100.0,100.0]", "org.jfree.data.general.SeriesException: ", doubleArray19);
        org.jfree.data.ComparableObjectItem comparableObjectItem23 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable) 'a', (java.lang.Object) "org.jfree.data.general.SeriesException: ");
        comparableObjectSeries1.setKey((java.lang.Comparable) comparableObjectItem23);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(categoryDataset20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(categoryDataset22);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1256");
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries3 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries3.setMaximumItemCount((int) ' ');
        xYIntervalSeries3.setDescription("");
        boolean boolean8 = xYIntervalSeries3.isEmpty();
        int int9 = xYIntervalSeries3.getItemCount();
        xYIntervalSeries3.fireSeriesChanged();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection12 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range14 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection12, true);
        java.lang.Object obj15 = xYIntervalSeriesCollection12.clone();
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray29 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray32 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray35 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray36 = new java.lang.Number[][] { numberArray20, numberArray23, numberArray26, numberArray29, numberArray32, numberArray35 };
        org.jfree.data.category.CategoryDataset categoryDataset37 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray36);
        java.util.List list38 = categoryDataset37.getRowKeys();
        org.jfree.data.Range range40 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset37, false);
        int int42 = categoryDataset37.getColumnIndex((java.lang.Comparable) (-1L));
        boolean boolean43 = xYIntervalSeriesCollection12.equals((java.lang.Object) categoryDataset37);
        org.jfree.data.Range range45 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection12, true);
        java.lang.Number number46 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection12);
        org.jfree.data.DomainOrder domainOrder47 = xYIntervalSeriesCollection12.getDomainOrder();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries51 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries51.setMaximumItemCount((int) ' ');
        xYIntervalSeries51.setDescription("");
        xYIntervalSeries3.firePropertyChange("Range[-0.0,0.0]", (java.lang.Object) xYIntervalSeriesCollection12, (java.lang.Object) xYIntervalSeries51);
        // The following exception was thrown during execution in test generation
        try {
            double double59 = xYIntervalSeriesCollection12.getStartYValue((int) (byte) 1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(range14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(numberArray35);
        org.junit.Assert.assertNotNull(numberArray36);
        org.junit.Assert.assertNotNull(categoryDataset37);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(range45);
        org.junit.Assert.assertNull(number46);
        org.junit.Assert.assertNotNull(domainOrder47);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1257");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        java.lang.Number number33 = org.jfree.data.general.DatasetUtilities.findMaximumStackedRangeValue(categoryDataset22);
        java.lang.Number number34 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset22);
        org.jfree.data.general.DatasetGroup datasetGroup35 = categoryDataset22.getGroup();
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertEquals("'" + number33 + "' != '" + 192.0d + "'", number33, 192.0d);
        org.junit.Assert.assertEquals("'" + number34 + "' != '" + (-1.0d) + "'", number34, (-1.0d));
        org.junit.Assert.assertNotNull(datasetGroup35);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1258");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range23 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        org.jfree.data.general.DatasetGroup datasetGroup24 = categoryDataset21.getGroup();
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        boolean boolean26 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21);
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21);
        double double30 = range28.constrain(2.0d);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(datasetGroup24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2.0d + "'", double30 == 2.0d);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1259");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21, true);
        boolean boolean29 = range27.contains((double) (byte) 1);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range27, 1.0d, true);
        org.jfree.data.Range range33 = null;
        org.jfree.data.Range range35 = org.jfree.data.Range.expandToInclude(range33, (double) 100);
        double double37 = range35.constrain((double) '4');
        org.jfree.data.Range range40 = org.jfree.data.Range.shift(range35, (double) (byte) 1, false);
        org.jfree.data.Range range41 = org.jfree.data.Range.combine(range27, range40);
        double double42 = range41.getUpperBound();
        org.jfree.data.Range range44 = org.jfree.data.Range.scale(range41, 0.0d);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 101.0d + "'", double42 == 101.0d);
        org.junit.Assert.assertNotNull(range44);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1260");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        java.lang.Number number33 = org.jfree.data.general.DatasetUtilities.findMaximumStackedRangeValue(categoryDataset22);
        java.lang.Number number34 = org.jfree.data.general.DatasetUtilities.findMaximumStackedRangeValue(categoryDataset22);
        org.jfree.data.Range range36 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset22, true);
        java.lang.Number number37 = org.jfree.data.general.DatasetUtilities.findMinimumStackedRangeValue(categoryDataset22);
        org.jfree.data.pie.PieDataset pieDataset39 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset22, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset41 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset22, (java.lang.Comparable) 1.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertEquals("'" + number33 + "' != '" + 192.0d + "'", number33, 192.0d);
        org.junit.Assert.assertEquals("'" + number34 + "' != '" + 192.0d + "'", number34, 192.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertEquals("'" + number37 + "' != '" + (-6.0d) + "'", number37, (-6.0d));
        org.junit.Assert.assertNotNull(pieDataset39);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1261");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem39 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int41 = xYIntervalDataItem39.compareTo((java.lang.Object) 1.0f);
        int int42 = categoryDataset22.getColumnIndex((java.lang.Comparable) xYIntervalDataItem39);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries45 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) xYIntervalDataItem39, false, false);
        xYIntervalSeries45.setNotify(false);
        int int48 = xYIntervalSeries45.getItemCount();
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1262");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, (double) 100);
        double double4 = range2.constrain((double) '4');
        double double5 = range2.getLength();
        double double6 = range2.getCentralValue();
        boolean boolean9 = range2.intersects((double) 2147483647, (double) (short) 10);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection10 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset12 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo13 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent14 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset12, datasetChangeInfo13);
        xYIntervalSeriesCollection10.notifyListeners(datasetChangeEvent14);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState16 = xYIntervalSeriesCollection10.getSelectionState();
        org.jfree.data.Range range17 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection10);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection18 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset20 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo21 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent22 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset20, datasetChangeInfo21);
        xYIntervalSeriesCollection18.notifyListeners(datasetChangeEvent22);
        org.jfree.data.general.Dataset dataset24 = datasetChangeEvent22.getDataset();
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo25 = datasetChangeEvent22.getInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent26 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) range2, (org.jfree.data.general.Dataset) xYIntervalSeriesCollection10, datasetChangeInfo25);
        java.lang.Number[] numberArray32 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray35 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray38 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray41 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray44 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray47 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray48 = new java.lang.Number[][] { numberArray32, numberArray35, numberArray38, numberArray41, numberArray44, numberArray47 };
        org.jfree.data.category.CategoryDataset categoryDataset49 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray48);
        java.util.List list50 = categoryDataset49.getRowKeys();
        org.jfree.data.Range range52 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset49, false);
        int int54 = categoryDataset49.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset56 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo57 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent58 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset56, datasetChangeInfo57);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent59 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset49, datasetChangeInfo57);
        xYIntervalSeriesCollection10.notifyListeners(datasetChangeEvent59);
        java.lang.Comparable comparable61 = null;
        int int62 = xYIntervalSeriesCollection10.indexOf(comparable61);
        org.jfree.data.DomainOrder domainOrder63 = xYIntervalSeriesCollection10.getDomainOrder();
        org.jfree.data.Range range64 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection10);
        org.junit.Assert.assertNotNull(range2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(xYDatasetSelectionState16);
        org.junit.Assert.assertNull(range17);
        org.junit.Assert.assertNull(dataset24);
        org.junit.Assert.assertNotNull(datasetChangeInfo25);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(numberArray35);
        org.junit.Assert.assertNotNull(numberArray38);
        org.junit.Assert.assertNotNull(numberArray41);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(numberArray47);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(categoryDataset49);
        org.junit.Assert.assertNotNull(list50);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(domainOrder63);
        org.junit.Assert.assertNull(range64);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1263");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, (double) 100);
        double double4 = range2.constrain((double) '4');
        double double5 = range2.getLength();
        org.jfree.data.Range range8 = org.jfree.data.Range.shift(range2, (double) 100, false);
        org.jfree.data.Range range9 = null;
        org.jfree.data.Range range11 = org.jfree.data.Range.expandToInclude(range9, (double) 100);
        double double13 = range11.constrain((double) '4');
        double double14 = range11.getLength();
        org.jfree.data.Range range15 = null;
        org.jfree.data.Range range17 = org.jfree.data.Range.expandToInclude(range15, (double) 100);
        double double19 = range17.constrain((double) '4');
        boolean boolean20 = range11.intersects(range17);
        boolean boolean21 = range2.intersects(range11);
        org.jfree.data.Range range22 = null;
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range22, (double) 100);
        double double26 = range24.constrain((double) '4');
        double double27 = range24.getLength();
        double double28 = range24.getCentralValue();
        java.lang.Number[] numberArray33 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray36 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray39 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray42 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray45 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray48 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray49 = new java.lang.Number[][] { numberArray33, numberArray36, numberArray39, numberArray42, numberArray45, numberArray48 };
        org.jfree.data.category.CategoryDataset categoryDataset50 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray49);
        java.util.List list51 = categoryDataset50.getRowKeys();
        org.jfree.data.Range range53 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset50, (double) (short) -1);
        java.lang.Number number54 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset50);
        org.jfree.data.Range range55 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset50);
        boolean boolean56 = range24.intersects(range55);
        boolean boolean57 = range2.intersects(range55);
        boolean boolean60 = range55.intersects((double) (byte) 0, 0.0d);
        org.junit.Assert.assertNotNull(range2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(range17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertNotNull(numberArray33);
        org.junit.Assert.assertNotNull(numberArray36);
        org.junit.Assert.assertNotNull(numberArray39);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(numberArray49);
        org.junit.Assert.assertNotNull(categoryDataset50);
        org.junit.Assert.assertNotNull(list51);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertEquals("'" + number54 + "' != '" + (-1.0d) + "'", number54, (-1.0d));
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1264");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range3 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj4 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.Range range5 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNull(range3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNull(range5);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1265");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        java.util.List list48 = categoryDataset46.getColumnKeys();
        org.jfree.data.Range range49 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset46);
        int int51 = categoryDataset46.getColumnIndex((java.lang.Comparable) 32.0d);
        org.jfree.data.Range range53 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds(categoryDataset46, false);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset55 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset46, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(list48);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(range53);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1266");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.general.DatasetGroup datasetGroup2 = xYIntervalSeriesCollection0.getGroup();
        boolean boolean3 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYInterval xYInterval9 = new org.jfree.data.xy.XYInterval(0.0d, (double) 1.0f, (double) (-1), (double) '#', (double) 100L);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries13 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries13.setMaximumItemCount((int) ' ');
        xYIntervalSeries13.setDescription("hi!");
        boolean boolean18 = xYInterval9.equals((java.lang.Object) xYIntervalSeries13);
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries13);
        xYIntervalSeriesCollection0.validateObject();
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNotNull(datasetGroup2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1267");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        java.lang.Number number10 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj11 = xYIntervalSeriesCollection0.clone();
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(number10);
        org.junit.Assert.assertNotNull(obj11);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1268");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21, true);
        org.jfree.data.Range range29 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (byte) 0);
        org.jfree.data.Range range30 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset21);
        org.jfree.data.Range range32 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) 2147483647);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range32);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1269");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState9);
        int int12 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) "org.jfree.data.general.SeriesException: hi!1");
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray29 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray32 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray33 = new java.lang.Number[][] { numberArray17, numberArray20, numberArray23, numberArray26, numberArray29, numberArray32 };
        org.jfree.data.category.CategoryDataset categoryDataset34 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray33);
        java.util.List list35 = categoryDataset34.getRowKeys();
        org.jfree.data.Range range37 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset34, false);
        boolean boolean38 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset34);
        org.jfree.data.Range range40 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset34, true);
        boolean boolean42 = range40.contains((double) (byte) 1);
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range40, 1.0d, true);
        org.jfree.data.Range range46 = null;
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range46, (double) 100);
        double double50 = range48.constrain((double) '4');
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range48, (double) (byte) 1, false);
        org.jfree.data.Range range54 = org.jfree.data.Range.combine(range40, range53);
        org.jfree.data.Range range55 = null;
        org.jfree.data.Range range57 = org.jfree.data.Range.expandToInclude(range55, (double) 100);
        double double59 = range57.constrain((double) '4');
        double double60 = range57.getLength();
        org.jfree.data.Range range63 = org.jfree.data.Range.shift(range57, (double) 100, false);
        org.jfree.data.Range range64 = org.jfree.data.Range.combine(range53, range57);
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent65 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) range53);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo66 = null;
        seriesChangeEvent65.setSummary(seriesChangeInfo66);
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent65);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries72 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        boolean boolean73 = xYIntervalSeries72.getNotify();
        int int74 = xYIntervalSeries72.getItemCount();
        boolean boolean75 = xYIntervalSeries72.getAutoSort();
        xYIntervalSeries72.fireSeriesChanged();
        xYIntervalSeries72.setMaximumItemCount((int) (short) 0);
        boolean boolean79 = xYIntervalSeries72.getNotify();
        int int81 = xYIntervalSeries72.indexOf((java.lang.Comparable) 198.0d);
        int int82 = xYIntervalSeries72.getMaximumItemCount();
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries72);
        // The following exception was thrown during execution in test generation
        try {
            xYIntervalSeriesCollection0.removeSeries((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(numberArray33);
        org.junit.Assert.assertNotNull(categoryDataset34);
        org.junit.Assert.assertNotNull(list35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 100.0d + "'", double50 == 100.0d);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1270");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection0.getDomainOrder();
        boolean boolean10 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number14 = xYIntervalSeriesCollection0.getY(6, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1271");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range23 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range23, 0.0d);
        double double26 = range25.getCentralValue();
        org.jfree.data.Range range28 = org.jfree.data.Range.scale(range25, (double) 1);
        double double29 = range28.getLowerBound();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 15.5d + "'", double26 == 15.5d);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1272");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        org.jfree.data.Range range48 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset46);
        double double50 = range48.constrain(1.0d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1273");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState7 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState7);
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray29 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray30 = new java.lang.Number[][] { numberArray14, numberArray17, numberArray20, numberArray23, numberArray26, numberArray29 };
        org.jfree.data.category.CategoryDataset categoryDataset31 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray30);
        java.util.List list32 = categoryDataset31.getRowKeys();
        org.jfree.data.Range range34 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset31, false);
        int int36 = categoryDataset31.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset38 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo39 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent40 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset38, datasetChangeInfo39);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent41 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset31, datasetChangeInfo39);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem48 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int50 = xYIntervalDataItem48.compareTo((java.lang.Object) 1.0f);
        int int51 = categoryDataset31.getColumnIndex((java.lang.Comparable) xYIntervalDataItem48);
        double double52 = xYIntervalDataItem48.getXLowValue();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection53 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder54 = xYIntervalSeriesCollection53.getDomainOrder();
        org.jfree.data.ComparableObjectItem comparableObjectItem55 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable) xYIntervalDataItem48, (java.lang.Object) domainOrder54);
        int int56 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) comparableObjectItem55);
        org.jfree.data.Range range57 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        int int58 = xYIntervalSeriesCollection0.getSeriesCount();
        // The following exception was thrown during execution in test generation
        try {
            double double61 = xYIntervalSeriesCollection0.getYValue((int) (byte) 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(numberArray30);
        org.junit.Assert.assertNotNull(categoryDataset31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertNotNull(domainOrder54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNull(range57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1274");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        java.util.List list9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, list9, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'visibleSeriesKeys' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1275");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        java.lang.Object obj14 = xYIntervalDataItem10.clone();
        boolean boolean16 = xYIntervalDataItem10.equals((java.lang.Object) 0);
        int int17 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        java.lang.Number number18 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.general.Dataset dataset20 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo21 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent22 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset20, datasetChangeInfo21);
        boolean boolean23 = xYIntervalSeriesCollection0.equals((java.lang.Object) datasetChangeInfo21);
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        java.util.List list46 = categoryDataset45.getRowKeys();
        org.jfree.data.Range range48 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset45, (double) (short) -1);
        java.util.List list49 = categoryDataset45.getRowKeys();
        java.lang.Number number50 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset45);
        boolean boolean51 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset45);
        org.jfree.data.Range range52 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset45);
        java.lang.Number number53 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset45);
        org.jfree.data.pie.PieDataset pieDataset55 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset45, (int) (short) 0);
        int int56 = pieDataset55.getItemCount();
        java.util.List list57 = pieDataset55.getKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range59 = org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, list57, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(number18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(list46);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertNotNull(list49);
        org.junit.Assert.assertEquals("'" + number50 + "' != '" + (-1.0d) + "'", number50, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertEquals("'" + number53 + "' != '" + (-1.0d) + "'", number53, (-1.0d));
        org.junit.Assert.assertNotNull(pieDataset55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(list57);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1276");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection26 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset28 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo29 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent30 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset28, datasetChangeInfo29);
        xYIntervalSeriesCollection26.notifyListeners(datasetChangeEvent30);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState32 = xYIntervalSeriesCollection26.getSelectionState();
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection26);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection34 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder35 = xYIntervalSeriesCollection34.getDomainOrder();
        int int36 = xYIntervalSeriesCollection34.getSeriesCount();
        boolean boolean37 = xYIntervalSeriesCollection26.hasListener((java.util.EventListener) xYIntervalSeriesCollection34);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo38 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent39 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) list25, (org.jfree.data.general.Dataset) xYIntervalSeriesCollection34, datasetChangeInfo38);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState40 = xYIntervalSeriesCollection34.getSelectionState();
        java.lang.Object obj41 = xYIntervalSeriesCollection34.clone();
        // The following exception was thrown during execution in test generation
        try {
            double double44 = xYIntervalSeriesCollection34.getStartYValue((-1), (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNull(xYDatasetSelectionState32);
        org.junit.Assert.assertNull(range33);
        org.junit.Assert.assertNotNull(domainOrder35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(xYDatasetSelectionState40);
        org.junit.Assert.assertNotNull(obj41);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1277");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener48 = null;
        categoryDataset46.removeChangeListener(datasetChangeListener48);
        java.util.List list50 = categoryDataset46.getColumnKeys();
        org.jfree.data.Range range52 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset46, false);
        java.lang.Number number53 = org.jfree.data.general.DatasetUtilities.findMinimumStackedRangeValue(categoryDataset46);
        org.jfree.data.Range range54 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset46);
        boolean boolean56 = range54.contains(67.0d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(list50);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertEquals("'" + number53 + "' != '" + (-6.0d) + "'", number53, (-6.0d));
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1278");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection8 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection8.getDomainOrder();
        int int10 = xYIntervalSeriesCollection8.getSeriesCount();
        boolean boolean11 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection8);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        java.lang.Number number13 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        org.jfree.data.Range range15 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number18 = xYIntervalSeriesCollection8.getEndY(0, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(number12);
        org.junit.Assert.assertNull(number13);
        org.junit.Assert.assertNull(range15);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1279");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState7 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState7);
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray29 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray30 = new java.lang.Number[][] { numberArray14, numberArray17, numberArray20, numberArray23, numberArray26, numberArray29 };
        org.jfree.data.category.CategoryDataset categoryDataset31 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray30);
        java.util.List list32 = categoryDataset31.getRowKeys();
        org.jfree.data.Range range34 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset31, false);
        int int36 = categoryDataset31.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset38 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo39 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent40 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset38, datasetChangeInfo39);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent41 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset31, datasetChangeInfo39);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem48 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int50 = xYIntervalDataItem48.compareTo((java.lang.Object) 1.0f);
        int int51 = categoryDataset31.getColumnIndex((java.lang.Comparable) xYIntervalDataItem48);
        double double52 = xYIntervalDataItem48.getXLowValue();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection53 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder54 = xYIntervalSeriesCollection53.getDomainOrder();
        org.jfree.data.ComparableObjectItem comparableObjectItem55 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable) xYIntervalDataItem48, (java.lang.Object) domainOrder54);
        int int56 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) comparableObjectItem55);
        org.jfree.data.Range range57 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener58 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener58);
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(numberArray30);
        org.junit.Assert.assertNotNull(categoryDataset31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertNotNull(domainOrder54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNull(range57);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1280");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        java.lang.Number number26 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        boolean boolean27 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset21);
        org.jfree.data.Range range29 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21);
        java.lang.Comparable comparable31 = categoryDataset21.getColumnKey(0);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem38 = new org.jfree.data.xy.XYIntervalDataItem((double) (byte) 1, (double) 1.0f, 32.0d, 93.0d, (double) (short) 100, (double) 0);
        int int39 = categoryDataset21.getRowIndex((java.lang.Comparable) (byte) 1);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertEquals("'" + number26 + "' != '" + (-1.0d) + "'", number26, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertEquals("'" + comparable31 + "' != '" + "1" + "'", comparable31, "1");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1281");
        org.jfree.data.xy.XYInterval xYInterval5 = new org.jfree.data.xy.XYInterval(15.5d, (double) 1, (double) 2, (double) '#', 192.0d);
        double double6 = xYInterval5.getXLow();
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray27 = new java.lang.Number[][] { numberArray11, numberArray14, numberArray17, numberArray20, numberArray23, numberArray26 };
        org.jfree.data.category.CategoryDataset categoryDataset28 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray27);
        org.jfree.data.Range range30 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset28, true);
        org.jfree.data.Range range32 = org.jfree.data.Range.shift(range30, 0.0d);
        double double33 = range32.getCentralValue();
        org.jfree.data.Range range35 = org.jfree.data.Range.scale(range32, (double) 1);
        boolean boolean36 = xYInterval5.equals((java.lang.Object) 1);
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent37 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) 1);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 15.5d + "'", double6 == 15.5d);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray27);
        org.junit.Assert.assertNotNull(categoryDataset28);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 15.5d + "'", double33 == 15.5d);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1282");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        java.lang.Number[] numberArray30 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray33 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray36 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray39 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray42 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray45 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray46 = new java.lang.Number[][] { numberArray30, numberArray33, numberArray36, numberArray39, numberArray42, numberArray45 };
        org.jfree.data.category.CategoryDataset categoryDataset47 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray46);
        org.jfree.data.Range range49 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset47, true);
        org.jfree.data.Range range51 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset47, 0.0d);
        java.util.List list52 = categoryDataset47.getRowKeys();
        org.jfree.data.Range range54 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, list52, false);
        java.lang.Number number55 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(categoryDataset21);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem62 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int64 = xYIntervalDataItem62.compareTo((java.lang.Object) 1.0f);
        double double65 = xYIntervalDataItem62.getXHighValue();
        org.jfree.data.Range range66 = null;
        org.jfree.data.Range range68 = org.jfree.data.Range.expandToInclude(range66, (double) 100);
        double double70 = range68.constrain((double) '4');
        boolean boolean71 = xYIntervalDataItem62.equals((java.lang.Object) '4');
        boolean boolean73 = xYIntervalDataItem62.equals((java.lang.Object) 0.0f);
        java.lang.Object obj74 = xYIntervalDataItem62.clone();
        java.lang.Object obj75 = xYIntervalDataItem62.clone();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset76 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset21, (java.lang.Comparable) xYIntervalDataItem62);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(numberArray30);
        org.junit.Assert.assertNotNull(numberArray33);
        org.junit.Assert.assertNotNull(numberArray36);
        org.junit.Assert.assertNotNull(numberArray39);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(numberArray46);
        org.junit.Assert.assertNotNull(categoryDataset47);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(list52);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertEquals("'" + number55 + "' != '" + 32.0d + "'", number55, 32.0d);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 100.0d + "'", double65 == 100.0d);
        org.junit.Assert.assertNotNull(range68);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 100.0d + "'", double70 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertNotNull(obj75);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1283");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.general.DatasetGroup datasetGroup13 = xYIntervalSeriesCollection0.getGroup();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries14 = null;
        // The following exception was thrown during execution in test generation
        try {
            xYIntervalSeriesCollection0.addSeries(xYIntervalSeries14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'series' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNotNull(datasetGroup13);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1284");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener9 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries14 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries14.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo17 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent18 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo17);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo19 = null;
        seriesChangeEvent18.setSummary(seriesChangeInfo19);
        java.lang.Object obj21 = seriesChangeEvent18.getSource();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent18);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener23 = null;
        xYIntervalSeriesCollection0.addChangeListener(datasetChangeListener23);
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo26 = null;
        // The following exception was thrown during execution in test generation
        try {
            xYIntervalSeriesCollection0.fireDatasetChanged(datasetChangeInfo26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'info' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + ' ' + "'", obj21, ' ');
        org.junit.Assert.assertNull(range25);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1285");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener12 = null;
        xYIntervalSeriesCollection0.addChangeListener(datasetChangeListener12);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries17 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        java.lang.Object obj19 = null;
        xYIntervalSeries17.firePropertyChange("", obj19, (java.lang.Object) "hi!");
        xYIntervalSeries17.setKey((java.lang.Comparable) (short) 1);
        java.beans.PropertyChangeListener propertyChangeListener24 = null;
        xYIntervalSeries17.addPropertyChangeListener(propertyChangeListener24);
        // The following exception was thrown during execution in test generation
        try {
            xYIntervalSeriesCollection0.addSeries(xYIntervalSeries17);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Listener org.jfree.data.xy.XYIntervalSeriesCollection@2011dd46 is not of type class org.jfree.data.Range");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1286");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener48 = null;
        categoryDataset46.removeChangeListener(datasetChangeListener48);
        java.util.List list50 = categoryDataset46.getColumnKeys();
        org.jfree.data.Range range52 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset46, false);
        java.lang.Number number53 = org.jfree.data.general.DatasetUtilities.findMinimumStackedRangeValue(categoryDataset46);
        org.jfree.data.Range range54 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset46);
        org.jfree.data.Range range55 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset46);
        org.jfree.data.Range range58 = org.jfree.data.Range.shift(range55, 101.0d, true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(list50);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertEquals("'" + number53 + "' != '" + (-6.0d) + "'", number53, (-6.0d));
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range58);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1287");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        int int24 = categoryDataset21.getRowCount();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21);
        int int26 = categoryDataset21.getColumnCount();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection27 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        xYIntervalSeriesCollection27.notifyListeners(datasetChangeEvent31);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState33 = xYIntervalSeriesCollection27.getSelectionState();
        org.jfree.data.general.DatasetGroup datasetGroup34 = xYIntervalSeriesCollection27.getGroup();
        categoryDataset21.setGroup(datasetGroup34);
        java.lang.String str36 = datasetGroup34.getID();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNull(xYDatasetSelectionState33);
        org.junit.Assert.assertNotNull(datasetGroup34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "NOID" + "'", str36, "NOID");
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1288");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        int int4 = xYIntervalSeriesCollection0.getSeriesCount();
        org.jfree.data.Range range5 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(range5);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1289");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, (double) 100);
        double double4 = range2.constrain((double) '4');
        boolean boolean6 = range2.contains((double) 0.0f);
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range2, (double) (short) -1);
        org.jfree.data.Range range10 = org.jfree.data.Range.shift(range2, 192.0d);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection11 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset13 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo14 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent15 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset13, datasetChangeInfo14);
        xYIntervalSeriesCollection11.notifyListeners(datasetChangeEvent15);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState17 = xYIntervalSeriesCollection11.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener18 = null;
        xYIntervalSeriesCollection11.removeChangeListener(datasetChangeListener18);
        java.lang.Number number20 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection11);
        org.jfree.data.Range range22 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection11, true);
        xYIntervalSeriesCollection11.validateObject();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection11, true);
        boolean boolean26 = range10.equals((java.lang.Object) true);
        org.junit.Assert.assertNotNull(range2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range10);
        org.junit.Assert.assertNull(xYDatasetSelectionState17);
        org.junit.Assert.assertNull(number20);
        org.junit.Assert.assertNull(range22);
        org.junit.Assert.assertNull(range25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1290");
        org.jfree.data.Range range0 = null;
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray22 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray23 = new java.lang.Number[][] { numberArray7, numberArray10, numberArray13, numberArray16, numberArray19, numberArray22 };
        org.jfree.data.category.CategoryDataset categoryDataset24 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray23);
        org.jfree.data.category.CategoryDataset categoryDataset25 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("NOID", "org.jfree.data.event.SeriesChangeEvent[source= ]", numberArray23);
        java.lang.Number number26 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(categoryDataset25);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset25);
        org.jfree.data.Range range28 = org.jfree.data.Range.combine(range0, range27);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(categoryDataset24);
        org.junit.Assert.assertNotNull(categoryDataset25);
        org.junit.Assert.assertEquals("'" + number26 + "' != '" + 32.0d + "'", number26, 32.0d);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range28);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1291");
        java.lang.Number[] numberArray6 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray22 = new java.lang.Number[][] { numberArray6, numberArray9, numberArray12, numberArray15, numberArray18, numberArray21 };
        org.jfree.data.category.CategoryDataset categoryDataset23 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray22);
        org.jfree.data.category.CategoryDataset categoryDataset24 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("NOID", "org.jfree.data.event.SeriesChangeEvent[source= ]", numberArray22);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset26 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset24, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray6);
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(categoryDataset23);
        org.junit.Assert.assertNotNull(categoryDataset24);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1292");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        boolean boolean22 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        java.lang.Number number23 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        java.util.List list24 = categoryDataset21.getColumnKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + number23 + "' != '" + (-1.0d) + "'", number23, (-1.0d));
        org.junit.Assert.assertNotNull(list24);
        org.junit.Assert.assertNotNull(range25);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1293");
        org.jfree.data.xy.XYInterval xYInterval5 = new org.jfree.data.xy.XYInterval(0.0d, (double) 1.0f, (double) (-1), (double) '#', (double) 100L);
        double double6 = xYInterval5.getYHigh();
        double double7 = xYInterval5.getYLow();
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray24 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray27 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray28 = new java.lang.Number[][] { numberArray12, numberArray15, numberArray18, numberArray21, numberArray24, numberArray27 };
        org.jfree.data.category.CategoryDataset categoryDataset29 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray28);
        org.jfree.data.Range range30 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset29);
        boolean boolean31 = xYInterval5.equals((java.lang.Object) categoryDataset29);
        org.jfree.data.Range range32 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset29);
        org.jfree.data.Range range34 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset29, false);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 35.0d + "'", double7 == 35.0d);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(numberArray27);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(categoryDataset29);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range34);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1294");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection26 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset28 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo29 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent30 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset28, datasetChangeInfo29);
        xYIntervalSeriesCollection26.notifyListeners(datasetChangeEvent30);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState32 = xYIntervalSeriesCollection26.getSelectionState();
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection26);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection34 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder35 = xYIntervalSeriesCollection34.getDomainOrder();
        int int36 = xYIntervalSeriesCollection34.getSeriesCount();
        boolean boolean37 = xYIntervalSeriesCollection26.hasListener((java.util.EventListener) xYIntervalSeriesCollection34);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo38 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent39 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) list25, (org.jfree.data.general.Dataset) xYIntervalSeriesCollection34, datasetChangeInfo38);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState40 = xYIntervalSeriesCollection34.getSelectionState();
        org.jfree.data.Range range41 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection34);
        java.lang.Number number42 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection34);
        java.lang.Number number43 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection34);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNull(xYDatasetSelectionState32);
        org.junit.Assert.assertNull(range33);
        org.junit.Assert.assertNotNull(domainOrder35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(xYDatasetSelectionState40);
        org.junit.Assert.assertNull(range41);
        org.junit.Assert.assertNull(number42);
        org.junit.Assert.assertNull(number43);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1295");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj8 = xYIntervalSeriesCollection0.clone();
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj10 = xYIntervalSeriesCollection0.clone();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = xYIntervalSeriesCollection0.getEndXValue((int) (byte) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNotNull(obj10);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1296");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo10 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection0.fireDatasetChanged(datasetChangeInfo10);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray29 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray32 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray33 = new java.lang.Number[][] { numberArray17, numberArray20, numberArray23, numberArray26, numberArray29, numberArray32 };
        org.jfree.data.category.CategoryDataset categoryDataset34 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray33);
        org.jfree.data.Range range36 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset34, true);
        org.jfree.data.general.DatasetGroup datasetGroup37 = categoryDataset34.getGroup();
        boolean boolean38 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset34);
        org.jfree.data.Range range39 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset34);
        java.util.List list40 = categoryDataset34.getRowKeys();
        java.lang.Number[] numberArray46 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray49 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray52 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray55 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray58 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray61 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray62 = new java.lang.Number[][] { numberArray46, numberArray49, numberArray52, numberArray55, numberArray58, numberArray61 };
        org.jfree.data.category.CategoryDataset categoryDataset63 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray62);
        java.util.List list64 = categoryDataset63.getRowKeys();
        org.jfree.data.Range range66 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset63, false);
        int int68 = categoryDataset63.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset70 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo71 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent72 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset70, datasetChangeInfo71);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent73 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset63, datasetChangeInfo71);
        org.jfree.data.Range range74 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset63);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener75 = null;
        categoryDataset63.addChangeListener(datasetChangeListener75);
        java.lang.Number number77 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(categoryDataset63);
        org.jfree.data.Range range78 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset63);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range80 = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, list40, range78, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(number12);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(numberArray33);
        org.junit.Assert.assertNotNull(categoryDataset34);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(datasetGroup37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(numberArray46);
        org.junit.Assert.assertNotNull(numberArray49);
        org.junit.Assert.assertNotNull(numberArray52);
        org.junit.Assert.assertNotNull(numberArray55);
        org.junit.Assert.assertNotNull(numberArray58);
        org.junit.Assert.assertNotNull(numberArray61);
        org.junit.Assert.assertNotNull(numberArray62);
        org.junit.Assert.assertNotNull(categoryDataset63);
        org.junit.Assert.assertNotNull(list64);
        org.junit.Assert.assertNotNull(range66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(range74);
        org.junit.Assert.assertEquals("'" + number77 + "' != '" + 32.0d + "'", number77, 32.0d);
        org.junit.Assert.assertNotNull(range78);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1297");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        java.lang.Number number26 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        boolean boolean27 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        java.lang.Number number30 = categoryDataset21.getValue((int) (byte) 1, (int) (byte) 0);
        java.lang.Number number31 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(categoryDataset21);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertEquals("'" + number26 + "' != '" + (-1.0d) + "'", number26, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + number30 + "' != '" + (short) -1 + "'", number30, (short) -1);
        org.junit.Assert.assertEquals("'" + number31 + "' != '" + 32.0d + "'", number31, 32.0d);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1298");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        java.lang.Number number26 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        boolean boolean27 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        int int28 = categoryDataset21.getColumnCount();
        java.lang.Number number29 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(categoryDataset21);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem36 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int38 = xYIntervalDataItem36.compareTo((java.lang.Object) 1.0f);
        double double39 = xYIntervalDataItem36.getXHighValue();
        double double40 = xYIntervalDataItem36.getYValue();
        int int41 = categoryDataset21.getRowIndex((java.lang.Comparable) xYIntervalDataItem36);
        double double42 = xYIntervalDataItem36.getXHighValue();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertEquals("'" + number26 + "' != '" + (-1.0d) + "'", number26, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertEquals("'" + number29 + "' != '" + 32.0d + "'", number29, 32.0d);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 100.0d + "'", double42 == 100.0d);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1299");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        boolean boolean10 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj11 = xYIntervalSeriesCollection0.clone();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYIntervalSeries xYIntervalSeries13 = xYIntervalSeriesCollection0.getSeries(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(obj11);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1300");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection1 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset3 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo4 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent5 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset3, datasetChangeInfo4);
        xYIntervalSeriesCollection1.notifyListeners(datasetChangeEvent5);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState7 = xYIntervalSeriesCollection1.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener8 = null;
        xYIntervalSeriesCollection1.removeChangeListener(datasetChangeListener8);
        java.lang.Number number10 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection1);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo11 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection1.fireDatasetChanged(datasetChangeInfo11);
        xYIntervalSeriesCollection1.removeAllSeries();
        org.jfree.data.DomainOrder domainOrder14 = xYIntervalSeriesCollection1.getDomainOrder();
        java.lang.Number number15 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection1);
        org.jfree.data.Range range17 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection1, false);
        org.jfree.data.ComparableObjectItem comparableObjectItem18 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable) (byte) 100, (java.lang.Object) xYIntervalSeriesCollection1);
        org.junit.Assert.assertNull(xYDatasetSelectionState7);
        org.junit.Assert.assertNull(number10);
        org.junit.Assert.assertNotNull(domainOrder14);
        org.junit.Assert.assertNull(number15);
        org.junit.Assert.assertNull(range17);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1301");
        org.jfree.data.ComparableObjectSeries comparableObjectSeries3 = new org.jfree.data.ComparableObjectSeries((java.lang.Comparable) 0L, true, true);
        comparableObjectSeries3.fireSeriesChanged();
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray24 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray25 = new java.lang.Number[][] { numberArray9, numberArray12, numberArray15, numberArray18, numberArray21, numberArray24 };
        org.jfree.data.category.CategoryDataset categoryDataset26 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray25);
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset26, true);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range28, 0.0d);
        boolean boolean31 = comparableObjectSeries3.equals((java.lang.Object) range28);
        org.jfree.data.event.SeriesChangeListener seriesChangeListener32 = null;
        comparableObjectSeries3.addChangeListener(seriesChangeListener32);
        java.beans.PropertyChangeListener propertyChangeListener34 = null;
        comparableObjectSeries3.removePropertyChangeListener(propertyChangeListener34);
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(numberArray25);
        org.junit.Assert.assertNotNull(categoryDataset26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1302");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        boolean boolean10 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.Range range14 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number17 = xYIntervalSeriesCollection0.getStartX((int) (byte) 100, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range14);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1303");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries48 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) xYIntervalDataItem6);
        double double49 = xYIntervalDataItem6.getYHighValue();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1304");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Number number10 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.DomainOrder domainOrder11 = xYIntervalSeriesCollection0.getDomainOrder();
        int int12 = xYIntervalSeriesCollection0.getSeriesCount();
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(number10);
        org.junit.Assert.assertNotNull(domainOrder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1305");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.DomainOrder domainOrder2 = xYIntervalSeriesCollection0.getDomainOrder();
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        java.lang.Object obj4 = xYIntervalSeriesCollection0.clone();
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray24 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray25 = new java.lang.Number[][] { numberArray9, numberArray12, numberArray15, numberArray18, numberArray21, numberArray24 };
        org.jfree.data.category.CategoryDataset categoryDataset26 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray25);
        java.util.List list27 = categoryDataset26.getRowKeys();
        org.jfree.data.Range range29 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset26, (double) (short) -1);
        java.util.List list30 = categoryDataset26.getRowKeys();
        java.lang.Number number31 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset26);
        boolean boolean32 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset26);
        org.jfree.data.pie.PieDataset pieDataset34 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset26, 0);
        java.util.List list35 = pieDataset34.getKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range37 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, list35, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNotNull(domainOrder2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(numberArray25);
        org.junit.Assert.assertNotNull(categoryDataset26);
        org.junit.Assert.assertNotNull(list27);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(list30);
        org.junit.Assert.assertEquals("'" + number31 + "' != '" + (-1.0d) + "'", number31, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(pieDataset34);
        org.junit.Assert.assertNotNull(list35);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1306");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener9 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener9);
        java.lang.Number number11 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range12 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(number11);
        org.junit.Assert.assertNull(range12);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1307");
        double[] doubleArray5 = new double[] { 1.0d, (byte) -1, 1.0d };
        double[][] doubleArray6 = new double[][] { doubleArray5 };
        org.jfree.data.category.CategoryDataset categoryDataset7 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "", doubleArray6);
        org.jfree.data.Range range8 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset7);
        org.jfree.data.Range range10 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds(categoryDataset7, false);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(categoryDataset7);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(range10);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1308");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection8 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection8.getDomainOrder();
        int int10 = xYIntervalSeriesCollection8.getSeriesCount();
        boolean boolean11 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection8);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        xYIntervalSeriesCollection8.validateObject();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = xYIntervalSeriesCollection8.getStartYValue((int) (byte) 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(number12);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1309");
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries3 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries3.setMaximumItemCount((int) ' ');
        int int6 = xYIntervalSeries3.getMaximumItemCount();
        java.beans.PropertyChangeListener propertyChangeListener7 = null;
        xYIntervalSeries3.removePropertyChangeListener(propertyChangeListener7);
        xYIntervalSeries3.setDescription("1");
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray22 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray25 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray32 = new java.lang.Number[][] { numberArray16, numberArray19, numberArray22, numberArray25, numberArray28, numberArray31 };
        org.jfree.data.category.CategoryDataset categoryDataset33 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray32);
        java.util.List list34 = categoryDataset33.getRowKeys();
        org.jfree.data.Range range36 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset33, false);
        boolean boolean37 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset33);
        org.jfree.data.Range range39 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset33, true);
        org.jfree.data.Range range41 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset33, (double) (byte) 0);
        org.jfree.data.Range range43 = org.jfree.data.Range.expandToInclude(range41, 0.0d);
        double double44 = range41.getCentralValue();
        double double45 = range41.getLowerBound();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem52 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int54 = xYIntervalDataItem52.compareTo((java.lang.Object) 1.0f);
        double double55 = xYIntervalDataItem52.getXHighValue();
        java.lang.Object obj56 = xYIntervalDataItem52.clone();
        boolean boolean58 = xYIntervalDataItem52.equals((java.lang.Object) 0);
        java.lang.Object obj59 = xYIntervalDataItem52.clone();
        double double60 = xYIntervalDataItem52.getYValue();
        double double61 = xYIntervalDataItem52.getYHighValue();
        double double62 = xYIntervalDataItem52.getYLowValue();
        double double63 = xYIntervalDataItem52.getYValue();
        double double64 = xYIntervalDataItem52.getXLowValue();
        xYIntervalSeries3.firePropertyChange("org.jfree.data.event.SeriesChangeEvent[source=Range[100.0,100.0]]", (java.lang.Object) double45, (java.lang.Object) double64);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(numberArray25);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(categoryDataset33);
        org.junit.Assert.assertNotNull(list34);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 93.0d + "'", double44 == 93.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-6.0d) + "'", double45 == (-6.0d));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 100.0d + "'", double55 == 100.0d);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 100.0d + "'", double61 == 100.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 100.0d + "'", double62 == 100.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1310");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range23 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        org.jfree.data.general.DatasetGroup datasetGroup24 = categoryDataset21.getGroup();
        int int25 = categoryDataset21.getColumnCount();
        java.lang.Number number26 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(categoryDataset21);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(datasetGroup24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertEquals("'" + number26 + "' != '" + 32.0d + "'", number26, 32.0d);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1311");
        org.jfree.data.xy.XYInterval xYInterval5 = new org.jfree.data.xy.XYInterval(0.0d, (double) 1.0f, (double) (-1), (double) '#', (double) 100L);
        double double6 = xYInterval5.getYHigh();
        double double7 = xYInterval5.getXLow();
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray24 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray27 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray28 = new java.lang.Number[][] { numberArray12, numberArray15, numberArray18, numberArray21, numberArray24, numberArray27 };
        org.jfree.data.category.CategoryDataset categoryDataset29 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray28);
        boolean boolean30 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset29);
        boolean boolean31 = xYInterval5.equals((java.lang.Object) boolean30);
        double double32 = xYInterval5.getYLow();
        double double33 = xYInterval5.getXHigh();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(numberArray27);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(categoryDataset29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1312");
        org.jfree.data.xy.TableXYDataset tableXYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double2 = org.jfree.data.general.DatasetUtilities.calculateStackTotal(tableXYDataset0, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1313");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem39 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int41 = xYIntervalDataItem39.compareTo((java.lang.Object) 1.0f);
        int int42 = categoryDataset22.getColumnIndex((java.lang.Comparable) xYIntervalDataItem39);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries45 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) int42, false, true);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.ComparableObjectItem comparableObjectItem47 = xYIntervalSeries45.getDataItem((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1314");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        int int26 = categoryDataset21.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21);
        org.jfree.data.Range range30 = org.jfree.data.Range.expand(range27, (double) (byte) -1, 200.0d);
        org.jfree.data.Range range33 = org.jfree.data.Range.expand(range30, (double) '#', (double) ' ');
        double double34 = range30.getCentralValue();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 3332.0d + "'", double34 == 3332.0d);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1315");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.DomainOrder domainOrder2 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection3 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset5 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo6 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent7 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset5, datasetChangeInfo6);
        xYIntervalSeriesCollection3.notifyListeners(datasetChangeEvent7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection3.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener10 = null;
        xYIntervalSeriesCollection3.removeChangeListener(datasetChangeListener10);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection3);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo13 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection3.fireDatasetChanged(datasetChangeInfo13);
        xYIntervalSeriesCollection0.fireDatasetChanged(datasetChangeInfo13);
        org.jfree.data.Range range16 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        int int17 = xYIntervalSeriesCollection0.getSeriesCount();
        org.jfree.data.Range range18 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener19 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener19);
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNotNull(domainOrder2);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(number12);
        org.junit.Assert.assertNull(range16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(range18);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1316");
        org.jfree.data.category.CategoryDataset categoryDataset0 = null;
        org.jfree.data.KeyToGroupMap keyToGroupMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1317");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range1 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState2 = xYIntervalSeriesCollection0.getSelectionState();
        boolean boolean3 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.DomainOrder domainOrder4 = xYIntervalSeriesCollection0.getDomainOrder();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable6 = xYIntervalSeriesCollection0.getSeriesKey(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range1);
        org.junit.Assert.assertNull(xYDatasetSelectionState2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(domainOrder4);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1318");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        java.lang.Number number26 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        boolean boolean27 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset21);
        java.lang.Number number29 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        int int30 = categoryDataset21.getColumnCount();
        java.util.List list31 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertEquals("'" + number26 + "' != '" + (-1.0d) + "'", number26, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertEquals("'" + number29 + "' != '" + (-1.0d) + "'", number29, (-1.0d));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(list31);
        org.junit.Assert.assertNotNull(range33);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1319");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range12 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range12);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1320");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener34 = null;
        categoryDataset22.removeChangeListener(datasetChangeListener34);
        java.util.List list36 = categoryDataset22.getColumnKeys();
        org.jfree.data.Range range38 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset22, true);
        org.jfree.data.Range range40 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset22, true);
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range40, (double) 0.0f);
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range42);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1321");
        org.jfree.data.general.DatasetGroup datasetGroup0 = new org.jfree.data.general.DatasetGroup();
        java.lang.String str1 = datasetGroup0.getID();
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray22 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray23 = new java.lang.Number[][] { numberArray7, numberArray10, numberArray13, numberArray16, numberArray19, numberArray22 };
        org.jfree.data.category.CategoryDataset categoryDataset24 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray23);
        java.util.List list25 = categoryDataset24.getRowKeys();
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset24, false);
        int int29 = categoryDataset24.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset31 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo32 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent33 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset31, datasetChangeInfo32);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent34 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset24, datasetChangeInfo32);
        org.jfree.data.Range range35 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset24);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener36 = null;
        categoryDataset24.removeChangeListener(datasetChangeListener36);
        java.util.List list38 = categoryDataset24.getColumnKeys();
        org.jfree.data.Range range40 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset24, true);
        boolean boolean41 = datasetGroup0.equals((java.lang.Object) categoryDataset24);
        java.lang.Number number42 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset24);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "NOID" + "'", str1, "NOID");
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(categoryDataset24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + number42 + "' != '" + (-1.0d) + "'", number42, (-1.0d));
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1322");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection26 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset28 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo29 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent30 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset28, datasetChangeInfo29);
        xYIntervalSeriesCollection26.notifyListeners(datasetChangeEvent30);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState32 = xYIntervalSeriesCollection26.getSelectionState();
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection26);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection34 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder35 = xYIntervalSeriesCollection34.getDomainOrder();
        int int36 = xYIntervalSeriesCollection34.getSeriesCount();
        boolean boolean37 = xYIntervalSeriesCollection26.hasListener((java.util.EventListener) xYIntervalSeriesCollection34);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo38 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent39 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) list25, (org.jfree.data.general.Dataset) xYIntervalSeriesCollection34, datasetChangeInfo38);
        org.jfree.data.Range range41 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection34, false);
        java.lang.Object obj42 = xYIntervalSeriesCollection34.clone();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNull(xYDatasetSelectionState32);
        org.junit.Assert.assertNull(range33);
        org.junit.Assert.assertNotNull(domainOrder35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(range41);
        org.junit.Assert.assertNotNull(obj42);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1323");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.DomainOrder domainOrder13 = xYIntervalSeriesCollection0.getDomainOrder();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable15 = xYIntervalSeriesCollection0.getSeriesKey((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(number12);
        org.junit.Assert.assertNotNull(domainOrder13);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1324");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.general.DatasetGroup datasetGroup13 = xYIntervalSeriesCollection0.getGroup();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem20 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int22 = xYIntervalDataItem20.compareTo((java.lang.Object) 1.0f);
        double double23 = xYIntervalDataItem20.getXHighValue();
        org.jfree.data.Range range24 = null;
        org.jfree.data.Range range26 = org.jfree.data.Range.expandToInclude(range24, (double) 100);
        double double28 = range26.constrain((double) '4');
        boolean boolean29 = xYIntervalDataItem20.equals((java.lang.Object) '4');
        org.jfree.data.Range range30 = null;
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range30, (double) 100);
        double double34 = range32.constrain((double) '4');
        int int35 = xYIntervalDataItem20.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray42 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray45 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray48 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray51 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray54 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray57 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray58 = new java.lang.Number[][] { numberArray42, numberArray45, numberArray48, numberArray51, numberArray54, numberArray57 };
        org.jfree.data.category.CategoryDataset categoryDataset59 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray58);
        org.jfree.data.category.CategoryDataset categoryDataset60 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray58);
        int int61 = xYIntervalDataItem20.compareTo((java.lang.Object) categoryDataset60);
        double double62 = xYIntervalDataItem20.getXHighValue();
        int int63 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) double62);
        org.jfree.data.DomainOrder domainOrder64 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.DomainOrder domainOrder65 = xYIntervalSeriesCollection0.getDomainOrder();
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNotNull(datasetGroup13);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(numberArray51);
        org.junit.Assert.assertNotNull(numberArray54);
        org.junit.Assert.assertNotNull(numberArray57);
        org.junit.Assert.assertNotNull(numberArray58);
        org.junit.Assert.assertNotNull(categoryDataset59);
        org.junit.Assert.assertNotNull(categoryDataset60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 100.0d + "'", double62 == 100.0d);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(domainOrder64);
        org.junit.Assert.assertNotNull(domainOrder65);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1325");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener26 = null;
        categoryDataset21.removeChangeListener(datasetChangeListener26);
        org.jfree.data.general.DatasetGroup datasetGroup28 = categoryDataset21.getGroup();
        java.lang.Number number29 = org.jfree.data.general.DatasetUtilities.findMinimumStackedRangeValue(categoryDataset21);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(datasetGroup28);
        org.junit.Assert.assertEquals("'" + number29 + "' != '" + (-6.0d) + "'", number29, (-6.0d));
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1326");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.lang.Number number25 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset21);
        java.lang.Comparable comparable28 = categoryDataset21.getRowKey(0);
        org.jfree.data.Range range30 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds(categoryDataset21, false);
        boolean boolean31 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        java.lang.Number number32 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(categoryDataset21);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertEquals("'" + number25 + "' != '" + (-1.0d) + "'", number25, (-1.0d));
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertEquals("'" + comparable28 + "' != '" + "hi!1" + "'", comparable28, "hi!1");
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + number32 + "' != '" + 32.0d + "'", number32, 32.0d);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1327");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.general.DatasetGroup datasetGroup6 = xYIntervalSeriesCollection0.getGroup();
        org.jfree.data.Range range8 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection9 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset11 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo12 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent13 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset11, datasetChangeInfo12);
        xYIntervalSeriesCollection9.notifyListeners(datasetChangeEvent13);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState15 = xYIntervalSeriesCollection9.getSelectionState();
        int int17 = xYIntervalSeriesCollection9.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState18 = null;
        xYIntervalSeriesCollection9.setSelectionState(xYDatasetSelectionState18);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem26 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int28 = xYIntervalDataItem26.compareTo((java.lang.Object) 1.0f);
        double double29 = xYIntervalDataItem26.getXHighValue();
        java.lang.Object obj30 = xYIntervalDataItem26.clone();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo31 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent32 = new org.jfree.data.event.SeriesChangeEvent(obj30, seriesChangeInfo31);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo33 = seriesChangeEvent32.getSummary();
        xYIntervalSeriesCollection9.seriesChanged(seriesChangeEvent32);
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent32);
        org.jfree.data.DomainOrder domainOrder36 = xYIntervalSeriesCollection0.getDomainOrder();
        org.junit.Assert.assertNotNull(datasetGroup6);
        org.junit.Assert.assertNull(range8);
        org.junit.Assert.assertNull(xYDatasetSelectionState15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNull(seriesChangeInfo33);
        org.junit.Assert.assertNotNull(domainOrder36);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1328");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo10 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection0.fireDatasetChanged(datasetChangeInfo10);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = xYIntervalSeriesCollection0.getEndXValue((-1), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(number12);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1329");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState7 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState7);
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray29 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray30 = new java.lang.Number[][] { numberArray14, numberArray17, numberArray20, numberArray23, numberArray26, numberArray29 };
        org.jfree.data.category.CategoryDataset categoryDataset31 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray30);
        java.util.List list32 = categoryDataset31.getRowKeys();
        org.jfree.data.Range range34 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset31, false);
        int int36 = categoryDataset31.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset38 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo39 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent40 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset38, datasetChangeInfo39);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent41 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset31, datasetChangeInfo39);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem48 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int50 = xYIntervalDataItem48.compareTo((java.lang.Object) 1.0f);
        int int51 = categoryDataset31.getColumnIndex((java.lang.Comparable) xYIntervalDataItem48);
        double double52 = xYIntervalDataItem48.getXLowValue();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection53 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder54 = xYIntervalSeriesCollection53.getDomainOrder();
        org.jfree.data.ComparableObjectItem comparableObjectItem55 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable) xYIntervalDataItem48, (java.lang.Object) domainOrder54);
        int int56 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) comparableObjectItem55);
        org.jfree.data.Range range57 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        int int58 = xYIntervalSeriesCollection0.getSeriesCount();
        // The following exception was thrown during execution in test generation
        try {
            double double61 = xYIntervalSeriesCollection0.getXValue((int) '#', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(numberArray30);
        org.junit.Assert.assertNotNull(categoryDataset31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertNotNull(domainOrder54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNull(range57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1330");
        org.jfree.data.general.DatasetGroup datasetGroup0 = new org.jfree.data.general.DatasetGroup();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries4 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries4.setMaximumItemCount((int) (short) 1);
        boolean boolean7 = xYIntervalSeries4.getAllowDuplicateXValues();
        xYIntervalSeries4.setDescription("org.jfree.data.general.SeriesException: ");
        xYIntervalSeries4.add((double) 0L, 0.0d, (double) '#', (double) 1L, (double) 100L, (double) 0);
        java.lang.String str17 = xYIntervalSeries4.getDescription();
        xYIntervalSeries4.setKey((java.lang.Comparable) (short) 0);
        boolean boolean20 = datasetGroup0.equals((java.lang.Object) (short) 0);
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray29 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray32 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray35 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray38 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray41 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray42 = new java.lang.Number[][] { numberArray26, numberArray29, numberArray32, numberArray35, numberArray38, numberArray41 };
        org.jfree.data.category.CategoryDataset categoryDataset43 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray42);
        java.util.List list44 = categoryDataset43.getRowKeys();
        org.jfree.data.Range range46 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset43, false);
        int int48 = categoryDataset43.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset50 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo51 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent52 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset50, datasetChangeInfo51);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent53 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset43, datasetChangeInfo51);
        org.jfree.data.general.Dataset dataset54 = datasetChangeEvent53.getDataset();
        org.jfree.data.general.Dataset dataset55 = datasetChangeEvent53.getDataset();
        boolean boolean56 = datasetGroup0.equals((java.lang.Object) dataset55);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.jfree.data.general.SeriesException: " + "'", str17, "org.jfree.data.general.SeriesException: ");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(numberArray35);
        org.junit.Assert.assertNotNull(numberArray38);
        org.junit.Assert.assertNotNull(numberArray41);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(categoryDataset43);
        org.junit.Assert.assertNotNull(list44);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(dataset54);
        org.junit.Assert.assertNotNull(dataset55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1331");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range9 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem16 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int18 = xYIntervalDataItem16.compareTo((java.lang.Object) 1.0f);
        double double19 = xYIntervalDataItem16.getXHighValue();
        java.lang.Object obj20 = xYIntervalDataItem16.clone();
        double double21 = xYIntervalDataItem16.getXHighValue();
        int int22 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem16);
        org.jfree.data.general.DatasetGroup datasetGroup23 = xYIntervalSeriesCollection0.getGroup();
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNull(range9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(datasetGroup23);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1332");
        org.jfree.data.function.Function2D function2D0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYSeries xYSeries5 = org.jfree.data.general.DatasetUtilities.sampleFunction2DToSeries(function2D0, 200.0d, 0.0d, (int) (byte) 1, (java.lang.Comparable) "org.jfree.data.event.SeriesChangeEvent[source= ]1");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'f' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1333");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj14 = xYIntervalSeriesCollection0.clone();
        int int16 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 0.0f);
        org.jfree.data.DomainOrder domainOrder17 = xYIntervalSeriesCollection0.getDomainOrder();
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(domainOrder17);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1334");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState24 = pieDataset23.getSelectionState();
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState25 = pieDataset23.getSelectionState();
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState26 = pieDataset23.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset29 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset23, (java.lang.Comparable) "org.jfree.data.general.SeriesException: org.jfree.data.general.SeriesException: hi!1", 101.0d);
        java.util.List list30 = pieDataset29.getKeys();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState24);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState25);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState26);
        org.junit.Assert.assertNotNull(pieDataset29);
        org.junit.Assert.assertNotNull(list30);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1335");
        double[] doubleArray9 = new double[] { 1.0d, (byte) -1, 1.0d };
        double[][] doubleArray10 = new double[][] { doubleArray9 };
        org.jfree.data.category.CategoryDataset categoryDataset11 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "", doubleArray10);
        org.jfree.data.category.CategoryDataset categoryDataset12 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!1", "hi!", doubleArray10);
        org.jfree.data.category.CategoryDataset categoryDataset13 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("Range[100.0,100.0]", "org.jfree.data.event.SeriesChangeEvent[source= ]", doubleArray10);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem20 = new org.jfree.data.xy.XYIntervalDataItem(0.0d, 0.0d, (double) ' ', (double) 100L, 192.0d, (double) 6);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries22 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) "");
        boolean boolean23 = xYIntervalSeries22.getAllowDuplicateXValues();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem30 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int32 = xYIntervalDataItem30.compareTo((java.lang.Object) 1.0f);
        double double33 = xYIntervalDataItem30.getXHighValue();
        org.jfree.data.Range range34 = null;
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range34, (double) 100);
        double double38 = range36.constrain((double) '4');
        boolean boolean39 = xYIntervalDataItem30.equals((java.lang.Object) '4');
        boolean boolean41 = xYIntervalDataItem30.equals((java.lang.Object) 0.0f);
        java.lang.Object obj42 = xYIntervalDataItem30.clone();
        xYIntervalSeries22.setKey((java.lang.Comparable) xYIntervalDataItem30);
        java.lang.Number[] numberArray48 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray51 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray54 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray57 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray60 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray63 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray64 = new java.lang.Number[][] { numberArray48, numberArray51, numberArray54, numberArray57, numberArray60, numberArray63 };
        org.jfree.data.category.CategoryDataset categoryDataset65 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray64);
        org.jfree.data.pie.PieDataset pieDataset67 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset65, 1);
        int int68 = categoryDataset65.getRowCount();
        java.lang.Number number69 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(categoryDataset65);
        int int70 = xYIntervalDataItem30.compareTo((java.lang.Object) categoryDataset65);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number71 = categoryDataset13.getValue((java.lang.Comparable) 192.0d, (java.lang.Comparable) xYIntervalDataItem30);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.UnknownKeyException; message: Row key (192.0) not recognised.");
        } catch (org.jfree.data.UnknownKeyException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(categoryDataset11);
        org.junit.Assert.assertNotNull(categoryDataset12);
        org.junit.Assert.assertNotNull(categoryDataset13);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(numberArray51);
        org.junit.Assert.assertNotNull(numberArray54);
        org.junit.Assert.assertNotNull(numberArray57);
        org.junit.Assert.assertNotNull(numberArray60);
        org.junit.Assert.assertNotNull(numberArray63);
        org.junit.Assert.assertNotNull(numberArray64);
        org.junit.Assert.assertNotNull(categoryDataset65);
        org.junit.Assert.assertNotNull(pieDataset67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertEquals("'" + number69 + "' != '" + 32.0d + "'", number69, 32.0d);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1336");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, (double) 100);
        double double4 = range2.constrain((double) '4');
        double double5 = range2.getLength();
        double double6 = range2.getCentralValue();
        boolean boolean9 = range2.intersects((double) 2147483647, (double) (short) 10);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection10 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset12 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo13 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent14 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset12, datasetChangeInfo13);
        xYIntervalSeriesCollection10.notifyListeners(datasetChangeEvent14);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState16 = xYIntervalSeriesCollection10.getSelectionState();
        org.jfree.data.Range range17 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection10);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection18 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset20 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo21 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent22 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset20, datasetChangeInfo21);
        xYIntervalSeriesCollection18.notifyListeners(datasetChangeEvent22);
        org.jfree.data.general.Dataset dataset24 = datasetChangeEvent22.getDataset();
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo25 = datasetChangeEvent22.getInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent26 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) range2, (org.jfree.data.general.Dataset) xYIntervalSeriesCollection10, datasetChangeInfo25);
        int int27 = xYIntervalSeriesCollection10.getSeriesCount();
        java.lang.Number number28 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection10);
        org.junit.Assert.assertNotNull(range2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(xYDatasetSelectionState16);
        org.junit.Assert.assertNull(range17);
        org.junit.Assert.assertNull(dataset24);
        org.junit.Assert.assertNotNull(datasetChangeInfo25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(number28);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1337");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        org.jfree.data.Range range27 = org.jfree.data.Range.shift(range24, 35.0d, true);
        boolean boolean29 = range27.contains((double) (byte) 10);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1338");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        int int26 = categoryDataset21.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21);
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21);
        org.jfree.data.Range range29 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21);
        org.jfree.data.KeyToGroupMap keyToGroupMap30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range31 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, keyToGroupMap30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range29);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1339");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection26 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset28 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo29 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent30 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset28, datasetChangeInfo29);
        xYIntervalSeriesCollection26.notifyListeners(datasetChangeEvent30);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState32 = xYIntervalSeriesCollection26.getSelectionState();
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection26);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection34 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder35 = xYIntervalSeriesCollection34.getDomainOrder();
        int int36 = xYIntervalSeriesCollection34.getSeriesCount();
        boolean boolean37 = xYIntervalSeriesCollection26.hasListener((java.util.EventListener) xYIntervalSeriesCollection34);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo38 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent39 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) list25, (org.jfree.data.general.Dataset) xYIntervalSeriesCollection34, datasetChangeInfo38);
        java.lang.Object obj40 = xYIntervalSeriesCollection34.clone();
        // The following exception was thrown during execution in test generation
        try {
            double double43 = xYIntervalSeriesCollection34.getYValue(0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNull(xYDatasetSelectionState32);
        org.junit.Assert.assertNull(range33);
        org.junit.Assert.assertNotNull(domainOrder35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(obj40);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1340");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray46 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray49 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray52 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray53 = new java.lang.Number[][] { numberArray37, numberArray40, numberArray43, numberArray46, numberArray49, numberArray52 };
        org.jfree.data.category.CategoryDataset categoryDataset54 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray53);
        java.util.List list55 = categoryDataset54.getRowKeys();
        org.jfree.data.Range range57 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset54, (double) (short) -1);
        java.util.List list58 = categoryDataset54.getRowKeys();
        org.jfree.data.Range range60 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, list58, false);
        org.jfree.data.Range range62 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset22, 67.0d);
        boolean boolean63 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset22);
        java.lang.Number number64 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset22);
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray46);
        org.junit.Assert.assertNotNull(numberArray49);
        org.junit.Assert.assertNotNull(numberArray52);
        org.junit.Assert.assertNotNull(numberArray53);
        org.junit.Assert.assertNotNull(categoryDataset54);
        org.junit.Assert.assertNotNull(list55);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(list58);
        org.junit.Assert.assertNotNull(range60);
        org.junit.Assert.assertNotNull(range62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + number64 + "' != '" + (-1.0d) + "'", number64, (-1.0d));
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1341");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries9 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries9.setMaximumItemCount((int) ' ');
        org.jfree.data.Range range13 = null;
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range13, (double) 100);
        double double17 = range15.constrain((double) '4');
        double double18 = range15.getLength();
        org.jfree.data.Range range19 = null;
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range19, (double) 100);
        double double23 = range21.constrain((double) '4');
        boolean boolean24 = range15.intersects(range21);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries28 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries28.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo31 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent32 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo31);
        xYIntervalSeries9.firePropertyChange("", (java.lang.Object) boolean24, (java.lang.Object) ' ');
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries38 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        java.lang.Object obj40 = null;
        xYIntervalSeries38.firePropertyChange("", obj40, (java.lang.Object) "hi!");
        xYIntervalSeries38.setKey((java.lang.Comparable) (short) 1);
        xYIntervalSeries38.firePropertyChange("", (java.lang.Object) 100L, (java.lang.Object) 100.0f);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem56 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int58 = xYIntervalDataItem56.compareTo((java.lang.Object) 1.0f);
        double double59 = xYIntervalDataItem56.getXHighValue();
        java.lang.Object obj60 = xYIntervalDataItem56.clone();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries64 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        boolean boolean65 = xYIntervalSeries64.getNotify();
        int int66 = xYIntervalSeries64.getItemCount();
        boolean boolean67 = xYIntervalSeries64.getAutoSort();
        xYIntervalSeries64.fireSeriesChanged();
        xYIntervalSeries38.firePropertyChange("", obj60, (java.lang.Object) xYIntervalSeries64);
        java.lang.Object obj70 = xYIntervalSeries38.clone();
        int int71 = xYIntervalSeries38.getItemCount();
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries38);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection73 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset75 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo76 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent77 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset75, datasetChangeInfo76);
        xYIntervalSeriesCollection73.notifyListeners(datasetChangeEvent77);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState79 = xYIntervalSeriesCollection73.getSelectionState();
        int int81 = xYIntervalSeriesCollection73.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener82 = null;
        xYIntervalSeriesCollection73.removeChangeListener(datasetChangeListener82);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries87 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries87.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo90 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent91 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo90);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo92 = null;
        seriesChangeEvent91.setSummary(seriesChangeInfo92);
        java.lang.Object obj94 = seriesChangeEvent91.getSource();
        xYIntervalSeriesCollection73.seriesChanged(seriesChangeEvent91);
        boolean boolean96 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection73);
        java.lang.Number number97 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection73);
        boolean boolean98 = xYIntervalSeriesCollection0.equals((java.lang.Object) xYIntervalSeriesCollection73);
        java.lang.Number number99 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection73);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNull(xYDatasetSelectionState79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertEquals("'" + obj94 + "' != '" + ' ' + "'", obj94, ' ');
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNull(number97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertNull(number99);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1342");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        org.jfree.data.pie.PieDataset pieDataset27 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset23, (java.lang.Comparable) 1, 35.0d, (int) '4');
        int int29 = pieDataset27.getIndex((java.lang.Comparable) false);
        java.lang.Number number31 = pieDataset27.getValue(0);
        java.lang.Comparable comparable32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number33 = pieDataset27.getValue(comparable32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'key' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertNotNull(pieDataset27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertEquals("'" + number31 + "' != '" + (short) -1 + "'", number31, (short) -1);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1343");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range15 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        java.lang.Number number16 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.general.DatasetGroup datasetGroup17 = xYIntervalSeriesCollection0.getGroup();
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNull(range15);
        org.junit.Assert.assertNull(number16);
        org.junit.Assert.assertNotNull(datasetGroup17);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1344");
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries3 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        java.lang.Object obj5 = null;
        xYIntervalSeries3.firePropertyChange("", obj5, (java.lang.Object) "hi!");
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries11 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        boolean boolean12 = xYIntervalSeries3.equals((java.lang.Object) false);
        int int13 = xYIntervalSeries3.getItemCount();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection14 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset16 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo17 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent18 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset16, datasetChangeInfo17);
        xYIntervalSeriesCollection14.notifyListeners(datasetChangeEvent18);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState20 = xYIntervalSeriesCollection14.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener21 = null;
        xYIntervalSeriesCollection14.removeChangeListener(datasetChangeListener21);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState23 = xYIntervalSeriesCollection14.getSelectionState();
        boolean boolean24 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection14);
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection14);
        boolean boolean26 = xYIntervalSeries3.equals((java.lang.Object) range25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number28 = xYIntervalSeries3.getX((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(xYDatasetSelectionState20);
        org.junit.Assert.assertNull(xYDatasetSelectionState23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(range25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1345");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj14 = xYIntervalSeriesCollection0.clone();
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray22 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray25 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray35 = new java.lang.Number[][] { numberArray19, numberArray22, numberArray25, numberArray28, numberArray31, numberArray34 };
        org.jfree.data.category.CategoryDataset categoryDataset36 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray35);
        org.jfree.data.Range range38 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset36, true);
        org.jfree.data.general.DatasetGroup datasetGroup39 = categoryDataset36.getGroup();
        boolean boolean40 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset36);
        org.jfree.data.Range range41 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset36);
        java.util.List list42 = categoryDataset36.getRowKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range44 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, list42, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(numberArray25);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray35);
        org.junit.Assert.assertNotNull(categoryDataset36);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(datasetGroup39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertNotNull(list42);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1346");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener9 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries14 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries14.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo17 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent18 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo17);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo19 = null;
        seriesChangeEvent18.setSummary(seriesChangeInfo19);
        java.lang.Object obj21 = seriesChangeEvent18.getSource();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent18);
        boolean boolean23 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Number number24 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj25 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries29 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries29.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo32 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent33 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo32);
        java.lang.Object obj34 = seriesChangeEvent33.getSource();
        java.lang.Object obj35 = seriesChangeEvent33.getSource();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number39 = xYIntervalSeriesCollection0.getEndX((int) (byte) -1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + ' ' + "'", obj21, ' ');
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(number24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + ' ' + "'", obj34, ' ');
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + ' ' + "'", obj35, ' ');
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1347");
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray24 = new java.lang.Number[][] { numberArray8, numberArray11, numberArray14, numberArray17, numberArray20, numberArray23 };
        org.jfree.data.category.CategoryDataset categoryDataset25 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray24);
        org.jfree.data.category.CategoryDataset categoryDataset26 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray24);
        org.jfree.data.category.CategoryDataset categoryDataset27 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "org.jfree.data.event.SeriesChangeEvent[source= ]", numberArray24);
        java.lang.Comparable comparable29 = categoryDataset27.getRowKey((int) (short) 1);
        java.lang.Number number30 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset27);
        java.lang.Number number31 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset27);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(categoryDataset25);
        org.junit.Assert.assertNotNull(categoryDataset26);
        org.junit.Assert.assertNotNull(categoryDataset27);
        org.junit.Assert.assertEquals("'" + comparable29 + "' != '" + "2" + "'", comparable29, "2");
        org.junit.Assert.assertEquals("'" + number30 + "' != '" + (-1.0d) + "'", number30, (-1.0d));
        org.junit.Assert.assertEquals("'" + number31 + "' != '" + (-1.0d) + "'", number31, (-1.0d));
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1348");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState9);
        int int12 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) "org.jfree.data.general.SeriesException: hi!1");
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray29 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray32 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray33 = new java.lang.Number[][] { numberArray17, numberArray20, numberArray23, numberArray26, numberArray29, numberArray32 };
        org.jfree.data.category.CategoryDataset categoryDataset34 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray33);
        java.util.List list35 = categoryDataset34.getRowKeys();
        org.jfree.data.Range range37 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset34, false);
        boolean boolean38 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset34);
        org.jfree.data.Range range40 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset34, true);
        boolean boolean42 = range40.contains((double) (byte) 1);
        org.jfree.data.Range range45 = org.jfree.data.Range.shift(range40, 1.0d, true);
        org.jfree.data.Range range46 = null;
        org.jfree.data.Range range48 = org.jfree.data.Range.expandToInclude(range46, (double) 100);
        double double50 = range48.constrain((double) '4');
        org.jfree.data.Range range53 = org.jfree.data.Range.shift(range48, (double) (byte) 1, false);
        org.jfree.data.Range range54 = org.jfree.data.Range.combine(range40, range53);
        org.jfree.data.Range range55 = null;
        org.jfree.data.Range range57 = org.jfree.data.Range.expandToInclude(range55, (double) 100);
        double double59 = range57.constrain((double) '4');
        double double60 = range57.getLength();
        org.jfree.data.Range range63 = org.jfree.data.Range.shift(range57, (double) 100, false);
        org.jfree.data.Range range64 = org.jfree.data.Range.combine(range53, range57);
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent65 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) range53);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo66 = null;
        seriesChangeEvent65.setSummary(seriesChangeInfo66);
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent65);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries72 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        boolean boolean73 = xYIntervalSeries72.getNotify();
        int int74 = xYIntervalSeries72.getItemCount();
        boolean boolean75 = xYIntervalSeries72.getAutoSort();
        xYIntervalSeries72.fireSeriesChanged();
        xYIntervalSeries72.setMaximumItemCount((int) (short) 0);
        boolean boolean79 = xYIntervalSeries72.getNotify();
        int int81 = xYIntervalSeries72.indexOf((java.lang.Comparable) 198.0d);
        int int82 = xYIntervalSeries72.getMaximumItemCount();
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries72);
        // The following exception was thrown during execution in test generation
        try {
            double double86 = xYIntervalSeriesCollection0.getEndYValue((int) (short) 100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(numberArray33);
        org.junit.Assert.assertNotNull(categoryDataset34);
        org.junit.Assert.assertNotNull(list35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 100.0d + "'", double50 == 100.0d);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(range63);
        org.junit.Assert.assertNotNull(range64);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1349");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem15 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int17 = xYIntervalDataItem15.compareTo((java.lang.Object) 1.0f);
        double double18 = xYIntervalDataItem15.getXHighValue();
        java.lang.Object obj19 = xYIntervalDataItem15.clone();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo20 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent21 = new org.jfree.data.event.SeriesChangeEvent(obj19, seriesChangeInfo20);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo22 = seriesChangeEvent21.getSummary();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent21);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries27 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries27.setMaximumItemCount((int) ' ');
        int int30 = xYIntervalSeries27.getMaximumItemCount();
        java.beans.PropertyChangeListener propertyChangeListener31 = null;
        xYIntervalSeries27.removePropertyChangeListener(propertyChangeListener31);
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries27);
        java.lang.Number number34 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj35 = xYIntervalSeriesCollection0.clone();
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNull(seriesChangeInfo22);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 32 + "'", int30 == 32);
        org.junit.Assert.assertNull(number34);
        org.junit.Assert.assertNotNull(obj35);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1350");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        org.jfree.data.pie.PieDataset pieDataset27 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset23, (java.lang.Comparable) 1, 35.0d, (int) '4');
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState28 = pieDataset23.getSelectionState();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertNotNull(pieDataset27);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState28);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1351");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, (double) 100);
        org.jfree.data.Range range4 = org.jfree.data.Range.scale(range2, (double) (byte) 0);
        boolean boolean7 = range4.intersects((double) 100.0f, 100.0d);
        org.jfree.data.Range range9 = org.jfree.data.Range.scale(range4, 32.0d);
        double double10 = range4.getLowerBound();
        org.jfree.data.Range range12 = org.jfree.data.Range.shift(range4, 2.147483839E9d);
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray29 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray32 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray33 = new java.lang.Number[][] { numberArray17, numberArray20, numberArray23, numberArray26, numberArray29, numberArray32 };
        org.jfree.data.category.CategoryDataset categoryDataset34 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray33);
        boolean boolean35 = range12.equals((java.lang.Object) numberArray33);
        org.junit.Assert.assertNotNull(range2);
        org.junit.Assert.assertNotNull(range4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(range9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(numberArray33);
        org.junit.Assert.assertNotNull(categoryDataset34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1352");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection26 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset28 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo29 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent30 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset28, datasetChangeInfo29);
        xYIntervalSeriesCollection26.notifyListeners(datasetChangeEvent30);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState32 = xYIntervalSeriesCollection26.getSelectionState();
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection26);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection34 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder35 = xYIntervalSeriesCollection34.getDomainOrder();
        int int36 = xYIntervalSeriesCollection34.getSeriesCount();
        boolean boolean37 = xYIntervalSeriesCollection26.hasListener((java.util.EventListener) xYIntervalSeriesCollection34);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo38 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent39 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) list25, (org.jfree.data.general.Dataset) xYIntervalSeriesCollection34, datasetChangeInfo38);
        java.lang.Number number40 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection34);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNull(xYDatasetSelectionState32);
        org.junit.Assert.assertNull(range33);
        org.junit.Assert.assertNotNull(domainOrder35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(number40);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1353");
        org.jfree.data.function.Function2D function2D0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYDataset xYDataset5 = org.jfree.data.general.DatasetUtilities.sampleFunction2D(function2D0, (double) 3, 0.0d, (int) 'a', (java.lang.Comparable) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'f' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1354");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection8 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection8.getDomainOrder();
        int int10 = xYIntervalSeriesCollection8.getSeriesCount();
        boolean boolean11 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection8);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        xYIntervalSeriesCollection8.validateObject();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent14 = null;
        xYIntervalSeriesCollection8.notifyListeners(datasetChangeEvent14);
        xYIntervalSeriesCollection8.validateObject();
        int int17 = xYIntervalSeriesCollection8.getSeriesCount();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries21 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        java.lang.Object obj23 = null;
        xYIntervalSeries21.firePropertyChange("", obj23, (java.lang.Object) "hi!");
        xYIntervalSeries21.setKey((java.lang.Comparable) (short) 1);
        java.beans.PropertyChangeListener propertyChangeListener28 = null;
        xYIntervalSeries21.addPropertyChangeListener(propertyChangeListener28);
        xYIntervalSeries21.setDescription("org.jfree.data.general.SeriesException: ");
        xYIntervalSeriesCollection8.removeSeries(xYIntervalSeries21);
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(number12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1355");
        java.lang.Number[] numberArray6 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray22 = new java.lang.Number[][] { numberArray6, numberArray9, numberArray12, numberArray15, numberArray18, numberArray21 };
        org.jfree.data.category.CategoryDataset categoryDataset23 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray22);
        org.jfree.data.category.CategoryDataset categoryDataset24 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("NOID", "org.jfree.data.event.SeriesChangeEvent[source= ]", numberArray22);
        org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset24, true);
        boolean boolean27 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset24);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem34 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int36 = xYIntervalDataItem34.compareTo((java.lang.Object) 1.0f);
        double double37 = xYIntervalDataItem34.getXHighValue();
        java.lang.Object obj38 = xYIntervalDataItem34.clone();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries42 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        java.lang.Object obj44 = null;
        xYIntervalSeries42.firePropertyChange("", obj44, (java.lang.Object) "hi!");
        xYIntervalSeries42.setKey((java.lang.Comparable) (short) 1);
        xYIntervalSeries42.add((double) 100, (double) 0, (double) (byte) -1, (double) (short) -1, (double) 100, (double) 0);
        boolean boolean56 = xYIntervalDataItem34.equals((java.lang.Object) 100);
        double double57 = xYIntervalDataItem34.getXLowValue();
        java.lang.Number[] numberArray63 = new java.lang.Number[] { 93.0d, 192.0d, 2 };
        java.lang.Number[] numberArray67 = new java.lang.Number[] { 93.0d, 192.0d, 2 };
        java.lang.Number[] numberArray71 = new java.lang.Number[] { 93.0d, 192.0d, 2 };
        java.lang.Number[] numberArray75 = new java.lang.Number[] { 93.0d, 192.0d, 2 };
        java.lang.Number[][] numberArray76 = new java.lang.Number[][] { numberArray63, numberArray67, numberArray71, numberArray75 };
        org.jfree.data.category.CategoryDataset categoryDataset77 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("Range[100.0,100.0]", "NOID", numberArray76);
        int int79 = categoryDataset77.getColumnIndex((java.lang.Comparable) "NOID");
        boolean boolean80 = xYIntervalDataItem34.equals((java.lang.Object) int79);
        double double81 = xYIntervalDataItem34.getYValue();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset82 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset24, (java.lang.Comparable) double81);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray6);
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(categoryDataset23);
        org.junit.Assert.assertNotNull(categoryDataset24);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(numberArray63);
        org.junit.Assert.assertNotNull(numberArray67);
        org.junit.Assert.assertNotNull(numberArray71);
        org.junit.Assert.assertNotNull(numberArray75);
        org.junit.Assert.assertNotNull(numberArray76);
        org.junit.Assert.assertNotNull(categoryDataset77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1356");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21, true);
        org.jfree.data.Range range29 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (byte) 0);
        org.jfree.data.Range range31 = org.jfree.data.Range.expandToInclude(range29, 0.0d);
        double double32 = range29.getCentralValue();
        double double33 = range29.getLowerBound();
        org.jfree.data.Range range34 = null;
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range34, (double) 100);
        double double38 = range36.constrain((double) '4');
        double double39 = range36.getLength();
        double double40 = range36.getCentralValue();
        double double42 = range36.constrain(1.0d);
        org.jfree.data.Range range43 = org.jfree.data.Range.combine(range29, range36);
        org.jfree.data.Range range45 = org.jfree.data.Range.scale(range43, (double) 0);
        boolean boolean48 = range43.intersects(93.0d, 0.0d);
        java.lang.String str49 = range43.toString();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 93.0d + "'", double32 == 93.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-6.0d) + "'", double33 == (-6.0d));
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 100.0d + "'", double42 == 100.0d);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Range[-6.0,192.0]" + "'", str49, "Range[-6.0,192.0]");
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1357");
        org.jfree.data.ComparableObjectSeries comparableObjectSeries3 = new org.jfree.data.ComparableObjectSeries((java.lang.Comparable) (short) 0, false, true);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        org.jfree.data.Range range14 = null;
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range14, (double) 100);
        double double18 = range16.constrain((double) '4');
        boolean boolean19 = xYIntervalDataItem10.equals((java.lang.Object) '4');
        boolean boolean21 = xYIntervalDataItem10.equals((java.lang.Object) 0.0f);
        java.lang.Object obj22 = xYIntervalDataItem10.clone();
        int int23 = comparableObjectSeries3.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        double[] doubleArray33 = new double[] { 1.0d, (byte) -1, 1.0d };
        double[][] doubleArray34 = new double[][] { doubleArray33 };
        org.jfree.data.category.CategoryDataset categoryDataset35 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "", doubleArray34);
        org.jfree.data.category.CategoryDataset categoryDataset36 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!1", "hi!", doubleArray34);
        org.jfree.data.category.CategoryDataset categoryDataset37 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("Range[100.0,100.0]", "org.jfree.data.general.SeriesException: ", doubleArray34);
        org.jfree.data.pie.PieDataset pieDataset39 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset37, 0);
        org.jfree.data.category.CategoryDataset categoryDataset40 = org.jfree.data.general.DatasetUtilities.createCategoryDataset((java.lang.Comparable) int23, (org.jfree.data.KeyedValues) pieDataset39);
        int int41 = pieDataset39.getItemCount();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(categoryDataset35);
        org.junit.Assert.assertNotNull(categoryDataset36);
        org.junit.Assert.assertNotNull(categoryDataset37);
        org.junit.Assert.assertNotNull(pieDataset39);
        org.junit.Assert.assertNotNull(categoryDataset40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1358");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries9 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries9.setMaximumItemCount((int) ' ');
        org.jfree.data.Range range13 = null;
        org.jfree.data.Range range15 = org.jfree.data.Range.expandToInclude(range13, (double) 100);
        double double17 = range15.constrain((double) '4');
        double double18 = range15.getLength();
        org.jfree.data.Range range19 = null;
        org.jfree.data.Range range21 = org.jfree.data.Range.expandToInclude(range19, (double) 100);
        double double23 = range21.constrain((double) '4');
        boolean boolean24 = range15.intersects(range21);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries28 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries28.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo31 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent32 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo31);
        xYIntervalSeries9.firePropertyChange("", (java.lang.Object) boolean24, (java.lang.Object) ' ');
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries38 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        java.lang.Object obj40 = null;
        xYIntervalSeries38.firePropertyChange("", obj40, (java.lang.Object) "hi!");
        xYIntervalSeries38.setKey((java.lang.Comparable) (short) 1);
        xYIntervalSeries38.firePropertyChange("", (java.lang.Object) 100L, (java.lang.Object) 100.0f);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem56 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int58 = xYIntervalDataItem56.compareTo((java.lang.Object) 1.0f);
        double double59 = xYIntervalDataItem56.getXHighValue();
        java.lang.Object obj60 = xYIntervalDataItem56.clone();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries64 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        boolean boolean65 = xYIntervalSeries64.getNotify();
        int int66 = xYIntervalSeries64.getItemCount();
        boolean boolean67 = xYIntervalSeries64.getAutoSort();
        xYIntervalSeries64.fireSeriesChanged();
        xYIntervalSeries38.firePropertyChange("", obj60, (java.lang.Object) xYIntervalSeries64);
        java.lang.Object obj70 = xYIntervalSeries38.clone();
        int int71 = xYIntervalSeries38.getItemCount();
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries38);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection73 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset75 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo76 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent77 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset75, datasetChangeInfo76);
        xYIntervalSeriesCollection73.notifyListeners(datasetChangeEvent77);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState79 = xYIntervalSeriesCollection73.getSelectionState();
        int int81 = xYIntervalSeriesCollection73.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener82 = null;
        xYIntervalSeriesCollection73.removeChangeListener(datasetChangeListener82);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries87 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries87.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo90 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent91 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo90);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo92 = null;
        seriesChangeEvent91.setSummary(seriesChangeInfo92);
        java.lang.Object obj94 = seriesChangeEvent91.getSource();
        xYIntervalSeriesCollection73.seriesChanged(seriesChangeEvent91);
        boolean boolean96 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection73);
        java.lang.Number number97 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection73);
        boolean boolean98 = xYIntervalSeriesCollection0.equals((java.lang.Object) xYIntervalSeriesCollection73);
        java.lang.Object obj99 = xYIntervalSeriesCollection73.clone();
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(range21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNull(xYDatasetSelectionState79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertEquals("'" + obj94 + "' != '" + ' ' + "'", obj94, ' ');
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNull(number97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertNotNull(obj99);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1359");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo10 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection0.fireDatasetChanged(datasetChangeInfo10);
        xYIntervalSeriesCollection0.removeAllSeries();
        java.lang.Number number13 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double16 = xYIntervalSeriesCollection0.getStartYValue(0, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(number13);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1360");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries12 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 32.0d);
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries12);
        boolean boolean14 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection15 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset17 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo18 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent19 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset17, datasetChangeInfo18);
        xYIntervalSeriesCollection15.notifyListeners(datasetChangeEvent19);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState21 = xYIntervalSeriesCollection15.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener22 = null;
        xYIntervalSeriesCollection15.removeChangeListener(datasetChangeListener22);
        java.lang.Number number24 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection15);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo25 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection15.fireDatasetChanged(datasetChangeInfo25);
        xYIntervalSeriesCollection15.removeAllSeries();
        java.lang.Number number28 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection15);
        boolean boolean29 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection15);
        // The following exception was thrown during execution in test generation
        try {
            double double32 = xYIntervalSeriesCollection15.getEndYValue(3, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 3, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(xYDatasetSelectionState21);
        org.junit.Assert.assertNull(number24);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1361");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener48 = null;
        categoryDataset46.removeChangeListener(datasetChangeListener48);
        int int50 = categoryDataset46.getColumnCount();
        org.jfree.data.Range range51 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset46);
        org.jfree.data.pie.PieDataset pieDataset53 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset46, (int) (short) 1);
        double double54 = org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(pieDataset53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable56 = pieDataset53.getKey((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(pieDataset53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 32.0d + "'", double54 == 32.0d);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1362");
        org.jfree.data.xy.XYInterval xYInterval5 = new org.jfree.data.xy.XYInterval((-6.0d), (double) 10, 67.0d, (double) (short) 100, 67.0d);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem12 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int14 = xYIntervalDataItem12.compareTo((java.lang.Object) 1.0f);
        double double15 = xYIntervalDataItem12.getXHighValue();
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        boolean boolean21 = xYIntervalDataItem12.equals((java.lang.Object) '4');
        org.jfree.data.Range range22 = null;
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range22, (double) 100);
        double double26 = range24.constrain((double) '4');
        int int27 = xYIntervalDataItem12.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray46 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray49 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray50 = new java.lang.Number[][] { numberArray34, numberArray37, numberArray40, numberArray43, numberArray46, numberArray49 };
        org.jfree.data.category.CategoryDataset categoryDataset51 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray50);
        org.jfree.data.category.CategoryDataset categoryDataset52 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray50);
        int int53 = xYIntervalDataItem12.compareTo((java.lang.Object) categoryDataset52);
        boolean boolean54 = xYInterval5.equals((java.lang.Object) categoryDataset52);
        org.jfree.data.Range range55 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray46);
        org.junit.Assert.assertNotNull(numberArray49);
        org.junit.Assert.assertNotNull(numberArray50);
        org.junit.Assert.assertNotNull(categoryDataset51);
        org.junit.Assert.assertNotNull(categoryDataset52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(range55);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1363");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        java.lang.Object obj14 = xYIntervalDataItem10.clone();
        boolean boolean16 = xYIntervalDataItem10.equals((java.lang.Object) 0);
        int int17 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries21 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        boolean boolean22 = xYIntervalSeries21.getNotify();
        int int23 = xYIntervalSeries21.getItemCount();
        boolean boolean24 = xYIntervalSeries21.getAutoSort();
        xYIntervalSeries21.fireSeriesChanged();
        xYIntervalSeries21.setMaximumItemCount((int) (short) 0);
        xYIntervalSeries21.clear();
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries21);
        // The following exception was thrown during execution in test generation
        try {
            double double32 = xYIntervalSeriesCollection0.getYValue((int) (short) 1, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1364");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo10 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection0.fireDatasetChanged(datasetChangeInfo10);
        xYIntervalSeriesCollection0.removeAllSeries();
        org.jfree.data.DomainOrder domainOrder13 = xYIntervalSeriesCollection0.getDomainOrder();
        java.lang.Number number14 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable16 = xYIntervalSeriesCollection0.getSeriesKey((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNotNull(domainOrder13);
        org.junit.Assert.assertNull(number14);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1365");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        int int24 = categoryDataset21.getRowCount();
        java.lang.Number number25 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(categoryDataset21);
        java.util.List list26 = categoryDataset21.getRowKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable28 = categoryDataset21.getColumnKey(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertEquals("'" + number25 + "' != '" + 32.0d + "'", number25, 32.0d);
        org.junit.Assert.assertNotNull(list26);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1366");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) 1, (double) 1L, (double) (byte) 100, (double) 1, (double) 'a', 52.0d);
        double[] doubleArray16 = new double[] { 1.0d, (byte) -1, 1.0d };
        double[][] doubleArray17 = new double[][] { doubleArray16 };
        org.jfree.data.category.CategoryDataset categoryDataset18 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "", doubleArray17);
        org.jfree.data.category.CategoryDataset categoryDataset19 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!1", "hi!", doubleArray17);
        org.jfree.data.category.CategoryDataset categoryDataset20 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("Range[100.0,100.0]", "org.jfree.data.general.SeriesException: ", doubleArray17);
        org.jfree.data.ComparableObjectItem comparableObjectItem21 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable) 'a', (java.lang.Object) "org.jfree.data.general.SeriesException: ");
        java.lang.Number[] numberArray27 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray30 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray33 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray36 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray39 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray42 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray43 = new java.lang.Number[][] { numberArray27, numberArray30, numberArray33, numberArray36, numberArray39, numberArray42 };
        org.jfree.data.category.CategoryDataset categoryDataset44 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray43);
        java.util.List list45 = categoryDataset44.getRowKeys();
        org.jfree.data.Range range47 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset44, false);
        int int49 = categoryDataset44.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset51 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo52 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent53 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset51, datasetChangeInfo52);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent54 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset44, datasetChangeInfo52);
        java.lang.Number number55 = org.jfree.data.general.DatasetUtilities.findMaximumStackedRangeValue(categoryDataset44);
        java.lang.Number number56 = org.jfree.data.general.DatasetUtilities.findMaximumStackedRangeValue(categoryDataset44);
        org.jfree.data.Range range58 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset44, true);
        java.lang.Number number59 = org.jfree.data.general.DatasetUtilities.findMinimumStackedRangeValue(categoryDataset44);
        org.jfree.data.pie.PieDataset pieDataset61 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset44, 0);
        org.jfree.data.category.CategoryDataset categoryDataset62 = org.jfree.data.general.DatasetUtilities.createCategoryDataset((java.lang.Comparable) comparableObjectItem21, (org.jfree.data.KeyedValues) pieDataset61);
        double double63 = org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(pieDataset61);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(categoryDataset18);
        org.junit.Assert.assertNotNull(categoryDataset19);
        org.junit.Assert.assertNotNull(categoryDataset20);
        org.junit.Assert.assertNotNull(numberArray27);
        org.junit.Assert.assertNotNull(numberArray30);
        org.junit.Assert.assertNotNull(numberArray33);
        org.junit.Assert.assertNotNull(numberArray36);
        org.junit.Assert.assertNotNull(numberArray39);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(categoryDataset44);
        org.junit.Assert.assertNotNull(list45);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertEquals("'" + number55 + "' != '" + 192.0d + "'", number55, 192.0d);
        org.junit.Assert.assertEquals("'" + number56 + "' != '" + 192.0d + "'", number56, 192.0d);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertEquals("'" + number59 + "' != '" + (-6.0d) + "'", number59, (-6.0d));
        org.junit.Assert.assertNotNull(pieDataset61);
        org.junit.Assert.assertNotNull(categoryDataset62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1367");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener9 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries14 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries14.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo17 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent18 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo17);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo19 = null;
        seriesChangeEvent18.setSummary(seriesChangeInfo19);
        java.lang.Object obj21 = seriesChangeEvent18.getSource();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent18);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener23 = null;
        xYIntervalSeriesCollection0.addChangeListener(datasetChangeListener23);
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Number number26 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState27 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState27);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState29 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection30 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset32 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo33 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent34 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset32, datasetChangeInfo33);
        xYIntervalSeriesCollection30.notifyListeners(datasetChangeEvent34);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState36 = xYIntervalSeriesCollection30.getSelectionState();
        int int38 = xYIntervalSeriesCollection30.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState39 = null;
        xYIntervalSeriesCollection30.setSelectionState(xYDatasetSelectionState39);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries42 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 32.0d);
        xYIntervalSeriesCollection30.removeSeries(xYIntervalSeries42);
        boolean boolean44 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection30);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection45 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset47 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo48 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent49 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset47, datasetChangeInfo48);
        xYIntervalSeriesCollection45.notifyListeners(datasetChangeEvent49);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState51 = xYIntervalSeriesCollection45.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener52 = null;
        xYIntervalSeriesCollection45.removeChangeListener(datasetChangeListener52);
        java.lang.Number number54 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection45);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo55 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection45.fireDatasetChanged(datasetChangeInfo55);
        xYIntervalSeriesCollection45.removeAllSeries();
        java.lang.Number number58 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection45);
        boolean boolean59 = xYIntervalSeriesCollection30.hasListener((java.util.EventListener) xYIntervalSeriesCollection45);
        boolean boolean60 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number63 = xYIntervalSeriesCollection0.getEndY(32, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + ' ' + "'", obj21, ' ');
        org.junit.Assert.assertNull(range25);
        org.junit.Assert.assertNull(number26);
        org.junit.Assert.assertNull(xYDatasetSelectionState29);
        org.junit.Assert.assertNull(xYDatasetSelectionState36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(xYDatasetSelectionState51);
        org.junit.Assert.assertNull(number54);
        org.junit.Assert.assertNull(number58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1368");
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray29 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray30 = new java.lang.Number[][] { numberArray14, numberArray17, numberArray20, numberArray23, numberArray26, numberArray29 };
        org.jfree.data.category.CategoryDataset categoryDataset31 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray30);
        org.jfree.data.category.CategoryDataset categoryDataset32 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray30);
        org.jfree.data.category.CategoryDataset categoryDataset33 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "org.jfree.data.event.SeriesChangeEvent[source= ]", numberArray30);
        org.jfree.data.category.CategoryDataset categoryDataset34 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("1", "hi!", numberArray30);
        org.jfree.data.category.CategoryDataset categoryDataset35 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("org.jfree.data.general.SeriesException: org.jfree.data.general.SeriesException: hi!1", "", numberArray30);
        org.jfree.data.category.CategoryDataset categoryDataset36 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("org.jfree.data.general.SeriesException: ", "Range[46.0,244.0]", numberArray30);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(numberArray30);
        org.junit.Assert.assertNotNull(categoryDataset31);
        org.junit.Assert.assertNotNull(categoryDataset32);
        org.junit.Assert.assertNotNull(categoryDataset33);
        org.junit.Assert.assertNotNull(categoryDataset34);
        org.junit.Assert.assertNotNull(categoryDataset35);
        org.junit.Assert.assertNotNull(categoryDataset36);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1369");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries12 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 32.0d);
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries12);
        boolean boolean14 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Number number15 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        int int16 = xYIntervalSeriesCollection0.getSeriesCount();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = xYIntervalSeriesCollection0.getItemCount((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(number15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1370");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range23 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range23, 0.0d);
        double double26 = range25.getLength();
        org.jfree.data.Range range28 = org.jfree.data.Range.shift(range25, (double) 100.0f);
        double double29 = range28.getUpperBound();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 33.0d + "'", double26 == 33.0d);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 132.0d + "'", double29 == 132.0d);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1371");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.removeAllSeries();
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number16 = xYIntervalSeriesCollection0.getEndY((int) (short) 10, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1372");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21, true);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset27 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset21, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertNotNull(range25);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1373");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = xYIntervalSeriesCollection0.getStartYValue(4, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1374");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, (double) 100);
        double double4 = range2.constrain((double) '4');
        boolean boolean6 = range2.contains((double) 0.0f);
        org.jfree.data.Range range8 = org.jfree.data.Range.expandToInclude(range2, (double) (short) -1);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection9 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder10 = xYIntervalSeriesCollection9.getDomainOrder();
        int int11 = xYIntervalSeriesCollection9.getSeriesCount();
        org.jfree.data.general.DatasetGroup datasetGroup12 = xYIntervalSeriesCollection9.getGroup();
        boolean boolean13 = range8.equals((java.lang.Object) xYIntervalSeriesCollection9);
        org.jfree.data.Range range14 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection9);
        org.junit.Assert.assertNotNull(range2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(range8);
        org.junit.Assert.assertNotNull(domainOrder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(datasetGroup12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(range14);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1375");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray24 = new java.lang.Number[][] { numberArray8, numberArray11, numberArray14, numberArray17, numberArray20, numberArray23 };
        org.jfree.data.category.CategoryDataset categoryDataset25 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray24);
        java.util.List list26 = categoryDataset25.getRowKeys();
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset25, false);
        int int30 = categoryDataset25.getColumnIndex((java.lang.Comparable) (-1L));
        boolean boolean31 = xYIntervalSeriesCollection0.equals((java.lang.Object) categoryDataset25);
        org.jfree.data.Range range32 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo33 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent34 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) xYIntervalSeriesCollection0, seriesChangeInfo33);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(categoryDataset25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(range32);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1376");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        java.lang.Number number26 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        boolean boolean27 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        java.lang.Number[] numberArray32 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray35 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray38 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray41 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray44 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray47 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray48 = new java.lang.Number[][] { numberArray32, numberArray35, numberArray38, numberArray41, numberArray44, numberArray47 };
        org.jfree.data.category.CategoryDataset categoryDataset49 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray48);
        org.jfree.data.Range range51 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset49, true);
        org.jfree.data.Range range53 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset49, 0.0d);
        java.util.List list54 = categoryDataset49.getRowKeys();
        org.jfree.data.Range range56 = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(categoryDataset21, list54, true);
        java.lang.Number number57 = org.jfree.data.general.DatasetUtilities.findMaximumStackedRangeValue(categoryDataset21);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertEquals("'" + number26 + "' != '" + (-1.0d) + "'", number26, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(numberArray35);
        org.junit.Assert.assertNotNull(numberArray38);
        org.junit.Assert.assertNotNull(numberArray41);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(numberArray47);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(categoryDataset49);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertNotNull(range53);
        org.junit.Assert.assertNotNull(list54);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertEquals("'" + number57 + "' != '" + 192.0d + "'", number57, 192.0d);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1377");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo10 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection0.fireDatasetChanged(datasetChangeInfo10);
        xYIntervalSeriesCollection0.removeAllSeries();
        java.lang.Number number13 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj14 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener15 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener15);
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(number13);
        org.junit.Assert.assertNotNull(obj14);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1378");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem15 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int17 = xYIntervalDataItem15.compareTo((java.lang.Object) 1.0f);
        double double18 = xYIntervalDataItem15.getXHighValue();
        java.lang.Object obj19 = xYIntervalDataItem15.clone();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo20 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent21 = new org.jfree.data.event.SeriesChangeEvent(obj19, seriesChangeInfo20);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo22 = seriesChangeEvent21.getSummary();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent21);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries27 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries27.setMaximumItemCount((int) ' ');
        int int30 = xYIntervalSeries27.getMaximumItemCount();
        java.beans.PropertyChangeListener propertyChangeListener31 = null;
        xYIntervalSeries27.removePropertyChangeListener(propertyChangeListener31);
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries27);
        java.lang.Number number34 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range36 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number39 = xYIntervalSeriesCollection0.getStartY((int) (byte) 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNull(seriesChangeInfo22);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 32 + "'", int30 == 32);
        org.junit.Assert.assertNull(number34);
        org.junit.Assert.assertNull(range36);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1379");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range15 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState16 = xYIntervalSeriesCollection0.getSelectionState();
        java.lang.Number[] numberArray22 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray25 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray38 = new java.lang.Number[][] { numberArray22, numberArray25, numberArray28, numberArray31, numberArray34, numberArray37 };
        org.jfree.data.category.CategoryDataset categoryDataset39 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray38);
        java.util.List list40 = categoryDataset39.getRowKeys();
        org.jfree.data.Range range42 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset39, false);
        int int44 = categoryDataset39.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset46 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo47 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent48 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset46, datasetChangeInfo47);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent49 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset39, datasetChangeInfo47);
        org.jfree.data.general.Dataset dataset50 = datasetChangeEvent49.getDataset();
        org.jfree.data.general.Dataset dataset51 = datasetChangeEvent49.getDataset();
        java.lang.Object obj52 = datasetChangeEvent49.getSource();
        boolean boolean53 = xYIntervalSeriesCollection0.equals(obj52);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYIntervalSeries xYIntervalSeries55 = xYIntervalSeriesCollection0.getSeries((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNull(range15);
        org.junit.Assert.assertNull(xYDatasetSelectionState16);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(numberArray25);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray38);
        org.junit.Assert.assertNotNull(categoryDataset39);
        org.junit.Assert.assertNotNull(list40);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(dataset50);
        org.junit.Assert.assertNotNull(dataset51);
        org.junit.Assert.assertEquals("'" + obj52 + "' != '" + 10L + "'", obj52, 10L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1380");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        int int2 = xYIntervalSeriesCollection0.getSeriesCount();
        org.jfree.data.general.DatasetGroup datasetGroup3 = xYIntervalSeriesCollection0.getGroup();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection4 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder5 = xYIntervalSeriesCollection4.getDomainOrder();
        org.jfree.data.Range range6 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection4);
        org.jfree.data.Range range8 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection4, false);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener9 = null;
        xYIntervalSeriesCollection4.removeChangeListener(datasetChangeListener9);
        java.lang.Object obj11 = xYIntervalSeriesCollection4.clone();
        boolean boolean12 = xYIntervalSeriesCollection0.equals(obj11);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = xYIntervalSeriesCollection0.getXValue(100, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(datasetGroup3);
        org.junit.Assert.assertNotNull(domainOrder5);
        org.junit.Assert.assertNull(range6);
        org.junit.Assert.assertNull(range8);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1381");
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries3 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries3.setMaximumItemCount((int) ' ');
        xYIntervalSeries3.setDescription("");
        boolean boolean8 = xYIntervalSeries3.isEmpty();
        int int9 = xYIntervalSeries3.getItemCount();
        xYIntervalSeries3.fireSeriesChanged();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection12 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range14 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection12, true);
        java.lang.Object obj15 = xYIntervalSeriesCollection12.clone();
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray29 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray32 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray35 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray36 = new java.lang.Number[][] { numberArray20, numberArray23, numberArray26, numberArray29, numberArray32, numberArray35 };
        org.jfree.data.category.CategoryDataset categoryDataset37 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray36);
        java.util.List list38 = categoryDataset37.getRowKeys();
        org.jfree.data.Range range40 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset37, false);
        int int42 = categoryDataset37.getColumnIndex((java.lang.Comparable) (-1L));
        boolean boolean43 = xYIntervalSeriesCollection12.equals((java.lang.Object) categoryDataset37);
        org.jfree.data.Range range45 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection12, true);
        java.lang.Number number46 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection12);
        org.jfree.data.DomainOrder domainOrder47 = xYIntervalSeriesCollection12.getDomainOrder();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries51 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries51.setMaximumItemCount((int) ' ');
        xYIntervalSeries51.setDescription("");
        xYIntervalSeries3.firePropertyChange("Range[-0.0,0.0]", (java.lang.Object) xYIntervalSeriesCollection12, (java.lang.Object) xYIntervalSeries51);
        org.jfree.data.Range range57 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection12);
        int int58 = xYIntervalSeriesCollection12.getSeriesCount();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(range14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(numberArray35);
        org.junit.Assert.assertNotNull(numberArray36);
        org.junit.Assert.assertNotNull(categoryDataset37);
        org.junit.Assert.assertNotNull(list38);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(range45);
        org.junit.Assert.assertNull(number46);
        org.junit.Assert.assertNotNull(domainOrder47);
        org.junit.Assert.assertNull(range57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1382");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range22 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21);
        java.lang.Comparable comparable24 = categoryDataset21.getRowKey((int) (byte) 0);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertEquals("'" + comparable24 + "' != '" + "hi!1" + "'", comparable24, "hi!1");
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1383");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        int int24 = categoryDataset21.getRowCount();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset21, true);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertNotNull(range27);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1384");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries12 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 32.0d);
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries12);
        boolean boolean14 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection15 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset17 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo18 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent19 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset17, datasetChangeInfo18);
        xYIntervalSeriesCollection15.notifyListeners(datasetChangeEvent19);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState21 = xYIntervalSeriesCollection15.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener22 = null;
        xYIntervalSeriesCollection15.removeChangeListener(datasetChangeListener22);
        java.lang.Number number24 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection15);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo25 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection15.fireDatasetChanged(datasetChangeInfo25);
        xYIntervalSeriesCollection15.removeAllSeries();
        java.lang.Number number28 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection15);
        boolean boolean29 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection15);
        int int30 = xYIntervalSeriesCollection15.getSeriesCount();
        org.jfree.data.Range range31 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection15);
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(xYDatasetSelectionState21);
        org.junit.Assert.assertNull(number24);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(range31);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1385");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        xYIntervalSeriesCollection0.removeAllSeries();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries7 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        boolean boolean8 = xYIntervalSeries7.getNotify();
        int int9 = xYIntervalSeries7.getItemCount();
        boolean boolean10 = xYIntervalSeries7.getAutoSort();
        xYIntervalSeries7.fireSeriesChanged();
        boolean boolean12 = xYIntervalSeries7.getNotify();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener13 = null;
        xYIntervalSeries7.addChangeListener(seriesChangeListener13);
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries7);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number18 = xYIntervalSeriesCollection0.getY(2147483647, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2147483647, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1386");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries12 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 32.0d);
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries12);
        boolean boolean14 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        int int15 = xYIntervalSeriesCollection0.getSeriesCount();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection16 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset18 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo19 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent20 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset18, datasetChangeInfo19);
        xYIntervalSeriesCollection16.notifyListeners(datasetChangeEvent20);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState22 = xYIntervalSeriesCollection16.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener23 = null;
        xYIntervalSeriesCollection16.removeChangeListener(datasetChangeListener23);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState25 = xYIntervalSeriesCollection16.getSelectionState();
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent26 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) xYIntervalSeriesCollection16);
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent26);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable29 = xYIntervalSeriesCollection0.getSeriesKey(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(xYDatasetSelectionState22);
        org.junit.Assert.assertNull(xYDatasetSelectionState25);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1387");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj8 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.Range range9 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Class<?> wildcardClass10 = xYIntervalSeriesCollection0.getClass();
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNull(range9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1388");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray24 = new java.lang.Number[][] { numberArray8, numberArray11, numberArray14, numberArray17, numberArray20, numberArray23 };
        org.jfree.data.category.CategoryDataset categoryDataset25 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray24);
        java.util.List list26 = categoryDataset25.getRowKeys();
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset25, false);
        int int30 = categoryDataset25.getColumnIndex((java.lang.Comparable) (-1L));
        boolean boolean31 = xYIntervalSeriesCollection0.equals((java.lang.Object) categoryDataset25);
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.removeAllSeries();
        java.lang.Number number35 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range36 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo37 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection0.fireDatasetChanged(datasetChangeInfo37);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(categoryDataset25);
        org.junit.Assert.assertNotNull(list26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(range33);
        org.junit.Assert.assertNull(number35);
        org.junit.Assert.assertNull(range36);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1389");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        xYIntervalSeriesCollection0.removeAllSeries();
        org.jfree.data.xy.XYInterval xYInterval9 = new org.jfree.data.xy.XYInterval((double) (byte) 10, (double) 'a', (double) (-1L), (double) (byte) 100, (double) 100);
        double double10 = xYInterval9.getXLow();
        double double11 = xYInterval9.getXLow();
        boolean boolean12 = xYIntervalSeriesCollection0.equals((java.lang.Object) double11);
        java.lang.Class<?> wildcardClass13 = xYIntervalSeriesCollection0.getClass();
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1390");
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries3 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        boolean boolean4 = xYIntervalSeries3.getNotify();
        int int5 = xYIntervalSeries3.getItemCount();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo6 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent7 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) xYIntervalSeries3, seriesChangeInfo6);
        boolean boolean8 = xYIntervalSeries3.getAutoSort();
        int int9 = xYIntervalSeries3.getMaximumItemCount();
        xYIntervalSeries3.fireSeriesChanged();
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray24 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray27 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray30 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray31 = new java.lang.Number[][] { numberArray15, numberArray18, numberArray21, numberArray24, numberArray27, numberArray30 };
        org.jfree.data.category.CategoryDataset categoryDataset32 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray31);
        java.util.List list33 = categoryDataset32.getRowKeys();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem40 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int42 = xYIntervalDataItem40.compareTo((java.lang.Object) 1.0f);
        double double43 = xYIntervalDataItem40.getXHighValue();
        java.lang.Object obj44 = xYIntervalDataItem40.clone();
        boolean boolean46 = xYIntervalDataItem40.equals((java.lang.Object) 0);
        java.lang.Object obj47 = xYIntervalDataItem40.clone();
        int int48 = categoryDataset32.getColumnIndex((java.lang.Comparable) xYIntervalDataItem40);
        xYIntervalSeries3.setKey((java.lang.Comparable) int48);
        xYIntervalSeries3.clear();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2147483647 + "'", int9 == 2147483647);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(numberArray27);
        org.junit.Assert.assertNotNull(numberArray30);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(categoryDataset32);
        org.junit.Assert.assertNotNull(list33);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 100.0d + "'", double43 == 100.0d);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1391");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.general.DatasetGroup datasetGroup6 = xYIntervalSeriesCollection0.getGroup();
        org.jfree.data.Range range8 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection9 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset11 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo12 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent13 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset11, datasetChangeInfo12);
        xYIntervalSeriesCollection9.notifyListeners(datasetChangeEvent13);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState15 = xYIntervalSeriesCollection9.getSelectionState();
        int int17 = xYIntervalSeriesCollection9.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState18 = null;
        xYIntervalSeriesCollection9.setSelectionState(xYDatasetSelectionState18);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem26 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int28 = xYIntervalDataItem26.compareTo((java.lang.Object) 1.0f);
        double double29 = xYIntervalDataItem26.getXHighValue();
        java.lang.Object obj30 = xYIntervalDataItem26.clone();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo31 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent32 = new org.jfree.data.event.SeriesChangeEvent(obj30, seriesChangeInfo31);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo33 = seriesChangeEvent32.getSummary();
        xYIntervalSeriesCollection9.seriesChanged(seriesChangeEvent32);
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent32);
        xYIntervalSeriesCollection0.validateObject();
        org.junit.Assert.assertNotNull(datasetGroup6);
        org.junit.Assert.assertNull(range8);
        org.junit.Assert.assertNull(xYDatasetSelectionState15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNull(seriesChangeInfo33);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1392");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        boolean boolean22 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        java.lang.Number number23 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        boolean boolean24 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds(categoryDataset21, false);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset29 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + number23 + "' != '" + (-1.0d) + "'", number23, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range27);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1393");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset26 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset21, (java.lang.Comparable) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1394");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries12 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 32.0d);
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries12);
        boolean boolean14 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection15 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset17 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo18 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent19 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset17, datasetChangeInfo18);
        xYIntervalSeriesCollection15.notifyListeners(datasetChangeEvent19);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState21 = xYIntervalSeriesCollection15.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener22 = null;
        xYIntervalSeriesCollection15.removeChangeListener(datasetChangeListener22);
        java.lang.Number number24 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection15);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo25 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection15.fireDatasetChanged(datasetChangeInfo25);
        xYIntervalSeriesCollection15.removeAllSeries();
        java.lang.Number number28 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection15);
        boolean boolean29 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection15);
        int int30 = xYIntervalSeriesCollection15.getSeriesCount();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener31 = null;
        xYIntervalSeriesCollection15.addChangeListener(datasetChangeListener31);
        // The following exception was thrown during execution in test generation
        try {
            double double35 = xYIntervalSeriesCollection15.getYValue((int) (byte) 0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(xYDatasetSelectionState21);
        org.junit.Assert.assertNull(number24);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1395");
        java.lang.Number[] numberArray6 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray22 = new java.lang.Number[][] { numberArray6, numberArray9, numberArray12, numberArray15, numberArray18, numberArray21 };
        org.jfree.data.category.CategoryDataset categoryDataset23 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray22);
        org.jfree.data.category.CategoryDataset categoryDataset24 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("NOID", "org.jfree.data.event.SeriesChangeEvent[source= ]", numberArray22);
        org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset24, false);
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset24, 52.0d);
        org.jfree.data.KeyToGroupMap keyToGroupMap29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range30 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset24, keyToGroupMap29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray6);
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(categoryDataset23);
        org.junit.Assert.assertNotNull(categoryDataset24);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range28);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1396");
        java.lang.Number[] numberArray6 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray22 = new java.lang.Number[][] { numberArray6, numberArray9, numberArray12, numberArray15, numberArray18, numberArray21 };
        org.jfree.data.category.CategoryDataset categoryDataset23 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray22);
        org.jfree.data.category.CategoryDataset categoryDataset24 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("NOID", "org.jfree.data.event.SeriesChangeEvent[source= ]", numberArray22);
        org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset24, false);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset24);
        int int28 = categoryDataset24.getColumnCount();
        boolean boolean29 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset24);
        org.jfree.data.Range range30 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset24);
        boolean boolean33 = range30.intersects((double) (-1L), 6.0d);
        org.junit.Assert.assertNotNull(numberArray6);
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(categoryDataset23);
        org.junit.Assert.assertNotNull(categoryDataset24);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1397");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        org.jfree.data.general.Dataset dataset33 = datasetChangeEvent32.getDataset();
        org.jfree.data.general.Dataset dataset34 = datasetChangeEvent32.getDataset();
        java.lang.Object obj35 = datasetChangeEvent32.getSource();
        java.lang.Object obj36 = datasetChangeEvent32.getSource();
        org.jfree.data.general.Dataset dataset37 = datasetChangeEvent32.getDataset();
        org.jfree.data.general.Dataset dataset38 = datasetChangeEvent32.getDataset();
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(dataset33);
        org.junit.Assert.assertNotNull(dataset34);
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + 10L + "'", obj35, 10L);
        org.junit.Assert.assertEquals("'" + obj36 + "' != '" + 10L + "'", obj36, 10L);
        org.junit.Assert.assertNotNull(dataset37);
        org.junit.Assert.assertNotNull(dataset38);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1398");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.general.DatasetGroup datasetGroup2 = xYIntervalSeriesCollection0.getGroup();
        boolean boolean3 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYInterval xYInterval9 = new org.jfree.data.xy.XYInterval(0.0d, (double) 1.0f, (double) (-1), (double) '#', (double) 100L);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries13 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries13.setMaximumItemCount((int) ' ');
        xYIntervalSeries13.setDescription("hi!");
        boolean boolean18 = xYInterval9.equals((java.lang.Object) xYIntervalSeries13);
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries13);
        java.beans.PropertyChangeListener propertyChangeListener20 = null;
        xYIntervalSeries13.addPropertyChangeListener(propertyChangeListener20);
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNotNull(datasetGroup2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1399");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range23 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        org.jfree.data.pie.PieDataset pieDataset25 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 2);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(pieDataset25);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1400");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState9);
        java.lang.Number number11 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.general.DatasetGroup datasetGroup12 = xYIntervalSeriesCollection0.getGroup();
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(number11);
        org.junit.Assert.assertNotNull(datasetGroup12);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1401");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        boolean boolean10 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj11 = xYIntervalSeriesCollection0.clone();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = xYIntervalSeriesCollection0.getYValue(0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(obj11);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1402");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range9 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem16 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int18 = xYIntervalDataItem16.compareTo((java.lang.Object) 1.0f);
        double double19 = xYIntervalDataItem16.getXHighValue();
        org.jfree.data.Range range20 = null;
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range20, (double) 100);
        double double24 = range22.constrain((double) '4');
        boolean boolean25 = xYIntervalDataItem16.equals((java.lang.Object) '4');
        org.jfree.data.Range range26 = null;
        org.jfree.data.Range range28 = org.jfree.data.Range.expandToInclude(range26, (double) 100);
        double double30 = range28.constrain((double) '4');
        int int31 = xYIntervalDataItem16.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray38 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray41 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray44 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray47 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray50 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray53 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray54 = new java.lang.Number[][] { numberArray38, numberArray41, numberArray44, numberArray47, numberArray50, numberArray53 };
        org.jfree.data.category.CategoryDataset categoryDataset55 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray54);
        org.jfree.data.category.CategoryDataset categoryDataset56 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray54);
        int int57 = xYIntervalDataItem16.compareTo((java.lang.Object) categoryDataset56);
        java.lang.Object obj58 = xYIntervalDataItem16.clone();
        int int59 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem16);
        double double60 = xYIntervalDataItem16.getYHighValue();
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNull(range9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(numberArray38);
        org.junit.Assert.assertNotNull(numberArray41);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(numberArray47);
        org.junit.Assert.assertNotNull(numberArray50);
        org.junit.Assert.assertNotNull(numberArray53);
        org.junit.Assert.assertNotNull(numberArray54);
        org.junit.Assert.assertNotNull(categoryDataset55);
        org.junit.Assert.assertNotNull(categoryDataset56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 100.0d + "'", double60 == 100.0d);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1403");
        org.jfree.data.ComparableObjectSeries comparableObjectSeries3 = new org.jfree.data.ComparableObjectSeries((java.lang.Comparable) (short) 0, false, true);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        org.jfree.data.Range range14 = null;
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range14, (double) 100);
        double double18 = range16.constrain((double) '4');
        boolean boolean19 = xYIntervalDataItem10.equals((java.lang.Object) '4');
        boolean boolean21 = xYIntervalDataItem10.equals((java.lang.Object) 0.0f);
        java.lang.Object obj22 = xYIntervalDataItem10.clone();
        int int23 = comparableObjectSeries3.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection24 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset26 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo27 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent28 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset26, datasetChangeInfo27);
        xYIntervalSeriesCollection24.notifyListeners(datasetChangeEvent28);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState30 = xYIntervalSeriesCollection24.getSelectionState();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection31 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset33 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo34 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent35 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset33, datasetChangeInfo34);
        xYIntervalSeriesCollection31.notifyListeners(datasetChangeEvent35);
        org.jfree.data.general.Dataset dataset37 = datasetChangeEvent35.getDataset();
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo38 = datasetChangeEvent35.getInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent39 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) int23, (org.jfree.data.general.Dataset) xYIntervalSeriesCollection24, datasetChangeInfo38);
        java.util.List list40 = null;
        org.jfree.data.Range range41 = null;
        org.jfree.data.Range range43 = org.jfree.data.Range.expandToInclude(range41, (double) 100);
        double double45 = range43.constrain((double) '4');
        boolean boolean47 = range43.contains((double) 0.0f);
        org.jfree.data.Range range49 = org.jfree.data.Range.expandToInclude(range43, (double) (short) -1);
        org.jfree.data.Range range51 = org.jfree.data.Range.shift(range43, (double) (-1));
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range53 = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection24, list40, range43, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'visibleSeriesKeys' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(xYDatasetSelectionState30);
        org.junit.Assert.assertNull(dataset37);
        org.junit.Assert.assertNotNull(datasetChangeInfo38);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(range49);
        org.junit.Assert.assertNotNull(range51);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1404");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj8 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.Range range9 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj10 = xYIntervalSeriesCollection0.clone();
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNull(range9);
        org.junit.Assert.assertNotNull(obj10);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1405");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem14 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int16 = xYIntervalDataItem14.compareTo((java.lang.Object) 1.0f);
        double double17 = xYIntervalDataItem14.getXHighValue();
        org.jfree.data.Range range18 = null;
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range18, (double) 100);
        double double22 = range20.constrain((double) '4');
        boolean boolean23 = xYIntervalDataItem14.equals((java.lang.Object) '4');
        org.jfree.data.Range range24 = null;
        org.jfree.data.Range range26 = org.jfree.data.Range.expandToInclude(range24, (double) 100);
        double double28 = range26.constrain((double) '4');
        int int29 = xYIntervalDataItem14.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray36 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray39 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray42 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray45 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray48 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray51 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray52 = new java.lang.Number[][] { numberArray36, numberArray39, numberArray42, numberArray45, numberArray48, numberArray51 };
        org.jfree.data.category.CategoryDataset categoryDataset53 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray52);
        org.jfree.data.category.CategoryDataset categoryDataset54 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray52);
        int int55 = xYIntervalDataItem14.compareTo((java.lang.Object) categoryDataset54);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener56 = null;
        categoryDataset54.removeChangeListener(datasetChangeListener56);
        org.jfree.data.general.DatasetGroup datasetGroup58 = categoryDataset54.getGroup();
        xYIntervalSeriesCollection0.setGroup(datasetGroup58);
        int int60 = xYIntervalSeriesCollection0.getSeriesCount();
        org.jfree.data.general.DatasetGroup datasetGroup61 = xYIntervalSeriesCollection0.getGroup();
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(numberArray36);
        org.junit.Assert.assertNotNull(numberArray39);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(numberArray51);
        org.junit.Assert.assertNotNull(numberArray52);
        org.junit.Assert.assertNotNull(categoryDataset53);
        org.junit.Assert.assertNotNull(categoryDataset54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(datasetGroup58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(datasetGroup61);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1406");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener48 = null;
        categoryDataset46.removeChangeListener(datasetChangeListener48);
        org.jfree.data.general.DatasetGroup datasetGroup50 = categoryDataset46.getGroup();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener51 = null;
        categoryDataset46.addChangeListener(datasetChangeListener51);
        org.jfree.data.Range range54 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset46, false);
        org.jfree.data.Range range56 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset46, false);
        java.util.List list57 = categoryDataset46.getColumnKeys();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(datasetGroup50);
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertNotNull(list57);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1407");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        int int49 = categoryDataset46.getRowIndex((java.lang.Comparable) "org.jfree.data.event.DatasetChangeEvent[source=-1]");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection50 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset52 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo53 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent54 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset52, datasetChangeInfo53);
        xYIntervalSeriesCollection50.notifyListeners(datasetChangeEvent54);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState56 = xYIntervalSeriesCollection50.getSelectionState();
        org.jfree.data.Range range57 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection50);
        org.jfree.data.Range range59 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection50, false);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem66 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int68 = xYIntervalDataItem66.compareTo((java.lang.Object) 1.0f);
        double double69 = xYIntervalDataItem66.getXHighValue();
        java.lang.Object obj70 = xYIntervalDataItem66.clone();
        double double71 = xYIntervalDataItem66.getXHighValue();
        int int72 = xYIntervalSeriesCollection50.indexOf((java.lang.Comparable) xYIntervalDataItem66);
        double double73 = xYIntervalDataItem66.getXLowValue();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.pie.PieDataset pieDataset74 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset46, (java.lang.Comparable) xYIntervalDataItem66);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(xYDatasetSelectionState56);
        org.junit.Assert.assertNull(range57);
        org.junit.Assert.assertNull(range59);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 100.0d + "'", double69 == 100.0d);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 100.0d + "'", double71 == 100.0d);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1.0d + "'", double73 == 1.0d);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1408");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        java.lang.Number number24 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertEquals("'" + number24 + "' != '" + (-1.0d) + "'", number24, (-1.0d));
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1409");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range14 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection15 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset17 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo18 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent19 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset17, datasetChangeInfo18);
        xYIntervalSeriesCollection15.notifyListeners(datasetChangeEvent19);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState21 = xYIntervalSeriesCollection15.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener22 = null;
        xYIntervalSeriesCollection15.removeChangeListener(datasetChangeListener22);
        java.lang.Number number24 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection15);
        org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection15, true);
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection15, true);
        org.jfree.data.Range range30 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection15, true);
        java.lang.Number number31 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection15);
        boolean boolean32 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection15);
        java.lang.Object obj33 = xYIntervalSeriesCollection0.clone();
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNull(range14);
        org.junit.Assert.assertNull(xYDatasetSelectionState21);
        org.junit.Assert.assertNull(number24);
        org.junit.Assert.assertNull(range26);
        org.junit.Assert.assertNull(range28);
        org.junit.Assert.assertNull(range30);
        org.junit.Assert.assertNull(number31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(obj33);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1410");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj8 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.Range range9 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = xYIntervalSeriesCollection0.getStartYValue((int) ' ', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNull(range9);
        org.junit.Assert.assertNull(range11);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1411");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection8 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection8.getDomainOrder();
        int int10 = xYIntervalSeriesCollection8.getSeriesCount();
        boolean boolean11 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection8);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        java.lang.Number number13 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable15 = xYIntervalSeriesCollection8.getSeriesKey(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(number12);
        org.junit.Assert.assertNull(number13);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1412");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener9 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries14 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries14.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo17 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent18 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo17);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo19 = null;
        seriesChangeEvent18.setSummary(seriesChangeInfo19);
        java.lang.Object obj21 = seriesChangeEvent18.getSource();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent18);
        boolean boolean23 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        xYIntervalSeriesCollection0.removeAllSeries();
        org.jfree.data.general.DatasetGroup datasetGroup25 = xYIntervalSeriesCollection0.getGroup();
        // The following exception was thrown during execution in test generation
        try {
            double double28 = xYIntervalSeriesCollection0.getYValue(0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + ' ' + "'", obj21, ' ');
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(datasetGroup25);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1413");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries12 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 32.0d);
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries12);
        boolean boolean14 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection15 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset17 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo18 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent19 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset17, datasetChangeInfo18);
        xYIntervalSeriesCollection15.notifyListeners(datasetChangeEvent19);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState21 = xYIntervalSeriesCollection15.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener22 = null;
        xYIntervalSeriesCollection15.removeChangeListener(datasetChangeListener22);
        java.lang.Number number24 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection15);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo25 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection15.fireDatasetChanged(datasetChangeInfo25);
        xYIntervalSeriesCollection15.removeAllSeries();
        java.lang.Number number28 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection15);
        boolean boolean29 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection15);
        org.jfree.data.Range range30 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        xYIntervalSeriesCollection0.validateObject();
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(xYDatasetSelectionState21);
        org.junit.Assert.assertNull(number24);
        org.junit.Assert.assertNull(number28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(range30);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1414");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        org.jfree.data.pie.PieDataset pieDataset26 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset23, (java.lang.Comparable) 15.5d, (-1.0d));
        org.jfree.data.pie.PieDataset pieDataset29 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset23, (java.lang.Comparable) (-1.0d), (double) '4');
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertNotNull(pieDataset26);
        org.junit.Assert.assertNotNull(pieDataset29);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1415");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener9 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries14 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries14.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo17 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent18 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo17);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo19 = null;
        seriesChangeEvent18.setSummary(seriesChangeInfo19);
        java.lang.Object obj21 = seriesChangeEvent18.getSource();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent18);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener23 = null;
        xYIntervalSeriesCollection0.addChangeListener(datasetChangeListener23);
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Number number26 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState27 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState27);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState29 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.DomainOrder domainOrder30 = xYIntervalSeriesCollection0.getDomainOrder();
        int int31 = xYIntervalSeriesCollection0.getSeriesCount();
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + ' ' + "'", obj21, ' ');
        org.junit.Assert.assertNull(range25);
        org.junit.Assert.assertNull(number26);
        org.junit.Assert.assertNull(xYDatasetSelectionState29);
        org.junit.Assert.assertNotNull(domainOrder30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1416");
        org.jfree.data.ComparableObjectSeries comparableObjectSeries3 = new org.jfree.data.ComparableObjectSeries((java.lang.Comparable) 0L, true, true);
        comparableObjectSeries3.fireSeriesChanged();
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray24 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray25 = new java.lang.Number[][] { numberArray9, numberArray12, numberArray15, numberArray18, numberArray21, numberArray24 };
        org.jfree.data.category.CategoryDataset categoryDataset26 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray25);
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset26, true);
        org.jfree.data.Range range30 = org.jfree.data.Range.shift(range28, 0.0d);
        boolean boolean31 = comparableObjectSeries3.equals((java.lang.Object) range28);
        java.lang.Object obj32 = comparableObjectSeries3.clone();
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(numberArray25);
        org.junit.Assert.assertNotNull(categoryDataset26);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(obj32);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1417");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection26 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset28 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo29 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent30 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset28, datasetChangeInfo29);
        xYIntervalSeriesCollection26.notifyListeners(datasetChangeEvent30);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState32 = xYIntervalSeriesCollection26.getSelectionState();
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection26);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection34 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder35 = xYIntervalSeriesCollection34.getDomainOrder();
        int int36 = xYIntervalSeriesCollection34.getSeriesCount();
        boolean boolean37 = xYIntervalSeriesCollection26.hasListener((java.util.EventListener) xYIntervalSeriesCollection34);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo38 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent39 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) list25, (org.jfree.data.general.Dataset) xYIntervalSeriesCollection34, datasetChangeInfo38);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState40 = xYIntervalSeriesCollection34.getSelectionState();
        java.lang.Object obj41 = xYIntervalSeriesCollection34.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number44 = xYIntervalSeriesCollection34.getX(0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNull(xYDatasetSelectionState32);
        org.junit.Assert.assertNull(range33);
        org.junit.Assert.assertNotNull(domainOrder35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(xYDatasetSelectionState40);
        org.junit.Assert.assertNotNull(obj41);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1418");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.DomainOrder domainOrder13 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState14 = xYIntervalSeriesCollection0.getSelectionState();
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNotNull(domainOrder13);
        org.junit.Assert.assertNull(xYDatasetSelectionState14);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1419");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.general.DatasetGroup datasetGroup13 = xYIntervalSeriesCollection0.getGroup();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem20 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int22 = xYIntervalDataItem20.compareTo((java.lang.Object) 1.0f);
        double double23 = xYIntervalDataItem20.getXHighValue();
        org.jfree.data.Range range24 = null;
        org.jfree.data.Range range26 = org.jfree.data.Range.expandToInclude(range24, (double) 100);
        double double28 = range26.constrain((double) '4');
        boolean boolean29 = xYIntervalDataItem20.equals((java.lang.Object) '4');
        org.jfree.data.Range range30 = null;
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range30, (double) 100);
        double double34 = range32.constrain((double) '4');
        int int35 = xYIntervalDataItem20.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray42 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray45 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray48 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray51 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray54 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray57 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray58 = new java.lang.Number[][] { numberArray42, numberArray45, numberArray48, numberArray51, numberArray54, numberArray57 };
        org.jfree.data.category.CategoryDataset categoryDataset59 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray58);
        org.jfree.data.category.CategoryDataset categoryDataset60 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray58);
        int int61 = xYIntervalDataItem20.compareTo((java.lang.Object) categoryDataset60);
        double double62 = xYIntervalDataItem20.getXHighValue();
        int int63 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) double62);
        org.jfree.data.DomainOrder domainOrder64 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState65 = xYIntervalSeriesCollection0.getSelectionState();
        java.lang.Object obj66 = xYIntervalSeriesCollection0.clone();
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNotNull(datasetGroup13);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(numberArray51);
        org.junit.Assert.assertNotNull(numberArray54);
        org.junit.Assert.assertNotNull(numberArray57);
        org.junit.Assert.assertNotNull(numberArray58);
        org.junit.Assert.assertNotNull(categoryDataset59);
        org.junit.Assert.assertNotNull(categoryDataset60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 100.0d + "'", double62 == 100.0d);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(domainOrder64);
        org.junit.Assert.assertNull(xYDatasetSelectionState65);
        org.junit.Assert.assertNotNull(obj66);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1420");
        org.jfree.data.xy.XYDataset xYDataset0 = null;
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray22 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray23 = new java.lang.Number[][] { numberArray7, numberArray10, numberArray13, numberArray16, numberArray19, numberArray22 };
        org.jfree.data.category.CategoryDataset categoryDataset24 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray23);
        org.jfree.data.category.CategoryDataset categoryDataset25 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("NOID", "org.jfree.data.event.SeriesChangeEvent[source= ]", numberArray23);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset25, false);
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset25);
        int int29 = categoryDataset25.getColumnCount();
        boolean boolean30 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset25);
        java.util.List list31 = categoryDataset25.getColumnKeys();
        java.lang.Number[] numberArray36 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray39 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray42 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray45 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray48 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray51 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray52 = new java.lang.Number[][] { numberArray36, numberArray39, numberArray42, numberArray45, numberArray48, numberArray51 };
        org.jfree.data.category.CategoryDataset categoryDataset53 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray52);
        java.util.List list54 = categoryDataset53.getRowKeys();
        org.jfree.data.Range range56 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset53, false);
        boolean boolean57 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset53);
        org.jfree.data.Range range59 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset53, true);
        org.jfree.data.Range range61 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset53, (double) (byte) 0);
        org.jfree.data.Range range63 = org.jfree.data.Range.expandToInclude(range61, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range65 = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(xYDataset0, list31, range61, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(categoryDataset24);
        org.junit.Assert.assertNotNull(categoryDataset25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(list31);
        org.junit.Assert.assertNotNull(numberArray36);
        org.junit.Assert.assertNotNull(numberArray39);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(numberArray51);
        org.junit.Assert.assertNotNull(numberArray52);
        org.junit.Assert.assertNotNull(categoryDataset53);
        org.junit.Assert.assertNotNull(list54);
        org.junit.Assert.assertNotNull(range56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertNotNull(range61);
        org.junit.Assert.assertNotNull(range63);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1421");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range10 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj11 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.Range range12 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number15 = xYIntervalSeriesCollection0.getStartX((int) (byte) 100, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(range10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNull(range12);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1422");
        org.jfree.data.xy.XYInterval xYInterval5 = new org.jfree.data.xy.XYInterval(52.0d, (double) 0L, (double) (short) 0, (double) 10L, (double) 1.0f);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem12 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int14 = xYIntervalDataItem12.compareTo((java.lang.Object) 1.0f);
        double double15 = xYIntervalDataItem12.getXHighValue();
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        boolean boolean21 = xYIntervalDataItem12.equals((java.lang.Object) '4');
        org.jfree.data.Range range22 = null;
        org.jfree.data.Range range24 = org.jfree.data.Range.expandToInclude(range22, (double) 100);
        double double26 = range24.constrain((double) '4');
        int int27 = xYIntervalDataItem12.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray46 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray49 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray50 = new java.lang.Number[][] { numberArray34, numberArray37, numberArray40, numberArray43, numberArray46, numberArray49 };
        org.jfree.data.category.CategoryDataset categoryDataset51 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray50);
        org.jfree.data.category.CategoryDataset categoryDataset52 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray50);
        int int53 = xYIntervalDataItem12.compareTo((java.lang.Object) categoryDataset52);
        org.jfree.data.general.DatasetGroup datasetGroup54 = categoryDataset52.getGroup();
        boolean boolean55 = xYInterval5.equals((java.lang.Object) datasetGroup54);
        double double56 = xYInterval5.getY();
        double double57 = xYInterval5.getY();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray46);
        org.junit.Assert.assertNotNull(numberArray49);
        org.junit.Assert.assertNotNull(numberArray50);
        org.junit.Assert.assertNotNull(categoryDataset51);
        org.junit.Assert.assertNotNull(categoryDataset52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(datasetGroup54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1423");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        int int2 = xYIntervalSeriesCollection0.getSeriesCount();
        java.lang.Number number3 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        int int4 = xYIntervalSeriesCollection0.getSeriesCount();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = xYIntervalSeriesCollection0.getEndXValue(2147483647, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2147483647, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(number3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1424");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.general.DatasetGroup datasetGroup13 = xYIntervalSeriesCollection0.getGroup();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem20 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int22 = xYIntervalDataItem20.compareTo((java.lang.Object) 1.0f);
        double double23 = xYIntervalDataItem20.getXHighValue();
        org.jfree.data.Range range24 = null;
        org.jfree.data.Range range26 = org.jfree.data.Range.expandToInclude(range24, (double) 100);
        double double28 = range26.constrain((double) '4');
        boolean boolean29 = xYIntervalDataItem20.equals((java.lang.Object) '4');
        org.jfree.data.Range range30 = null;
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range30, (double) 100);
        double double34 = range32.constrain((double) '4');
        int int35 = xYIntervalDataItem20.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray42 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray45 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray48 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray51 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray54 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray57 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray58 = new java.lang.Number[][] { numberArray42, numberArray45, numberArray48, numberArray51, numberArray54, numberArray57 };
        org.jfree.data.category.CategoryDataset categoryDataset59 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray58);
        org.jfree.data.category.CategoryDataset categoryDataset60 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray58);
        int int61 = xYIntervalDataItem20.compareTo((java.lang.Object) categoryDataset60);
        double double62 = xYIntervalDataItem20.getXHighValue();
        int int63 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) double62);
        org.jfree.data.DomainOrder domainOrder64 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.general.DatasetGroup datasetGroup66 = new org.jfree.data.general.DatasetGroup("org.jfree.data.event.SeriesChangeEvent[source= ]");
        xYIntervalSeriesCollection0.setGroup(datasetGroup66);
        java.lang.Number number68 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range69 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range70 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNotNull(datasetGroup13);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(numberArray51);
        org.junit.Assert.assertNotNull(numberArray54);
        org.junit.Assert.assertNotNull(numberArray57);
        org.junit.Assert.assertNotNull(numberArray58);
        org.junit.Assert.assertNotNull(categoryDataset59);
        org.junit.Assert.assertNotNull(categoryDataset60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 100.0d + "'", double62 == 100.0d);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(domainOrder64);
        org.junit.Assert.assertNull(number68);
        org.junit.Assert.assertNull(range69);
        org.junit.Assert.assertNull(range70);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1425");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range9 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem16 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int18 = xYIntervalDataItem16.compareTo((java.lang.Object) 1.0f);
        double double19 = xYIntervalDataItem16.getXHighValue();
        org.jfree.data.Range range20 = null;
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range20, (double) 100);
        double double24 = range22.constrain((double) '4');
        boolean boolean25 = xYIntervalDataItem16.equals((java.lang.Object) '4');
        org.jfree.data.Range range26 = null;
        org.jfree.data.Range range28 = org.jfree.data.Range.expandToInclude(range26, (double) 100);
        double double30 = range28.constrain((double) '4');
        int int31 = xYIntervalDataItem16.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray38 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray41 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray44 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray47 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray50 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray53 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray54 = new java.lang.Number[][] { numberArray38, numberArray41, numberArray44, numberArray47, numberArray50, numberArray53 };
        org.jfree.data.category.CategoryDataset categoryDataset55 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray54);
        org.jfree.data.category.CategoryDataset categoryDataset56 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray54);
        int int57 = xYIntervalDataItem16.compareTo((java.lang.Object) categoryDataset56);
        java.lang.Object obj58 = xYIntervalDataItem16.clone();
        int int59 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem16);
        xYIntervalSeriesCollection0.removeAllSeries();
        org.jfree.data.general.DatasetGroup datasetGroup61 = xYIntervalSeriesCollection0.getGroup();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number64 = xYIntervalSeriesCollection0.getStartX((int) (byte) -1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNull(range9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(numberArray38);
        org.junit.Assert.assertNotNull(numberArray41);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(numberArray47);
        org.junit.Assert.assertNotNull(numberArray50);
        org.junit.Assert.assertNotNull(numberArray53);
        org.junit.Assert.assertNotNull(numberArray54);
        org.junit.Assert.assertNotNull(categoryDataset55);
        org.junit.Assert.assertNotNull(categoryDataset56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(datasetGroup61);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1426");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener9 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries14 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries14.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo17 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent18 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo17);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo19 = null;
        seriesChangeEvent18.setSummary(seriesChangeInfo19);
        java.lang.Object obj21 = seriesChangeEvent18.getSource();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent18);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener23 = null;
        xYIntervalSeriesCollection0.addChangeListener(datasetChangeListener23);
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        int int29 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) (short) 1);
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + ' ' + "'", obj21, ' ');
        org.junit.Assert.assertNull(range25);
        org.junit.Assert.assertNull(range27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1427");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) 1, 93.0d, 0.0d, 67.0d, (double) 2, (-1.0d));
        double double7 = xYIntervalDataItem6.getXLowValue();
        java.lang.Comparable[] comparableArray9 = new java.lang.Comparable[] { double7, (short) 0 };
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem16 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int18 = xYIntervalDataItem16.compareTo((java.lang.Object) 1.0f);
        double double19 = xYIntervalDataItem16.getXHighValue();
        org.jfree.data.Range range20 = null;
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range20, (double) 100);
        double double24 = range22.constrain((double) '4');
        boolean boolean25 = xYIntervalDataItem16.equals((java.lang.Object) '4');
        org.jfree.data.Range range26 = null;
        org.jfree.data.Range range28 = org.jfree.data.Range.expandToInclude(range26, (double) 100);
        double double30 = range28.constrain((double) '4');
        int int31 = xYIntervalDataItem16.compareTo((java.lang.Object) '4');
        double double32 = xYIntervalDataItem16.getYValue();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem40 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int42 = xYIntervalDataItem40.compareTo((java.lang.Object) 1.0f);
        double double43 = xYIntervalDataItem40.getXHighValue();
        org.jfree.data.Range range44 = null;
        org.jfree.data.Range range46 = org.jfree.data.Range.expandToInclude(range44, (double) 100);
        double double48 = range46.constrain((double) '4');
        boolean boolean49 = xYIntervalDataItem40.equals((java.lang.Object) '4');
        org.jfree.data.Range range50 = null;
        org.jfree.data.Range range52 = org.jfree.data.Range.expandToInclude(range50, (double) 100);
        double double54 = range52.constrain((double) '4');
        int int55 = xYIntervalDataItem40.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray62 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray65 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray68 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray71 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray74 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray77 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray78 = new java.lang.Number[][] { numberArray62, numberArray65, numberArray68, numberArray71, numberArray74, numberArray77 };
        org.jfree.data.category.CategoryDataset categoryDataset79 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray78);
        org.jfree.data.category.CategoryDataset categoryDataset80 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray78);
        int int81 = xYIntervalDataItem40.compareTo((java.lang.Object) categoryDataset80);
        double double82 = xYIntervalDataItem40.getXHighValue();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries85 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) xYIntervalDataItem40, false, false);
        java.lang.Comparable[] comparableArray86 = new java.lang.Comparable[] { double32, 10, xYIntervalDataItem40 };
        double[] doubleArray94 = new double[] { 1.0d, (byte) -1, 1.0d };
        double[][] doubleArray95 = new double[][] { doubleArray94 };
        org.jfree.data.category.CategoryDataset categoryDataset96 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "", doubleArray95);
        org.jfree.data.category.CategoryDataset categoryDataset97 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!1", "hi!", doubleArray95);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.category.CategoryDataset categoryDataset98 = org.jfree.data.general.DatasetUtilities.createCategoryDataset(comparableArray9, comparableArray86, doubleArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The number of row keys does not match the number of rows in the data array.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 93.0d + "'", double7 == 93.0d);
        org.junit.Assert.assertNotNull(comparableArray9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 100.0d + "'", double43 == 100.0d);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.0d + "'", double48 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 100.0d + "'", double54 == 100.0d);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(numberArray62);
        org.junit.Assert.assertNotNull(numberArray65);
        org.junit.Assert.assertNotNull(numberArray68);
        org.junit.Assert.assertNotNull(numberArray71);
        org.junit.Assert.assertNotNull(numberArray74);
        org.junit.Assert.assertNotNull(numberArray77);
        org.junit.Assert.assertNotNull(numberArray78);
        org.junit.Assert.assertNotNull(categoryDataset79);
        org.junit.Assert.assertNotNull(categoryDataset80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 100.0d + "'", double82 == 100.0d);
        org.junit.Assert.assertNotNull(comparableArray86);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertNotNull(categoryDataset96);
        org.junit.Assert.assertNotNull(categoryDataset97);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1428");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray3 = new double[] {};
        double[] doubleArray4 = new double[] {};
        double[] doubleArray5 = new double[] {};
        double[] doubleArray6 = new double[] {};
        double[][] doubleArray7 = new double[][] { doubleArray2, doubleArray3, doubleArray4, doubleArray5, doubleArray6 };
        org.jfree.data.category.CategoryDataset categoryDataset8 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("Range[100.0,100.0]", "org.jfree.data.general.SeriesException: org.jfree.data.general.SeriesException: hi!1", doubleArray7);
        int int9 = categoryDataset8.getRowCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(categoryDataset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1429");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener9 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener9);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries14 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries14.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo17 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent18 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo17);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo19 = null;
        seriesChangeEvent18.setSummary(seriesChangeInfo19);
        java.lang.Object obj21 = seriesChangeEvent18.getSource();
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent18);
        boolean boolean23 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        xYIntervalSeriesCollection0.removeAllSeries();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem33 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int35 = xYIntervalDataItem33.compareTo((java.lang.Object) 1.0f);
        double double36 = xYIntervalDataItem33.getXHighValue();
        org.jfree.data.Range range37 = null;
        org.jfree.data.Range range39 = org.jfree.data.Range.expandToInclude(range37, (double) 100);
        double double41 = range39.constrain((double) '4');
        boolean boolean42 = xYIntervalDataItem33.equals((java.lang.Object) '4');
        org.jfree.data.Range range43 = null;
        org.jfree.data.Range range45 = org.jfree.data.Range.expandToInclude(range43, (double) 100);
        double double47 = range45.constrain((double) '4');
        int int48 = xYIntervalDataItem33.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray55 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray58 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray61 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray64 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray67 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray70 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray71 = new java.lang.Number[][] { numberArray55, numberArray58, numberArray61, numberArray64, numberArray67, numberArray70 };
        org.jfree.data.category.CategoryDataset categoryDataset72 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray71);
        org.jfree.data.category.CategoryDataset categoryDataset73 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray71);
        int int74 = xYIntervalDataItem33.compareTo((java.lang.Object) categoryDataset73);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener75 = null;
        categoryDataset73.removeChangeListener(datasetChangeListener75);
        org.jfree.data.general.DatasetGroup datasetGroup77 = categoryDataset73.getGroup();
        xYIntervalSeriesCollection0.setGroup(datasetGroup77);
        xYIntervalSeriesCollection0.removeAllSeries();
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + ' ' + "'", obj21, ' ');
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(range25);
        org.junit.Assert.assertNull(range26);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(numberArray55);
        org.junit.Assert.assertNotNull(numberArray58);
        org.junit.Assert.assertNotNull(numberArray61);
        org.junit.Assert.assertNotNull(numberArray64);
        org.junit.Assert.assertNotNull(numberArray67);
        org.junit.Assert.assertNotNull(numberArray70);
        org.junit.Assert.assertNotNull(numberArray71);
        org.junit.Assert.assertNotNull(categoryDataset72);
        org.junit.Assert.assertNotNull(categoryDataset73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(datasetGroup77);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1430");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        boolean boolean10 = xYIntervalDataItem6.equals((java.lang.Object) 32);
        double double11 = xYIntervalDataItem6.getYValue();
        java.lang.Object obj12 = xYIntervalDataItem6.clone();
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray29 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray32 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray33 = new java.lang.Number[][] { numberArray17, numberArray20, numberArray23, numberArray26, numberArray29, numberArray32 };
        org.jfree.data.category.CategoryDataset categoryDataset34 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray33);
        java.util.List list35 = categoryDataset34.getRowKeys();
        org.jfree.data.Range range37 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset34, false);
        int int39 = categoryDataset34.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.Range range40 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset34);
        org.jfree.data.Range range43 = org.jfree.data.Range.expand(range40, (double) (byte) -1, 200.0d);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries45 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) "");
        boolean boolean46 = xYIntervalSeries45.getAllowDuplicateXValues();
        boolean boolean47 = range43.equals((java.lang.Object) xYIntervalSeries45);
        org.jfree.data.ComparableObjectItem comparableObjectItem48 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable) xYIntervalDataItem6, (java.lang.Object) xYIntervalSeries45);
        xYIntervalSeries45.fireSeriesChanged();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(numberArray33);
        org.junit.Assert.assertNotNull(categoryDataset34);
        org.junit.Assert.assertNotNull(list35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNotNull(range43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1431");
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray24 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray27 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray28 = new java.lang.Number[][] { numberArray12, numberArray15, numberArray18, numberArray21, numberArray24, numberArray27 };
        org.jfree.data.category.CategoryDataset categoryDataset29 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray28);
        org.jfree.data.category.CategoryDataset categoryDataset30 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray28);
        org.jfree.data.category.CategoryDataset categoryDataset31 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "org.jfree.data.event.SeriesChangeEvent[source= ]", numberArray28);
        org.jfree.data.category.CategoryDataset categoryDataset32 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("1", "hi!", numberArray28);
        org.jfree.data.category.CategoryDataset categoryDataset33 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("org.jfree.data.event.SeriesChangeEvent[source=Range[100.0,100.0]]", "org.jfree.data.general.SeriesException: hi!1", numberArray28);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(numberArray27);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(categoryDataset29);
        org.junit.Assert.assertNotNull(categoryDataset30);
        org.junit.Assert.assertNotNull(categoryDataset31);
        org.junit.Assert.assertNotNull(categoryDataset32);
        org.junit.Assert.assertNotNull(categoryDataset33);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1432");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.Range range23 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        org.jfree.data.Range range25 = org.jfree.data.Range.shift(range23, 0.0d);
        double double26 = range25.getCentralValue();
        org.jfree.data.Range range28 = org.jfree.data.Range.scale(range25, (double) 1);
        boolean boolean30 = range28.contains(2.147483839E9d);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(range23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 15.5d + "'", double26 == 15.5d);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1433");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection26 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset28 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo29 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent30 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset28, datasetChangeInfo29);
        xYIntervalSeriesCollection26.notifyListeners(datasetChangeEvent30);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState32 = xYIntervalSeriesCollection26.getSelectionState();
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection26);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection34 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder35 = xYIntervalSeriesCollection34.getDomainOrder();
        int int36 = xYIntervalSeriesCollection34.getSeriesCount();
        boolean boolean37 = xYIntervalSeriesCollection26.hasListener((java.util.EventListener) xYIntervalSeriesCollection34);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo38 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent39 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) list25, (org.jfree.data.general.Dataset) xYIntervalSeriesCollection34, datasetChangeInfo38);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState40 = xYIntervalSeriesCollection34.getSelectionState();
        org.jfree.data.Range range41 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection34);
        org.jfree.data.Range range43 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection34, true);
        org.jfree.data.Range range44 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection34);
        // The following exception was thrown during execution in test generation
        try {
            double double47 = xYIntervalSeriesCollection34.getStartYValue((int) (short) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertNull(xYDatasetSelectionState32);
        org.junit.Assert.assertNull(range33);
        org.junit.Assert.assertNotNull(domainOrder35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(xYDatasetSelectionState40);
        org.junit.Assert.assertNull(range41);
        org.junit.Assert.assertNull(range43);
        org.junit.Assert.assertNull(range44);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1434");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection1 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset3 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo4 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent5 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset3, datasetChangeInfo4);
        xYIntervalSeriesCollection1.notifyListeners(datasetChangeEvent5);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries10 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries10.setMaximumItemCount((int) ' ');
        org.jfree.data.Range range14 = null;
        org.jfree.data.Range range16 = org.jfree.data.Range.expandToInclude(range14, (double) 100);
        double double18 = range16.constrain((double) '4');
        double double19 = range16.getLength();
        org.jfree.data.Range range20 = null;
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range20, (double) 100);
        double double24 = range22.constrain((double) '4');
        boolean boolean25 = range16.intersects(range22);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries29 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries29.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo32 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent33 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo32);
        xYIntervalSeries10.firePropertyChange("", (java.lang.Object) boolean25, (java.lang.Object) ' ');
        xYIntervalSeriesCollection1.removeSeries(xYIntervalSeries10);
        xYIntervalSeries10.fireSeriesChanged();
        boolean boolean37 = xYIntervalSeries10.getAllowDuplicateXValues();
        java.lang.Number[] numberArray42 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray45 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray48 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray51 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray54 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray57 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray58 = new java.lang.Number[][] { numberArray42, numberArray45, numberArray48, numberArray51, numberArray54, numberArray57 };
        org.jfree.data.category.CategoryDataset categoryDataset59 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray58);
        org.jfree.data.pie.PieDataset pieDataset61 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset59, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState62 = pieDataset61.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset66 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset61, (java.lang.Comparable) 'a', (double) 10.0f, (int) (short) 10);
        java.lang.Number number68 = pieDataset66.getValue((int) (short) 100);
        org.jfree.data.pie.PieDataset pieDataset71 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset66, (java.lang.Comparable) 'a', (double) 100L);
        boolean boolean72 = xYIntervalSeries10.equals((java.lang.Object) pieDataset66);
        java.lang.Comparable comparable74 = pieDataset66.getKey((int) (byte) 1);
        org.jfree.data.category.CategoryDataset categoryDataset75 = org.jfree.data.general.DatasetUtilities.createCategoryDataset((java.lang.Comparable) 15.0d, (org.jfree.data.KeyedValues) pieDataset66);
        org.junit.Assert.assertNotNull(range16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(numberArray51);
        org.junit.Assert.assertNotNull(numberArray54);
        org.junit.Assert.assertNotNull(numberArray57);
        org.junit.Assert.assertNotNull(numberArray58);
        org.junit.Assert.assertNotNull(categoryDataset59);
        org.junit.Assert.assertNotNull(pieDataset61);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState62);
        org.junit.Assert.assertNotNull(pieDataset66);
        org.junit.Assert.assertNull(number68);
        org.junit.Assert.assertNotNull(pieDataset71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + comparable74 + "' != '" + "2" + "'", comparable74, "2");
        org.junit.Assert.assertNotNull(categoryDataset75);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1435");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        java.lang.Number number26 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        boolean boolean27 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset21);
        java.lang.Number number29 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        int int30 = categoryDataset21.getColumnCount();
        java.util.List list31 = categoryDataset21.getRowKeys();
        java.util.List list32 = categoryDataset21.getColumnKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number35 = categoryDataset21.getValue((java.lang.Comparable) (byte) 1, (java.lang.Comparable) '4');
            org.junit.Assert.fail("Expected exception of type org.jfree.data.UnknownKeyException; message: Row key (1) not recognised.");
        } catch (org.jfree.data.UnknownKeyException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertEquals("'" + number26 + "' != '" + (-1.0d) + "'", number26, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertEquals("'" + number29 + "' != '" + (-1.0d) + "'", number29, (-1.0d));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(list31);
        org.junit.Assert.assertNotNull(list32);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1436");
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries1 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 32.0d);
        int int2 = xYIntervalSeries1.getItemCount();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection3 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset5 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo6 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent7 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset5, datasetChangeInfo6);
        xYIntervalSeriesCollection3.notifyListeners(datasetChangeEvent7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection3.getSelectionState();
        org.jfree.data.Range range10 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection3);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection11 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder12 = xYIntervalSeriesCollection11.getDomainOrder();
        int int13 = xYIntervalSeriesCollection11.getSeriesCount();
        boolean boolean14 = xYIntervalSeriesCollection3.hasListener((java.util.EventListener) xYIntervalSeriesCollection11);
        java.lang.Number number15 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection11);
        xYIntervalSeriesCollection11.validateObject();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent17 = null;
        xYIntervalSeriesCollection11.notifyListeners(datasetChangeEvent17);
        xYIntervalSeriesCollection11.validateObject();
        // The following exception was thrown during execution in test generation
        try {
            xYIntervalSeries1.addChangeListener((org.jfree.data.event.SeriesChangeListener) xYIntervalSeriesCollection11);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Listener org.jfree.data.xy.XYIntervalSeriesCollection@485a3b7a is not of type class org.jfree.data.xy.XYIntervalSeries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(range10);
        org.junit.Assert.assertNotNull(domainOrder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(number15);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1437");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.general.DatasetGroup datasetGroup2 = xYIntervalSeriesCollection0.getGroup();
        boolean boolean3 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double6 = xYIntervalSeriesCollection0.getXValue(0, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNotNull(datasetGroup2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1438");
        double[] doubleArray11 = new double[] { 1.0d, (byte) -1, 1.0d };
        double[][] doubleArray12 = new double[][] { doubleArray11 };
        org.jfree.data.category.CategoryDataset categoryDataset13 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "", doubleArray12);
        org.jfree.data.category.CategoryDataset categoryDataset14 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!1", "hi!", doubleArray12);
        org.jfree.data.category.CategoryDataset categoryDataset15 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("Range[100.0,100.0]", "org.jfree.data.event.SeriesChangeEvent[source= ]", doubleArray12);
        org.jfree.data.category.CategoryDataset categoryDataset16 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("org.jfree.data.event.SeriesChangeEvent[source= ]", "Range[-6.0,192.0]", doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(categoryDataset13);
        org.junit.Assert.assertNotNull(categoryDataset14);
        org.junit.Assert.assertNotNull(categoryDataset15);
        org.junit.Assert.assertNotNull(categoryDataset16);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1439");
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries3 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries3.add((double) '4', (double) 1, 0.0d, (double) 10L, (double) (short) 1, (-1.0d));
        java.lang.String str11 = xYIntervalSeries3.getDescription();
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray29 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray32 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray33 = new java.lang.Number[][] { numberArray17, numberArray20, numberArray23, numberArray26, numberArray29, numberArray32 };
        org.jfree.data.category.CategoryDataset categoryDataset34 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray33);
        java.util.List list35 = categoryDataset34.getRowKeys();
        org.jfree.data.Range range37 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset34, false);
        int int39 = categoryDataset34.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset41 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo42 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent43 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset41, datasetChangeInfo42);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent44 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset34, datasetChangeInfo42);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem51 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int53 = xYIntervalDataItem51.compareTo((java.lang.Object) 1.0f);
        int int54 = categoryDataset34.getColumnIndex((java.lang.Comparable) xYIntervalDataItem51);
        double double55 = xYIntervalDataItem51.getXLowValue();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection56 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder57 = xYIntervalSeriesCollection56.getDomainOrder();
        org.jfree.data.ComparableObjectItem comparableObjectItem58 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable) xYIntervalDataItem51, (java.lang.Object) domainOrder57);
        xYIntervalSeries3.setKey((java.lang.Comparable) xYIntervalDataItem51);
        xYIntervalSeries3.add((double) 1L, (double) (-1L), (double) (byte) 0, (double) 6, (double) 4, (-1.0d));
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(numberArray33);
        org.junit.Assert.assertNotNull(categoryDataset34);
        org.junit.Assert.assertNotNull(list35);
        org.junit.Assert.assertNotNull(range37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertNotNull(domainOrder57);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1440");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray3 = new double[] {};
        double[] doubleArray4 = new double[] {};
        double[] doubleArray5 = new double[] {};
        double[] doubleArray6 = new double[] {};
        double[][] doubleArray7 = new double[][] { doubleArray2, doubleArray3, doubleArray4, doubleArray5, doubleArray6 };
        org.jfree.data.category.CategoryDataset categoryDataset8 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("Range[100.0,100.0]", "org.jfree.data.general.SeriesException: org.jfree.data.general.SeriesException: hi!1", doubleArray7);
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray29 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray30 = new java.lang.Number[][] { numberArray14, numberArray17, numberArray20, numberArray23, numberArray26, numberArray29 };
        org.jfree.data.category.CategoryDataset categoryDataset31 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray30);
        java.util.List list32 = categoryDataset31.getRowKeys();
        org.jfree.data.Range range34 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset31, false);
        int int36 = categoryDataset31.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset38 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo39 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent40 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset38, datasetChangeInfo39);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent41 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset31, datasetChangeInfo39);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem48 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int50 = xYIntervalDataItem48.compareTo((java.lang.Object) 1.0f);
        int int51 = categoryDataset31.getColumnIndex((java.lang.Comparable) xYIntervalDataItem48);
        double double52 = xYIntervalDataItem48.getXLowValue();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection53 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder54 = xYIntervalSeriesCollection53.getDomainOrder();
        org.jfree.data.ComparableObjectItem comparableObjectItem55 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable) xYIntervalDataItem48, (java.lang.Object) domainOrder54);
        org.jfree.data.pie.PieDataset pieDataset56 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset8, (java.lang.Comparable) comparableObjectItem55);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number58 = pieDataset56.getValue((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(categoryDataset8);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(numberArray30);
        org.junit.Assert.assertNotNull(categoryDataset31);
        org.junit.Assert.assertNotNull(list32);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertNotNull(domainOrder54);
        org.junit.Assert.assertNotNull(pieDataset56);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1441");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        int int26 = categoryDataset21.getRowIndex((java.lang.Comparable) "org.jfree.data.general.SeriesException: ");
        int int27 = categoryDataset21.getRowCount();
        java.lang.Number number28 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        org.jfree.data.Range range29 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset21);
        double double30 = range29.getLength();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertEquals("'" + number28 + "' != '" + (-1.0d) + "'", number28, (-1.0d));
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 32.0d + "'", double30 == 32.0d);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1442");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.general.DatasetGroup datasetGroup6 = xYIntervalSeriesCollection0.getGroup();
        boolean boolean7 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener8 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener8);
        org.junit.Assert.assertNotNull(datasetGroup6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1443");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.general.DatasetGroup datasetGroup6 = xYIntervalSeriesCollection0.getGroup();
        org.jfree.data.Range range8 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        int int9 = xYIntervalSeriesCollection0.getSeriesCount();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo10 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent11 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) int9, seriesChangeInfo10);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo12 = null;
        seriesChangeEvent11.setSummary(seriesChangeInfo12);
        java.lang.Object obj14 = seriesChangeEvent11.getSource();
        org.junit.Assert.assertNotNull(datasetGroup6);
        org.junit.Assert.assertNull(range8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + 0 + "'", obj14, 0);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1444");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState24 = pieDataset23.getSelectionState();
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState25 = pieDataset23.getSelectionState();
        java.lang.Number number27 = pieDataset23.getValue(32);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState24);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState25);
        org.junit.Assert.assertNull(number27);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1445");
        org.jfree.data.function.Function2D function2D0 = null;
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries5 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) "");
        boolean boolean6 = xYIntervalSeries5.getAllowDuplicateXValues();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem13 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int15 = xYIntervalDataItem13.compareTo((java.lang.Object) 1.0f);
        double double16 = xYIntervalDataItem13.getXHighValue();
        org.jfree.data.Range range17 = null;
        org.jfree.data.Range range19 = org.jfree.data.Range.expandToInclude(range17, (double) 100);
        double double21 = range19.constrain((double) '4');
        boolean boolean22 = xYIntervalDataItem13.equals((java.lang.Object) '4');
        boolean boolean24 = xYIntervalDataItem13.equals((java.lang.Object) 0.0f);
        java.lang.Object obj25 = xYIntervalDataItem13.clone();
        xYIntervalSeries5.setKey((java.lang.Comparable) xYIntervalDataItem13);
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray46 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray47 = new java.lang.Number[][] { numberArray31, numberArray34, numberArray37, numberArray40, numberArray43, numberArray46 };
        org.jfree.data.category.CategoryDataset categoryDataset48 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray47);
        org.jfree.data.pie.PieDataset pieDataset50 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset48, 1);
        int int51 = categoryDataset48.getRowCount();
        java.lang.Number number52 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(categoryDataset48);
        int int53 = xYIntervalDataItem13.compareTo((java.lang.Object) categoryDataset48);
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYDataset xYDataset54 = org.jfree.data.general.DatasetUtilities.sampleFunction2D(function2D0, (double) 3, (double) 3, 0, (java.lang.Comparable) int53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'f' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertNotNull(range19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray46);
        org.junit.Assert.assertNotNull(numberArray47);
        org.junit.Assert.assertNotNull(categoryDataset48);
        org.junit.Assert.assertNotNull(pieDataset50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 6 + "'", int51 == 6);
        org.junit.Assert.assertEquals("'" + number52 + "' != '" + 32.0d + "'", number52, 32.0d);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1446");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj8 = xYIntervalSeriesCollection0.clone();
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number12 = xYIntervalSeriesCollection0.getStartY(6, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNull(number9);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1447");
        org.jfree.data.xy.TableXYDataset tableXYDataset0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(tableXYDataset0, (double) 1.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'dataset' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1448");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        java.lang.Object obj10 = xYIntervalDataItem6.clone();
        boolean boolean12 = xYIntervalDataItem6.equals((java.lang.Object) 0);
        java.lang.Object obj13 = xYIntervalDataItem6.clone();
        double double14 = xYIntervalDataItem6.getYValue();
        double double15 = xYIntervalDataItem6.getYHighValue();
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray29 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray32 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray35 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray36 = new java.lang.Number[][] { numberArray20, numberArray23, numberArray26, numberArray29, numberArray32, numberArray35 };
        org.jfree.data.category.CategoryDataset categoryDataset37 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray36);
        org.jfree.data.pie.PieDataset pieDataset39 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset37, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState40 = pieDataset39.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset44 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset39, (java.lang.Comparable) 'a', (double) 10.0f, (int) (short) 10);
        java.lang.Number number46 = pieDataset44.getValue((int) (short) 100);
        org.jfree.data.pie.PieDataset pieDataset49 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset44, (java.lang.Comparable) 'a', (double) 100L);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener50 = null;
        pieDataset44.removeChangeListener(datasetChangeListener50);
        java.util.List list52 = pieDataset44.getKeys();
        org.jfree.data.category.CategoryDataset categoryDataset53 = org.jfree.data.general.DatasetUtilities.createCategoryDataset((java.lang.Comparable) double15, (org.jfree.data.KeyedValues) pieDataset44);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener54 = null;
        pieDataset44.addChangeListener(datasetChangeListener54);
        boolean boolean56 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(pieDataset44);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries60 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        java.lang.Object obj62 = null;
        xYIntervalSeries60.firePropertyChange("", obj62, (java.lang.Object) "hi!");
        xYIntervalSeries60.setKey((java.lang.Comparable) (short) 1);
        xYIntervalSeries60.add((double) 100, (double) 0, (double) (byte) -1, (double) (short) -1, (double) 100, (double) 0);
        java.lang.String str74 = xYIntervalSeries60.getDescription();
        boolean boolean75 = xYIntervalSeries60.getNotify();
        boolean boolean76 = xYIntervalSeries60.getAllowDuplicateXValues();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem83 = new org.jfree.data.xy.XYIntervalDataItem((double) 1, 93.0d, 0.0d, 67.0d, (double) 2, (-1.0d));
        double double84 = xYIntervalDataItem83.getXLowValue();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection85 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range87 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection85, true);
        org.jfree.data.Range range88 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection85);
        int int89 = xYIntervalDataItem83.compareTo((java.lang.Object) range88);
        int int90 = xYIntervalSeries60.indexOf((java.lang.Comparable) xYIntervalDataItem83);
        org.jfree.data.pie.PieDataset pieDataset93 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset44, (java.lang.Comparable) xYIntervalDataItem83, 0.0d, (int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray29);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(numberArray35);
        org.junit.Assert.assertNotNull(numberArray36);
        org.junit.Assert.assertNotNull(categoryDataset37);
        org.junit.Assert.assertNotNull(pieDataset39);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState40);
        org.junit.Assert.assertNotNull(pieDataset44);
        org.junit.Assert.assertNull(number46);
        org.junit.Assert.assertNotNull(pieDataset49);
        org.junit.Assert.assertNotNull(list52);
        org.junit.Assert.assertNotNull(categoryDataset53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 93.0d + "'", double84 == 93.0d);
        org.junit.Assert.assertNull(range87);
        org.junit.Assert.assertNull(range88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(pieDataset93);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1449");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.general.DatasetGroup datasetGroup13 = xYIntervalSeriesCollection0.getGroup();
        org.jfree.data.Range range14 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection15 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset17 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo18 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent19 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset17, datasetChangeInfo18);
        xYIntervalSeriesCollection15.notifyListeners(datasetChangeEvent19);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState21 = xYIntervalSeriesCollection15.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener22 = null;
        xYIntervalSeriesCollection15.removeChangeListener(datasetChangeListener22);
        java.lang.Number number24 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection15);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo25 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection15.fireDatasetChanged(datasetChangeInfo25);
        xYIntervalSeriesCollection15.removeAllSeries();
        org.jfree.data.DomainOrder domainOrder28 = xYIntervalSeriesCollection15.getDomainOrder();
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo29 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent30 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) xYIntervalSeriesCollection15, seriesChangeInfo29);
        xYIntervalSeriesCollection0.seriesChanged(seriesChangeEvent30);
        // The following exception was thrown during execution in test generation
        try {
            double double34 = xYIntervalSeriesCollection0.getEndXValue((int) ' ', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNotNull(datasetGroup13);
        org.junit.Assert.assertNull(range14);
        org.junit.Assert.assertNull(xYDatasetSelectionState21);
        org.junit.Assert.assertNull(number24);
        org.junit.Assert.assertNotNull(domainOrder28);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1450");
        org.jfree.data.function.Function2D function2D0 = null;
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) 1, (double) 1L, (double) (byte) 100, (double) 1, (double) 'a', 52.0d);
        double[] doubleArray20 = new double[] { 1.0d, (byte) -1, 1.0d };
        double[][] doubleArray21 = new double[][] { doubleArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "", doubleArray21);
        org.jfree.data.category.CategoryDataset categoryDataset23 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!1", "hi!", doubleArray21);
        org.jfree.data.category.CategoryDataset categoryDataset24 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("Range[100.0,100.0]", "org.jfree.data.general.SeriesException: ", doubleArray21);
        org.jfree.data.ComparableObjectItem comparableObjectItem25 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable) 'a', (java.lang.Object) "org.jfree.data.general.SeriesException: ");
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.xy.XYDataset xYDataset26 = org.jfree.data.general.DatasetUtilities.sampleFunction2D(function2D0, (double) 0L, 0.0d, (-1), (java.lang.Comparable) "org.jfree.data.general.SeriesException: ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null 'f' argument.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(categoryDataset23);
        org.junit.Assert.assertNotNull(categoryDataset24);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1451");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.lang.Number number25 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset21);
        java.lang.Comparable comparable28 = categoryDataset21.getRowKey(0);
        org.jfree.data.Range range30 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds(categoryDataset21, false);
        org.jfree.data.Range range32 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, true);
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range32, (double) 100.0f);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertEquals("'" + number25 + "' != '" + (-1.0d) + "'", number25, (-1.0d));
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertEquals("'" + comparable28 + "' != '" + "hi!1" + "'", comparable28, "hi!1");
        org.junit.Assert.assertNotNull(range30);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range34);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1452");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range3 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        xYIntervalSeriesCollection0.validateObject();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = xYIntervalSeriesCollection0.getStartYValue((int) (byte) -1, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNull(range3);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1453");
        double[] doubleArray2 = new double[] {};
        double[] doubleArray3 = new double[] {};
        double[] doubleArray4 = new double[] {};
        double[] doubleArray5 = new double[] {};
        double[] doubleArray6 = new double[] {};
        double[][] doubleArray7 = new double[][] { doubleArray2, doubleArray3, doubleArray4, doubleArray5, doubleArray6 };
        org.jfree.data.category.CategoryDataset categoryDataset8 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("Range[100.0,100.0]", "org.jfree.data.general.SeriesException: org.jfree.data.general.SeriesException: hi!1", doubleArray7);
        int int9 = categoryDataset8.getColumnCount();
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds(categoryDataset8, true);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener12 = null;
        categoryDataset8.removeChangeListener(datasetChangeListener12);
        org.jfree.data.Range range15 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds(categoryDataset8, false);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(categoryDataset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range15);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1454");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        boolean boolean13 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Class<?> wildcardClass14 = xYIntervalSeriesCollection0.getClass();
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1455");
        java.lang.Number[] numberArray6 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray22 = new java.lang.Number[][] { numberArray6, numberArray9, numberArray12, numberArray15, numberArray18, numberArray21 };
        org.jfree.data.category.CategoryDataset categoryDataset23 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray22);
        org.jfree.data.category.CategoryDataset categoryDataset24 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("NOID", "org.jfree.data.event.SeriesChangeEvent[source= ]", numberArray22);
        org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset24, false);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset24);
        boolean boolean29 = range27.contains(67.0d);
        org.jfree.data.Range range30 = null;
        org.jfree.data.Range range32 = org.jfree.data.Range.expandToInclude(range30, (double) 100);
        double double34 = range32.constrain((double) '4');
        double double35 = range32.getLength();
        org.jfree.data.Range range38 = org.jfree.data.Range.shift(range32, (double) 100, false);
        org.jfree.data.Range range39 = null;
        org.jfree.data.Range range41 = org.jfree.data.Range.expandToInclude(range39, (double) 100);
        double double43 = range41.constrain((double) '4');
        double double44 = range41.getLength();
        org.jfree.data.Range range45 = null;
        org.jfree.data.Range range47 = org.jfree.data.Range.expandToInclude(range45, (double) 100);
        double double49 = range47.constrain((double) '4');
        boolean boolean50 = range41.intersects(range47);
        boolean boolean51 = range32.intersects(range41);
        double double52 = range32.getUpperBound();
        boolean boolean53 = range27.intersects(range32);
        double double54 = range27.getLowerBound();
        double double55 = range27.getLowerBound();
        org.junit.Assert.assertNotNull(numberArray6);
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(categoryDataset23);
        org.junit.Assert.assertNotNull(categoryDataset24);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range41);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 100.0d + "'", double43 == 100.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 100.0d + "'", double52 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1.0d) + "'", double54 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-1.0d) + "'", double55 == (-1.0d));
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1456");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        boolean boolean25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo26 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent27 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) boolean25, seriesChangeInfo26);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1457");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState24 = pieDataset23.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset28 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset23, (java.lang.Comparable) 'a', (double) 10.0f, (int) (short) 10);
        java.lang.Number number30 = pieDataset28.getValue((int) (short) 100);
        org.jfree.data.pie.PieDataset pieDataset33 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset28, (java.lang.Comparable) 'a', (double) 100L);
        boolean boolean34 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(pieDataset28);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState24);
        org.junit.Assert.assertNotNull(pieDataset28);
        org.junit.Assert.assertNull(number30);
        org.junit.Assert.assertNotNull(pieDataset33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1458");
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries3 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) (short) 100, false, true);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection4 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset6 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo7 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent8 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset6, datasetChangeInfo7);
        xYIntervalSeriesCollection4.notifyListeners(datasetChangeEvent8);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState10 = xYIntervalSeriesCollection4.getSelectionState();
        int int12 = xYIntervalSeriesCollection4.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.DomainOrder domainOrder13 = xYIntervalSeriesCollection4.getDomainOrder();
        boolean boolean14 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection4);
        boolean boolean15 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection4);
        // The following exception was thrown during execution in test generation
        try {
            xYIntervalSeries3.addChangeListener((org.jfree.data.event.SeriesChangeListener) xYIntervalSeriesCollection4);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Listener org.jfree.data.xy.XYIntervalSeriesCollection@7e532e9 is not of type class org.jfree.data.xy.XYIntervalSeries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(domainOrder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1459");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState24 = pieDataset23.getSelectionState();
        org.jfree.data.pie.PieDataset pieDataset28 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset23, (java.lang.Comparable) 'a', (double) 10.0f, (int) (short) 10);
        java.lang.Number number30 = pieDataset28.getValue((int) (short) 100);
        org.jfree.data.pie.PieDataset pieDataset33 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset28, (java.lang.Comparable) 'a', (double) 100L);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener34 = null;
        pieDataset28.removeChangeListener(datasetChangeListener34);
        java.util.List list36 = pieDataset28.getKeys();
        boolean boolean37 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(pieDataset28);
        org.jfree.data.pie.PieDataset pieDataset41 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset28, (java.lang.Comparable) 127.0d, 0.0d, 0);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState24);
        org.junit.Assert.assertNotNull(pieDataset28);
        org.junit.Assert.assertNull(number30);
        org.junit.Assert.assertNotNull(pieDataset33);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(pieDataset41);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1460");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.Range range6 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range9 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.junit.Assert.assertNull(range6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNull(range9);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1461");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        java.lang.Number number26 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        boolean boolean27 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset21);
        java.lang.Number number29 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        org.jfree.data.pie.PieDataset pieDataset31 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, (int) (short) 0);
        org.jfree.data.Range range32 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset21);
        java.util.List list33 = categoryDataset21.getColumnKeys();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertEquals("'" + number26 + "' != '" + (-1.0d) + "'", number26, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertEquals("'" + number29 + "' != '" + (-1.0d) + "'", number29, (-1.0d));
        org.junit.Assert.assertNotNull(pieDataset31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(list33);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1462");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState9);
        java.lang.Number number11 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries15 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        java.lang.Object obj17 = null;
        xYIntervalSeries15.firePropertyChange("", obj17, (java.lang.Object) "hi!");
        xYIntervalSeries15.setKey((java.lang.Comparable) (short) 1);
        xYIntervalSeries15.firePropertyChange("", (java.lang.Object) 100L, (java.lang.Object) 100.0f);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries29 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        boolean boolean30 = xYIntervalSeries29.getNotify();
        int int31 = xYIntervalSeries29.getItemCount();
        xYIntervalSeries29.clear();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries36 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries36.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo39 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent40 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo39);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo41 = null;
        seriesChangeEvent40.setSummary(seriesChangeInfo41);
        java.lang.Object obj43 = seriesChangeEvent40.getSource();
        xYIntervalSeries29.notifyListeners(seriesChangeEvent40);
        xYIntervalSeries15.notifyListeners(seriesChangeEvent40);
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries15);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries50 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        boolean boolean51 = xYIntervalSeries50.getNotify();
        int int52 = xYIntervalSeries50.getItemCount();
        boolean boolean53 = xYIntervalSeries50.getAutoSort();
        xYIntervalSeries50.fireSeriesChanged();
        xYIntervalSeries50.setMaximumItemCount(0);
        xYIntervalSeries50.setDescription("");
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries50);
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(number11);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + obj43 + "' != '" + ' ' + "'", obj43, ' ');
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1463");
        java.lang.Number[] numberArray6 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray22 = new java.lang.Number[][] { numberArray6, numberArray9, numberArray12, numberArray15, numberArray18, numberArray21 };
        org.jfree.data.category.CategoryDataset categoryDataset23 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray22);
        org.jfree.data.category.CategoryDataset categoryDataset24 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("NOID", "org.jfree.data.event.SeriesChangeEvent[source= ]", numberArray22);
        org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset24, false);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset24);
        int int28 = categoryDataset24.getColumnCount();
        boolean boolean29 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset24);
        java.util.List list30 = categoryDataset24.getColumnKeys();
        java.lang.Number number31 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset24);
        org.junit.Assert.assertNotNull(numberArray6);
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(categoryDataset23);
        org.junit.Assert.assertNotNull(categoryDataset24);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(list30);
        org.junit.Assert.assertEquals("'" + number31 + "' != '" + (-1.0d) + "'", number31, (-1.0d));
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1464");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        int int1 = xYIntervalSeriesCollection0.getSeriesCount();
        java.lang.Number[] numberArray6 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray22 = new java.lang.Number[][] { numberArray6, numberArray9, numberArray12, numberArray15, numberArray18, numberArray21 };
        org.jfree.data.category.CategoryDataset categoryDataset23 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray22);
        org.jfree.data.pie.PieDataset pieDataset25 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset23, 1);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset23, true);
        java.util.List list28 = categoryDataset23.getRowKeys();
        java.lang.Number[] numberArray35 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray38 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray41 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray44 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray47 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray50 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray51 = new java.lang.Number[][] { numberArray35, numberArray38, numberArray41, numberArray44, numberArray47, numberArray50 };
        org.jfree.data.category.CategoryDataset categoryDataset52 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray51);
        org.jfree.data.category.CategoryDataset categoryDataset53 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("NOID", "org.jfree.data.event.SeriesChangeEvent[source= ]", numberArray51);
        org.jfree.data.Range range55 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset53, false);
        org.jfree.data.Range range57 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset53, 52.0d);
        double double58 = range57.getLowerBound();
        // The following exception was thrown during execution in test generation
        try {
            org.jfree.data.Range range60 = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, list28, range57, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(numberArray6);
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(categoryDataset23);
        org.junit.Assert.assertNotNull(pieDataset25);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(list28);
        org.junit.Assert.assertNotNull(numberArray35);
        org.junit.Assert.assertNotNull(numberArray38);
        org.junit.Assert.assertNotNull(numberArray41);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(numberArray47);
        org.junit.Assert.assertNotNull(numberArray50);
        org.junit.Assert.assertNotNull(numberArray51);
        org.junit.Assert.assertNotNull(categoryDataset52);
        org.junit.Assert.assertNotNull(categoryDataset53);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 46.0d + "'", double58 == 46.0d);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1465");
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries3 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        java.lang.Object obj5 = null;
        xYIntervalSeries3.firePropertyChange("", obj5, (java.lang.Object) "hi!");
        xYIntervalSeries3.setKey((java.lang.Comparable) (short) 1);
        xYIntervalSeries3.firePropertyChange("", (java.lang.Object) 100L, (java.lang.Object) 100.0f);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries17 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        boolean boolean18 = xYIntervalSeries17.getNotify();
        int int19 = xYIntervalSeries17.getItemCount();
        xYIntervalSeries17.clear();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries24 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries24.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo27 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent28 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo27);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo29 = null;
        seriesChangeEvent28.setSummary(seriesChangeInfo29);
        java.lang.Object obj31 = seriesChangeEvent28.getSource();
        xYIntervalSeries17.notifyListeners(seriesChangeEvent28);
        xYIntervalSeries3.notifyListeners(seriesChangeEvent28);
        java.lang.Number[] numberArray39 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray42 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray45 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray48 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray51 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray54 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray55 = new java.lang.Number[][] { numberArray39, numberArray42, numberArray45, numberArray48, numberArray51, numberArray54 };
        org.jfree.data.category.CategoryDataset categoryDataset56 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray55);
        java.util.List list57 = categoryDataset56.getRowKeys();
        org.jfree.data.Range range59 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset56, false);
        int int61 = categoryDataset56.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset63 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo64 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent65 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset63, datasetChangeInfo64);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent66 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset56, datasetChangeInfo64);
        org.jfree.data.Range range67 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset56);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener68 = null;
        categoryDataset56.removeChangeListener(datasetChangeListener68);
        boolean boolean70 = xYIntervalSeries3.equals((java.lang.Object) datasetChangeListener68);
        xYIntervalSeries3.setNotify(true);
        java.lang.String str73 = xYIntervalSeries3.getDescription();
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + obj31 + "' != '" + ' ' + "'", obj31, ' ');
        org.junit.Assert.assertNotNull(numberArray39);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(numberArray51);
        org.junit.Assert.assertNotNull(numberArray54);
        org.junit.Assert.assertNotNull(numberArray55);
        org.junit.Assert.assertNotNull(categoryDataset56);
        org.junit.Assert.assertNotNull(list57);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(range67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(str73);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1466");
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries3 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries3.add((double) '4', (double) 1, 0.0d, (double) 10L, (double) (short) 1, (-1.0d));
        xYIntervalSeries3.setMaximumItemCount(100);
        boolean boolean13 = xYIntervalSeries3.getNotify();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries17 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries17.add((double) '4', (double) 1, 0.0d, (double) 10L, (double) (short) 1, (-1.0d));
        java.lang.String str25 = xYIntervalSeries17.getDescription();
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray46 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray47 = new java.lang.Number[][] { numberArray31, numberArray34, numberArray37, numberArray40, numberArray43, numberArray46 };
        org.jfree.data.category.CategoryDataset categoryDataset48 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray47);
        java.util.List list49 = categoryDataset48.getRowKeys();
        org.jfree.data.Range range51 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset48, false);
        int int53 = categoryDataset48.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset55 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo56 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent57 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset55, datasetChangeInfo56);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent58 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset48, datasetChangeInfo56);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem65 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int67 = xYIntervalDataItem65.compareTo((java.lang.Object) 1.0f);
        int int68 = categoryDataset48.getColumnIndex((java.lang.Comparable) xYIntervalDataItem65);
        double double69 = xYIntervalDataItem65.getXLowValue();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection70 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder71 = xYIntervalSeriesCollection70.getDomainOrder();
        org.jfree.data.ComparableObjectItem comparableObjectItem72 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable) xYIntervalDataItem65, (java.lang.Object) domainOrder71);
        xYIntervalSeries17.setKey((java.lang.Comparable) xYIntervalDataItem65);
        int int74 = xYIntervalSeries3.indexOf((java.lang.Comparable) xYIntervalDataItem65);
        java.lang.Object obj75 = xYIntervalDataItem65.clone();
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray46);
        org.junit.Assert.assertNotNull(numberArray47);
        org.junit.Assert.assertNotNull(categoryDataset48);
        org.junit.Assert.assertNotNull(list49);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 1.0d + "'", double69 == 1.0d);
        org.junit.Assert.assertNotNull(domainOrder71);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(obj75);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1467");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries15 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries15.setMaximumItemCount((int) ' ');
        int int18 = xYIntervalSeries15.getMaximumItemCount();
        java.beans.PropertyChangeListener propertyChangeListener19 = null;
        xYIntervalSeries15.removePropertyChangeListener(propertyChangeListener19);
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries15);
        boolean boolean22 = xYIntervalSeries15.getAutoSort();
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 32 + "'", int18 == 32);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1468");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        java.lang.Object obj3 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem10 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int12 = xYIntervalDataItem10.compareTo((java.lang.Object) 1.0f);
        double double13 = xYIntervalDataItem10.getXHighValue();
        java.lang.Object obj14 = xYIntervalDataItem10.clone();
        boolean boolean16 = xYIntervalDataItem10.equals((java.lang.Object) 0);
        int int17 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) xYIntervalDataItem10);
        java.lang.Number number18 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Number number19 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries23 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries23.add((double) '4', (double) 1, 0.0d, (double) 10L, (double) (short) 1, (-1.0d));
        xYIntervalSeries23.setKey((java.lang.Comparable) "hi!");
        int int33 = xYIntervalSeries23.getItemCount();
        int int35 = xYIntervalSeries23.indexOf((java.lang.Comparable) 127.0d);
        xYIntervalSeries23.clear();
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries23);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(number18);
        org.junit.Assert.assertNull(number19);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1469");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection8 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection8.getDomainOrder();
        int int10 = xYIntervalSeriesCollection8.getSeriesCount();
        boolean boolean11 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection8);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState12 = null;
        xYIntervalSeriesCollection8.setSelectionState(xYDatasetSelectionState12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable15 = xYIntervalSeriesCollection8.getSeriesKey(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1470");
        org.jfree.data.xy.XYInterval xYInterval5 = new org.jfree.data.xy.XYInterval((double) 10, 93.0d, (double) (-1L), (double) 0, (double) ' ');
        double double6 = xYInterval5.getY();
        double double7 = xYInterval5.getXHigh();
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem14 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int16 = xYIntervalDataItem14.compareTo((java.lang.Object) 1.0f);
        double double17 = xYIntervalDataItem14.getXHighValue();
        org.jfree.data.Range range18 = null;
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range18, (double) 100);
        double double22 = range20.constrain((double) '4');
        boolean boolean23 = xYIntervalDataItem14.equals((java.lang.Object) '4');
        org.jfree.data.Range range24 = null;
        org.jfree.data.Range range26 = org.jfree.data.Range.expandToInclude(range24, (double) 100);
        double double28 = range26.constrain((double) '4');
        int int29 = xYIntervalDataItem14.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray36 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray39 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray42 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray45 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray48 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray51 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray52 = new java.lang.Number[][] { numberArray36, numberArray39, numberArray42, numberArray45, numberArray48, numberArray51 };
        org.jfree.data.category.CategoryDataset categoryDataset53 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray52);
        org.jfree.data.category.CategoryDataset categoryDataset54 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray52);
        int int55 = xYIntervalDataItem14.compareTo((java.lang.Object) categoryDataset54);
        java.util.List list56 = categoryDataset54.getColumnKeys();
        org.jfree.data.Range range58 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset54, (double) 1L);
        org.jfree.data.Range range59 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset54);
        java.lang.Number number60 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset54);
        boolean boolean61 = xYInterval5.equals((java.lang.Object) categoryDataset54);
        boolean boolean62 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset54);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 93.0d + "'", double7 == 93.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(numberArray36);
        org.junit.Assert.assertNotNull(numberArray39);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(numberArray51);
        org.junit.Assert.assertNotNull(numberArray52);
        org.junit.Assert.assertNotNull(categoryDataset53);
        org.junit.Assert.assertNotNull(categoryDataset54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(list56);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertNotNull(range59);
        org.junit.Assert.assertEquals("'" + number60 + "' != '" + (-1.0d) + "'", number60, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1471");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj8 = xYIntervalSeriesCollection0.clone();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries12 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries12.setMaximumItemCount((int) (short) 1);
        boolean boolean15 = xYIntervalSeries12.getAllowDuplicateXValues();
        int int16 = xYIntervalSeries12.getItemCount();
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number20 = xYIntervalSeriesCollection0.getStartY((int) (byte) -1, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1472");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem39 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int41 = xYIntervalDataItem39.compareTo((java.lang.Object) 1.0f);
        int int42 = categoryDataset22.getColumnIndex((java.lang.Comparable) xYIntervalDataItem39);
        double double43 = xYIntervalDataItem39.getXLowValue();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection44 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder45 = xYIntervalSeriesCollection44.getDomainOrder();
        org.jfree.data.ComparableObjectItem comparableObjectItem46 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable) xYIntervalDataItem39, (java.lang.Object) domainOrder45);
        double double47 = xYIntervalDataItem39.getYHighValue();
        org.jfree.data.ComparableObjectSeries comparableObjectSeries50 = new org.jfree.data.ComparableObjectSeries((java.lang.Comparable) xYIntervalDataItem39, false, false);
        double double51 = xYIntervalDataItem39.getYLowValue();
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(domainOrder45);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 100.0d + "'", double51 == 100.0d);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1473");
        org.jfree.data.xy.XYInterval xYInterval5 = new org.jfree.data.xy.XYInterval((double) (byte) 10, (double) 'a', (double) (-1L), (double) (byte) 100, (double) 100);
        double double6 = xYInterval5.getXLow();
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray23 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray26 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray27 = new java.lang.Number[][] { numberArray11, numberArray14, numberArray17, numberArray20, numberArray23, numberArray26 };
        org.jfree.data.category.CategoryDataset categoryDataset28 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray27);
        java.util.List list29 = categoryDataset28.getRowKeys();
        org.jfree.data.Range range31 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset28, false);
        boolean boolean32 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset28);
        org.jfree.data.Range range34 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset28, true);
        boolean boolean36 = range34.contains((double) (byte) 1);
        org.jfree.data.Range range39 = org.jfree.data.Range.shift(range34, 1.0d, true);
        org.jfree.data.Range range40 = null;
        org.jfree.data.Range range42 = org.jfree.data.Range.expandToInclude(range40, (double) 100);
        double double44 = range42.constrain((double) '4');
        org.jfree.data.Range range47 = org.jfree.data.Range.shift(range42, (double) (byte) 1, false);
        org.jfree.data.Range range48 = org.jfree.data.Range.combine(range34, range47);
        org.jfree.data.Range range49 = null;
        org.jfree.data.Range range51 = org.jfree.data.Range.expandToInclude(range49, (double) 100);
        double double53 = range51.constrain((double) '4');
        double double54 = range51.getLength();
        org.jfree.data.Range range57 = org.jfree.data.Range.shift(range51, (double) 100, false);
        org.jfree.data.Range range58 = org.jfree.data.Range.combine(range47, range51);
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent59 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) range47);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo60 = null;
        seriesChangeEvent59.setSummary(seriesChangeInfo60);
        boolean boolean62 = xYInterval5.equals((java.lang.Object) seriesChangeEvent59);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray23);
        org.junit.Assert.assertNotNull(numberArray26);
        org.junit.Assert.assertNotNull(numberArray27);
        org.junit.Assert.assertNotNull(categoryDataset28);
        org.junit.Assert.assertNotNull(list29);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range42);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 100.0d + "'", double44 == 100.0d);
        org.junit.Assert.assertNotNull(range47);
        org.junit.Assert.assertNotNull(range48);
        org.junit.Assert.assertNotNull(range51);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 100.0d + "'", double53 == 100.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(range57);
        org.junit.Assert.assertNotNull(range58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1474");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection8 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection8.getDomainOrder();
        int int10 = xYIntervalSeriesCollection8.getSeriesCount();
        boolean boolean11 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection8);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        xYIntervalSeriesCollection8.validateObject();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent14 = null;
        xYIntervalSeriesCollection8.notifyListeners(datasetChangeEvent14);
        xYIntervalSeriesCollection8.validateObject();
        int int17 = xYIntervalSeriesCollection8.getSeriesCount();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = xYIntervalSeriesCollection8.getXValue((int) (byte) 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(number12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1475");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, (double) 100);
        double double4 = range2.constrain((double) '4');
        double double5 = range2.getLength();
        double double6 = range2.getCentralValue();
        boolean boolean9 = range2.intersects((double) 2147483647, (double) (short) 10);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection10 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset12 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo13 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent14 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset12, datasetChangeInfo13);
        xYIntervalSeriesCollection10.notifyListeners(datasetChangeEvent14);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState16 = xYIntervalSeriesCollection10.getSelectionState();
        org.jfree.data.Range range17 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection10);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection18 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset20 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo21 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent22 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset20, datasetChangeInfo21);
        xYIntervalSeriesCollection18.notifyListeners(datasetChangeEvent22);
        org.jfree.data.general.Dataset dataset24 = datasetChangeEvent22.getDataset();
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo25 = datasetChangeEvent22.getInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent26 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) range2, (org.jfree.data.general.Dataset) xYIntervalSeriesCollection10, datasetChangeInfo25);
        java.lang.Number[] numberArray32 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray35 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray38 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray41 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray44 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray47 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray48 = new java.lang.Number[][] { numberArray32, numberArray35, numberArray38, numberArray41, numberArray44, numberArray47 };
        org.jfree.data.category.CategoryDataset categoryDataset49 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray48);
        java.util.List list50 = categoryDataset49.getRowKeys();
        org.jfree.data.Range range52 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset49, false);
        int int54 = categoryDataset49.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset56 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo57 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent58 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset56, datasetChangeInfo57);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent59 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset49, datasetChangeInfo57);
        xYIntervalSeriesCollection10.notifyListeners(datasetChangeEvent59);
        org.jfree.data.general.DatasetGroup datasetGroup61 = xYIntervalSeriesCollection10.getGroup();
        org.jfree.data.Range range62 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection10);
        org.jfree.data.general.DatasetGroup datasetGroup63 = xYIntervalSeriesCollection10.getGroup();
        org.junit.Assert.assertNotNull(range2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(xYDatasetSelectionState16);
        org.junit.Assert.assertNull(range17);
        org.junit.Assert.assertNull(dataset24);
        org.junit.Assert.assertNotNull(datasetChangeInfo25);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(numberArray35);
        org.junit.Assert.assertNotNull(numberArray38);
        org.junit.Assert.assertNotNull(numberArray41);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(numberArray47);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(categoryDataset49);
        org.junit.Assert.assertNotNull(list50);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(datasetGroup61);
        org.junit.Assert.assertNull(range62);
        org.junit.Assert.assertNotNull(datasetGroup63);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1476");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.DomainOrder domainOrder2 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection3 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset5 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo6 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent7 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset5, datasetChangeInfo6);
        xYIntervalSeriesCollection3.notifyListeners(datasetChangeEvent7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection3.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener10 = null;
        xYIntervalSeriesCollection3.removeChangeListener(datasetChangeListener10);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection3);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo13 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection3.fireDatasetChanged(datasetChangeInfo13);
        xYIntervalSeriesCollection0.fireDatasetChanged(datasetChangeInfo13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number18 = xYIntervalSeriesCollection0.getStartY((int) (short) 100, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNotNull(domainOrder2);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(number12);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1477");
        java.lang.Number[] numberArray6 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray9 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray12 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray22 = new java.lang.Number[][] { numberArray6, numberArray9, numberArray12, numberArray15, numberArray18, numberArray21 };
        org.jfree.data.category.CategoryDataset categoryDataset23 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray22);
        org.jfree.data.category.CategoryDataset categoryDataset24 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("NOID", "org.jfree.data.event.SeriesChangeEvent[source= ]", numberArray22);
        org.jfree.data.Range range26 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset24, false);
        org.jfree.data.Range range27 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset24);
        org.jfree.data.pie.PieDataset pieDataset29 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset24, (int) (short) 1);
        org.junit.Assert.assertNotNull(numberArray6);
        org.junit.Assert.assertNotNull(numberArray9);
        org.junit.Assert.assertNotNull(numberArray12);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray22);
        org.junit.Assert.assertNotNull(categoryDataset23);
        org.junit.Assert.assertNotNull(categoryDataset24);
        org.junit.Assert.assertNotNull(range26);
        org.junit.Assert.assertNotNull(range27);
        org.junit.Assert.assertNotNull(pieDataset29);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1478");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        java.lang.Number number26 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        boolean boolean27 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset21);
        java.lang.Number number31 = categoryDataset21.getValue(0, 0);
        java.util.List list32 = categoryDataset21.getRowKeys();
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertEquals("'" + number26 + "' != '" + (-1.0d) + "'", number26, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertEquals("'" + number31 + "' != '" + (short) -1 + "'", number31, (short) -1);
        org.junit.Assert.assertNotNull(list32);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1479");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range15 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        int int16 = xYIntervalSeriesCollection0.getSeriesCount();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number19 = xYIntervalSeriesCollection0.getEndX((int) '4', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNull(range15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1480");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        org.jfree.data.Range range33 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener34 = null;
        categoryDataset22.removeChangeListener(datasetChangeListener34);
        java.util.List list36 = categoryDataset22.getColumnKeys();
        org.jfree.data.Range range38 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset22, true);
        org.jfree.data.Range range39 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset22);
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertNotNull(range38);
        org.junit.Assert.assertNotNull(range39);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1481");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        int int8 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) 10.0f);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = null;
        xYIntervalSeriesCollection0.setSelectionState(xYDatasetSelectionState9);
        int int12 = xYIntervalSeriesCollection0.indexOf((java.lang.Comparable) "org.jfree.data.general.SeriesException: hi!1");
        org.jfree.data.Range range14 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.jfree.data.Range range16 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(range14);
        org.junit.Assert.assertNull(range16);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1482");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        org.jfree.data.Range range10 = null;
        org.jfree.data.Range range12 = org.jfree.data.Range.expandToInclude(range10, (double) 100);
        double double14 = range12.constrain((double) '4');
        boolean boolean15 = xYIntervalDataItem6.equals((java.lang.Object) '4');
        org.jfree.data.Range range16 = null;
        org.jfree.data.Range range18 = org.jfree.data.Range.expandToInclude(range16, (double) 100);
        double double20 = range18.constrain((double) '4');
        int int21 = xYIntervalDataItem6.compareTo((java.lang.Object) '4');
        java.lang.Number[] numberArray28 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray31 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray34 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray37 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray40 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray43 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray44 = new java.lang.Number[][] { numberArray28, numberArray31, numberArray34, numberArray37, numberArray40, numberArray43 };
        org.jfree.data.category.CategoryDataset categoryDataset45 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray44);
        org.jfree.data.category.CategoryDataset categoryDataset46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "hi!", numberArray44);
        int int47 = xYIntervalDataItem6.compareTo((java.lang.Object) categoryDataset46);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener48 = null;
        categoryDataset46.removeChangeListener(datasetChangeListener48);
        java.util.List list50 = categoryDataset46.getColumnKeys();
        org.jfree.data.Range range52 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset46, false);
        java.lang.Number number53 = org.jfree.data.general.DatasetUtilities.findMinimumStackedRangeValue(categoryDataset46);
        org.jfree.data.Range range54 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset46);
        org.jfree.data.Range range55 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset46);
        int int56 = categoryDataset46.getColumnCount();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(range12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(range18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(numberArray28);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(numberArray34);
        org.junit.Assert.assertNotNull(numberArray37);
        org.junit.Assert.assertNotNull(numberArray40);
        org.junit.Assert.assertNotNull(numberArray43);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(categoryDataset45);
        org.junit.Assert.assertNotNull(categoryDataset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(list50);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertEquals("'" + number53 + "' != '" + (-6.0d) + "'", number53, (-6.0d));
        org.junit.Assert.assertNotNull(range54);
        org.junit.Assert.assertNotNull(range55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1483");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        xYIntervalSeriesCollection0.removeAllSeries();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries7 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        boolean boolean8 = xYIntervalSeries7.getNotify();
        int int9 = xYIntervalSeries7.getItemCount();
        boolean boolean10 = xYIntervalSeries7.getAutoSort();
        xYIntervalSeries7.fireSeriesChanged();
        boolean boolean12 = xYIntervalSeries7.getNotify();
        org.jfree.data.event.SeriesChangeListener seriesChangeListener13 = null;
        xYIntervalSeries7.addChangeListener(seriesChangeListener13);
        xYIntervalSeriesCollection0.removeSeries(xYIntervalSeries7);
        boolean boolean16 = xYIntervalSeries7.getAllowDuplicateXValues();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection17 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder18 = xYIntervalSeriesCollection17.getDomainOrder();
        org.jfree.data.general.DatasetGroup datasetGroup19 = xYIntervalSeriesCollection17.getGroup();
        boolean boolean20 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection17);
        org.jfree.data.xy.XYInterval xYInterval26 = new org.jfree.data.xy.XYInterval(0.0d, (double) 1.0f, (double) (-1), (double) '#', (double) 100L);
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries30 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries30.setMaximumItemCount((int) ' ');
        xYIntervalSeries30.setDescription("hi!");
        boolean boolean35 = xYInterval26.equals((java.lang.Object) xYIntervalSeries30);
        xYIntervalSeriesCollection17.removeSeries(xYIntervalSeries30);
        // The following exception was thrown during execution in test generation
        try {
            xYIntervalSeries7.addChangeListener((org.jfree.data.event.SeriesChangeListener) xYIntervalSeriesCollection17);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Listener org.jfree.data.xy.XYIntervalSeriesCollection@2a926c27 is not of type class org.jfree.data.xy.XYIntervalSeries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(domainOrder18);
        org.junit.Assert.assertNotNull(datasetGroup19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1484");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.Range range2 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range4 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener5 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener5);
        java.lang.Object obj7 = xYIntervalSeriesCollection0.clone();
        java.lang.Number number8 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        java.lang.Object obj9 = xYIntervalSeriesCollection0.clone();
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNull(range2);
        org.junit.Assert.assertNull(range4);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNull(number8);
        org.junit.Assert.assertNotNull(obj9);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1485");
        double[] doubleArray7 = new double[] { 1.0d, (byte) -1, 1.0d };
        double[][] doubleArray8 = new double[][] { doubleArray7 };
        org.jfree.data.category.CategoryDataset categoryDataset9 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("", "", doubleArray8);
        org.jfree.data.category.CategoryDataset categoryDataset10 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("org.jfree.data.general.SeriesException: ", "", doubleArray8);
        org.jfree.data.pie.PieDataset pieDataset12 = org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(categoryDataset10, (int) (byte) 0);
        int int13 = pieDataset12.getItemCount();
        org.jfree.data.pie.PieDatasetSelectionState pieDatasetSelectionState14 = pieDataset12.getSelectionState();
        int int15 = pieDataset12.getItemCount();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, -1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(categoryDataset9);
        org.junit.Assert.assertNotNull(categoryDataset10);
        org.junit.Assert.assertNotNull(pieDataset12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(pieDatasetSelectionState14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1486");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range15 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range16 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range18 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        org.jfree.data.Range range19 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        // The following exception was thrown during execution in test generation
        try {
            double double22 = xYIntervalSeriesCollection0.getStartXValue((int) (short) 100, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNull(range15);
        org.junit.Assert.assertNull(range16);
        org.junit.Assert.assertNull(range18);
        org.junit.Assert.assertNull(range19);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1487");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        org.jfree.data.general.Dataset dataset33 = datasetChangeEvent32.getDataset();
        org.jfree.data.general.Dataset dataset34 = datasetChangeEvent32.getDataset();
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo35 = datasetChangeEvent32.getInfo();
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(dataset33);
        org.junit.Assert.assertNotNull(dataset34);
        org.junit.Assert.assertNotNull(datasetChangeInfo35);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1488");
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries3 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        boolean boolean4 = xYIntervalSeries3.getNotify();
        int int5 = xYIntervalSeries3.getItemCount();
        xYIntervalSeries3.clear();
        org.jfree.data.xy.XYIntervalSeries xYIntervalSeries10 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable) 10, false, false);
        xYIntervalSeries10.setMaximumItemCount((int) ' ');
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo13 = null;
        org.jfree.data.event.SeriesChangeEvent seriesChangeEvent14 = new org.jfree.data.event.SeriesChangeEvent((java.lang.Object) ' ', seriesChangeInfo13);
        org.jfree.data.general.SeriesChangeInfo seriesChangeInfo15 = null;
        seriesChangeEvent14.setSummary(seriesChangeInfo15);
        java.lang.Object obj17 = seriesChangeEvent14.getSource();
        xYIntervalSeries3.notifyListeners(seriesChangeEvent14);
        boolean boolean19 = xYIntervalSeries3.getNotify();
        xYIntervalSeries3.add((double) 100, (double) (short) 100, (-1.0d), 0.0d, (double) (-1.0f), (double) 1L);
        org.jfree.data.Range range27 = null;
        org.jfree.data.Range range29 = org.jfree.data.Range.expandToInclude(range27, (double) 100);
        double double31 = range29.constrain((double) '4');
        double double32 = range29.getLength();
        double double33 = range29.getCentralValue();
        boolean boolean36 = range29.intersects((double) 2147483647, (double) (short) 10);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection37 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset39 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo40 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent41 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset39, datasetChangeInfo40);
        xYIntervalSeriesCollection37.notifyListeners(datasetChangeEvent41);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState43 = xYIntervalSeriesCollection37.getSelectionState();
        org.jfree.data.Range range44 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection37);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection45 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset47 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo48 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent49 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset47, datasetChangeInfo48);
        xYIntervalSeriesCollection45.notifyListeners(datasetChangeEvent49);
        org.jfree.data.general.Dataset dataset51 = datasetChangeEvent49.getDataset();
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo52 = datasetChangeEvent49.getInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent53 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) range29, (org.jfree.data.general.Dataset) xYIntervalSeriesCollection37, datasetChangeInfo52);
        java.lang.Number[] numberArray59 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray62 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray65 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray68 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray71 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray74 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray75 = new java.lang.Number[][] { numberArray59, numberArray62, numberArray65, numberArray68, numberArray71, numberArray74 };
        org.jfree.data.category.CategoryDataset categoryDataset76 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray75);
        java.util.List list77 = categoryDataset76.getRowKeys();
        org.jfree.data.Range range79 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset76, false);
        int int81 = categoryDataset76.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset83 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo84 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent85 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset83, datasetChangeInfo84);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent86 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset76, datasetChangeInfo84);
        xYIntervalSeriesCollection37.notifyListeners(datasetChangeEvent86);
        boolean boolean88 = xYIntervalSeries3.equals((java.lang.Object) xYIntervalSeriesCollection37);
        int int89 = xYIntervalSeriesCollection37.getSeriesCount();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + ' ' + "'", obj17, ' ');
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(range29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(xYDatasetSelectionState43);
        org.junit.Assert.assertNull(range44);
        org.junit.Assert.assertNull(dataset51);
        org.junit.Assert.assertNotNull(datasetChangeInfo52);
        org.junit.Assert.assertNotNull(numberArray59);
        org.junit.Assert.assertNotNull(numberArray62);
        org.junit.Assert.assertNotNull(numberArray65);
        org.junit.Assert.assertNotNull(numberArray68);
        org.junit.Assert.assertNotNull(numberArray71);
        org.junit.Assert.assertNotNull(numberArray74);
        org.junit.Assert.assertNotNull(numberArray75);
        org.junit.Assert.assertNotNull(categoryDataset76);
        org.junit.Assert.assertNotNull(list77);
        org.junit.Assert.assertNotNull(range79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1489");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        xYIntervalSeriesCollection0.validateObject();
        org.jfree.data.Range range14 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = xYIntervalSeriesCollection0.getStartXValue(10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range14);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1490");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset21, (double) (short) -1);
        java.util.List list25 = categoryDataset21.getRowKeys();
        java.lang.Number number26 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        boolean boolean27 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset21);
        org.jfree.data.Range range28 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset21);
        java.lang.Number number29 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset21);
        org.jfree.data.pie.PieDataset pieDataset31 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, (int) (short) 0);
        double double32 = org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(pieDataset31);
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem39 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        double double40 = xYIntervalDataItem39.getYLowValue();
        java.lang.Object obj41 = xYIntervalDataItem39.clone();
        java.lang.Object obj42 = xYIntervalDataItem39.clone();
        double double43 = xYIntervalDataItem39.getXHighValue();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number44 = pieDataset31.getValue((java.lang.Comparable) xYIntervalDataItem39);
            org.junit.Assert.fail("Expected exception of type org.jfree.data.UnknownKeyException; message: The key (org.jfree.data.xy.XYIntervalDataItem@3bdd7cd6) is not recognised.");
        } catch (org.jfree.data.UnknownKeyException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertNotNull(list25);
        org.junit.Assert.assertEquals("'" + number26 + "' != '" + (-1.0d) + "'", number26, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertEquals("'" + number29 + "' != '" + (-1.0d) + "'", number29, (-1.0d));
        org.junit.Assert.assertNotNull(pieDataset31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 32.0d + "'", double32 == 32.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 100.0d + "'", double43 == 100.0d);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1491");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        double double10 = xYIntervalDataItem6.getXLowValue();
        java.lang.Number[] numberArray15 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray18 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray21 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray24 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray27 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray30 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray31 = new java.lang.Number[][] { numberArray15, numberArray18, numberArray21, numberArray24, numberArray27, numberArray30 };
        org.jfree.data.category.CategoryDataset categoryDataset32 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray31);
        java.util.List list33 = categoryDataset32.getRowKeys();
        org.jfree.data.Range range35 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(categoryDataset32, (double) (short) -1);
        java.util.List list36 = categoryDataset32.getRowKeys();
        java.lang.Number number37 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(categoryDataset32);
        boolean boolean38 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(categoryDataset32);
        org.jfree.data.Range range39 = org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(categoryDataset32);
        org.jfree.data.Range range40 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset32);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection41 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset43 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo44 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent45 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset43, datasetChangeInfo44);
        xYIntervalSeriesCollection41.notifyListeners(datasetChangeEvent45);
        org.jfree.data.general.Dataset dataset47 = datasetChangeEvent45.getDataset();
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo48 = datasetChangeEvent45.getInfo();
        java.lang.Object obj49 = datasetChangeEvent45.getSource();
        org.jfree.data.general.Dataset dataset50 = datasetChangeEvent45.getDataset();
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo51 = datasetChangeEvent45.getInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent52 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) double10, (org.jfree.data.general.Dataset) categoryDataset32, datasetChangeInfo51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Number number55 = categoryDataset32.getValue((int) '4', (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(numberArray15);
        org.junit.Assert.assertNotNull(numberArray18);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(numberArray24);
        org.junit.Assert.assertNotNull(numberArray27);
        org.junit.Assert.assertNotNull(numberArray30);
        org.junit.Assert.assertNotNull(numberArray31);
        org.junit.Assert.assertNotNull(categoryDataset32);
        org.junit.Assert.assertNotNull(list33);
        org.junit.Assert.assertNotNull(range35);
        org.junit.Assert.assertNotNull(list36);
        org.junit.Assert.assertEquals("'" + number37 + "' != '" + (-1.0d) + "'", number37, (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertNotNull(range40);
        org.junit.Assert.assertNull(dataset47);
        org.junit.Assert.assertNotNull(datasetChangeInfo48);
        org.junit.Assert.assertEquals("'" + obj49 + "' != '" + (-1L) + "'", obj49, (-1L));
        org.junit.Assert.assertNull(dataset50);
        org.junit.Assert.assertNotNull(datasetChangeInfo51);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1492");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener7 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener7);
        java.lang.Number number9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.Range range11 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range13 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, true);
        org.jfree.data.Range range15 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0, false);
        int int16 = xYIntervalSeriesCollection0.getSeriesCount();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener17 = null;
        xYIntervalSeriesCollection0.removeChangeListener(datasetChangeListener17);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection19 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder20 = xYIntervalSeriesCollection19.getDomainOrder();
        org.jfree.data.Range range21 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection19);
        org.jfree.data.Range range22 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection19);
        xYIntervalSeriesCollection19.validateObject();
        xYIntervalSeriesCollection19.validateObject();
        java.lang.Number number25 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection19);
        boolean boolean26 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection19);
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(number9);
        org.junit.Assert.assertNull(range11);
        org.junit.Assert.assertNull(range13);
        org.junit.Assert.assertNull(range15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(domainOrder20);
        org.junit.Assert.assertNull(range21);
        org.junit.Assert.assertNull(range22);
        org.junit.Assert.assertNull(number25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1493");
        org.jfree.data.Range range0 = null;
        org.jfree.data.Range range2 = org.jfree.data.Range.expandToInclude(range0, (double) 100);
        double double4 = range2.constrain((double) '4');
        double double5 = range2.getLength();
        double double6 = range2.getCentralValue();
        boolean boolean9 = range2.intersects((double) 2147483647, (double) (short) 10);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection10 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset12 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo13 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent14 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset12, datasetChangeInfo13);
        xYIntervalSeriesCollection10.notifyListeners(datasetChangeEvent14);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState16 = xYIntervalSeriesCollection10.getSelectionState();
        org.jfree.data.Range range17 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection10);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection18 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset20 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo21 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent22 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset20, datasetChangeInfo21);
        xYIntervalSeriesCollection18.notifyListeners(datasetChangeEvent22);
        org.jfree.data.general.Dataset dataset24 = datasetChangeEvent22.getDataset();
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo25 = datasetChangeEvent22.getInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent26 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) range2, (org.jfree.data.general.Dataset) xYIntervalSeriesCollection10, datasetChangeInfo25);
        java.lang.Number[] numberArray32 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray35 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray38 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray41 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray44 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray47 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray48 = new java.lang.Number[][] { numberArray32, numberArray35, numberArray38, numberArray41, numberArray44, numberArray47 };
        org.jfree.data.category.CategoryDataset categoryDataset49 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray48);
        java.util.List list50 = categoryDataset49.getRowKeys();
        org.jfree.data.Range range52 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset49, false);
        int int54 = categoryDataset49.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset56 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo57 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent58 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset56, datasetChangeInfo57);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent59 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset49, datasetChangeInfo57);
        xYIntervalSeriesCollection10.notifyListeners(datasetChangeEvent59);
        java.lang.Comparable comparable61 = null;
        int int62 = xYIntervalSeriesCollection10.indexOf(comparable61);
        org.jfree.data.DomainOrder domainOrder63 = xYIntervalSeriesCollection10.getDomainOrder();
        java.lang.Number number64 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection10);
        org.junit.Assert.assertNotNull(range2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 100.0d + "'", double4 == 100.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(xYDatasetSelectionState16);
        org.junit.Assert.assertNull(range17);
        org.junit.Assert.assertNull(dataset24);
        org.junit.Assert.assertNotNull(datasetChangeInfo25);
        org.junit.Assert.assertNotNull(numberArray32);
        org.junit.Assert.assertNotNull(numberArray35);
        org.junit.Assert.assertNotNull(numberArray38);
        org.junit.Assert.assertNotNull(numberArray41);
        org.junit.Assert.assertNotNull(numberArray44);
        org.junit.Assert.assertNotNull(numberArray47);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(categoryDataset49);
        org.junit.Assert.assertNotNull(list50);
        org.junit.Assert.assertNotNull(range52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(domainOrder63);
        org.junit.Assert.assertNull(number64);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1494");
        org.jfree.data.xy.XYIntervalDataItem xYIntervalDataItem6 = new org.jfree.data.xy.XYIntervalDataItem((double) (-1L), (double) (short) 1, (double) (byte) 100, (double) 0L, (double) (short) 100, (double) 100.0f);
        int int8 = xYIntervalDataItem6.compareTo((java.lang.Object) 1.0f);
        double double9 = xYIntervalDataItem6.getXHighValue();
        double double10 = xYIntervalDataItem6.getXLowValue();
        org.jfree.data.Range range11 = null;
        org.jfree.data.Range range13 = org.jfree.data.Range.expandToInclude(range11, (double) 100);
        org.jfree.data.Range range15 = org.jfree.data.Range.scale(range13, (double) (byte) 0);
        boolean boolean18 = range15.intersects((double) 100.0f, 100.0d);
        org.jfree.data.Range range20 = org.jfree.data.Range.expandToInclude(range15, (double) 10.0f);
        org.jfree.data.Range range22 = org.jfree.data.Range.expandToInclude(range15, (double) (byte) -1);
        org.jfree.data.Range range23 = null;
        org.jfree.data.Range range25 = org.jfree.data.Range.expandToInclude(range23, (double) 100);
        double double27 = range25.constrain((double) '4');
        double double28 = range25.getLength();
        double double29 = range25.getCentralValue();
        org.jfree.data.Range range31 = org.jfree.data.Range.shift(range25, (double) (short) 0);
        org.jfree.data.Range range32 = org.jfree.data.Range.combine(range15, range31);
        org.jfree.data.Range range34 = org.jfree.data.Range.expandToInclude(range15, (double) 100);
        org.jfree.data.Range range36 = org.jfree.data.Range.expandToInclude(range34, 46.0d);
        org.jfree.data.ComparableObjectItem comparableObjectItem37 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable) xYIntervalDataItem6, (java.lang.Object) 46.0d);
        java.lang.Number[] numberArray42 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray45 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray48 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray51 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray54 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray57 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray58 = new java.lang.Number[][] { numberArray42, numberArray45, numberArray48, numberArray51, numberArray54, numberArray57 };
        org.jfree.data.category.CategoryDataset categoryDataset59 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray58);
        org.jfree.data.pie.PieDataset pieDataset61 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset59, 1);
        org.jfree.data.pie.PieDataset pieDataset64 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset61, (java.lang.Comparable) 15.5d, (-1.0d));
        java.lang.Comparable comparable66 = pieDataset64.getKey(1);
        org.jfree.data.category.CategoryDataset categoryDataset67 = org.jfree.data.general.DatasetUtilities.createCategoryDataset((java.lang.Comparable) comparableObjectItem37, (org.jfree.data.KeyedValues) pieDataset64);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(range13);
        org.junit.Assert.assertNotNull(range15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(range20);
        org.junit.Assert.assertNotNull(range22);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertNotNull(range31);
        org.junit.Assert.assertNotNull(range32);
        org.junit.Assert.assertNotNull(range34);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertNotNull(numberArray42);
        org.junit.Assert.assertNotNull(numberArray45);
        org.junit.Assert.assertNotNull(numberArray48);
        org.junit.Assert.assertNotNull(numberArray51);
        org.junit.Assert.assertNotNull(numberArray54);
        org.junit.Assert.assertNotNull(numberArray57);
        org.junit.Assert.assertNotNull(numberArray58);
        org.junit.Assert.assertNotNull(categoryDataset59);
        org.junit.Assert.assertNotNull(pieDataset61);
        org.junit.Assert.assertNotNull(pieDataset64);
        org.junit.Assert.assertEquals("'" + comparable66 + "' != '" + "2" + "'", comparable66, "2");
        org.junit.Assert.assertNotNull(categoryDataset67);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1495");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        org.jfree.data.pie.PieDataset pieDataset23 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(categoryDataset21, 1);
        org.jfree.data.pie.PieDataset pieDataset27 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(pieDataset23, (java.lang.Comparable) 1, 35.0d, (int) '4');
        int int29 = pieDataset23.getIndex((java.lang.Comparable) (byte) -1);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(pieDataset23);
        org.junit.Assert.assertNotNull(pieDataset27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1496");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder1 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.DomainOrder domainOrder2 = xYIntervalSeriesCollection0.getDomainOrder();
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection3 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset5 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo6 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent7 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset5, datasetChangeInfo6);
        xYIntervalSeriesCollection3.notifyListeners(datasetChangeEvent7);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState9 = xYIntervalSeriesCollection3.getSelectionState();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener10 = null;
        xYIntervalSeriesCollection3.removeChangeListener(datasetChangeListener10);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection3);
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo13 = new org.jfree.chart.event.DatasetChangeInfo();
        xYIntervalSeriesCollection3.fireDatasetChanged(datasetChangeInfo13);
        xYIntervalSeriesCollection0.fireDatasetChanged(datasetChangeInfo13);
        org.jfree.data.event.DatasetChangeListener datasetChangeListener16 = null;
        xYIntervalSeriesCollection0.addChangeListener(datasetChangeListener16);
        org.jfree.data.Range range18 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.junit.Assert.assertNotNull(domainOrder1);
        org.junit.Assert.assertNotNull(domainOrder2);
        org.junit.Assert.assertNull(xYDatasetSelectionState9);
        org.junit.Assert.assertNull(number12);
        org.junit.Assert.assertNull(range18);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1497");
        java.lang.Number[] numberArray4 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray7 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray10 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray13 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray16 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray19 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray20 = new java.lang.Number[][] { numberArray4, numberArray7, numberArray10, numberArray13, numberArray16, numberArray19 };
        org.jfree.data.category.CategoryDataset categoryDataset21 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray20);
        java.util.List list22 = categoryDataset21.getRowKeys();
        org.jfree.data.Range range24 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset21, false);
        double double25 = range24.getLowerBound();
        org.jfree.data.Range range26 = null;
        org.jfree.data.Range range28 = org.jfree.data.Range.expandToInclude(range26, (double) 100);
        double double30 = range28.constrain((-1.0d));
        org.jfree.data.Range range31 = null;
        org.jfree.data.Range range33 = org.jfree.data.Range.expandToInclude(range31, (double) 100);
        double double35 = range33.constrain((double) '4');
        double double36 = range33.getLength();
        org.jfree.data.Range range37 = null;
        org.jfree.data.Range range39 = org.jfree.data.Range.expandToInclude(range37, (double) 100);
        double double41 = range39.constrain((double) '4');
        boolean boolean42 = range33.intersects(range39);
        boolean boolean43 = range28.intersects(range33);
        org.jfree.data.Range range45 = org.jfree.data.Range.scale(range28, (double) 1.0f);
        org.jfree.data.Range range46 = org.jfree.data.Range.combine(range24, range28);
        double double47 = range28.getLength();
        org.jfree.data.Range range50 = org.jfree.data.Range.expand(range28, (double) 1.0f, (double) (short) 10);
        org.junit.Assert.assertNotNull(numberArray4);
        org.junit.Assert.assertNotNull(numberArray7);
        org.junit.Assert.assertNotNull(numberArray10);
        org.junit.Assert.assertNotNull(numberArray13);
        org.junit.Assert.assertNotNull(numberArray16);
        org.junit.Assert.assertNotNull(numberArray19);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(categoryDataset21);
        org.junit.Assert.assertNotNull(list22);
        org.junit.Assert.assertNotNull(range24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertNotNull(range28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertNotNull(range33);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 100.0d + "'", double35 == 100.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(range39);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(range45);
        org.junit.Assert.assertNotNull(range46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(range50);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1498");
        java.lang.Number[] numberArray5 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray8 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray11 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray14 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray17 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[] numberArray20 = new java.lang.Number[] { (short) -1, 32 };
        java.lang.Number[][] numberArray21 = new java.lang.Number[][] { numberArray5, numberArray8, numberArray11, numberArray14, numberArray17, numberArray20 };
        org.jfree.data.category.CategoryDataset categoryDataset22 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("hi!", "", numberArray21);
        java.util.List list23 = categoryDataset22.getRowKeys();
        org.jfree.data.Range range25 = org.jfree.data.general.DatasetUtilities.findRangeBounds(categoryDataset22, false);
        int int27 = categoryDataset22.getColumnIndex((java.lang.Comparable) (-1L));
        org.jfree.data.general.Dataset dataset29 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo30 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent31 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset29, datasetChangeInfo30);
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent32 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) 10L, (org.jfree.data.general.Dataset) categoryDataset22, datasetChangeInfo30);
        java.lang.Number number33 = org.jfree.data.general.DatasetUtilities.findMaximumStackedRangeValue(categoryDataset22);
        java.lang.Number number34 = org.jfree.data.general.DatasetUtilities.findMaximumStackedRangeValue(categoryDataset22);
        org.jfree.data.Range range36 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(categoryDataset22, true);
        java.lang.Number number37 = org.jfree.data.general.DatasetUtilities.findMinimumStackedRangeValue(categoryDataset22);
        java.lang.Number number38 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(categoryDataset22);
        org.junit.Assert.assertNotNull(numberArray5);
        org.junit.Assert.assertNotNull(numberArray8);
        org.junit.Assert.assertNotNull(numberArray11);
        org.junit.Assert.assertNotNull(numberArray14);
        org.junit.Assert.assertNotNull(numberArray17);
        org.junit.Assert.assertNotNull(numberArray20);
        org.junit.Assert.assertNotNull(numberArray21);
        org.junit.Assert.assertNotNull(categoryDataset22);
        org.junit.Assert.assertNotNull(list23);
        org.junit.Assert.assertNotNull(range25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertEquals("'" + number33 + "' != '" + 192.0d + "'", number33, 192.0d);
        org.junit.Assert.assertEquals("'" + number34 + "' != '" + 192.0d + "'", number34, 192.0d);
        org.junit.Assert.assertNotNull(range36);
        org.junit.Assert.assertEquals("'" + number37 + "' != '" + (-6.0d) + "'", number37, (-6.0d));
        org.junit.Assert.assertEquals("'" + number38 + "' != '" + 32.0d + "'", number38, 32.0d);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1499");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection8 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection8.getDomainOrder();
        int int10 = xYIntervalSeriesCollection8.getSeriesCount();
        boolean boolean11 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection8);
        java.lang.Number number12 = org.jfree.data.general.DatasetUtilities.findMaximumRangeValue((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        xYIntervalSeriesCollection8.validateObject();
        org.jfree.data.event.DatasetChangeListener datasetChangeListener14 = null;
        xYIntervalSeriesCollection8.addChangeListener(datasetChangeListener14);
        org.jfree.data.Range range16 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable18 = xYIntervalSeriesCollection8.getSeriesKey(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(number12);
        org.junit.Assert.assertNull(range16);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RandoopRegressionTest2.test1500");
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.general.Dataset dataset2 = null;
        org.jfree.chart.event.DatasetChangeInfo datasetChangeInfo3 = new org.jfree.chart.event.DatasetChangeInfo();
        org.jfree.data.event.DatasetChangeEvent datasetChangeEvent4 = new org.jfree.data.event.DatasetChangeEvent((java.lang.Object) (-1L), dataset2, datasetChangeInfo3);
        xYIntervalSeriesCollection0.notifyListeners(datasetChangeEvent4);
        org.jfree.data.xy.XYDatasetSelectionState xYDatasetSelectionState6 = xYIntervalSeriesCollection0.getSelectionState();
        org.jfree.data.Range range7 = org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds((org.jfree.data.xy.XYDataset) xYIntervalSeriesCollection0);
        org.jfree.data.xy.XYIntervalSeriesCollection xYIntervalSeriesCollection8 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.DomainOrder domainOrder9 = xYIntervalSeriesCollection8.getDomainOrder();
        int int10 = xYIntervalSeriesCollection8.getSeriesCount();
        boolean boolean11 = xYIntervalSeriesCollection0.hasListener((java.util.EventListener) xYIntervalSeriesCollection8);
        org.jfree.data.general.DatasetGroup datasetGroup12 = xYIntervalSeriesCollection0.getGroup();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Comparable comparable14 = xYIntervalSeriesCollection0.getSeriesKey((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Series index out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(xYDatasetSelectionState6);
        org.junit.Assert.assertNull(range7);
        org.junit.Assert.assertNotNull(domainOrder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(datasetGroup12);
    }
}
