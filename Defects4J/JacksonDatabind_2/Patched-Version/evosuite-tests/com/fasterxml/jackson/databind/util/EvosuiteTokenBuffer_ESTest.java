/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 31 02:22:26 GMT 2024
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.format.MatchStrength;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer;
import com.fasterxml.jackson.core.type.ResolvedType;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URI;
import java.net.URL;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EvosuiteTokenBuffer_ESTest extends EvosuiteTokenBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = '>';
      charArray0[2] = 'o';
      JsonParser jsonParser0 = jsonFactory2.createParser(charArray0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue("JSON");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.firstToken();
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TokenBuffer tokenBuffer0 = null;
      try {
        tokenBuffer0 = new TokenBuffer((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectMapper objectMapper2 = objectMapper1.setInjectableValues(injectableValues_Std0);
      SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[4];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      serializationFeatureArray0[2] = serializationFeature0;
      serializationFeatureArray0[3] = serializationFeature0;
      ObjectMapper objectMapper3 = objectMapper2.disable(serializationFeature0, serializationFeatureArray0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3, true);
      boolean boolean0 = tokenBuffer0.isClosed();
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(boolean0);
      assertTrue(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper.findModules();
      objectMapper0.clearProblemHandlers();
      ObjectReader objectReader0 = objectMapper0.reader();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      Class<Integer> class0 = Integer.class;
      try { 
        objectMapper1.convertValue((Object) deserializationFeature0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not construct instance of int from String value 'com.fasterxml.jackson.core.io.SerializedString@0000000183': not a valid Integer value
         //  at [Source: java.lang.String@0000000499; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      try { 
        tokenBuffer_Parser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000010651; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      tokenBuffer0.setPrettyPrinter(minimalPrettyPrinter0);
      SerializedString serializedString0 = new SerializedString(" ");
      tokenBuffer0.writeString((SerializableString) serializedString0);
      assertEquals(JsonToken.VALUE_STRING, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.toString();
      JsonFactory jsonFactory0 = new JsonFactory();
      BigInteger bigInteger0 = BigInteger.ONE;
      tokenBuffer0.writeNull();
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      tokenBuffer_Segment0._nativeIds = treeMap0;
      tokenBuffer_Segment0.findObjectId(0);
      Object object0 = tokenBuffer_Segment0.get(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-56);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 46, (byte) (-56));
      // Undeclared exception!
      try { 
        tokenBuffer0.writeBinary((InputStream) byteArrayInputStream0, (int) (byte)44);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
      ObjectMapper objectMapper2 = objectMapper1.copy();
      Class<BigInteger> class0 = BigInteger.class;
      ObjectReader objectReader0 = objectMapper2.readerWithView(class0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, false);
      tokenBuffer0.writeNumber((short) (-2522));
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper0.clearProblemHandlers();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper2);
      tokenBuffer0.firstToken();
      objectMapper1.reader();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper1, true);
      // Undeclared exception!
      try { 
        tokenBuffer1.copyCurrentEvent((JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      tokenBuffer_Parser0.getTextLength();
      int int0 = tokenBuffer_Parser0.getTextLength();
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(0, int0);
      
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, true);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer_Parser1.canReadObjectId());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      tokenBuffer0.setPrettyPrinter((PrettyPrinter) null);
      tokenBuffer0.toString();
      JsonFactory jsonFactory0 = new JsonFactory();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, true);
      tokenBuffer_Parser0.getTextLength();
      tokenBuffer_Parser0.getTextLength();
      tokenBuffer_Parser0._closed = true;
      BigInteger bigInteger0 = BigInteger.ONE;
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        tokenBuffer2.writeRaw(charArray0, 4704, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper0.clearProblemHandlers();
      objectMapper2.clearProblemHandlers();
      ObjectReader objectReader0 = objectMapper1.reader();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer0.writeFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeObject(objectMapper0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented for ObjectReader
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.getCharacterEscapes();
      tokenBuffer0.canWriteTypeId();
      tokenBuffer0.writeNumber((float) 0);
      tokenBuffer0.writeEndObject();
      tokenBuffer0.writeStringField("5.6", "5.6");
      tokenBuffer0.writeEndObject();
      tokenBuffer0.writeNumber(0);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      Byte byte0 = new Byte((byte) (-9));
      tokenBuffer0.writeObject(byte0);
      ShortNode shortNode0 = ShortNode.valueOf((short) (-936));
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(41, (int) (short) (-936), (Object) jsonAutoDetect_Visibility0, (Object) shortNode0, (Object) null);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.getTextCharacters();
      JsonToken jsonToken0 = tokenBuffer_Parser0.peekNextToken();
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals(JsonToken.VALUE_NUMBER_INT, jsonToken0);
      assertFalse(tokenBuffer_Segment0.hasIds());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper2 = objectMapper1.addHandler(deserializationProblemHandler0);
      Locale locale0 = Locale.CHINESE;
      ObjectMapper objectMapper3 = objectMapper2.setLocale(locale0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3);
      byte[] byteArray0 = new byte[1];
      locale0.stripExtensions();
      byte byte0 = (byte)112;
      byteArray0[0] = (byte)112;
      int int0 = (-43);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawUTF8String(byteArray0, (-43), (byte)112);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Version version0 = Version.unknownVersion();
      SimpleModule simpleModule0 = new SimpleModule(version0);
      ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper2 = objectMapper1.setSubtypeResolver(stdSubtypeResolver0);
      ObjectMapper objectMapper3 = objectMapper2.setAnnotationIntrospector((AnnotationIntrospector) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3, false);
      tokenBuffer0.writeObjectId(simpleModule0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeStartArray();
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      tokenBuffer_Parser0.disable(jsonParser_Feature0);
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, false);
      assertFalse(tokenBuffer_Parser1.canReadObjectId());
      assertTrue(tokenBuffer_Parser1.canReadTypeId());
      
      tokenBuffer_Parser0.getEmbeddedObject();
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(1297, jsonToken0, (Object) jsonToken0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper1.addHandler((DeserializationProblemHandler) null);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper2, false, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      ObjectCodec objectCodec0 = tokenBuffer0.getCodec();
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteTypeId());
      assertNotNull(objectCodec0);
      assertTrue(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ShortNode shortNode0 = ShortNode.valueOf((short) (-939));
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.DEFAULT;
      tokenBuffer_Segment0.appendRaw(41, (int) (short) (-939), (Object) jsonAutoDetect_Visibility0, (Object) shortNode0, (Object) null);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      JsonParser jsonParser0 = tokenBuffer0.asParser((JsonParser) tokenBuffer_Parser0);
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-55);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeUTF8String(byteArray0, 1275, (byte) (-55));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      byte[] byteArray0 = new byte[0];
      JsonParser jsonParser0 = jsonFactory2.createParser(byteArray0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      tokenBuffer0.getOutputContext();
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append((-1660), jsonToken0);
      assertNull(tokenBuffer_Segment1);
      
      tokenBuffer_Segment0._next = null;
      boolean boolean0 = tokenBuffer_Segment0.hasIds();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      objectMapper0.clearProblemHandlers();
      objectMapper1.clearProblemHandlers();
      objectMapper0.reader();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
      tokenBuffer0.firstToken();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, true);
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentStructure(tokenBuffer_Parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BigInteger bigInteger0 = BigInteger.ONE;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      Float float0 = new Float((double) 16);
      tokenBuffer0.writeObjectField("JSON", float0);
      tokenBuffer0.writeNumber(bigInteger0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JSON");
      tokenBuffer0.writeStartObject();
      // Undeclared exception!
      tokenBuffer0.append(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      ShortNode shortNode0 = ShortNode.valueOf((short) (-939));
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.DEFAULT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(41, (int) (short) (-939), (Object) jsonAutoDetect_Visibility0, (Object) shortNode0, (Object) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        tokenBuffer_Segment1.get(16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      Float float0 = new Float(0.0);
      tokenBuffer_Segment0.append(60, jsonToken0, (Object) jsonToken0, (Object) jsonToken0, (Object) float0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ObjectReader objectReader0 = objectMapper0.reader();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, true);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertTrue(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      tokenBuffer_Segment0._nativeIds = treeMap0;
      ShortNode shortNode0 = ShortNode.valueOf((short) (-939));
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.DEFAULT;
      tokenBuffer_Segment0.appendRaw(0, 41, (Object) shortNode0, (Object) jsonAutoDetect_Visibility0, (Object) treeMap0);
      tokenBuffer_Segment0._nativeIds = treeMap0;
      tokenBuffer_Segment0.findObjectId(0);
      TreeMap treeMap1 = (TreeMap)tokenBuffer_Segment0.get(0);
      assertNull(treeMap1.textValue());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      tokenBuffer_Segment0._nativeIds = treeMap0;
      ShortNode shortNode0 = ShortNode.valueOf((short) (-939));
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.DEFAULT;
      tokenBuffer_Segment0.appendRaw(0, 41, (Object) shortNode0, (Object) jsonAutoDetect_Visibility0, (Object) treeMap0);
      assertEquals(2, treeMap0.size());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.getValueAsDouble();
      tokenBuffer_Parser0.overrideCurrentName("Internal error: should never end up through this code path");
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.writeEndArray();
      tokenBuffer0.writeNumber("Internal error: should never end up through this code path");
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeNumberField("hqnd}", 0.0);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      tokenBuffer0.setPrettyPrinter(minimalPrettyPrinter0);
      SerializedString serializedString0 = new SerializedString(" ");
      tokenBuffer0.writeString((SerializableString) serializedString0);
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      PipedReader pipedReader0 = new PipedReader(127);
      JsonParser jsonParser0 = jsonFactory2.createParser((Reader) pipedReader0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      // Undeclared exception!
      try { 
        tokenBuffer0.copyCurrentEvent(jsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper0.clearProblemHandlers();
      objectMapper2.clearProblemHandlers();
      ObjectReader objectReader0 = objectMapper1.reader();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      ObjectMapper objectMapper3 = objectMapper1.setSerializationInclusion(jsonInclude_Include0);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
      objectMapper3.configure(serializationFeature0, true);
      objectMapper3.reader();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer0.firstToken();
      boolean boolean0 = tokenBuffer0.canWriteBinaryNatively();
      assertTrue(boolean0);
      
      BigDecimal bigDecimal0 = new BigDecimal(759);
      assertEquals((byte) (-9), bigDecimal0.byteValue());
      
      tokenBuffer0.writeNumber(bigDecimal0);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper0.clearProblemHandlers();
      ObjectReader objectReader0 = objectMapper1.reader();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      tokenBuffer0.firstToken();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper2, true, true);
      tokenBuffer_Parser0.close();
      assertTrue(tokenBuffer_Parser0.isClosed());
      
      int int0 = tokenBuffer_Segment0.rawType(837);
      assertEquals(0, int0);
      
      tokenBuffer0.canWriteObjectId();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper2, false, false);
      tokenBuffer_Parser0.getValueAsLong((long) 837);
      assertTrue(tokenBuffer_Parser0.isClosed());
      
      tokenBuffer_Parser1.setCodec(objectMapper2);
      tokenBuffer_Parser1.getEmbeddedObject();
      TokenBuffer.Parser tokenBuffer_Parser2 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectReader0, false, false);
      int int1 = tokenBuffer_Parser2.getTextOffset();
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      BigDecimal bigDecimal0 = new BigDecimal(16);
      tokenBuffer0._appendRaw((-2914), (Object) null);
      try { 
        tokenBuffer_Parser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000010651; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      ObjectMapper objectMapper2 = objectMapper1.setSerializationInclusion(jsonInclude_Include0);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
      ObjectMapper objectMapper3 = objectMapper2.configure(serializationFeature0, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectReader objectReader0 = objectMapper3.reader();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      tokenBuffer0.firstToken();
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = '=';
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue(charArray0, (-1473), (-1473));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.getCharacterEscapes();
      tokenBuffer0.canWriteTypeId();
      tokenBuffer0.writeNumber((float) 0);
      tokenBuffer0.writeObjectFieldStart(";");
      tokenBuffer0.writeEndObject();
      tokenBuffer0.writeStringField("5.6", "5.6");
      tokenBuffer0.writeEndObject();
      tokenBuffer0.writeNumber(0);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      ObjectMapper objectMapper2 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl0, defaultDeserializationContext0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
      ObjectMapper objectMapper3 = objectMapper2.setSerializationInclusion(jsonInclude_Include0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JSON");
      objectMapper3.setSerializationInclusion(jsonInclude_Include0);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      ObjectMapper objectMapper4 = objectMapper2.enable(deserializationFeature0, deserializationFeatureArray0);
      objectMapper4.configure(serializationFeature0, false);
      ObjectReader objectReader0 = objectMapper4.reader();
      objectReader0.withoutFeatures(deserializationFeatureArray0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
      tokenBuffer0.writeNumber((BigInteger) null);
      tokenBuffer0.writeStartObject();
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NULL, tokenBuffer0.firstToken());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.put("|rB2aiEccs,fcsC", (-1.0));
      ArrayNode arrayNode0 = objectNode1.withArray("6%9m[snW");
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      tokenBuffer0._append(jsonToken0, jsonToken0);
      SimpleType simpleType0 = (SimpleType)TypeBindings.UNBOUND;
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      ObjectIdGenerator<SimpleModule> objectIdGenerator0 = (ObjectIdGenerator<SimpleModule>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) simpleType0, propertyName0, (ObjectIdGenerator<?>) objectIdGenerator0, true);
      boolean boolean1 = false;
      ObjectIdWriter objectIdWriter1 = objectIdWriter0.withAlwaysAsId(false);
      SerializedString serializedString0 = (SerializedString)objectIdWriter1.propertyName;
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw(objectIdWriter0.propertyName);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      ShortNode.valueOf((short) (-938));
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      // Undeclared exception!
      try { 
        tokenBuffer_Segment0.appendRaw((int) (short) (-938), 362, (Object) tokenBuffer0, (Object) jsonAutoDetect_Visibility0, (Object) jsonAutoDetect_Visibility0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -938
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      ObjectMapper objectMapper2 = objectMapper1.setSerializationInclusion(jsonInclude_Include0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      objectMapper0.setNodeFactory(jsonNodeFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
      ObjectMapper objectMapper3 = objectMapper2.configure(serializationFeature0, true);
      ObjectReader objectReader0 = objectMapper3.reader();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      tokenBuffer0.close();
      tokenBuffer0.firstToken();
      assertTrue(tokenBuffer0.isClosed());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.setPrettyPrinter((PrettyPrinter) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      tokenBuffer1.writeTypeId((Object) null);
      tokenBuffer0.writeStartArray();
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.setCodec((ObjectCodec) null);
      jsonFactory0.copy();
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      tokenBuffer1._append(jsonToken0);
      assertEquals(JsonToken.START_ARRAY, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      int int0 = tokenBuffer_Segment0.rawType((-16711681));
      assertEquals(0, int0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonGenerator_Feature0, false);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      ObjectMapper objectMapper3 = objectMapper2.enable(deserializationFeature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3, false);
      tokenBuffer0.writeEndArray();
      SerializationFeature serializationFeature1 = SerializationFeature.INDENT_OUTPUT;
      objectMapper2.configure(serializationFeature1, true);
      objectMapper0.reader();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper2);
      JsonToken jsonToken0 = tokenBuffer0.firstToken();
      assertEquals(JsonToken.END_ARRAY, jsonToken0);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper0.clearProblemHandlers();
      ObjectReader objectReader0 = objectMapper1.reader();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      tokenBuffer0.firstToken();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper2, true, true);
      tokenBuffer_Parser0.close();
      tokenBuffer_Segment0.rawType(837);
      tokenBuffer0.canWriteObjectId();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper2, false, false);
      tokenBuffer_Parser0.getValueAsLong((long) 837);
      assertTrue(tokenBuffer_Parser0.isClosed());
      
      tokenBuffer_Parser1.setCodec(objectMapper2);
      tokenBuffer_Parser1.getEmbeddedObject();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper1);
      tokenBuffer1.firstToken();
      tokenBuffer0.writeBoolean(true);
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)41;
      byteArray0[7] = (byte)0;
      jsonFactory0.createParser(byteArray0);
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0._next;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonParser jsonParser0 = tokenBuffer_Parser0.enable(jsonParser_Feature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      tokenBuffer0.writeEndArray();
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = 'a';
      charArray0[2] = 'B';
      // Undeclared exception!
      try { 
        tokenBuffer0.writeString(charArray0, (int) (byte)0, 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper0.clearProblemHandlers();
      objectMapper2.clearProblemHandlers();
      StringReader stringReader0 = new StringReader("JSON");
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) stringReader0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper2, true, true);
      tokenBuffer_Parser0.close();
      int int0 = 510;
      tokenBuffer_Segment0.rawType(510);
      TokenBuffer tokenBuffer1 = new TokenBuffer(tokenBuffer_Parser0);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw("JSON");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[9];
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      deserializationFeatureArray0[2] = deserializationFeature1;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      ContextAttributes.Impl.getEmpty();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)40;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRawValue("", 3056, (-16711681));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper.findModules();
      ObjectMapper objectMapper2 = objectMapper0.clearProblemHandlers();
      ObjectReader objectReader0 = objectMapper0.reader();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      Class<Integer> class0 = Integer.class;
      Class<Integer> class1 = Integer.TYPE;
      try { 
        objectMapper2.convertValue((Object) class0, class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not construct instance of java.lang.Integer from String value 'java.lang.Integer': not a valid Integer value
         //  at [Source: java.lang.String@0000000888; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      tokenBuffer_Segment0.next();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.DEFAULT;
      int int0 = 42;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0.getObjectId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeStartArray();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      tokenBuffer_Parser0.disable(jsonParser_Feature0);
      SimpleModule simpleModule0 = new SimpleModule((String) null);
      tokenBuffer0._appendRaw(837, simpleModule0);
      BigInteger bigInteger0 = BigInteger.ONE;
      tokenBuffer0.toString();
      try { 
        tokenBuffer_Parser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000010651; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper0.clearProblemHandlers();
      objectMapper2.clearProblemHandlers();
      ObjectReader objectReader0 = objectMapper1.reader();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      tokenBuffer0.firstToken();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.writeTypeId(objectMapper1);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper2, true, false);
      tokenBuffer_Parser0.overrideCurrentName("JSON");
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      ShortNode shortNode0 = ShortNode.valueOf((short) (-938));
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      tokenBuffer_Segment0.appendRaw(41, (int) (short) (-938), (Object) jsonAutoDetect_Visibility0, (Object) shortNode0, (Object) null);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.getEmbeddedObject();
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      objectMapper0.copy();
      ObjectReader objectReader0 = objectMapper0.reader();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      JsonGenerator jsonGenerator0 = tokenBuffer0.setFeatureMask(7);
      tokenBuffer0.serialize(jsonGenerator0);
      assertEquals(7, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      tokenBuffer0.getOutputTarget();
      tokenBuffer_Segment0.appendRaw(19, 41, (Object) null);
      ShortNode shortNode0 = ShortNode.valueOf((short) (-939));
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.DEFAULT;
      tokenBuffer_Segment0.appendRaw(41, (int) (short) (-939), (Object) jsonAutoDetect_Visibility0, (Object) shortNode0, (Object) null);
      // Undeclared exception!
      try { 
        JsonAutoDetect.Visibility.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper0.clearProblemHandlers();
      objectMapper2.copy();
      ObjectReader objectReader0 = objectMapper1.reader();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      tokenBuffer0.firstToken();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper2, true, false);
      tokenBuffer_Parser0.overrideCurrentName("JSON");
      BigInteger bigInteger0 = BigInteger.TEN;
      tokenBuffer0.writeNumber(bigInteger0);
      tokenBuffer0.toString();
      tokenBuffer0.writeStartObject();
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw('~');
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      BigInteger bigInteger0 = BigInteger.ONE;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      Float float0 = new Float((double) 16);
      tokenBuffer0.writeNumber(bigInteger0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      tokenBuffer0.append(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      objectMapper0.findAndRegisterModules();
      ObjectReader objectReader0 = objectMapper0.reader();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      short short0 = (short) (-1032);
      tokenBuffer0.writeNumber((short) (-1032));
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.DEFAULT;
      Short short1 = new Short((short) (-1032));
      // Undeclared exception!
      try { 
        tokenBuffer_Segment0.append((int) (short) (-1032), jsonToken0, (Object) jsonAutoDetect_Visibility0, (Object) short1, (Object) short1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1032
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer$Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      tokenBuffer_Segment0.rawType((-16711681));
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
      ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonGenerator_Feature0, false);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      ObjectMapper objectMapper3 = objectMapper2.enable(deserializationFeature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper3, false);
      tokenBuffer0.writeEndArray();
      Integer integer0 = new Integer(1297);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(1297, 14, (Object) integer0, (Object) null, (Object) objectMapper0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectMapper0, false, false);
      tokenBuffer_Parser0.getValueAsLong((long) 0);
      tokenBuffer_Parser0.setCodec(objectMapper0);
      tokenBuffer_Segment1.rawType(0);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeRaw("[typeId=", 4000, 14);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Called operation not supported for TokenBuffer
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ShortNode shortNode0 = new ShortNode((short) (-939));
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.DEFAULT;
      int int0 = tokenBuffer_Segment0.rawType(41);
      assertEquals(0, int0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      ObjectMapper objectMapper2 = objectMapper1.setSerializationInclusion(jsonInclude_Include0);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
      ObjectMapper objectMapper3 = objectMapper2.configure(serializationFeature0, true);
      ObjectReader objectReader0 = objectMapper3.reader();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      tokenBuffer0.firstToken();
      int int0 = tokenBuffer0.getFeatureMask();
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper0.clearProblemHandlers();
      ObjectReader objectReader0 = objectMapper1.reader();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      tokenBuffer0.firstToken();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper2, true, true);
      tokenBuffer_Parser0.close();
      assertTrue(tokenBuffer_Parser0.isClosed());
      
      tokenBuffer_Segment0.rawType(837);
      tokenBuffer0.canWriteObjectId();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      tokenBuffer0.writeEndObject();
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      PipedReader pipedReader0 = new PipedReader(127);
      JsonParser jsonParser0 = jsonFactory2.createParser((Reader) pipedReader0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      tokenBuffer0.serialize((JsonGenerator) null);
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
      jsonGeneratorDelegate0.getCharacterEscapes();
      JsonGenerator jsonGenerator0 = tokenBuffer0.setCharacterEscapes((CharacterEscapes) null);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      assertTrue(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
      
      Object object0 = new Object();
      tokenBuffer0.writeBoolean(true);
      Object object1 = tokenBuffer0._typeId;
      assertNull(object1);
      
      String string0 = ((TokenBuffer) jsonGenerator0).toString();
      assertEquals(JsonToken.VALUE_TRUE, tokenBuffer0.firstToken());
      assertFalse(jsonGenerator0.canWriteObjectId());
      assertEquals(79, jsonGenerator0.getFeatureMask());
      assertEquals("[TokenBuffer: VALUE_TRUE]", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0.setPrettyPrinter((PrettyPrinter) null);
      tokenBuffer0.toString();
      tokenBuffer0.writeStartArray();
      Integer integer0 = new Integer(2472);
      tokenBuffer0._appendRaw(1799, "[TokenBuffer: ]");
      BigInteger bigInteger0 = BigInteger.ONE;
      tokenBuffer0.writeNumber(bigInteger0);
      String string0 = tokenBuffer0.toString();
      assertEquals("[TokenBuffer: START_ARRAY, VALUE_STRING, VALUE_NUMBER_INT, VALUE_STRING]", string0);
      
      tokenBuffer0.firstToken();
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-104);
      tokenBuffer0.writeBinary(byteArray0);
      tokenBuffer0.setHighestNonEscapedChar((byte) (-104));
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.setPrettyPrinter((PrettyPrinter) null);
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertFalse(tokenBuffer1.canWriteObjectId());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer1.firstToken());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      JsonGenerator jsonGenerator0 = tokenBuffer0.setPrettyPrinter((PrettyPrinter) null);
      tokenBuffer0.toString();
      JsonFactory jsonFactory0 = new JsonFactory();
      Double double0 = new Double((-1313.7));
      tokenBuffer0._appendRaw((-1029), double0);
      Float float0 = new Float((-1313.7));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)85;
      jsonGenerator0.writeBinary(byteArray0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator0.disable(jsonGenerator_Feature0);
      TokenBuffer tokenBuffer1 = (TokenBuffer)jsonGenerator0.setHighestNonEscapedChar((-1));
      tokenBuffer0.serialize(tokenBuffer1);
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer1.firstToken());
      assertFalse(tokenBuffer1.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper0.clearProblemHandlers();
      objectMapper2.clearProblemHandlers();
      ObjectReader objectReader0 = objectMapper1.reader();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JSON");
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
      ObjectMapper objectMapper3 = objectMapper1.setSerializationInclusion(jsonInclude_Include0);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
      ObjectMapper objectMapper4 = objectMapper3.configure(serializationFeature0, true);
      objectMapper3.reader();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer0.firstToken();
      boolean boolean0 = tokenBuffer0.canWriteBinaryNatively();
      assertTrue(boolean0);
      
      BigDecimal bigDecimal0 = new BigDecimal(759);
      tokenBuffer0.writeNumber(bigDecimal0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      BigDecimal bigDecimal1 = BigDecimal.valueOf((long) 759);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(759, (-2724), (Object) null, (Object) bigDecimal1, (Object) objectMapper3);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, objectReader0, false, false);
      tokenBuffer_Parser0.isClosed();
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      tokenBuffer0._append(jsonToken0, objectMapper4);
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      objectMapper0.reader();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(406, jsonToken0);
      assertNotNull(tokenBuffer_Segment1);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      tokenBuffer_Parser0.peekNextToken();
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper0.clearProblemHandlers();
      ObjectReader objectReader0 = objectMapper1.reader();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      tokenBuffer0.firstToken();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper2, true, true);
      tokenBuffer_Parser0.close();
      tokenBuffer_Segment0.rawType(837);
      tokenBuffer0.canWriteObjectId();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        tokenBuffer0.deserialize(tokenBuffer_Parser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      ShortNode shortNode0 = ShortNode.valueOf((short) (-938));
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      tokenBuffer_Segment0.appendRaw(41, (int) (short) (-938), (Object) jsonAutoDetect_Visibility0, (Object) shortNode0, (Object) null);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer0.writeFieldName((SerializableString) serializedString0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.getEmbeddedObject();
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertFalse(tokenBuffer_Segment0.hasIds());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper2 = objectMapper1.setSerializerFactory(beanSerializerFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[2];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      ObjectMapper objectMapper3 = objectMapper2.disable(serializationFeature0, serializationFeatureArray0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper3, false, false);
      tokenBuffer_Parser0.getValueAsDouble();
      tokenBuffer_Parser0.overrideCurrentName("G}P+4s.");
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      // Undeclared exception!
      try { 
        tokenBuffer0.writeObject(objectMapper0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/fasterxml/jackson/databind/JsonMappingException$Reference
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.getCharacterEscapes();
      tokenBuffer0.canWriteTypeId();
      tokenBuffer0.writeNumber((float) 0);
      tokenBuffer0.writeEndObject();
      tokenBuffer0.writeStringField("", (String) null);
      tokenBuffer0.writeEndObject();
      tokenBuffer0.writeNumber(2991);
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, tokenBuffer0.firstToken());
      assertFalse(tokenBuffer0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ShortNode.valueOf((short) (-67));
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.DEFAULT;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer0._last;
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, true);
      tokenBuffer0.append(tokenBuffer1);
      Byte byte0 = new Byte((byte) (-113));
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.getEmbeddedObject();
      assertTrue(tokenBuffer0.canWriteTypeId());
      
      tokenBuffer1.writeString((SerializableString) null);
      assertTrue(tokenBuffer1.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      tokenBuffer_Segment0.next();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0);
      jsonGeneratorDelegate0.getCharacterEscapes();
      tokenBuffer0.setCharacterEscapes((CharacterEscapes) null);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
      try { 
        tokenBuffer_Parser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000010651; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      ShortNode shortNode0 = ShortNode.valueOf((short) (-938));
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(41, (int) (short) (-938), (Object) jsonAutoDetect_Visibility0, (Object) shortNode0, (Object) null);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      try { 
        tokenBuffer_Parser0.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000010651; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      SerializedString serializedString0 = new SerializedString("");
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(2, (-242), (Object) serializedString0);
      assertNull(tokenBuffer_Segment1);
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
      boolean boolean0 = tokenBuffer_Parser0.hasTextCharacters();
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(boolean0);
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      objectMapper0.clearProblemHandlers();
      objectMapper1.clearProblemHandlers();
      objectMapper0.reader();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
      tokenBuffer0.firstToken();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((short)67);
      tokenBuffer0.writeTree(numericNode0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_NUMBER_INT, tokenBuffer0.firstToken());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper0.clearProblemHandlers();
      objectMapper2.clearProblemHandlers();
      ObjectReader objectReader0 = objectMapper1.reader();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      tokenBuffer0.firstToken();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      tokenBuffer0.isEnabled(jsonGenerator_Feature0);
      tokenBuffer0.writeEndObject();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper2, false, true);
      tokenBuffer_Parser0.getParsingContext();
      String string0 = "";
      boolean boolean0 = false;
      char char0 = '=';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("JSON", "", false, '=', (-1010));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      Float float0 = new Float(0.0);
      tokenBuffer_Segment0.append(60, jsonToken0, (Object) jsonToken0, (Object) jsonToken0, (Object) float0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
      ObjectMapper objectMapper2 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper2);
      tokenBuffer0.setFeatureMask(2638);
      BigInteger bigInteger0 = BigInteger.ONE;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      tokenBuffer0.enable(jsonGenerator_Feature0);
      tokenBuffer0.writeNumber(bigInteger0);
      tokenBuffer0.writeStartObject();
      assertEquals(2894, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      ShortNode shortNode0 = new ShortNode((short) (-2305));
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(874, jsonToken0, (Object) tokenBuffer0, (Object) shortNode0);
      assertNotNull(tokenBuffer_Segment1);
      
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.append(9, jsonToken0);
      assertNull(tokenBuffer_Segment2);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, false);
      tokenBuffer_Parser0.peekNextToken();
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      objectMapper0.setSerializerFactory(beanSerializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("`3f5T");
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(jsonParser0, jsonParser0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParserSequence0);
      tokenBuffer0.setPrettyPrinter((PrettyPrinter) null);
      tokenBuffer0.toString();
      JsonFactory jsonFactory1 = new JsonFactory();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper0, true, true);
      tokenBuffer_Parser0.getTextLength();
      BigInteger bigInteger0 = BigInteger.ONE;
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      try { 
        tokenBuffer_Parser0.getLongValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000010651; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper0.clearProblemHandlers();
      ObjectMapper objectMapper3 = new ObjectMapper(jsonFactory0);
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS;
      serializationFeatureArray0[0] = serializationFeature0;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      objectMapper0.configure(jsonGenerator_Feature0, false);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      ObjectMapper objectMapper4 = objectMapper3.enable(deserializationFeature0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper2, true);
      objectMapper3.configure(serializationFeature0, false);
      objectMapper4.reader();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper1);
      tokenBuffer0.writeBoolean(false);
      assertTrue(tokenBuffer0.canWriteObjectId());
      assertTrue(tokenBuffer0.canWriteTypeId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_FALSE, tokenBuffer0.firstToken());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      objectMapper1.clearProblemHandlers();
      ObjectReader objectReader0 = objectMapper0.reader();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      tokenBuffer0.firstToken();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper1, true, false);
      tokenBuffer_Parser0.overrideCurrentName("JSON");
      assertFalse(tokenBuffer_Parser0.canReadObjectId());
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertTrue(tokenBuffer_Parser0.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.getCharacterEscapes();
      tokenBuffer0.canWriteTypeId();
      byte[] byteArray0 = new byte[22];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-65);
      tokenBuffer0.writeBinary(byteArray0);
      tokenBuffer0.writeEndObject();
      tokenBuffer0.writeStringField("5.6", "5.6");
      tokenBuffer0.writeEndObject();
      tokenBuffer0.writeNumber(0);
      tokenBuffer0._appendRaw((byte)0, "5.6");
      tokenBuffer0.writeNumber((long) (byte) (-65));
      assertEquals(79, tokenBuffer0.getFeatureMask());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      JsonGenerator jsonGenerator0 = tokenBuffer0.setPrettyPrinter((PrettyPrinter) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      tokenBuffer0.writeStartArray();
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.setCodec((ObjectCodec) null);
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      StringReader stringReader0 = new StringReader("JSON");
      jsonFactory1.createParser((Reader) stringReader0);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      ShortNode shortNode0 = ShortNode.valueOf((short) (-938));
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.appendRaw(41, (int) (short) (-938), (Object) jsonAutoDetect_Visibility0, (Object) shortNode0, (Object) null);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment1, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.getTextCharacters();
      JsonToken jsonToken0 = tokenBuffer_Parser0.peekNextToken();
      assertFalse(tokenBuffer_Parser0.canReadTypeId());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, jsonToken0);
      assertFalse(tokenBuffer0.canWriteObjectId());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      Float float0 = new Float(0.0);
      tokenBuffer_Segment0.append(16, jsonToken0, (Object) jsonToken0, (Object) jsonToken0, (Object) float0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BigInteger bigInteger0 = BigInteger.ONE;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      Float float1 = new Float((double) 16);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "s7PQRP[/p3b1");
      tokenBuffer0.writeObjectField("JSON", float1);
      tokenBuffer0.writeNumber(bigInteger0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      tokenBuffer0.writeStartObject();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      tokenBuffer0.writeEndArray();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_AS_TIMESTAMPS;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonParser_Feature0, true);
      objectMapper2.reader();
      TokenBuffer tokenBuffer2 = new TokenBuffer(objectMapper0);
      tokenBuffer1.firstToken();
      tokenBuffer1._append(jsonToken0, tokenBuffer0);
      assertTrue(tokenBuffer1.canWriteTypeId());
      assertEquals(79, tokenBuffer1.getFeatureMask());
      assertTrue(tokenBuffer1.canWriteObjectId());
      assertEquals(JsonToken.FIELD_NAME, tokenBuffer0.firstToken());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      PipedReader pipedReader0 = new PipedReader(127);
      JsonParser jsonParser0 = jsonFactory2.createParser((Reader) pipedReader0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
      tokenBuffer0.serialize((JsonGenerator) null);
      char[] charArray0 = new char[1];
      charArray0[0] = 'h';
      jsonFactory2.setRootValueSeparator("JSON");
      jsonFactory1.createParser(charArray0, 52, 127);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      NumericNode numericNode0 = jsonNodeFactory0.numberNode((short) (-2358));
      tokenBuffer0.writeTree(numericNode0);
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, tokenBuffer0.firstToken());
      assertEquals(79, tokenBuffer0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      Float float0 = new Float(0.0);
      tokenBuffer_Segment0.append(16, jsonToken0, (Object) jsonToken0, (Object) jsonToken0, (Object) float0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = false;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, false);
      Float float1 = new Float((double) 16);
      tokenBuffer0.writeObjectField("JSON", float1);
      tokenBuffer0.writeNumber(bigInteger0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      tokenBuffer0.writeStartObject();
      // Undeclared exception!
      tokenBuffer0.append(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      Float float0 = new Float(0.0);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)85;
      tokenBuffer1.writeBinary(byteArray0);
      JsonGenerator jsonGenerator0 = tokenBuffer0.setCodec((ObjectCodec) null);
      tokenBuffer1.serialize(jsonGenerator0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, true);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null, false);
      tokenBuffer0.getCharacterEscapes();
      tokenBuffer0.canWriteTypeId();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-65);
      tokenBuffer0.writeBinary(byteArray0);
      tokenBuffer0.writeNumber((float) 0);
      tokenBuffer0.writeEndObject();
      tokenBuffer0.writeStringField("5.6", "5.6");
      tokenBuffer0.writeEndObject();
      tokenBuffer0.writeNumber(0);
      tokenBuffer0._appendRaw((byte)0, "5.6");
      tokenBuffer0.writeNumber((long) (byte) (-65));
      tokenBuffer0.writeNumber((BigDecimal) null);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(tokenBuffer0, false);
      jsonGeneratorDelegate0.getSchema();
      ObjectReader objectReader1 = objectReader0.with((FormatSchema) null);
      ObjectReader[] objectReaderArray0 = new ObjectReader[8];
      objectReaderArray0[0] = objectReader1;
      objectReaderArray0[1] = objectReader1;
      objectReaderArray0[2] = objectReader1;
      objectReaderArray0[4] = objectReader1;
      objectReaderArray0[5] = objectReader0;
      objectReaderArray0[6] = objectReader0;
      objectReaderArray0[7] = objectReader1;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withOptimalMatch(matchStrength0);
      ObjectReader objectReader2 = objectReader1.withFormatDetection(dataFormatReaders1);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectReader2, false, false);
      tokenBuffer_Parser0.getTextCharacters();
      Random.setNextRandom(64);
      try { 
        tokenBuffer_Parser0.getDoubleValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000010651; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, true);
      tokenBuffer0.writeStartArray();
      Integer integer0 = new Integer(12);
      Integer integer1 = new Integer((-84));
      int int0 = 59;
      tokenBuffer0._appendRaw(59, (Object) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      Float float0 = new Float(0.0);
      tokenBuffer0.writeObjectField("Can not determine enum constants for Class ", (Object) null);
      tokenBuffer0.writeNumber(bigInteger0);
      tokenBuffer0.toString();
      tokenBuffer0.firstToken();
      try { 
        tokenBuffer_Parser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000010651; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, false);
      try { 
        tokenBuffer_Parser0.getIntValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000010651; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      tokenBuffer_Segment0._nativeIds = treeMap0;
      ShortNode shortNode0 = ShortNode.valueOf((short) (-939));
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.DEFAULT;
      tokenBuffer_Segment0.appendRaw(0, 41, (Object) shortNode0, (Object) jsonAutoDetect_Visibility0, (Object) treeMap0);
      tokenBuffer_Segment0._nativeIds = treeMap0;
      tokenBuffer_Segment0.findObjectId(0);
      tokenBuffer_Segment0.get(0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      TimeZone timeZone0 = TimeZone.getTimeZone("JSON");
      ObjectMapper objectMapper2 = objectMapper1.setTimeZone(timeZone0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      ObjectMapper objectMapper3 = objectMapper2.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper4 = objectMapper3.setSerializerProvider(defaultSerializerProvider_Impl0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper4);
      tokenBuffer0.version();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectMapper2, false, false);
      tokenBuffer_Parser0.getTextLength();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      tokenBuffer0._typeId = (Object) null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)44;
      tokenBuffer0.writeBinary(byteArray0);
      TokenBuffer tokenBuffer1 = (TokenBuffer)tokenBuffer0.setHighestNonEscapedChar((byte)44);
      TokenBuffer tokenBuffer2 = new TokenBuffer((ObjectCodec) null, true);
      tokenBuffer1.serialize(tokenBuffer2);
      tokenBuffer2.serialize(tokenBuffer1);
      // Undeclared exception!
      tokenBuffer1.serialize(tokenBuffer0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.setCodec((ObjectCodec) null);
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      tokenBuffer0.writeNumberField("", bigDecimal0);
      tokenBuffer0.writeNumber(0.0);
      tokenBuffer0.useDefaultPrettyPrinter();
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.append(3714, jsonToken0);
      BigDecimal bigDecimal1 = new BigDecimal(737L);
      TokenBuffer.Segment tokenBuffer_Segment2 = tokenBuffer_Segment1.appendRaw(16, 933, (Object) jsonFactory0, (Object) jsonToken0, (Object) bigDecimal1);
      tokenBuffer_Segment2.next();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, true);
      try { 
        tokenBuffer_Parser0._checkIsNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000010651; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      tokenBuffer0.writeStartArray();
      Object object0 = tokenBuffer0._typeId;
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      JsonGenerator jsonGenerator0 = tokenBuffer1.setHighestNonEscapedChar((-513));
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      SimpleModule simpleModule0 = new SimpleModule();
      NamedType[] namedTypeArray0 = new NamedType[1];
      Class<ShortNode> class0 = ShortNode.class;
      NamedType namedType0 = new NamedType(class0, "p2ovLZ-I]1]wU@Tfmz|");
      namedTypeArray0[0] = namedType0;
      SimpleModule simpleModule1 = simpleModule0.registerSubtypes(namedTypeArray0);
      Class<Float> class1 = Float.class;
      JsonSerializer<Float> jsonSerializer0 = (JsonSerializer<Float>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      SimpleModule simpleModule2 = simpleModule1.addKeySerializer((Class<? extends Float>) class1, jsonSerializer0);
      tokenBuffer_Segment0.appendRaw(19, 2841, (Object) "", (Object) simpleModule2, (Object) namedType0);
      TokenBuffer.Segment tokenBuffer_Segment1 = tokenBuffer_Segment0.next();
      tokenBuffer_Segment1.findTypeId(16);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[20];
      serializationFeatureArray0[0] = serializationFeature0;
      serializationFeatureArray0[1] = serializationFeature0;
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1, true);
      tokenBuffer0.writeBoolean(true);
      TokenBuffer.Segment tokenBuffer_Segment1 = new TokenBuffer.Segment();
      Integer integer0 = new Integer(16);
      BigDecimal bigDecimal0 = new BigDecimal((-2283L));
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      BigInteger bigInteger0 = BigInteger.ONE;
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      tokenBuffer1.writeObjectField("0.0", tokenBuffer0);
      Short short0 = new Short((short) (-1758));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
      tokenBuffer0.toString();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, true);
      tokenBuffer_Parser0.getTextLength();
      tokenBuffer_Parser0.getTextLength();
      tokenBuffer0.writeStartArray();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      jsonFactory0.copy();
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0, true);
      tokenBuffer1.getCharacterEscapes();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      StringReader stringReader0 = new StringReader("[TokenBuffer: ]");
      JsonParser jsonParser0 = jsonFactory2.createParser((Reader) stringReader0);
      TokenBuffer tokenBuffer2 = new TokenBuffer(jsonParser0);
      tokenBuffer_Parser0.getCurrentLocation();
      // Undeclared exception!
      try { 
        tokenBuffer_Parser0._handleEOF();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper2 = objectMapper0.clearProblemHandlers();
      objectMapper2.clearProblemHandlers();
      ObjectReader objectReader0 = objectMapper1.reader();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonParser jsonParser0 = tokenBuffer_Parser0.disable(jsonParser_Feature0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) mapType0, propertyName0, (ObjectIdGenerator<?>) null, true);
      MapType mapType1 = (MapType)objectIdWriter0.idType;
      try { 
        objectMapper2.readValue(jsonParser0, (ResolvedType) mapType1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: java.lang.String@0000010651; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      objectMapper0.clearProblemHandlers();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      ContextAttributes.Impl.getEmpty();
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature1;
      ObjectMapper objectMapper2 = objectMapper1.disable(deserializationFeature1, deserializationFeatureArray0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0);
      Byte byte0 = new Byte((byte)76);
      Class<Integer> class0 = Integer.class;
      objectMapper2.convertValue((Object) byte0, class0);
      tokenBuffer0.writeEndObject();
      tokenBuffer0.writeNumber((-318));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, true, true);
      tokenBuffer0.writeStartArray();
      tokenBuffer0.writeObjectFieldStart("1JliOy$Gzc=\"A%8z%");
      PropertyName propertyName0 = PropertyName.construct("W ]%}>h=TmAW7g", "1JliOy$Gzc=\"A%8z%");
      ObjectIdGenerator<JsonSerializer<BigInteger>> objectIdGenerator0 = (ObjectIdGenerator<JsonSerializer<BigInteger>>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) null, propertyName0, objectIdGenerator0, true);
      objectIdWriter0.withAlwaysAsId(true);
      ObjectIdWriter objectIdWriter1 = objectIdWriter0.withSerializer((JsonSerializer<?>) null);
      SerializedString serializedString0 = (SerializedString)objectIdWriter0.propertyName;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(objectIdWriter1.propertyName);
      JsonGenerator jsonGenerator0 = tokenBuffer0.setPrettyPrinter(defaultPrettyPrinter0);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      objectMapper0.clearProblemHandlers();
      objectMapper1.clearProblemHandlers();
      objectMapper0.reader();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
      tokenBuffer0.firstToken();
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      jsonNodeFactory0.numberNode((short) (-787));
      TokenBuffer tokenBuffer1 = new TokenBuffer(objectMapper0);
      tokenBuffer1.writeTree((TreeNode) null);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      jsonFactory0.setCodec((ObjectCodec) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, true, true);
      tokenBuffer_Parser0.disable(jsonParser_Feature0);
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      Integer integer0 = new Integer(510);
      tokenBuffer0._appendRaw(418, jsonFactory1);
      BigInteger bigInteger0 = BigInteger.ONE;
      tokenBuffer0.writeObjectField("JSON", integer0);
      tokenBuffer0.writeNumber(bigInteger0);
      tokenBuffer0.toString();
      // Undeclared exception!
      try { 
        JsonToken.valueOf("JSON");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.fasterxml.jackson.core.JsonToken.JSON
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, false, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeStartArray();
      SimpleModule simpleModule0 = new SimpleModule((String) null);
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NONE;
      tokenBuffer0._appendRaw(178, jsonAutoDetect_Visibility0);
      BigInteger bigInteger0 = BigInteger.ONE;
      tokenBuffer0.toString();
      try { 
        tokenBuffer_Parser0.getDecimalValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.lang.String@0000010651; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._first;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer((byte) (-115));
      Float float0 = new Float(0.0F);
      tokenBuffer0._appendRaw(98, float0);
      Float float1 = new Float((double) 98);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-115);
      tokenBuffer0.writeBinary(byteArray0);
      JsonGenerator jsonGenerator0 = tokenBuffer0.setHighestNonEscapedChar(98);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ObjectCodec objectCodec0 = null;
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, true);
      tokenBuffer0.writeStartArray();
      Integer integer0 = new Integer(12);
      tokenBuffer0._appendRaw(837, integer0);
      BigInteger bigInteger0 = BigInteger.ONE;
      String string0 = "Can not determine enum constants for Class ";
      Float float0 = new Float(0.0);
      boolean boolean0 = false;
      TokenBuffer.Parser tokenBuffer_Parser1 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, false);
      tokenBuffer_Parser0.getEmbeddedObject();
      tokenBuffer_Parser0.version();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, true);
      File file0 = MockFile.createTempFile("Can not determine enum constants for Class ", "Can not determine enum constants for Class ");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, "Can not determine enum constants for Class ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Can not determine enum constants for Class 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectReader0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper1, true, false);
      tokenBuffer0.writeStartArray();
      Object object0 = tokenBuffer0._typeId;
      tokenBuffer0._appendRaw(837, (Object) null);
      Float float0 = new Float((-364.2328788997484));
      byte[] byteArray0 = new byte[0];
      tokenBuffer0.writeBinary(byteArray0);
      JsonGenerator jsonGenerator0 = tokenBuffer0.setHighestNonEscapedChar((byte)85);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qq6ZVf!&Kt{x<q=rKc");
      TokenBuffer.Segment tokenBuffer_Segment0 = new TokenBuffer.Segment();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Gb1aG");
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[6];
      MapperFeature mapperFeature0 = MapperFeature.INFER_PROPERTY_MUTATORS;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS;
      mapperFeatureArray0[1] = mapperFeature1;
      MapperFeature mapperFeature2 = MapperFeature.AUTO_DETECT_GETTERS;
      mapperFeatureArray0[2] = mapperFeature2;
      MapperFeature mapperFeature3 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[3] = mapperFeature3;
      MapperFeature mapperFeature4 = MapperFeature.AUTO_DETECT_FIELDS;
      mapperFeatureArray0[4] = mapperFeature4;
      MapperFeature mapperFeature5 = MapperFeature.USE_ANNOTATIONS;
      mapperFeatureArray0[5] = mapperFeature5;
      ObjectMapper objectMapper2 = objectMapper1.enable(mapperFeatureArray0);
      Class<Module> class0 = Module.class;
      ObjectReader objectReader0 = objectMapper2.reader(class0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, objectReader0, false, true);
      tokenBuffer_Parser0.close();
      tokenBuffer_Parser0.peekNextToken();
      TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper1);
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      tokenBuffer0._appendRaw(65536, jsonAutoDetect_Visibility0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      ShortNode shortNode0 = ShortNode.valueOf((short)249);
      tokenBuffer_Segment0.append((-1199), jsonToken0, (Object) jsonToken0, (Object) shortNode0);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, (ObjectCodec) null, false, true);
      tokenBuffer0.writeStartArray();
      Integer integer0 = new Integer((-1795));
      tokenBuffer0._appendRaw((short)249, jsonToken0);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)85;
      tokenBuffer1.writeBinary(byteArray0);
      tokenBuffer0.setHighestNonEscapedChar(470);
      try { 
        tokenBuffer0.serialize(tokenBuffer1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized value type for VALUE_NUMBER_FLOAT: com.fasterxml.jackson.core.JsonToken, can not serialize
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TokenBuffer tokenBuffer0 = new TokenBuffer((ObjectCodec) null);
      TokenBuffer.Segment tokenBuffer_Segment0 = tokenBuffer0._last;
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      ShortNode.valueOf((short)249);
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser(tokenBuffer_Segment0, (ObjectCodec) null, false, true);
      tokenBuffer0.writeStartArray();
      Integer integer0 = new Integer((-1795));
      tokenBuffer0._appendRaw((short)249, jsonToken0);
      TokenBuffer tokenBuffer1 = new TokenBuffer((ObjectCodec) null, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)85;
      tokenBuffer1.writeBinary(byteArray0);
      tokenBuffer0.setHighestNonEscapedChar(470);
      try { 
        tokenBuffer0.serialize(tokenBuffer1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized value type for VALUE_NUMBER_FLOAT: com.fasterxml.jackson.core.JsonToken, can not serialize
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TokenBuffer.Parser tokenBuffer_Parser0 = new TokenBuffer.Parser((TokenBuffer.Segment) null, objectMapper0, true, true);
      TokenBuffer tokenBuffer0 = new TokenBuffer(tokenBuffer_Parser0);
      tokenBuffer0.writeStartArray();
      tokenBuffer0.writeStartArray();
      JavaType javaType0 = TypeFactory.unknownType();
      PropertyName propertyName0 = PropertyName.construct("<", "");
      ObjectIdGenerator<String> objectIdGenerator0 = (ObjectIdGenerator<String>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(javaType0, propertyName0, objectIdGenerator0, false);
      JsonSerializer<Short> jsonSerializer0 = (JsonSerializer<Short>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      ObjectIdWriter objectIdWriter1 = objectIdWriter0.withSerializer(jsonSerializer0);
      SerializedString serializedString0 = (SerializedString)objectIdWriter1.propertyName;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      JsonGenerator jsonGenerator0 = tokenBuffer0.setPrettyPrinter(defaultPrettyPrinter0);
      // Undeclared exception!
      tokenBuffer0.serialize(jsonGenerator0);
  }
}
