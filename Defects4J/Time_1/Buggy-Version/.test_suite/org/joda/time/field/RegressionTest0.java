package org.joda.time.field;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        org.joda.time.DateTimeField dateTimeField0 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.OffsetDateTimeField offsetDateTimeField5 = new org.joda.time.field.OffsetDateTimeField(dateTimeField0, dateTimeFieldType1, 0, (int) (byte) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.junit.Assert.assertNotNull(readableInterval1);
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        // The following exception was thrown during execution in test generation
        try {
            long long8 = unsupportedDateTimeField6.roundCeiling(1L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long3 = dateTimeZone0.convertLocalToUTC((long) (byte) 1, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 28800001L + "'", long3 == 28800001L);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        org.joda.time.ReadablePartial readablePartial0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial1 = new org.joda.time.Partial(readablePartial0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The partial must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.hourOfDay();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial7 = new org.joda.time.Partial(dateTimeFieldType0, (int) '#', chronology5);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hourOfDay" + "'", str1, "hourOfDay");
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField11 = partial0.getField((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.getDifferenceAsLong((long) (short) 100, (-30610224000000L));
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField11 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long14 = durationField11.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long16 = durationField11.getValueAsLong((long) 10);
        int int18 = durationField11.getValue((long) (byte) 10);
        boolean boolean19 = partial10.equals((java.lang.Object) durationField11);
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval21);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfCentury();
        org.joda.time.DurationField durationField25 = chronology23.millis();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.ReadableInterval readableInterval28 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval27);
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval27);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = readableInterval33.contains(readableInterval34);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = readableInterval33.toPeriod(periodType36);
        int[] intArray39 = chronology29.get((org.joda.time.ReadablePeriod) period37, (-210866846400000L));
        int[] intArray42 = chronology23.get((org.joda.time.ReadablePeriod) period37, 2173795348453L, (long) 1439);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray44 = unsupportedDateTimeField6.set((org.joda.time.ReadablePartial) partial10, (int) ' ', intArray42, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 30610224000100L + "'", long9 == 30610224000100L);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(readableInterval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(readableInterval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(readableInterval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 0, 0, -58574124, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-68, -10, -2, -4, -16, -2, -27, -14]");
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = new org.joda.time.DateTimeFieldType[] { dateTimeFieldType0 };
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial34 = new org.joda.time.Partial(dateTimeFieldTypeArray2, intArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Values array must be the same length as the types array");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 0, -58574124, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField11.getAsShortText(readablePartial23, (int) ' ', locale25);
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = null;
        java.lang.String str30 = dividedDateTimeField11.getAsText(readablePartial27, (int) (byte) 10, locale29);
        long long32 = dividedDateTimeField11.roundHalfFloor((long) 100);
        long long35 = dividedDateTimeField11.getDifferenceAsLong((-30610224000000L), (long) 24);
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField37 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long40 = durationField37.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long42 = durationField37.getValueAsLong((long) 10);
        int int44 = durationField37.getValue((long) (byte) 10);
        boolean boolean45 = partial36.equals((java.lang.Object) durationField37);
        org.joda.time.ReadableInterval readableInterval47 = null;
        org.joda.time.ReadableInterval readableInterval48 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval47);
        org.joda.time.Chronology chronology49 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval47);
        org.joda.time.DateTimeField dateTimeField50 = chronology49.yearOfCentury();
        org.joda.time.DurationField durationField51 = chronology49.millis();
        org.joda.time.DateTimeField dateTimeField52 = chronology49.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField53 = chronology49.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial54 = null;
        int[] intArray61 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int62 = dateTimeField53.getMaximumValue(readablePartial54, intArray61);
        java.util.Locale locale64 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray65 = dividedDateTimeField11.set((org.joda.time.ReadablePartial) partial36, 28531765, intArray61, "dayOfMonth", locale64);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"dayOfMonth\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "10" + "'", str30, "10");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-97L) + "'", long35 == (-97L));
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10L + "'", long42 == 10L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(readableInterval48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 24 + "'", int62 == 24);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException10 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType7, (java.lang.Number) 60035L, "");
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType7.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.IllegalFieldValueException illegalFieldValueException15 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType12, (java.lang.Number) 10L, "hourOfDay");
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = new org.joda.time.DateTimeFieldType[] { dateTimeFieldType0, dateTimeFieldType7, dateTimeFieldType12, dateTimeFieldType16, dateTimeFieldType17, dateTimeFieldType18 };
        int[] intArray20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial21 = new org.joda.time.Partial(dateTimeFieldTypeArray19, intArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Values array must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.getDifferenceAsLong((long) (short) 100, (-30610224000000L));
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField11 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long14 = durationField11.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long16 = durationField11.getValueAsLong((long) 10);
        int int18 = durationField11.getValue((long) (byte) 10);
        boolean boolean19 = partial10.equals((java.lang.Object) durationField11);
        java.util.Locale locale21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = unsupportedDateTimeField6.getAsShortText((org.joda.time.ReadablePartial) partial10, (int) (short) 0, locale21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 30610224000100L + "'", long9 == 30610224000100L);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField4 = iSOChronology0.eras();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.junit.Assert.assertNotNull(gregorianChronology5);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.minuteOfDay();
        long long7 = dateTimeField4.addWrapField(35L, (int) (short) 1);
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField9 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long12 = durationField9.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long14 = durationField9.getValueAsLong((long) 10);
        int int16 = durationField9.getValue((long) (byte) 10);
        boolean boolean17 = partial8.equals((java.lang.Object) durationField9);
        org.joda.time.ReadableInterval readableInterval19 = null;
        org.joda.time.ReadableInterval readableInterval20 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval19);
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval19);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = readableInterval25.toPeriod(periodType28);
        int[] intArray31 = chronology21.get((org.joda.time.ReadablePeriod) period29, (-210866846400000L));
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray33 = dateTimeField4.addWrapField((org.joda.time.ReadablePartial) partial8, (int) ' ', intArray31, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 60035L + "'", long7 == 60035L);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(readableInterval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 0, 0, 0, -58574124, 0, 0, 0]");
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str4 = dateTimeZone3.toString();
        java.lang.String str6 = dateTimeZone3.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeUtils.getZone(dateTimeZone3);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone8 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone8);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(cachedDateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        // The following exception was thrown during execution in test generation
        try {
            long long42 = iSOChronology0.getDateTimeMillis(970L, 28531765, (int) '4', (int) (byte) 10, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 28531765 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 0, -58574124, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[969, 11, 4, 2, 23, 52, 58, 291]");
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial12 = partial0.with(dateTimeFieldType10, 3);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3 for era must not be larger than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = unsupportedDateTimeField6.getType();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField12 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long15 = durationField12.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long17 = durationField12.getValueAsLong((long) 10);
        int int19 = durationField12.getValue((long) (byte) 10);
        boolean boolean20 = partial11.equals((java.lang.Object) durationField12);
        org.joda.time.Chronology chronology21 = partial11.getChronology();
        org.joda.time.ReadableInterval readableInterval22 = null;
        org.joda.time.ReadableInterval readableInterval23 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval22);
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval22);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial26 = null;
        int[] intArray33 = new int[] { 53460006, ' ', (short) 100, 28531765, 53460006, 10 };
        int int34 = dateTimeField25.getMinimumValue(readablePartial26, intArray33);
        // The following exception was thrown during execution in test generation
        try {
            int int35 = unsupportedDateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) partial11, intArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(readableInterval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[53460006, 32, 100, 28531765, 53460006, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField14 = partial11.getField(3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.weeks();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.yearOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getRangeDurationField();
        long long14 = unsupportedDateTimeField6.getDifferenceAsLong(10L, 0L);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField16 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long19 = durationField16.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long21 = durationField16.getValueAsLong((long) 10);
        int int23 = durationField16.getValue((long) (byte) 10);
        boolean boolean24 = partial15.equals((java.lang.Object) durationField16);
        org.joda.time.Chronology chronology25 = partial15.getChronology();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial15.isBefore((org.joda.time.ReadablePartial) partial26);
        java.util.Locale locale29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = unsupportedDateTimeField6.getAsText((org.joda.time.ReadablePartial) partial15, (int) '#', locale29);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField11.getAsShortText(readablePartial23, (int) ' ', locale25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField28 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long31 = durationField28.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long33 = durationField28.getValueAsLong((long) 10);
        int int35 = durationField28.getValue((long) (byte) 10);
        boolean boolean36 = partial27.equals((java.lang.Object) durationField28);
        org.joda.time.Chronology chronology37 = partial27.getChronology();
        org.joda.time.ReadableInterval readableInterval39 = null;
        org.joda.time.ReadableInterval readableInterval40 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval39);
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval39);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DurationField durationField43 = chronology41.millis();
        org.joda.time.DurationField durationField44 = chronology41.centuries();
        org.joda.time.Chronology chronology45 = chronology41.withUTC();
        org.joda.time.DurationField durationField46 = chronology45.halfdays();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField50 = new org.joda.time.field.DividedDateTimeField(dateTimeField47, dateTimeFieldType48, 10);
        long long53 = dividedDateTimeField50.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval55 = null;
        org.joda.time.ReadableInterval readableInterval56 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval55);
        org.joda.time.Chronology chronology57 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval55);
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfCentury();
        org.joda.time.DurationField durationField59 = chronology57.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField60 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType54, durationField59);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField61 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField50, dateTimeFieldType54);
        org.joda.time.ReadablePartial readablePartial62 = null;
        java.util.Locale locale64 = null;
        java.lang.String str65 = dividedDateTimeField50.getAsShortText(readablePartial62, (int) ' ', locale64);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField67 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField50, 100);
        org.joda.time.ReadablePartial readablePartial68 = null;
        org.joda.time.ReadableInterval readableInterval69 = null;
        org.joda.time.ReadableInterval readableInterval70 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval69);
        org.joda.time.Chronology chronology71 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval69);
        org.joda.time.DateTimeField dateTimeField72 = chronology71.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial73 = null;
        int[] intArray80 = new int[] { 53460006, ' ', (short) 100, 28531765, 53460006, 10 };
        int int81 = dateTimeField72.getMinimumValue(readablePartial73, intArray80);
        int int82 = dividedDateTimeField50.getMinimumValue(readablePartial68, intArray80);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray84 = dividedDateTimeField11.add((org.joda.time.ReadablePartial) partial27, (int) (byte) 100, intArray80, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(readableInterval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-30610224000000L) + "'", long53 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(readableInterval56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField60);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "32" + "'", str65, "32");
        org.junit.Assert.assertNotNull(readableInterval70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[53460006, 32, 100, 28531765, 53460006, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DurationField durationField25 = remainderDateTimeField22.getRangeDurationField();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField27 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long30 = durationField27.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long32 = durationField27.getValueAsLong((long) 10);
        int int34 = durationField27.getValue((long) (byte) 10);
        boolean boolean35 = partial26.equals((java.lang.Object) durationField27);
        org.joda.time.Chronology chronology36 = partial26.getChronology();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial26.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = partial26.getFieldTypes();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField41 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long44 = durationField41.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long46 = durationField41.getValueAsLong((long) 10);
        int int48 = durationField41.getValue((long) (byte) 10);
        boolean boolean49 = partial40.equals((java.lang.Object) durationField41);
        org.joda.time.Chronology chronology50 = partial40.getChronology();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        boolean boolean52 = partial40.isBefore((org.joda.time.ReadablePartial) partial51);
        int int53 = partial26.compareTo((org.joda.time.ReadablePartial) partial40);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField55 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long58 = durationField55.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long60 = durationField55.getValueAsLong((long) 10);
        int int62 = durationField55.getValue((long) (byte) 10);
        boolean boolean63 = partial54.equals((java.lang.Object) durationField55);
        int int64 = partial40.compareTo((org.joda.time.ReadablePartial) partial54);
        java.util.Locale locale65 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = remainderDateTimeField22.getAsText((org.joda.time.ReadablePartial) partial54, locale65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10L + "'", long60 == 10L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        // The following exception was thrown during execution in test generation
        try {
            long long9 = zonedChronology4.getDateTimeMillis((int) (short) 10, 8, (int) (short) -1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = unsupportedDateTimeField6.getType();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField12 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long15 = durationField12.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long17 = durationField12.getValueAsLong((long) 10);
        int int19 = durationField12.getValue((long) (byte) 10);
        boolean boolean20 = partial11.equals((java.lang.Object) durationField12);
        org.joda.time.Chronology chronology21 = partial11.getChronology();
        java.util.Locale locale22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = unsupportedDateTimeField6.getAsText((org.joda.time.ReadablePartial) partial11, locale22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        long long16 = dividedDateTimeField11.roundFloor(291L);
        boolean boolean17 = dividedDateTimeField11.isSupported();
        org.joda.time.DurationField durationField18 = dividedDateTimeField11.getDurationField();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField19 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = unsupportedDateTimeField6.getType();
        java.lang.String str11 = unsupportedDateTimeField6.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "dayOfYear" + "'", str11, "dayOfYear");
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = partial11.getValue(28531765);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 28531765");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField17 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType11, durationField16);
        long long20 = unsupportedDateTimeField17.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = unsupportedDateTimeField17.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial23 = partial0.with(dateTimeFieldType21, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 4L + "'", long20 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.ReadableInterval readableInterval15 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval14);
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval14);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfCentury();
        org.joda.time.DurationField durationField18 = chronology16.millis();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval20);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.ReadableInterval readableInterval26 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval25);
        org.joda.time.ReadableInterval readableInterval27 = null;
        boolean boolean28 = readableInterval26.contains(readableInterval27);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = readableInterval26.toPeriod(periodType29);
        int[] intArray32 = chronology22.get((org.joda.time.ReadablePeriod) period30, (-210866846400000L));
        int[] intArray35 = chronology16.get((org.joda.time.ReadablePeriod) period30, 2173795348453L, (long) 1439);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial36 = new org.joda.time.Partial(dateTimeFieldTypeArray13, intArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Values array must be the same length as the types array");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(readableInterval15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(readableInterval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, -58574124, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-68, -10, -2, -4, -16, -2, -27, -14]");
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int2 = partial0.get(dateTimeFieldType1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        org.joda.time.DurationField durationField38 = remainderDateTimeField22.iDurationField;
        java.util.Locale locale40 = null;
        java.lang.String str41 = remainderDateTimeField22.getAsText(2580171L, locale40);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0" + "'", str41, "0");
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        java.lang.String str13 = partial0.toStringList();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial16 = partial0.with(dateTimeFieldType14, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        int int27 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField29 = partial14.getField(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.tz.DateTimeZoneBuilder.readFrom(inputStream0, "dayOfYear");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str1 = dateTimeZone0.toString();
        java.lang.String str3 = dateTimeZone0.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeUtils.getZone(dateTimeZone0);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone5 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone4);
        java.lang.Object obj6 = null;
        boolean boolean7 = cachedDateTimeZone5.equals(obj6);
        long long9 = cachedDateTimeZone5.nextTransition(2580171L);
        boolean boolean10 = cachedDateTimeZone5.isFixed();
        boolean boolean11 = cachedDateTimeZone5.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "UTC" + "'", str1, "UTC");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(cachedDateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2580171L + "'", long9 == 2580171L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        long long16 = dividedDateTimeField11.roundFloor(291L);
        boolean boolean17 = dividedDateTimeField11.isLenient();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.eras();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.dayOfWeek();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        boolean boolean2 = durationField1.isSupported();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str1 = dateTimeZone0.toString();
        java.lang.String str3 = dateTimeZone0.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeUtils.getZone(dateTimeZone0);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone5 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = cachedDateTimeZone5.getUncachedZone();
        int int8 = cachedDateTimeZone5.getOffset((-58877472891246L));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "UTC" + "'", str1, "UTC");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(cachedDateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField39 = iSOChronology38.minutes();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology38.millisOfDay();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType35.getField((org.joda.time.Chronology) iSOChronology38);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(iSOChronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        int int27 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        int int38 = partial14.compareTo((org.joda.time.ReadablePartial) partial28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType40 = partial28.getFieldType((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.weekyear();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField22 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long25 = durationField22.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long27 = durationField22.getValueAsLong((long) 10);
        int int29 = durationField22.getValue((long) (byte) 10);
        boolean boolean30 = partial21.equals((java.lang.Object) durationField22);
        org.joda.time.Chronology chronology31 = partial21.getChronology();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial21.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = partial21.getFieldTypes();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField36 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long39 = durationField36.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long41 = durationField36.getValueAsLong((long) 10);
        int int43 = durationField36.getValue((long) (byte) 10);
        boolean boolean44 = partial35.equals((java.lang.Object) durationField36);
        org.joda.time.Chronology chronology45 = partial35.getChronology();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        boolean boolean47 = partial35.isBefore((org.joda.time.ReadablePartial) partial46);
        int int48 = partial21.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField50 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long53 = durationField50.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long55 = durationField50.getValueAsLong((long) 10);
        int int57 = durationField50.getValue((long) (byte) 10);
        boolean boolean58 = partial49.equals((java.lang.Object) durationField50);
        int int59 = partial35.compareTo((org.joda.time.ReadablePartial) partial49);
        int[] intArray60 = partial49.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray62 = dateTimeField6.set((org.joda.time.ReadablePartial) partial7, 5682, intArray60, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5682");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10L + "'", long55 == 10L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[]");
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.centuryOfEra();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField7 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long10 = durationField7.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long12 = durationField7.getValueAsLong((long) 10);
        int int14 = durationField7.getValue((long) (byte) 10);
        boolean boolean15 = partial6.equals((java.lang.Object) durationField7);
        org.joda.time.Chronology chronology16 = partial6.getChronology();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        boolean boolean18 = partial6.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = partial6.getFieldTypes();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField21 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long24 = durationField21.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long26 = durationField21.getValueAsLong((long) 10);
        int int28 = durationField21.getValue((long) (byte) 10);
        boolean boolean29 = partial20.equals((java.lang.Object) durationField21);
        org.joda.time.Chronology chronology30 = partial20.getChronology();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial20.isBefore((org.joda.time.ReadablePartial) partial31);
        int int33 = partial6.compareTo((org.joda.time.ReadablePartial) partial20);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField35 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long38 = durationField35.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long40 = durationField35.getValueAsLong((long) 10);
        int int42 = durationField35.getValue((long) (byte) 10);
        boolean boolean43 = partial34.equals((java.lang.Object) durationField35);
        int int44 = partial20.compareTo((org.joda.time.ReadablePartial) partial34);
        org.joda.time.chrono.ISOChronology iSOChronology45 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone46 = iSOChronology45.getZone();
        org.joda.time.DateTimeZone dateTimeZone47 = iSOChronology45.getZone();
        org.joda.time.DurationField durationField48 = iSOChronology45.days();
        org.joda.time.DateTimeZone dateTimeZone49 = iSOChronology45.getZone();
        boolean boolean50 = partial34.equals((java.lang.Object) dateTimeZone49);
        org.joda.time.ReadableInterval readableInterval52 = null;
        org.joda.time.ReadableInterval readableInterval53 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval52);
        org.joda.time.Chronology chronology54 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval52);
        org.joda.time.DateTimeField dateTimeField55 = chronology54.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval57 = null;
        org.joda.time.ReadableInterval readableInterval58 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval57);
        org.joda.time.ReadableInterval readableInterval59 = null;
        boolean boolean60 = readableInterval58.contains(readableInterval59);
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.Period period62 = readableInterval58.toPeriod(periodType61);
        int[] intArray64 = chronology54.get((org.joda.time.ReadablePeriod) period62, (-210866846400000L));
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray66 = dateTimeField5.addWrapPartial((org.joda.time.ReadablePartial) partial34, 1, intArray64, 29227899);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(iSOChronology45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(readableInterval53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(readableInterval58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 0, 0, 0, -58574124, 0, 0, 0]");
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        int int27 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = partial14.getValue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial5 = null;
        int int6 = dateTimeField4.getMinimumValue(readablePartial5);
        org.joda.time.ReadablePartial readablePartial7 = null;
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.ReadableInterval readableInterval9 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval8);
        org.joda.time.Chronology chronology10 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval8);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.yearOfCentury();
        org.joda.time.DurationField durationField12 = chronology10.millis();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial15 = null;
        int[] intArray22 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int23 = dateTimeField14.getMaximumValue(readablePartial15, intArray22);
        int int24 = dateTimeField4.getMinimumValue(readablePartial7, intArray22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField27 = new org.joda.time.field.RemainderDateTimeField(dateTimeField4, dateTimeFieldType25, 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property28 = partial0.property(dateTimeFieldType25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(readableInterval9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 24 + "'", int23 == 24);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.ReadableInterval readableInterval15 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval14);
        long long16 = readableInterval15.getStartMillis();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.ReadableInterval readableInterval18 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval17);
        long long19 = readableInterval18.getEndMillis();
        boolean boolean20 = readableInterval15.overlaps(readableInterval18);
        boolean boolean21 = partial0.equals((java.lang.Object) readableInterval15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType23 = partial0.getFieldType(10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(readableInterval15);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711909523160L + "'", long16 == 1711909523160L);
        org.junit.Assert.assertNotNull(readableInterval18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1711909523161L + "'", long19 == 1711909523161L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField8 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long11 = durationField8.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long13 = durationField8.getValueAsLong((long) 10);
        int int15 = durationField8.getValue((long) (byte) 10);
        boolean boolean16 = partial7.equals((java.lang.Object) durationField8);
        org.joda.time.Chronology chronology17 = partial7.getChronology();
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        boolean boolean19 = partial7.isBefore((org.joda.time.ReadablePartial) partial18);
        java.util.Locale locale21 = null;
        java.lang.String str22 = partial18.toString("723", locale21);
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial28 = null;
        int int29 = dateTimeField27.getMinimumValue(readablePartial28);
        org.joda.time.ReadablePartial readablePartial30 = null;
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.ReadableInterval readableInterval32 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval31);
        org.joda.time.Chronology chronology33 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval31);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DurationField durationField35 = chronology33.millis();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial38 = null;
        int[] intArray45 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int46 = dateTimeField37.getMaximumValue(readablePartial38, intArray45);
        int int47 = dateTimeField27.getMinimumValue(readablePartial30, intArray45);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray49 = unsupportedDateTimeField6.addWrapPartial((org.joda.time.ReadablePartial) partial18, 29227899, intArray45, 24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "723" + "'", str22, "723");
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(readableInterval32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 24 + "'", int46 == 24);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getRangeDurationField();
        long long14 = unsupportedDateTimeField6.getDifferenceAsLong(10L, 0L);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField16 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long19 = durationField16.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long21 = durationField16.getValueAsLong((long) 10);
        int int23 = durationField16.getValue((long) (byte) 10);
        boolean boolean24 = partial15.equals((java.lang.Object) durationField16);
        org.joda.time.Chronology chronology25 = partial15.getChronology();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial15.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval29);
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfCentury();
        org.joda.time.DurationField durationField33 = chronology31.millis();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial36 = null;
        int[] intArray43 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int44 = dateTimeField35.getMaximumValue(readablePartial36, intArray43);
        java.util.Locale locale46 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray47 = unsupportedDateTimeField6.set((org.joda.time.ReadablePartial) partial15, 17, intArray43, "UTC", locale46);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 24 + "'", int44 == 24);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.getDifferenceAsLong((long) (short) 100, (-30610224000000L));
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField11 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long14 = durationField11.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long16 = durationField11.getValueAsLong((long) 10);
        int int18 = durationField11.getValue((long) (byte) 10);
        boolean boolean19 = partial10.equals((java.lang.Object) durationField11);
        org.joda.time.Chronology chronology20 = partial10.getChronology();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial10.isBefore((org.joda.time.ReadablePartial) partial21);
        java.util.Locale locale24 = null;
        java.lang.String str25 = partial21.toString("723", locale24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField27 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long30 = durationField27.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long32 = durationField27.getValueAsLong((long) 10);
        int int34 = durationField27.getValue((long) (byte) 10);
        boolean boolean35 = partial26.equals((java.lang.Object) durationField27);
        org.joda.time.Chronology chronology36 = partial26.getChronology();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial26.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = partial26.getFieldTypes();
        java.lang.Object obj40 = null;
        boolean boolean41 = partial26.equals(obj40);
        boolean boolean42 = partial21.isBefore((org.joda.time.ReadablePartial) partial26);
        java.util.Locale locale44 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = unsupportedDateTimeField6.getAsText((org.joda.time.ReadablePartial) partial21, (int) (byte) 0, locale44);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 30610224000100L + "'", long9 == 30610224000100L);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "723" + "'", str25, "723");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        boolean boolean3 = readableInterval1.contains(readableInterval2);
        org.joda.time.Duration duration4 = readableInterval1.toDuration();
        org.joda.time.DateTime dateTime5 = readableInterval1.getEnd();
        org.joda.time.DateTime dateTime6 = readableInterval1.getStart();
        org.joda.time.ReadableInterval readableInterval7 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(readableInterval7);
        org.junit.Assert.assertNotNull(readableInterval8);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str1 = dateTimeFieldType0.toString();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology6 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology2, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = zonedChronology6.getZone();
        boolean boolean8 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) zonedChronology6);
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology6.dayOfMonth();
        org.joda.time.DurationField durationField10 = zonedChronology6.months();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfMonth" + "'", str1, "dayOfMonth");
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.getDifferenceAsLong((-210861660779418L), 3600000L);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField11 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long14 = durationField11.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long16 = durationField11.getValueAsLong((long) 10);
        int int18 = durationField11.getValue((long) (byte) 10);
        boolean boolean19 = partial10.equals((java.lang.Object) durationField11);
        org.joda.time.Chronology chronology20 = partial10.getChronology();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial10.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = partial10.getFieldTypes();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField25 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long28 = durationField25.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long30 = durationField25.getValueAsLong((long) 10);
        int int32 = durationField25.getValue((long) (byte) 10);
        boolean boolean33 = partial24.equals((java.lang.Object) durationField25);
        org.joda.time.Chronology chronology34 = partial24.getChronology();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial24.isBefore((org.joda.time.ReadablePartial) partial35);
        int int37 = partial10.compareTo((org.joda.time.ReadablePartial) partial24);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField39 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long42 = durationField39.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long44 = durationField39.getValueAsLong((long) 10);
        int int46 = durationField39.getValue((long) (byte) 10);
        boolean boolean47 = partial38.equals((java.lang.Object) durationField39);
        int int48 = partial24.compareTo((org.joda.time.ReadablePartial) partial38);
        org.joda.time.ReadableInterval readableInterval49 = null;
        org.joda.time.ReadableInterval readableInterval50 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval49);
        org.joda.time.ReadableInterval readableInterval51 = null;
        boolean boolean52 = readableInterval50.contains(readableInterval51);
        org.joda.time.Duration duration53 = readableInterval50.toDuration();
        org.joda.time.DateTime dateTime54 = readableInterval50.getEnd();
        org.joda.time.DateTime dateTime55 = readableInterval50.getStart();
        org.joda.time.DateTime dateTime56 = partial38.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.ReadableInterval readableInterval58 = null;
        org.joda.time.ReadableInterval readableInterval59 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval58);
        org.joda.time.Chronology chronology60 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval58);
        org.joda.time.DateTimeField dateTimeField61 = chronology60.yearOfCentury();
        org.joda.time.DurationField durationField62 = chronology60.millis();
        org.joda.time.DateTimeField dateTimeField63 = chronology60.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval64 = null;
        org.joda.time.ReadableInterval readableInterval65 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval64);
        org.joda.time.Chronology chronology66 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval64);
        org.joda.time.DateTimeField dateTimeField67 = chronology66.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField68 = chronology66.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval69 = null;
        org.joda.time.ReadableInterval readableInterval70 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval69);
        org.joda.time.ReadableInterval readableInterval71 = null;
        boolean boolean72 = readableInterval70.contains(readableInterval71);
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = readableInterval70.toPeriod(periodType73);
        int[] intArray76 = chronology66.get((org.joda.time.ReadablePeriod) period74, (-210866846400000L));
        int[] intArray79 = chronology60.get((org.joda.time.ReadablePeriod) period74, 2173795348453L, (long) 1439);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray81 = unsupportedDateTimeField6.add((org.joda.time.ReadablePartial) partial38, (int) (byte) 100, intArray79, 29227899);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210861664379418L) + "'", long9 == (-210861664379418L));
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(readableInterval50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(readableInterval59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(readableInterval65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(readableInterval70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 0, 0, 0, -58574124, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-68, -10, -2, -4, -16, -2, -27, -14]");
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval7);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.joda.time.DurationField durationField12 = durationFieldType6.getField(chronology9);
        org.joda.time.field.DecoratedDurationField decoratedDurationField13 = new org.joda.time.field.DecoratedDurationField(durationField5, durationFieldType6);
        int int16 = decoratedDurationField13.getValue((-1L), (long) 0);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        int int13 = unsupportedDateTimeField6.getDifference((long) (byte) 10, 10L);
        java.lang.String str14 = unsupportedDateTimeField6.toString();
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.ReadableInterval readableInterval18 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval17);
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval17);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DurationField durationField21 = chronology19.millis();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval23);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.ReadableInterval readableInterval29 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval28);
        org.joda.time.ReadableInterval readableInterval30 = null;
        boolean boolean31 = readableInterval29.contains(readableInterval30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = readableInterval29.toPeriod(periodType32);
        int[] intArray35 = chronology25.get((org.joda.time.ReadablePeriod) period33, (-210866846400000L));
        int[] intArray38 = chronology19.get((org.joda.time.ReadablePeriod) period33, 2173795348453L, (long) 1439);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray40 = unsupportedDateTimeField6.set((org.joda.time.ReadablePartial) partial15, (int) (byte) 0, intArray38, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UnsupportedDateTimeField" + "'", str14, "UnsupportedDateTimeField");
        org.junit.Assert.assertNotNull(readableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(readableInterval29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0, 0, -58574124, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-68, -10, -2, -4, -16, -2, -27, -14]");
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = durationField5.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        boolean boolean15 = durationFieldType10.isSupported(chronology13);
        org.joda.time.field.ScaledDurationField scaledDurationField17 = new org.joda.time.field.ScaledDurationField(durationField5, durationFieldType10, (int) 'a');
        long long18 = scaledDurationField17.getUnitMillis();
        long long21 = scaledDurationField17.getMillis((long) 3, 3600000L);
        boolean boolean22 = scaledDurationField17.isPrecise();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210866846400000L) + "'", long9 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 97L + "'", long18 == 97L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 291L + "'", long21 == 291L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeZone dateTimeZone1 = gregorianChronology0.getZone();
        org.joda.time.Chronology chronology2 = gregorianChronology0.withUTC();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(chronology2);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        boolean boolean7 = unsupportedDateTimeField6.isLenient();
        java.lang.String str8 = unsupportedDateTimeField6.getName();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField10 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long13 = durationField10.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long15 = durationField10.getValueAsLong((long) 10);
        int int17 = durationField10.getValue((long) (byte) 10);
        boolean boolean18 = partial9.equals((java.lang.Object) durationField10);
        org.joda.time.Chronology chronology19 = partial9.getChronology();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial9.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = partial9.getFieldTypes();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField24 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long27 = durationField24.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long29 = durationField24.getValueAsLong((long) 10);
        int int31 = durationField24.getValue((long) (byte) 10);
        boolean boolean32 = partial23.equals((java.lang.Object) durationField24);
        org.joda.time.Chronology chronology33 = partial23.getChronology();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        boolean boolean35 = partial23.isBefore((org.joda.time.ReadablePartial) partial34);
        int int36 = partial9.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField38 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long41 = durationField38.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long43 = durationField38.getValueAsLong((long) 10);
        int int45 = durationField38.getValue((long) (byte) 10);
        boolean boolean46 = partial37.equals((java.lang.Object) durationField38);
        int int47 = partial23.compareTo((org.joda.time.ReadablePartial) partial37);
        int[] intArray48 = partial37.getValues();
        java.util.Locale locale49 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = unsupportedDateTimeField6.getAsShortText((org.joda.time.ReadablePartial) partial37, locale49);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "dayOfYear" + "'", str8, "dayOfYear");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        java.util.Locale locale14 = null;
        java.lang.String str15 = partial11.toString("723", locale14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.ReadableInterval readableInterval18 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval17);
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval17);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DurationField durationField21 = chronology19.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField22 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType16, durationField21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial24 = partial11.withField(dateTimeFieldType16, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "723" + "'", str15, "723");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(readableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField22);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.junit.Assert.assertNotNull(gregorianChronology1);
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField11.getAsShortText(readablePartial23, (int) ' ', locale25);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField28 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField11, 100);
        org.joda.time.DurationField durationField29 = offsetDateTimeField28.getLeapDurationField();
        int int31 = offsetDateTimeField28.get(2219715943200000L);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertNull(durationField29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 7330 + "'", int31 == 7330);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField11.getAsShortText(readablePartial23, (int) ' ', locale25);
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = null;
        java.lang.String str30 = dividedDateTimeField11.getAsText(readablePartial27, (int) (byte) 10, locale29);
        long long32 = dividedDateTimeField11.roundHalfFloor((long) 100);
        long long35 = dividedDateTimeField11.add(0L, 28531765);
        long long37 = dividedDateTimeField11.remainder((-53459996L));
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField39 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long42 = durationField39.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long44 = durationField39.getValueAsLong((long) 10);
        int int46 = durationField39.getValue((long) (byte) 10);
        boolean boolean47 = partial38.equals((java.lang.Object) durationField39);
        org.joda.time.Chronology chronology48 = partial38.getChronology();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial38.isBefore((org.joda.time.ReadablePartial) partial49);
        java.util.Locale locale52 = null;
        java.lang.String str53 = partial49.toString("723", locale52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField55 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long58 = durationField55.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long60 = durationField55.getValueAsLong((long) 10);
        int int62 = durationField55.getValue((long) (byte) 10);
        boolean boolean63 = partial54.equals((java.lang.Object) durationField55);
        org.joda.time.Chronology chronology64 = partial54.getChronology();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        boolean boolean66 = partial54.isBefore((org.joda.time.ReadablePartial) partial65);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray67 = partial54.getFieldTypes();
        java.lang.Object obj68 = null;
        boolean boolean69 = partial54.equals(obj68);
        boolean boolean70 = partial49.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray71 = partial54.getFieldTypes();
        java.util.Locale locale72 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = dividedDateTimeField11.getAsShortText((org.joda.time.ReadablePartial) partial54, locale72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'centuryOfEra' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "10" + "'", str30, "10");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 9003755385792000000L + "'", long35 == 9003755385792000000L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 315479340004L + "'", long37 == 315479340004L);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "723" + "'", str53, "723");
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10L + "'", long60 == 10L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray71);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DurationField durationField6 = zonedChronology4.centuries();
        org.joda.time.DurationField durationField7 = zonedChronology4.minutes();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getDurationField();
        java.lang.String str12 = unsupportedDateTimeField6.toString();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField14 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long17 = durationField14.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long19 = durationField14.getValueAsLong((long) 10);
        int int21 = durationField14.getValue((long) (byte) 10);
        boolean boolean22 = partial13.equals((java.lang.Object) durationField14);
        org.joda.time.Chronology chronology23 = partial13.getChronology();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial13.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial13.getFieldTypes();
        java.lang.Object obj27 = null;
        boolean boolean28 = partial13.equals(obj27);
        int[] intArray30 = new int[] { (short) 100 };
        // The following exception was thrown during execution in test generation
        try {
            int int31 = unsupportedDateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) partial13, intArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UnsupportedDateTimeField" + "'", str12, "UnsupportedDateTimeField");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[100]");
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.ReadableInterval readableInterval15 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval14);
        long long16 = readableInterval15.getStartMillis();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.ReadableInterval readableInterval18 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval17);
        long long19 = readableInterval18.getEndMillis();
        boolean boolean20 = readableInterval15.overlaps(readableInterval18);
        boolean boolean21 = partial0.equals((java.lang.Object) readableInterval15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = partial0.toString("GregorianChronology[100]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: r");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(readableInterval15);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(readableInterval18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField3 = new org.joda.time.field.PreciseDurationField(durationFieldType1, 28531825L);
        boolean boolean4 = preciseDurationField3.isPrecise();
        int int7 = preciseDurationField3.getDifference((long) 1, 1711909504045L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-60000) + "'", int7 == (-60000));
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DurationField durationField6 = zonedChronology4.centuries();
        org.joda.time.DateTimeField dateTimeField7 = zonedChronology4.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone8 = zonedChronology4.getZone();
        java.lang.String str9 = dateTimeZone8.getID();
        java.lang.String str11 = dateTimeZone8.getName((long) (byte) 1);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.Partial partial6 = new org.joda.time.Partial((org.joda.time.Chronology) zonedChronology4);
        // The following exception was thrown during execution in test generation
        try {
            long long12 = zonedChronology4.getDateTimeMillis((-210866846400000L), (int) '4', 323506, 1439, 24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray0 = new org.joda.time.DateTimeFieldType[] {};
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.DurationField durationField6 = chronology3.centuries();
        org.joda.time.Chronology chronology7 = chronology3.withUTC();
        org.joda.time.DurationField durationField8 = chronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField12 = new org.joda.time.field.DividedDateTimeField(dateTimeField9, dateTimeFieldType10, 10);
        long long15 = dividedDateTimeField12.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.ReadableInterval readableInterval18 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval17);
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval17);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DurationField durationField21 = chronology19.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField22 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType16, durationField21);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField23 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField12, dateTimeFieldType16);
        org.joda.time.ReadablePartial readablePartial24 = null;
        java.util.Locale locale26 = null;
        java.lang.String str27 = dividedDateTimeField12.getAsShortText(readablePartial24, (int) ' ', locale26);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField29 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField12, 100);
        org.joda.time.ReadablePartial readablePartial30 = null;
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.ReadableInterval readableInterval32 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval31);
        org.joda.time.Chronology chronology33 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval31);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial35 = null;
        int[] intArray42 = new int[] { 53460006, ' ', (short) 100, 28531765, 53460006, 10 };
        int int43 = dateTimeField34.getMinimumValue(readablePartial35, intArray42);
        int int44 = dividedDateTimeField12.getMinimumValue(readablePartial30, intArray42);
        org.joda.time.ReadableInterval readableInterval45 = null;
        org.joda.time.ReadableInterval readableInterval46 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval45);
        org.joda.time.Chronology chronology47 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval45);
        org.joda.time.DateTimeField dateTimeField48 = chronology47.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial49 = new org.joda.time.Partial(dateTimeFieldTypeArray0, intArray42, chronology47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Values array must be the same length as the types array");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-30610224000000L) + "'", long15 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(readableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField22);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "32" + "'", str27, "32");
        org.junit.Assert.assertNotNull(readableInterval32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[53460006, 32, 100, 28531765, 53460006, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(readableInterval46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        org.joda.time.DateTimeUtils.setCurrentMillisFixed(1L);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        int int27 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        int int38 = partial14.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.ReadableInterval readableInterval39 = null;
        org.joda.time.ReadableInterval readableInterval40 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval39);
        org.joda.time.ReadableInterval readableInterval41 = null;
        boolean boolean42 = readableInterval40.contains(readableInterval41);
        org.joda.time.Duration duration43 = readableInterval40.toDuration();
        org.joda.time.DateTime dateTime44 = readableInterval40.getEnd();
        org.joda.time.DateTime dateTime45 = readableInterval40.getStart();
        org.joda.time.DateTime dateTime46 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField48 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long51 = durationField48.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long53 = durationField48.getValueAsLong((long) 10);
        int int55 = durationField48.getValue((long) (byte) 10);
        boolean boolean56 = partial47.equals((java.lang.Object) durationField48);
        org.joda.time.Chronology chronology57 = partial47.getChronology();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        boolean boolean59 = partial47.isBefore((org.joda.time.ReadablePartial) partial58);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray60 = partial47.getFieldTypes();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField62 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long65 = durationField62.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long67 = durationField62.getValueAsLong((long) 10);
        int int69 = durationField62.getValue((long) (byte) 10);
        boolean boolean70 = partial61.equals((java.lang.Object) durationField62);
        org.joda.time.Chronology chronology71 = partial61.getChronology();
        org.joda.time.Partial partial72 = new org.joda.time.Partial();
        boolean boolean73 = partial61.isBefore((org.joda.time.ReadablePartial) partial72);
        int int74 = partial47.compareTo((org.joda.time.ReadablePartial) partial61);
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField76 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long79 = durationField76.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long81 = durationField76.getValueAsLong((long) 10);
        int int83 = durationField76.getValue((long) (byte) 10);
        boolean boolean84 = partial75.equals((java.lang.Object) durationField76);
        int int85 = partial61.compareTo((org.joda.time.ReadablePartial) partial75);
        org.joda.time.ReadableInterval readableInterval86 = null;
        org.joda.time.ReadableInterval readableInterval87 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval86);
        org.joda.time.ReadableInterval readableInterval88 = null;
        boolean boolean89 = readableInterval87.contains(readableInterval88);
        org.joda.time.Duration duration90 = readableInterval87.toDuration();
        org.joda.time.DateTime dateTime91 = readableInterval87.getEnd();
        org.joda.time.DateTime dateTime92 = readableInterval87.getStart();
        org.joda.time.DateTime dateTime93 = partial75.toDateTime((org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.Chronology chronology94 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime93);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(readableInterval40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10L + "'", long53 == 10L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray60);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 10L + "'", long67 == 10L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1L + "'", long79 == 1L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 10L + "'", long81 == 10L);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(readableInterval87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(chronology94);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.ReadableInterval readableInterval6 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval5);
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = readableInterval6.contains(readableInterval7);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = readableInterval6.toPeriod(periodType9);
        org.joda.time.DateTime dateTime11 = readableInterval6.getEnd();
        int int12 = dateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone4);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = iSOChronology13.getDateTimeMillis(14L, (int) (byte) 1, 297, (int) (byte) 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 297 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(readableInterval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(iSOChronology13);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField12 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType8, 4, (int) ' ', (int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField15 = new org.joda.time.field.RemainderDateTimeField(dateTimeField7, dateTimeFieldType13, 28531765);
        org.joda.time.DurationField durationField16 = remainderDateTimeField15.getDurationField();
        int int18 = remainderDateTimeField15.getMinimumValue((-58877472891246L));
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.Chronology chronology3 = iSOChronology0.withZone(dateTimeZone1);
        org.joda.time.Partial partial4 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DurationField durationField5 = iSOChronology0.seconds();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField5);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField14 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType8, durationField13);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField7, dateTimeFieldType8);
        long long18 = zeroIsMaxDateTimeField15.getDifferenceAsLong(349200000L, 4L);
        int int21 = zeroIsMaxDateTimeField15.getDifference((-97L), 0L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        java.util.Locale locale14 = null;
        java.lang.String str15 = partial11.toString("723", locale14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField17 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long20 = durationField17.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long22 = durationField17.getValueAsLong((long) 10);
        int int24 = durationField17.getValue((long) (byte) 10);
        boolean boolean25 = partial16.equals((java.lang.Object) durationField17);
        org.joda.time.Chronology chronology26 = partial16.getChronology();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial16.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = partial16.getFieldTypes();
        java.lang.Object obj30 = null;
        boolean boolean31 = partial16.equals(obj30);
        boolean boolean32 = partial11.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = partial16.getFieldTypes();
        int int34 = partial16.size();
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "723" + "'", str15, "723");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        org.joda.time.tz.DefaultNameProvider defaultNameProvider0 = new org.joda.time.tz.DefaultNameProvider();
        java.util.Locale locale1 = null;
        java.lang.String str4 = defaultNameProvider0.getShortName(locale1, "UTC", "");
        java.util.Locale locale5 = null;
        java.lang.String str8 = defaultNameProvider0.getShortName(locale5, "hours", "0");
        org.joda.time.DateTimeZone.setNameProvider((org.joda.time.tz.NameProvider) defaultNameProvider0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.minuteOfDay();
        int int4 = dateTimeField3.getMaximumValue();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1439 + "'", int4 == 1439);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval4 = null;
        org.joda.time.ReadableInterval readableInterval5 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval4);
        org.joda.time.Chronology chronology6 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval4);
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.millis();
        org.joda.time.DurationField durationField9 = chronology6.centuries();
        org.joda.time.Chronology chronology10 = chronology6.withUTC();
        org.joda.time.DurationField durationField11 = chronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField15 = new org.joda.time.field.DividedDateTimeField(dateTimeField12, dateTimeFieldType13, 10);
        long long18 = dividedDateTimeField15.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval20);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfCentury();
        org.joda.time.DurationField durationField24 = chronology22.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField25 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType19, durationField24);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField26 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField15, dateTimeFieldType19);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str28 = dateTimeFieldType27.toString();
        org.joda.time.chrono.ISOChronology iSOChronology29 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField30 = iSOChronology29.minutes();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str32 = dateTimeZone31.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology33 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology29, dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone34 = zonedChronology33.getZone();
        boolean boolean35 = dateTimeFieldType27.isSupported((org.joda.time.Chronology) zonedChronology33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = new org.joda.time.DateTimeFieldType[] { dateTimeFieldType0, dateTimeFieldType1, dateTimeFieldType2, dateTimeFieldType3, dateTimeFieldType19, dateTimeFieldType27 };
        org.joda.time.ReadableInterval readableInterval37 = null;
        org.joda.time.ReadableInterval readableInterval38 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval37);
        org.joda.time.Chronology chronology39 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval37);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.yearOfCentury();
        org.joda.time.DurationField durationField41 = chronology39.millis();
        org.joda.time.DurationField durationField42 = chronology39.centuries();
        org.joda.time.Chronology chronology43 = chronology39.withUTC();
        org.joda.time.DurationField durationField44 = chronology43.halfdays();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField48 = new org.joda.time.field.DividedDateTimeField(dateTimeField45, dateTimeFieldType46, 10);
        long long51 = dividedDateTimeField48.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval53 = null;
        org.joda.time.ReadableInterval readableInterval54 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval53);
        org.joda.time.Chronology chronology55 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval53);
        org.joda.time.DateTimeField dateTimeField56 = chronology55.yearOfCentury();
        org.joda.time.DurationField durationField57 = chronology55.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField58 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType52, durationField57);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField59 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField48, dateTimeFieldType52);
        org.joda.time.ReadablePartial readablePartial60 = null;
        java.util.Locale locale62 = null;
        java.lang.String str63 = dividedDateTimeField48.getAsShortText(readablePartial60, (int) ' ', locale62);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField65 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField48, 100);
        org.joda.time.ReadablePartial readablePartial66 = null;
        org.joda.time.ReadableInterval readableInterval67 = null;
        org.joda.time.ReadableInterval readableInterval68 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval67);
        org.joda.time.Chronology chronology69 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval67);
        org.joda.time.DateTimeField dateTimeField70 = chronology69.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial71 = null;
        int[] intArray78 = new int[] { 53460006, ' ', (short) 100, 28531765, 53460006, 10 };
        int int79 = dateTimeField70.getMinimumValue(readablePartial71, intArray78);
        int int80 = dividedDateTimeField48.getMinimumValue(readablePartial66, intArray78);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial81 = new org.joda.time.Partial(dateTimeFieldTypeArray36, intArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Types array must be in order largest-smallest: hourOfDay < weekyear");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(readableInterval5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-30610224000000L) + "'", long18 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "dayOfMonth" + "'", str28, "dayOfMonth");
        org.junit.Assert.assertNotNull(iSOChronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(readableInterval38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-30610224000000L) + "'", long51 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(readableInterval54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField58);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "32" + "'", str63, "32");
        org.junit.Assert.assertNotNull(readableInterval68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[53460006, 32, 100, 28531765, 53460006, 10]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = durationField5.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        boolean boolean15 = durationFieldType10.isSupported(chronology13);
        org.joda.time.field.ScaledDurationField scaledDurationField17 = new org.joda.time.field.ScaledDurationField(durationField5, durationFieldType10, (int) 'a');
        org.joda.time.DurationField durationField18 = scaledDurationField17.getWrappedField();
        long long21 = scaledDurationField17.add(2440588L, 1439);
        long long23 = scaledDurationField17.getMillis(0L);
        long long26 = scaledDurationField17.subtract((long) 1, 0);
        boolean boolean27 = scaledDurationField17.isPrecise();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210866846400000L) + "'", long9 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2580171L + "'", long21 == 2580171L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField12 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType8, 4, (int) ' ', (int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField15 = new org.joda.time.field.RemainderDateTimeField(dateTimeField7, dateTimeFieldType13, 28531765);
        org.joda.time.DurationField durationField16 = remainderDateTimeField15.getDurationField();
        org.joda.time.DurationField durationField17 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long20 = durationField17.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long22 = durationField17.getValueAsLong((long) 10);
        long long25 = durationField17.subtract((long) 1, (int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException29 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType26, (java.lang.Number) 0L, "9");
        org.joda.time.field.DividedDateTimeField dividedDateTimeField30 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField15, durationField17, dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-31L) + "'", long25 == (-31L));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = unsupportedDateTimeField6.getMinimumValue();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        // The following exception was thrown during execution in test generation
        try {
            int int15 = partial0.get(dateTimeFieldType14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField14 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType8, durationField13);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField7, dateTimeFieldType8);
        int int17 = zeroIsMaxDateTimeField15.getLeapAmount(1711909507403L);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        int int19 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial18);
        int int21 = zeroIsMaxDateTimeField15.getLeapAmount(14L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField11.getAsShortText(readablePartial23, (int) ' ', locale25);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField28 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField11, 100);
        org.joda.time.ReadablePartial readablePartial29 = null;
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.Chronology chronology32 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval30);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial34 = null;
        int[] intArray41 = new int[] { 53460006, ' ', (short) 100, 28531765, 53460006, 10 };
        int int42 = dateTimeField33.getMinimumValue(readablePartial34, intArray41);
        int int43 = dividedDateTimeField11.getMinimumValue(readablePartial29, intArray41);
        int int46 = dividedDateTimeField11.getDifference((long) 4, (long) (short) 0);
        java.util.Locale locale47 = null;
        int int48 = dividedDateTimeField11.getMaximumShortTextLength(locale47);
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField50 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long53 = durationField50.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long55 = durationField50.getValueAsLong((long) 10);
        int int57 = durationField50.getValue((long) (byte) 10);
        boolean boolean58 = partial49.equals((java.lang.Object) durationField50);
        org.joda.time.Chronology chronology59 = partial49.getChronology();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        boolean boolean61 = partial49.isBefore((org.joda.time.ReadablePartial) partial60);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray62 = partial49.getFieldTypes();
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        int[] intArray65 = partial64.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray67 = dividedDateTimeField11.addWrapField((org.joda.time.ReadablePartial) partial49, 4, intArray65, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[53460006, 32, 100, 28531765, 53460006, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10L + "'", long55 == 10L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray62);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField11 = new org.joda.time.field.OffsetDateTimeField(dateTimeField8, dateTimeFieldType9, (int) (short) 1);
        boolean boolean12 = offsetDateTimeField11.isSupported();
        long long14 = offsetDateTimeField11.remainder((long) 53460006);
        long long16 = offsetDateTimeField11.roundHalfFloor(1711909507403L);
        int int18 = offsetDateTimeField11.get(551169L);
        long long20 = offsetDateTimeField11.roundFloor((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField25 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) offsetDateTimeField11, dateTimeFieldType21, (int) '#', (int) (byte) 10, 3);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        int[] intArray27 = partial26.getValues();
        int int28 = partial26.size();
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.Chronology chronology32 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval30);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial34 = null;
        int[] intArray41 = new int[] { 53460006, ' ', (short) 100, 28531765, 53460006, 10 };
        int int42 = dateTimeField33.getMinimumValue(readablePartial34, intArray41);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray44 = offsetDateTimeField25.addWrapField((org.joda.time.ReadablePartial) partial26, (int) (short) -1, intArray41, 297);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 3060006L + "'", long14 == 3060006L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711908000000L + "'", long16 == 1711908000000L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 17 + "'", int18 == 17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-3600000L) + "'", long20 == (-3600000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[53460006, 32, 100, 28531765, 53460006, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        int int27 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int29 = partial0.indexOf(dateTimeFieldType28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField31 = partial0.getField(5682);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5682");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getDurationField();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField13 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long16 = durationField13.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long18 = durationField13.getValueAsLong((long) 10);
        int int20 = durationField13.getValue((long) (byte) 10);
        boolean boolean21 = partial12.equals((java.lang.Object) durationField13);
        org.joda.time.Chronology chronology22 = partial12.getChronology();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        boolean boolean24 = partial12.isBefore((org.joda.time.ReadablePartial) partial23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = partial12.getFieldTypes();
        int[] intArray27 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray29 = unsupportedDateTimeField6.add((org.joda.time.ReadablePartial) partial12, 1, intArray27, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.year();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = iSOChronology0.getDateTimeMillis((int) (short) 0, 17, 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 17 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        int int27 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        int int38 = partial14.compareTo((org.joda.time.ReadablePartial) partial28);
        int[] intArray39 = partial28.getValues();
        int[] intArray40 = partial28.getValues();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField42 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long45 = durationField42.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long47 = durationField42.getValueAsLong((long) 10);
        int int49 = durationField42.getValue((long) (byte) 10);
        boolean boolean50 = partial41.equals((java.lang.Object) durationField42);
        org.joda.time.Chronology chronology51 = partial41.getChronology();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        boolean boolean53 = partial41.isBefore((org.joda.time.ReadablePartial) partial52);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = partial41.getFieldTypes();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField56 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long59 = durationField56.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long61 = durationField56.getValueAsLong((long) 10);
        int int63 = durationField56.getValue((long) (byte) 10);
        boolean boolean64 = partial55.equals((java.lang.Object) durationField56);
        org.joda.time.Chronology chronology65 = partial55.getChronology();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial55.isBefore((org.joda.time.ReadablePartial) partial66);
        int int68 = partial41.compareTo((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField70 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long73 = durationField70.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long75 = durationField70.getValueAsLong((long) 10);
        int int77 = durationField70.getValue((long) (byte) 10);
        boolean boolean78 = partial69.equals((java.lang.Object) durationField70);
        int int79 = partial55.compareTo((org.joda.time.ReadablePartial) partial69);
        int[] intArray80 = partial69.getValues();
        boolean boolean81 = partial28.isBefore((org.joda.time.ReadablePartial) partial69);
        int[] intArray82 = partial28.getValues();
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10L + "'", long61 == 10L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 10L + "'", long75 == 10L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str1 = dateTimeFieldType0.toString();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology6 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology2, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = zonedChronology6.getZone();
        boolean boolean8 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) zonedChronology6);
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology6.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = zonedChronology6.getDateTimeMillis(1704096000000L, (int) ' ', 97, (int) (byte) 1, 12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfMonth" + "'", str1, "dayOfMonth");
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        org.joda.time.ReadablePartial readablePartial7 = null;
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField10 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long13 = durationField10.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long15 = durationField10.getValueAsLong((long) 10);
        int int17 = durationField10.getValue((long) (byte) 10);
        boolean boolean18 = partial9.equals((java.lang.Object) durationField10);
        org.joda.time.Chronology chronology19 = partial9.getChronology();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial9.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = partial9.getFieldTypes();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField24 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long27 = durationField24.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long29 = durationField24.getValueAsLong((long) 10);
        int int31 = durationField24.getValue((long) (byte) 10);
        boolean boolean32 = partial23.equals((java.lang.Object) durationField24);
        org.joda.time.Chronology chronology33 = partial23.getChronology();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        boolean boolean35 = partial23.isBefore((org.joda.time.ReadablePartial) partial34);
        int int36 = partial9.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField38 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long41 = durationField38.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long43 = durationField38.getValueAsLong((long) 10);
        int int45 = durationField38.getValue((long) (byte) 10);
        boolean boolean46 = partial37.equals((java.lang.Object) durationField38);
        int int47 = partial23.compareTo((org.joda.time.ReadablePartial) partial37);
        int[] intArray48 = partial37.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray50 = unsupportedDateTimeField6.set(readablePartial7, 297, intArray48, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[]");
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        int int27 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        int int38 = partial14.compareTo((org.joda.time.ReadablePartial) partial28);
        int[] intArray39 = partial28.getValues();
        java.lang.String str40 = partial28.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException44 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType41, (java.lang.Number) 60035L, "");
        org.joda.time.DurationFieldType durationFieldType45 = dateTimeFieldType41.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            int int46 = partial28.get(dateTimeFieldType41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(durationFieldType45);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.months();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str1 = dateTimeZone0.toString();
        java.lang.String str3 = dateTimeZone0.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeUtils.getZone(dateTimeZone0);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone5 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone4);
        int int7 = cachedDateTimeZone5.getStandardOffset(28800001L);
        org.joda.time.DateTimeZone dateTimeZone8 = cachedDateTimeZone5.getUncachedZone();
        java.util.Locale locale10 = null;
        java.lang.String str11 = cachedDateTimeZone5.getName(0L, locale10);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "UTC" + "'", str1, "UTC");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(cachedDateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        boolean boolean7 = unsupportedDateTimeField6.isLenient();
        long long10 = unsupportedDateTimeField6.add(1396290305822L, (-53459996L));
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField13 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long16 = durationField13.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long18 = durationField13.getValueAsLong((long) 10);
        int int20 = durationField13.getValue((long) (byte) 10);
        boolean boolean21 = partial12.equals((java.lang.Object) durationField13);
        org.joda.time.Chronology chronology22 = partial12.getChronology();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        boolean boolean24 = partial12.isBefore((org.joda.time.ReadablePartial) partial23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = partial12.getFieldTypes();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField27 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long30 = durationField27.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long32 = durationField27.getValueAsLong((long) 10);
        int int34 = durationField27.getValue((long) (byte) 10);
        boolean boolean35 = partial26.equals((java.lang.Object) durationField27);
        org.joda.time.Chronology chronology36 = partial26.getChronology();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial26.isBefore((org.joda.time.ReadablePartial) partial37);
        int int39 = partial12.compareTo((org.joda.time.ReadablePartial) partial26);
        org.joda.time.ReadableInterval readableInterval40 = null;
        org.joda.time.ReadableInterval readableInterval41 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval40);
        org.joda.time.ReadableInterval readableInterval42 = null;
        boolean boolean43 = readableInterval41.contains(readableInterval42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = readableInterval41.toPeriod(periodType44);
        org.joda.time.DateTime dateTime46 = readableInterval41.getEnd();
        org.joda.time.MutableInterval mutableInterval47 = readableInterval41.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval48 = null;
        org.joda.time.ReadableInterval readableInterval49 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval48);
        org.joda.time.ReadableInterval readableInterval50 = null;
        boolean boolean51 = readableInterval49.contains(readableInterval50);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = readableInterval49.toPeriod(periodType52);
        org.joda.time.DateTime dateTime54 = readableInterval49.getEnd();
        org.joda.time.ReadableInterval readableInterval55 = null;
        org.joda.time.ReadableInterval readableInterval56 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval55);
        org.joda.time.ReadableInterval readableInterval57 = null;
        boolean boolean58 = readableInterval56.contains(readableInterval57);
        boolean boolean59 = readableInterval49.overlaps(readableInterval56);
        boolean boolean60 = readableInterval41.contains(readableInterval56);
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.PeriodType periodType62 = org.joda.time.DateTimeUtils.getPeriodType(periodType61);
        org.joda.time.PeriodType periodType63 = org.joda.time.DateTimeUtils.getPeriodType(periodType62);
        org.joda.time.Period period64 = readableInterval41.toPeriod(periodType63);
        org.joda.time.Partial partial65 = partial12.plus((org.joda.time.ReadablePeriod) period64);
        java.util.Locale locale66 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str67 = unsupportedDateTimeField6.getAsShortText((org.joda.time.ReadablePartial) partial65, locale66);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1396236845826L + "'", long10 == 1396236845826L);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(readableInterval41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertNotNull(readableInterval49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(readableInterval56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(partial65);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = unsupportedDateTimeField6.getType();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField12 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long15 = durationField12.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long17 = durationField12.getValueAsLong((long) 10);
        int int19 = durationField12.getValue((long) (byte) 10);
        boolean boolean20 = partial11.equals((java.lang.Object) durationField12);
        org.joda.time.Chronology chronology21 = partial11.getChronology();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial11.isBefore((org.joda.time.ReadablePartial) partial22);
        java.util.Locale locale25 = null;
        java.lang.String str26 = partial22.toString("723", locale25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField28 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long31 = durationField28.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long33 = durationField28.getValueAsLong((long) 10);
        int int35 = durationField28.getValue((long) (byte) 10);
        boolean boolean36 = partial27.equals((java.lang.Object) durationField28);
        org.joda.time.Chronology chronology37 = partial27.getChronology();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial27.isBefore((org.joda.time.ReadablePartial) partial38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = partial27.getFieldTypes();
        java.lang.Object obj41 = null;
        boolean boolean42 = partial27.equals(obj41);
        boolean boolean43 = partial22.isBefore((org.joda.time.ReadablePartial) partial27);
        int[] intArray44 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int45 = unsupportedDateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) partial22, intArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "723" + "'", str26, "723");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        long long16 = dividedDateTimeField11.roundFloor(291L);
        boolean boolean17 = dividedDateTimeField11.isSupported();
        org.joda.time.DurationField durationField18 = dividedDateTimeField11.getDurationField();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField19 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11);
        java.util.Locale locale22 = null;
        long long23 = dividedDateTimeField11.set(1711909508754L, "10", locale22);
        org.joda.time.DurationField durationField24 = dividedDateTimeField11.iDurationField;
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-58877472891246L) + "'", long23 == (-58877472891246L));
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField11 = new org.joda.time.field.OffsetDateTimeField(dateTimeField8, dateTimeFieldType9, (int) (short) 1);
        int int13 = offsetDateTimeField11.get(60000L);
        long long15 = offsetDateTimeField11.roundCeiling(0L);
        long long17 = offsetDateTimeField11.roundHalfFloor(1711909511784L);
        org.joda.time.DurationField durationField18 = offsetDateTimeField11.getRangeDurationField();
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str21 = dateTimeZone20.toString();
        org.joda.time.Chronology chronology22 = iSOChronology19.withZone(dateTimeZone20);
        org.joda.time.Partial partial23 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology19);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField25 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long28 = durationField25.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long30 = durationField25.getValueAsLong((long) 10);
        int int32 = durationField25.getValue((long) (byte) 10);
        boolean boolean33 = partial24.equals((java.lang.Object) durationField25);
        boolean boolean34 = partial23.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.chrono.ISOChronology iSOChronology35 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str37 = dateTimeZone36.toString();
        org.joda.time.Chronology chronology38 = iSOChronology35.withZone(dateTimeZone36);
        org.joda.time.Partial partial39 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology35);
        boolean boolean40 = partial23.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField43 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long46 = durationField43.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long48 = durationField43.getValueAsLong((long) 10);
        int int50 = durationField43.getValue((long) (byte) 10);
        boolean boolean51 = partial42.equals((java.lang.Object) durationField43);
        org.joda.time.Chronology chronology52 = partial42.getChronology();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = partial42.isBefore((org.joda.time.ReadablePartial) partial53);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = partial42.getFieldTypes();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField57 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long60 = durationField57.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long62 = durationField57.getValueAsLong((long) 10);
        int int64 = durationField57.getValue((long) (byte) 10);
        boolean boolean65 = partial56.equals((java.lang.Object) durationField57);
        org.joda.time.Chronology chronology66 = partial56.getChronology();
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        boolean boolean68 = partial56.isBefore((org.joda.time.ReadablePartial) partial67);
        int int69 = partial42.compareTo((org.joda.time.ReadablePartial) partial56);
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField71 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long74 = durationField71.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long76 = durationField71.getValueAsLong((long) 10);
        int int78 = durationField71.getValue((long) (byte) 10);
        boolean boolean79 = partial70.equals((java.lang.Object) durationField71);
        int int80 = partial56.compareTo((org.joda.time.ReadablePartial) partial70);
        int[] intArray81 = partial70.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray83 = offsetDateTimeField11.addWrapPartial((org.joda.time.ReadablePartial) partial23, (int) 'a', intArray81, 24);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 17 + "'", int13 == 17);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1711908000000L + "'", long17 == 1711908000000L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(iSOChronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10L + "'", long48 == 10L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 10L + "'", long62 == 10L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 10L + "'", long76 == 10L);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.Chronology chronology3 = iSOChronology0.withZone(dateTimeZone1);
        org.joda.time.Partial partial4 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField6 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long9 = durationField6.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long11 = durationField6.getValueAsLong((long) 10);
        int int13 = durationField6.getValue((long) (byte) 10);
        boolean boolean14 = partial5.equals((java.lang.Object) durationField6);
        boolean boolean15 = partial4.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = partial4.getFields();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = partial4.getValue(4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = durationField5.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        boolean boolean15 = durationFieldType10.isSupported(chronology13);
        org.joda.time.field.ScaledDurationField scaledDurationField17 = new org.joda.time.field.ScaledDurationField(durationField5, durationFieldType10, (int) 'a');
        int int19 = scaledDurationField17.getValue((long) (short) -1);
        long long22 = scaledDurationField17.add((long) (-1), 10);
        org.joda.time.DurationFieldType durationFieldType23 = scaledDurationField17.getType();
        long long26 = scaledDurationField17.getMillis(1711909504045L, (long) (-1));
        long long27 = scaledDurationField17.getUnitMillis();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210866846400000L) + "'", long9 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 969L + "'", long22 == 969L);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 166055221892365L + "'", long26 == 166055221892365L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 97L + "'", long27 == 97L);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField4 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long7 = durationField4.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long9 = durationField4.getValueAsLong((long) 10);
        int int11 = durationField4.getValue((long) (byte) 10);
        boolean boolean12 = partial3.equals((java.lang.Object) durationField4);
        org.joda.time.Chronology chronology13 = partial3.getChronology();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial3.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = partial3.getFieldTypes();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField18 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long21 = durationField18.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long23 = durationField18.getValueAsLong((long) 10);
        int int25 = durationField18.getValue((long) (byte) 10);
        boolean boolean26 = partial17.equals((java.lang.Object) durationField18);
        org.joda.time.Chronology chronology27 = partial17.getChronology();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial17.isBefore((org.joda.time.ReadablePartial) partial28);
        int int30 = partial3.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField32 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long35 = durationField32.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long37 = durationField32.getValueAsLong((long) 10);
        int int39 = durationField32.getValue((long) (byte) 10);
        boolean boolean40 = partial31.equals((java.lang.Object) durationField32);
        int int41 = partial17.compareTo((org.joda.time.ReadablePartial) partial31);
        int[] intArray42 = partial31.getValues();
        int[] intArray44 = iSOChronology0.get((org.joda.time.ReadablePartial) partial31, 10L);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.minutes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial47 = partial31.withFieldAddWrapped(durationFieldType45, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minutes' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10L + "'", long23 == 10L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10L + "'", long37 == 10L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
        org.junit.Assert.assertNotNull(durationFieldType45);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.ReadableInterval readableInterval15 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval14);
        long long16 = readableInterval15.getStartMillis();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.ReadableInterval readableInterval18 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval17);
        long long19 = readableInterval18.getEndMillis();
        boolean boolean20 = readableInterval15.overlaps(readableInterval18);
        boolean boolean21 = partial0.equals((java.lang.Object) readableInterval15);
        java.lang.String str23 = partial0.toString("9");
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int25 = partial0.get(dateTimeFieldType24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfWeek' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(readableInterval15);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711909545977L + "'", long16 == 1711909545977L);
        org.junit.Assert.assertNotNull(readableInterval18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1711909545978L + "'", long19 == 1711909545978L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "9" + "'", str23, "9");
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField11 = new org.joda.time.field.OffsetDateTimeField(dateTimeField8, dateTimeFieldType9, (int) (short) 1);
        boolean boolean12 = offsetDateTimeField11.isSupported();
        long long14 = offsetDateTimeField11.remainder((long) 53460006);
        long long16 = offsetDateTimeField11.roundHalfFloor(1711909507403L);
        int int18 = offsetDateTimeField11.get(551169L);
        long long20 = offsetDateTimeField11.roundFloor((long) (byte) -1);
        int int22 = offsetDateTimeField11.get(32L);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 3060006L + "'", long14 == 3060006L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711908000000L + "'", long16 == 1711908000000L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 17 + "'", int18 == 17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-3600000L) + "'", long20 == (-3600000L));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 17 + "'", int22 == 17);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        java.util.Locale locale14 = null;
        java.lang.String str15 = partial11.toString("723", locale14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField17 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long20 = durationField17.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long22 = durationField17.getValueAsLong((long) 10);
        int int24 = durationField17.getValue((long) (byte) 10);
        boolean boolean25 = partial16.equals((java.lang.Object) durationField17);
        org.joda.time.Chronology chronology26 = partial16.getChronology();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial16.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = partial16.getFieldTypes();
        java.lang.Object obj30 = null;
        boolean boolean31 = partial16.equals(obj30);
        boolean boolean32 = partial11.isBefore((org.joda.time.ReadablePartial) partial16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField34 = partial11.getField(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "723" + "'", str15, "723");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.dayOfWeek();
        long long8 = dateTimeField5.add(28800001L, 24);
        org.joda.time.DurationField durationField9 = dateTimeField5.getRangeDurationField();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField11 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long14 = durationField11.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long16 = durationField11.getValueAsLong((long) 10);
        int int18 = durationField11.getValue((long) (byte) 10);
        boolean boolean19 = partial10.equals((java.lang.Object) durationField11);
        org.joda.time.Chronology chronology20 = partial10.getChronology();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial10.isBefore((org.joda.time.ReadablePartial) partial21);
        java.util.Locale locale24 = null;
        java.lang.String str25 = partial21.toString("723", locale24);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField27 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long30 = durationField27.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long32 = durationField27.getValueAsLong((long) 10);
        int int34 = durationField27.getValue((long) (byte) 10);
        boolean boolean35 = partial26.equals((java.lang.Object) durationField27);
        org.joda.time.Chronology chronology36 = partial26.getChronology();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial26.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = partial26.getFieldTypes();
        java.lang.Object obj40 = null;
        boolean boolean41 = partial26.equals(obj40);
        boolean boolean42 = partial21.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = partial26.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval45 = null;
        org.joda.time.ReadableInterval readableInterval46 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval45);
        org.joda.time.Chronology chronology47 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval45);
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField49 = chronology47.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval50 = null;
        org.joda.time.ReadableInterval readableInterval51 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval50);
        org.joda.time.ReadableInterval readableInterval52 = null;
        boolean boolean53 = readableInterval51.contains(readableInterval52);
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Period period55 = readableInterval51.toPeriod(periodType54);
        int[] intArray57 = chronology47.get((org.joda.time.ReadablePeriod) period55, (-210866846400000L));
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray59 = dateTimeField5.set((org.joda.time.ReadablePartial) partial26, (-60000), intArray57, 28531765);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 28531765 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2102400001L + "'", long8 == 2102400001L);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "723" + "'", str25, "723");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertNotNull(readableInterval46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(readableInterval51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(intArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 0, -348655, -3, -12, 0, 0, 0]");
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        java.util.Locale locale14 = null;
        java.lang.String str15 = partial11.toString("723", locale14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField17 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long20 = durationField17.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long22 = durationField17.getValueAsLong((long) 10);
        int int24 = durationField17.getValue((long) (byte) 10);
        boolean boolean25 = partial16.equals((java.lang.Object) durationField17);
        org.joda.time.Chronology chronology26 = partial16.getChronology();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial16.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = partial16.getFieldTypes();
        java.lang.Object obj30 = null;
        boolean boolean31 = partial16.equals(obj30);
        boolean boolean32 = partial11.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = partial16.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType35 = partial16.getFieldType((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "723" + "'", str15, "723");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        java.util.Locale locale14 = null;
        java.lang.String str15 = partial11.toString("723", locale14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField17 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long20 = durationField17.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long22 = durationField17.getValueAsLong((long) 10);
        int int24 = durationField17.getValue((long) (byte) 10);
        boolean boolean25 = partial16.equals((java.lang.Object) durationField17);
        org.joda.time.Chronology chronology26 = partial16.getChronology();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial16.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = partial16.getFieldTypes();
        java.lang.Object obj30 = null;
        boolean boolean31 = partial16.equals(obj30);
        boolean boolean32 = partial11.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.ReadableInterval readableInterval35 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval34);
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval34);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfCentury();
        org.joda.time.DurationField durationField38 = chronology36.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField39 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType33, durationField38);
        long long42 = durationField38.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval44 = null;
        org.joda.time.ReadableInterval readableInterval45 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval44);
        org.joda.time.Chronology chronology46 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval44);
        org.joda.time.DateTimeField dateTimeField47 = chronology46.yearOfCentury();
        boolean boolean48 = durationFieldType43.isSupported(chronology46);
        org.joda.time.field.ScaledDurationField scaledDurationField50 = new org.joda.time.field.ScaledDurationField(durationField38, durationFieldType43, (int) 'a');
        long long51 = scaledDurationField50.getUnitMillis();
        org.joda.time.DurationFieldType durationFieldType52 = scaledDurationField50.getType();
        org.joda.time.field.PreciseDurationField preciseDurationField54 = new org.joda.time.field.PreciseDurationField(durationFieldType52, (long) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial56 = partial16.withFieldAddWrapped(durationFieldType52, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hours' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "723" + "'", str15, "723");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(readableInterval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-210866846400000L) + "'", long42 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(readableInterval45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 97L + "'", long51 == 97L);
        org.junit.Assert.assertNotNull(durationFieldType52);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField14 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType8, durationField13);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField7, dateTimeFieldType8);
        long long18 = zeroIsMaxDateTimeField15.getDifferenceAsLong(349200000L, 4L);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField20 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long23 = durationField20.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long25 = durationField20.getValueAsLong((long) 10);
        int int27 = durationField20.getValue((long) (byte) 10);
        boolean boolean28 = partial19.equals((java.lang.Object) durationField20);
        org.joda.time.Chronology chronology29 = partial19.getChronology();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        boolean boolean31 = partial19.isBefore((org.joda.time.ReadablePartial) partial30);
        java.util.Locale locale33 = null;
        java.lang.String str34 = partial30.toString("723", locale33);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField36 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long39 = durationField36.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long41 = durationField36.getValueAsLong((long) 10);
        int int43 = durationField36.getValue((long) (byte) 10);
        boolean boolean44 = partial35.equals((java.lang.Object) durationField36);
        org.joda.time.Chronology chronology45 = partial35.getChronology();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        boolean boolean47 = partial35.isBefore((org.joda.time.ReadablePartial) partial46);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray48 = partial35.getFieldTypes();
        java.lang.Object obj49 = null;
        boolean boolean50 = partial35.equals(obj49);
        boolean boolean51 = partial30.isBefore((org.joda.time.ReadablePartial) partial35);
        int int52 = partial35.size();
        org.joda.time.chrono.ISOChronology iSOChronology53 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField54 = iSOChronology53.minutes();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology53.millisOfDay();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField57 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long60 = durationField57.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long62 = durationField57.getValueAsLong((long) 10);
        int int64 = durationField57.getValue((long) (byte) 10);
        boolean boolean65 = partial56.equals((java.lang.Object) durationField57);
        org.joda.time.Chronology chronology66 = partial56.getChronology();
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        boolean boolean68 = partial56.isBefore((org.joda.time.ReadablePartial) partial67);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = partial56.getFieldTypes();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField71 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long74 = durationField71.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long76 = durationField71.getValueAsLong((long) 10);
        int int78 = durationField71.getValue((long) (byte) 10);
        boolean boolean79 = partial70.equals((java.lang.Object) durationField71);
        org.joda.time.Chronology chronology80 = partial70.getChronology();
        org.joda.time.Partial partial81 = new org.joda.time.Partial();
        boolean boolean82 = partial70.isBefore((org.joda.time.ReadablePartial) partial81);
        int int83 = partial56.compareTo((org.joda.time.ReadablePartial) partial70);
        org.joda.time.Partial partial84 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField85 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long88 = durationField85.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long90 = durationField85.getValueAsLong((long) 10);
        int int92 = durationField85.getValue((long) (byte) 10);
        boolean boolean93 = partial84.equals((java.lang.Object) durationField85);
        int int94 = partial70.compareTo((org.joda.time.ReadablePartial) partial84);
        int[] intArray95 = partial84.getValues();
        int[] intArray97 = iSOChronology53.get((org.joda.time.ReadablePartial) partial84, 10L);
        int int98 = zeroIsMaxDateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) partial35, intArray97);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "723" + "'", str34, "723");
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(iSOChronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 10L + "'", long62 == 10L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 10L + "'", long76 == 10L);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 1L + "'", long88 == 1L);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 10L + "'", long90 == 10L);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[]");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 100 + "'", int98 == 100);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField11.getAsShortText(readablePartial23, (int) ' ', locale25);
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = null;
        java.lang.String str30 = dividedDateTimeField11.getAsText(readablePartial27, (int) (byte) 10, locale29);
        long long32 = dividedDateTimeField11.roundHalfFloor((long) 100);
        long long35 = dividedDateTimeField11.add(0L, 28531765);
        long long37 = dividedDateTimeField11.remainder((-53459996L));
        int int38 = dividedDateTimeField11.getMinimumValue();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "10" + "'", str30, "10");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 9003755385792000000L + "'", long35 == 9003755385792000000L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 315479340004L + "'", long37 == 315479340004L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology0.yearOfEra();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DurationField durationField37 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology0.clockhourOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField12 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType8, 4, (int) ' ', (int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField15 = new org.joda.time.field.RemainderDateTimeField(dateTimeField7, dateTimeFieldType13, 28531765);
        org.joda.time.DurationField durationField16 = remainderDateTimeField15.getDurationField();
        org.joda.time.DurationField durationField17 = remainderDateTimeField15.getRangeDurationField();
        long long19 = remainderDateTimeField15.remainder((long) 17);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField21 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long24 = durationField21.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long26 = durationField21.getValueAsLong((long) 10);
        int int28 = durationField21.getValue((long) (byte) 10);
        boolean boolean29 = partial20.equals((java.lang.Object) durationField21);
        org.joda.time.Chronology chronology30 = partial20.getChronology();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial20.isBefore((org.joda.time.ReadablePartial) partial31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = partial20.getFieldTypes();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField35 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long38 = durationField35.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long40 = durationField35.getValueAsLong((long) 10);
        int int42 = durationField35.getValue((long) (byte) 10);
        boolean boolean43 = partial34.equals((java.lang.Object) durationField35);
        org.joda.time.Chronology chronology44 = partial34.getChronology();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial34.isBefore((org.joda.time.ReadablePartial) partial45);
        int int47 = partial20.compareTo((org.joda.time.ReadablePartial) partial34);
        org.joda.time.ReadableInterval readableInterval48 = null;
        org.joda.time.ReadableInterval readableInterval49 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval48);
        org.joda.time.ReadableInterval readableInterval50 = null;
        boolean boolean51 = readableInterval49.contains(readableInterval50);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = readableInterval49.toPeriod(periodType52);
        org.joda.time.DateTime dateTime54 = readableInterval49.getEnd();
        org.joda.time.MutableInterval mutableInterval55 = readableInterval49.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval56 = null;
        org.joda.time.ReadableInterval readableInterval57 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval56);
        org.joda.time.ReadableInterval readableInterval58 = null;
        boolean boolean59 = readableInterval57.contains(readableInterval58);
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Period period61 = readableInterval57.toPeriod(periodType60);
        org.joda.time.DateTime dateTime62 = readableInterval57.getEnd();
        org.joda.time.ReadableInterval readableInterval63 = null;
        org.joda.time.ReadableInterval readableInterval64 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval63);
        org.joda.time.ReadableInterval readableInterval65 = null;
        boolean boolean66 = readableInterval64.contains(readableInterval65);
        boolean boolean67 = readableInterval57.overlaps(readableInterval64);
        boolean boolean68 = readableInterval49.contains(readableInterval64);
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.PeriodType periodType70 = org.joda.time.DateTimeUtils.getPeriodType(periodType69);
        org.joda.time.PeriodType periodType71 = org.joda.time.DateTimeUtils.getPeriodType(periodType70);
        org.joda.time.Period period72 = readableInterval49.toPeriod(periodType71);
        org.joda.time.Partial partial73 = partial20.plus((org.joda.time.ReadablePeriod) period72);
        java.util.Locale locale74 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = remainderDateTimeField15.getAsText((org.joda.time.ReadablePartial) partial73, locale74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 17L + "'", long19 == 17L);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(readableInterval49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(mutableInterval55);
        org.junit.Assert.assertNotNull(readableInterval57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(readableInterval64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(partial73);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        int int27 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int29 = partial0.indexOf(dateTimeFieldType28);
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.Chronology chronology32 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval30);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfCentury();
        org.joda.time.DurationField durationField34 = chronology32.millis();
        org.joda.time.DurationField durationField35 = chronology32.centuries();
        org.joda.time.Chronology chronology36 = chronology32.withUTC();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField38 = chronology32.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField41 = new org.joda.time.field.OffsetDateTimeField(dateTimeField38, dateTimeFieldType39, (int) (short) 1);
        boolean boolean42 = offsetDateTimeField41.isSupported();
        long long44 = offsetDateTimeField41.remainder((long) 53460006);
        long long46 = offsetDateTimeField41.roundHalfFloor(1711909507403L);
        int int48 = offsetDateTimeField41.get(551169L);
        long long50 = offsetDateTimeField41.roundFloor((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField55 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) offsetDateTimeField41, dateTimeFieldType51, (int) '#', (int) (byte) 10, 3);
        // The following exception was thrown during execution in test generation
        try {
            int int56 = partial0.get(dateTimeFieldType51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'era' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 3060006L + "'", long44 == 3060006L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1711908000000L + "'", long46 == 1711908000000L);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-3600000L) + "'", long50 == (-3600000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(17, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Positive hours must not have negative minutes: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DurationField durationField6 = zonedChronology4.centuries();
        org.joda.time.DateTimeField dateTimeField7 = zonedChronology4.dayOfMonth();
        org.joda.time.DurationField durationField8 = zonedChronology4.months();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField11.getAsShortText(readablePartial23, (int) ' ', locale25);
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = null;
        java.lang.String str30 = dividedDateTimeField11.getAsText(readablePartial27, (int) (byte) 10, locale29);
        long long32 = dividedDateTimeField11.roundHalfFloor((long) 100);
        long long35 = dividedDateTimeField11.getDifferenceAsLong((-30610224000000L), (long) 24);
        int int36 = dividedDateTimeField11.getMinimumValue();
        long long39 = dividedDateTimeField11.add(35L, 12);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "10" + "'", str30, "10");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-97L) + "'", long35 == (-97L));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 3786912000035L + "'", long39 == 3786912000035L);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder0 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder3 = dateTimeZoneBuilder0.setFixedSavings("UTC", 100);
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder14 = dateTimeZoneBuilder0.addRecurringSavings("DateTimeField[secondOfDay]", 12, 17, 12, '4', (int) (short) 100, 0, 0, false, 97);
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeZoneBuilder14.writeTo("69", outputStream16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder3);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder14);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str1 = dateTimeFieldType0.toString();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology6 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology2, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = zonedChronology6.getZone();
        boolean boolean8 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) zonedChronology6);
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = zonedChronology6.secondOfMinute();
        org.joda.time.Chronology chronology11 = zonedChronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfMonth" + "'", str1, "dayOfMonth");
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.Chronology chronology3 = iSOChronology0.withZone(dateTimeZone1);
        org.joda.time.Partial partial4 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField6 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long9 = durationField6.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long11 = durationField6.getValueAsLong((long) 10);
        int int13 = durationField6.getValue((long) (byte) 10);
        boolean boolean14 = partial5.equals((java.lang.Object) durationField6);
        boolean boolean15 = partial4.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.hours();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial18 = partial5.withFieldAdded(durationFieldType16, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hours' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(durationFieldType16);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        int int38 = dividedDateTimeField37.getMinimumValue();
        java.lang.String str40 = dividedDateTimeField37.getAsShortText(190993L);
        long long42 = dividedDateTimeField37.roundCeiling(3060006L);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField44 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long47 = durationField44.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long49 = durationField44.getValueAsLong((long) 10);
        int int51 = durationField44.getValue((long) (byte) 10);
        boolean boolean52 = partial43.equals((java.lang.Object) durationField44);
        org.joda.time.Chronology chronology53 = partial43.getChronology();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial43.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = partial43.getFieldTypes();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField58 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long61 = durationField58.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long63 = durationField58.getValueAsLong((long) 10);
        int int65 = durationField58.getValue((long) (byte) 10);
        boolean boolean66 = partial57.equals((java.lang.Object) durationField58);
        org.joda.time.Chronology chronology67 = partial57.getChronology();
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        boolean boolean69 = partial57.isBefore((org.joda.time.ReadablePartial) partial68);
        int int70 = partial43.compareTo((org.joda.time.ReadablePartial) partial57);
        org.joda.time.ReadableInterval readableInterval71 = null;
        org.joda.time.ReadableInterval readableInterval72 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval71);
        org.joda.time.ReadableInterval readableInterval73 = null;
        boolean boolean74 = readableInterval72.contains(readableInterval73);
        org.joda.time.PeriodType periodType75 = null;
        org.joda.time.Period period76 = readableInterval72.toPeriod(periodType75);
        org.joda.time.DateTime dateTime77 = readableInterval72.getEnd();
        org.joda.time.MutableInterval mutableInterval78 = readableInterval72.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval79 = null;
        org.joda.time.ReadableInterval readableInterval80 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval79);
        org.joda.time.ReadableInterval readableInterval81 = null;
        boolean boolean82 = readableInterval80.contains(readableInterval81);
        org.joda.time.PeriodType periodType83 = null;
        org.joda.time.Period period84 = readableInterval80.toPeriod(periodType83);
        org.joda.time.DateTime dateTime85 = readableInterval80.getEnd();
        org.joda.time.ReadableInterval readableInterval86 = null;
        org.joda.time.ReadableInterval readableInterval87 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval86);
        org.joda.time.ReadableInterval readableInterval88 = null;
        boolean boolean89 = readableInterval87.contains(readableInterval88);
        boolean boolean90 = readableInterval80.overlaps(readableInterval87);
        boolean boolean91 = readableInterval72.contains(readableInterval87);
        org.joda.time.PeriodType periodType92 = null;
        org.joda.time.PeriodType periodType93 = org.joda.time.DateTimeUtils.getPeriodType(periodType92);
        org.joda.time.PeriodType periodType94 = org.joda.time.DateTimeUtils.getPeriodType(periodType93);
        org.joda.time.Period period95 = readableInterval72.toPeriod(periodType94);
        org.joda.time.Partial partial96 = partial43.plus((org.joda.time.ReadablePeriod) period95);
        java.util.Locale locale97 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str98 = dividedDateTimeField37.getAsShortText((org.joda.time.ReadablePartial) partial96, locale97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "197" + "'", str40, "197");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 315532800000L + "'", long42 == 315532800000L);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10L + "'", long49 == 10L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 10L + "'", long63 == 10L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(readableInterval72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(mutableInterval78);
        org.junit.Assert.assertNotNull(readableInterval80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(readableInterval87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(periodType93);
        org.junit.Assert.assertNotNull(periodType94);
        org.junit.Assert.assertNotNull(period95);
        org.junit.Assert.assertNotNull(partial96);
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        int int27 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        int int38 = partial14.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.ReadableInterval readableInterval39 = null;
        org.joda.time.ReadableInterval readableInterval40 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval39);
        long long41 = readableInterval40.getStartMillis();
        org.joda.time.ReadableInterval readableInterval42 = null;
        org.joda.time.ReadableInterval readableInterval43 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval42);
        org.joda.time.ReadableInterval readableInterval44 = null;
        boolean boolean45 = readableInterval43.contains(readableInterval44);
        org.joda.time.Duration duration46 = readableInterval43.toDuration();
        org.joda.time.DateTime dateTime47 = readableInterval43.getEnd();
        boolean boolean48 = readableInterval40.contains((org.joda.time.ReadableInstant) dateTime47);
        long long49 = org.joda.time.DateTimeUtils.getInstantMillis((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Chronology chronology50 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime51 = partial14.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.ReadableInterval readableInterval52 = null;
        org.joda.time.ReadableInterval readableInterval53 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval52);
        long long54 = readableInterval53.getStartMillis();
        org.joda.time.ReadableInterval readableInterval55 = null;
        org.joda.time.ReadableInterval readableInterval56 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval55);
        org.joda.time.ReadableInterval readableInterval57 = null;
        boolean boolean58 = readableInterval56.contains(readableInterval57);
        org.joda.time.Duration duration59 = readableInterval56.toDuration();
        org.joda.time.DateTime dateTime60 = readableInterval56.getEnd();
        boolean boolean61 = readableInterval53.contains((org.joda.time.ReadableInstant) dateTime60);
        long long62 = org.joda.time.DateTimeUtils.getInstantMillis((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Chronology chronology63 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime60);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(readableInterval40);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1711909554483L + "'", long41 == 1711909554483L);
        org.junit.Assert.assertNotNull(readableInterval43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1711909554484L + "'", long49 == 1711909554484L);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(readableInterval53);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1711909554485L + "'", long54 == 1711909554485L);
        org.junit.Assert.assertNotNull(readableInterval56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1711909554485L + "'", long62 == 1711909554485L);
        org.junit.Assert.assertNotNull(chronology63);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField3 = new org.joda.time.field.PreciseDurationField(durationFieldType1, 28531825L);
        boolean boolean4 = preciseDurationField3.isPrecise();
        long long7 = preciseDurationField3.getValueAsLong((-3155695200000L), 1396236845826L);
        long long10 = preciseDurationField3.getMillis(969L, (long) 297);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-110602L) + "'", long7 == (-110602L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 27647338425L + "'", long10 == 27647338425L);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        int int27 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.ReadableInterval readableInterval29 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval28);
        org.joda.time.ReadableInterval readableInterval30 = null;
        boolean boolean31 = readableInterval29.contains(readableInterval30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = readableInterval29.toPeriod(periodType32);
        org.joda.time.DateTime dateTime34 = readableInterval29.getEnd();
        org.joda.time.MutableInterval mutableInterval35 = readableInterval29.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.ReadableInterval readableInterval37 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval36);
        org.joda.time.ReadableInterval readableInterval38 = null;
        boolean boolean39 = readableInterval37.contains(readableInterval38);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = readableInterval37.toPeriod(periodType40);
        org.joda.time.DateTime dateTime42 = readableInterval37.getEnd();
        org.joda.time.ReadableInterval readableInterval43 = null;
        org.joda.time.ReadableInterval readableInterval44 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval43);
        org.joda.time.ReadableInterval readableInterval45 = null;
        boolean boolean46 = readableInterval44.contains(readableInterval45);
        boolean boolean47 = readableInterval37.overlaps(readableInterval44);
        boolean boolean48 = readableInterval29.contains(readableInterval44);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.PeriodType periodType50 = org.joda.time.DateTimeUtils.getPeriodType(periodType49);
        org.joda.time.PeriodType periodType51 = org.joda.time.DateTimeUtils.getPeriodType(periodType50);
        org.joda.time.Period period52 = readableInterval29.toPeriod(periodType51);
        org.joda.time.Partial partial53 = partial0.plus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval55 = null;
        org.joda.time.ReadableInterval readableInterval56 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval55);
        org.joda.time.Chronology chronology57 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval55);
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfCentury();
        org.joda.time.DurationField durationField59 = chronology57.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField60 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType54, durationField59);
        long long63 = unsupportedDateTimeField60.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = unsupportedDateTimeField60.getType();
        // The following exception was thrown during execution in test generation
        try {
            int int65 = partial0.get(dateTimeFieldType64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(readableInterval29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertNotNull(readableInterval37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(readableInterval44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(readableInterval56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 4L + "'", long63 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        boolean boolean7 = unsupportedDateTimeField6.isLenient();
        long long10 = unsupportedDateTimeField6.add(1396290305822L, (-53459996L));
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField13 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long16 = durationField13.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long18 = durationField13.getValueAsLong((long) 10);
        int int20 = durationField13.getValue((long) (byte) 10);
        boolean boolean21 = partial12.equals((java.lang.Object) durationField13);
        org.joda.time.Chronology chronology22 = partial12.getChronology();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        boolean boolean24 = partial12.isBefore((org.joda.time.ReadablePartial) partial23);
        java.lang.String str25 = partial12.toStringList();
        java.util.Locale locale27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = unsupportedDateTimeField6.getAsText((org.joda.time.ReadablePartial) partial12, (int) (byte) -1, locale27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1396236845826L + "'", long10 == 1396236845826L);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        long long16 = dividedDateTimeField11.roundFloor(291L);
        boolean boolean17 = dividedDateTimeField11.isSupported();
        org.joda.time.DurationField durationField18 = dividedDateTimeField11.getDurationField();
        java.lang.String str20 = dividedDateTimeField11.getAsShortText(166055221892365L);
        long long23 = dividedDateTimeField11.set(0L, 3);
        int int24 = dividedDateTimeField11.getMinimumValue();
        int int27 = dividedDateTimeField11.getDifference((long) (short) 0, 3600000L);
        org.joda.time.DurationField durationField28 = dividedDateTimeField11.iDurationField;
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField30 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long33 = durationField30.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long35 = durationField30.getValueAsLong((long) 10);
        int int37 = durationField30.getValue((long) (byte) 10);
        boolean boolean38 = partial29.equals((java.lang.Object) durationField30);
        org.joda.time.Chronology chronology39 = partial29.getChronology();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        boolean boolean41 = partial29.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = partial29.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval43 = null;
        org.joda.time.ReadableInterval readableInterval44 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval43);
        long long45 = readableInterval44.getStartMillis();
        org.joda.time.ReadableInterval readableInterval46 = null;
        org.joda.time.ReadableInterval readableInterval47 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval46);
        long long48 = readableInterval47.getEndMillis();
        boolean boolean49 = readableInterval44.overlaps(readableInterval47);
        boolean boolean50 = partial29.equals((java.lang.Object) readableInterval44);
        java.util.Locale locale52 = null;
        java.lang.String str53 = dividedDateTimeField11.getAsText((org.joda.time.ReadablePartial) partial29, (int) (byte) 100, locale52);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "723" + "'", str20, "723");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-61220448000000L) + "'", long23 == (-61220448000000L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(readableInterval44);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1711909555198L + "'", long45 == 1711909555198L);
        org.junit.Assert.assertNotNull(readableInterval47);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1711909555201L + "'", long48 == 1711909555201L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "100" + "'", str53, "100");
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getDurationField();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = unsupportedDateTimeField6.getMinimumValue(0L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DurationField durationField6 = zonedChronology4.centuries();
        org.joda.time.DateTimeField dateTimeField7 = zonedChronology4.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = zonedChronology4.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology4.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.OffsetDateTimeField offsetDateTimeField14 = new org.joda.time.field.OffsetDateTimeField(dateTimeField9, dateTimeFieldType10, (int) '#', 12, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        boolean boolean7 = unsupportedDateTimeField6.isLenient();
        java.lang.String str8 = unsupportedDateTimeField6.getName();
        // The following exception was thrown during execution in test generation
        try {
            long long10 = unsupportedDateTimeField6.roundHalfEven((-31507200000L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "dayOfYear" + "'", str8, "dayOfYear");
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = durationField5.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        boolean boolean15 = durationFieldType10.isSupported(chronology13);
        org.joda.time.field.ScaledDurationField scaledDurationField17 = new org.joda.time.field.ScaledDurationField(durationField5, durationFieldType10, (int) 'a');
        int int19 = scaledDurationField17.getValue((long) (short) -1);
        java.lang.String str20 = scaledDurationField17.getName();
        boolean boolean21 = scaledDurationField17.isPrecise();
        long long23 = scaledDurationField17.getValueAsLong(60000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210866846400000L) + "'", long9 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hours" + "'", str20, "hours");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 618L + "'", long23 == 618L);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DurationField durationField6 = gregorianChronology5.days();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology5.hourOfHalfday();
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial8 = new org.joda.time.Partial(dateTimeFieldType0, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.dayOfMonth();
        long long9 = dateTimeField7.roundFloor((long) 53460006);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        int int27 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        int int38 = partial14.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.ReadableInterval readableInterval39 = null;
        org.joda.time.ReadableInterval readableInterval40 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval39);
        org.joda.time.ReadableInterval readableInterval41 = null;
        boolean boolean42 = readableInterval40.contains(readableInterval41);
        org.joda.time.Duration duration43 = readableInterval40.toDuration();
        org.joda.time.DateTime dateTime44 = readableInterval40.getEnd();
        org.joda.time.DateTime dateTime45 = readableInterval40.getStart();
        org.joda.time.DateTime dateTime46 = partial28.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int48 = partial28.get(dateTimeFieldType47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(readableInterval40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone1 = iSOChronology0.getZone();
        org.joda.time.DateTimeZone dateTimeZone2 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = iSOChronology0.getDateTimeMillis(0, (int) (byte) 10, (int) (byte) 10, (int) (byte) 0, 0, (-196), (int) '#');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -196 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeField3);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getDurationField();
        java.lang.String str12 = unsupportedDateTimeField6.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = unsupportedDateTimeField6.getType();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial14.getFieldTypes();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        org.joda.time.Chronology chronology38 = partial28.getChronology();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial28.isBefore((org.joda.time.ReadablePartial) partial39);
        int int41 = partial14.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField43 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long46 = durationField43.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long48 = durationField43.getValueAsLong((long) 10);
        int int50 = durationField43.getValue((long) (byte) 10);
        boolean boolean51 = partial42.equals((java.lang.Object) durationField43);
        int int52 = partial28.compareTo((org.joda.time.ReadablePartial) partial42);
        java.util.Locale locale53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = unsupportedDateTimeField6.getAsText((org.joda.time.ReadablePartial) partial28, locale53);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UnsupportedDateTimeField" + "'", str12, "UnsupportedDateTimeField");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10L + "'", long48 == 10L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField11 = new org.joda.time.field.OffsetDateTimeField(dateTimeField8, dateTimeFieldType9, (int) (short) 1);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField13 = new org.joda.time.field.OffsetDateTimeField(dateTimeField8, (-1));
        org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.Chronology chronology17 = iSOChronology14.withZone(dateTimeZone15);
        org.joda.time.Partial partial18 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology14);
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField20 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long23 = durationField20.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long25 = durationField20.getValueAsLong((long) 10);
        int int27 = durationField20.getValue((long) (byte) 10);
        boolean boolean28 = partial19.equals((java.lang.Object) durationField20);
        boolean boolean29 = partial18.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str32 = dateTimeZone31.toString();
        org.joda.time.Chronology chronology33 = iSOChronology30.withZone(dateTimeZone31);
        org.joda.time.Partial partial34 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology30);
        boolean boolean35 = partial18.isBefore((org.joda.time.ReadablePartial) partial34);
        int int36 = offsetDateTimeField13.getMinimumValue((org.joda.time.ReadablePartial) partial34);
        int int37 = offsetDateTimeField13.getMaximumValue();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(iSOChronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10L + "'", long25 == 10L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 22 + "'", int37 == 22);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        long long2 = readableInterval1.getStartMillis();
        org.joda.time.ReadableInterval readableInterval3 = null;
        boolean boolean4 = readableInterval1.isAfter(readableInterval3);
        org.joda.time.Interval interval5 = readableInterval1.toInterval();
        org.joda.time.DateTime dateTime6 = interval5.getEnd();
        org.junit.Assert.assertNotNull(readableInterval1);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1711909558172L + "'", long2 == 1711909558172L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField5 = zonedChronology4.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = zonedChronology4.getDateTimeMillis((int) '4', (int) (byte) 100, (int) (byte) 0, (-60000), 0, 1969, 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.year();
        org.joda.time.DurationField durationField5 = iSOChronology0.months();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str7 = dateTimeZone6.toString();
        java.lang.String str9 = dateTimeZone6.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeUtils.getZone(dateTimeZone6);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        java.lang.Object obj12 = null;
        boolean boolean13 = cachedDateTimeZone11.equals(obj12);
        long long15 = cachedDateTimeZone11.nextTransition(2580171L);
        boolean boolean16 = cachedDateTimeZone11.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology17 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, (org.joda.time.DateTimeZone) cachedDateTimeZone11);
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology0.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(cachedDateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2580171L + "'", long15 == 2580171L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(zonedChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, (java.lang.Number) 60035L, "");
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType0.getDurationType();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField5 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType4);
        // The following exception was thrown during execution in test generation
        try {
            long long7 = unsupportedDurationField5.getValueAsLong(9223372036854775807L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: hours field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(unsupportedDurationField5);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getDurationField();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DurationField durationField17 = chronology14.centuries();
        org.joda.time.Chronology chronology18 = chronology14.withUTC();
        org.joda.time.DurationField durationField19 = chronology18.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField23 = new org.joda.time.field.DividedDateTimeField(dateTimeField20, dateTimeFieldType21, 10);
        long long26 = dividedDateTimeField23.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.ReadableInterval readableInterval29 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval28);
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval28);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfCentury();
        org.joda.time.DurationField durationField32 = chronology30.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField33 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType27, durationField32);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField34 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField23, dateTimeFieldType27);
        long long36 = remainderDateTimeField34.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval38);
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfCentury();
        org.joda.time.DurationField durationField42 = chronology40.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField43 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType37, durationField42);
        long long46 = unsupportedDateTimeField43.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = unsupportedDateTimeField43.getType();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField49 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField34, dateTimeFieldType47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology52 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField53 = iSOChronology52.minutes();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology52.millisOfDay();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology52.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology52.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField57 = iSOChronology52.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField58 = iSOChronology52.halfdayOfDay();
        org.joda.time.Partial partial59 = new org.joda.time.Partial(dateTimeFieldType50, 10, (org.joda.time.Chronology) iSOChronology52);
        int int60 = dividedDateTimeField49.getMaximumValue((org.joda.time.ReadablePartial) partial59);
        java.util.Locale locale61 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = unsupportedDateTimeField6.getAsShortText((org.joda.time.ReadablePartial) partial59, locale61);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-30610224000000L) + "'", long26 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(readableInterval29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(readableInterval39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 4L + "'", long46 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(iSOChronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 29227899 + "'", int60 == 29227899);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        boolean boolean3 = readableInterval1.contains(readableInterval2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = readableInterval1.toPeriod(periodType4);
        org.joda.time.DateTime dateTime6 = readableInterval1.getEnd();
        org.joda.time.MutableInterval mutableInterval7 = readableInterval1.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.ReadableInterval readableInterval9 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval8);
        org.joda.time.ReadableInterval readableInterval10 = null;
        boolean boolean11 = readableInterval9.contains(readableInterval10);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = readableInterval9.toPeriod(periodType12);
        org.joda.time.DateTime dateTime14 = readableInterval9.getEnd();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.ReadableInterval readableInterval17 = null;
        boolean boolean18 = readableInterval16.contains(readableInterval17);
        boolean boolean19 = readableInterval9.overlaps(readableInterval16);
        boolean boolean20 = readableInterval1.contains(readableInterval16);
        long long21 = readableInterval1.getEndMillis();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableInterval7);
        org.junit.Assert.assertNotNull(readableInterval9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1711909560299L + "'", long21 == 1711909560299L);
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DurationField durationField6 = zonedChronology4.centuries();
        org.joda.time.DateTimeField dateTimeField7 = zonedChronology4.dayOfMonth();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str12 = dateTimeZone11.toString();
        java.lang.String str14 = dateTimeZone11.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeUtils.getZone(dateTimeZone11);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone16 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = iSOChronology8.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone16);
        int int19 = cachedDateTimeZone16.getOffset((long) ' ');
        org.joda.time.Chronology chronology20 = zonedChronology4.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone16);
        // The following exception was thrown during execution in test generation
        try {
            long long26 = zonedChronology4.getDateTimeMillis(1711856045826L, 32, (-196), 0, 4);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(cachedDateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology20);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField11 = new org.joda.time.field.OffsetDateTimeField(dateTimeField8, dateTimeFieldType9, (int) (short) 1);
        int int13 = offsetDateTimeField11.get(60000L);
        long long15 = offsetDateTimeField11.roundCeiling(0L);
        long long17 = offsetDateTimeField11.roundHalfFloor(1711909511784L);
        org.joda.time.DurationField durationField18 = offsetDateTimeField11.getRangeDurationField();
        int int19 = offsetDateTimeField11.getMaximumValue();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1711908000000L + "'", long17 == 1711908000000L);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 24 + "'", int19 == 24);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.DurationField durationField23 = dividedDateTimeField11.getDurationField();
        boolean boolean24 = dividedDateTimeField11.isSupported();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = durationField5.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        boolean boolean15 = durationFieldType10.isSupported(chronology13);
        org.joda.time.field.ScaledDurationField scaledDurationField17 = new org.joda.time.field.ScaledDurationField(durationField5, durationFieldType10, (int) 'a');
        org.joda.time.DurationField durationField18 = scaledDurationField17.getWrappedField();
        int int21 = scaledDurationField17.getDifference((long) (byte) -1, (long) (short) 0);
        org.joda.time.DurationFieldType durationFieldType22 = scaledDurationField17.getType();
        int int25 = scaledDurationField17.getDifference(0L, (long) (short) -1);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.years();
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.ReadableInterval readableInterval28 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval27);
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval27);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.minuteOfDay();
        org.joda.time.DurationField durationField32 = durationFieldType26.getField(chronology29);
        org.joda.time.field.DecoratedDurationField decoratedDurationField33 = new org.joda.time.field.DecoratedDurationField((org.joda.time.DurationField) scaledDurationField17, durationFieldType26);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField35 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long38 = durationField35.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long40 = durationField35.getValueAsLong((long) 10);
        int int42 = durationField35.getValue((long) (byte) 10);
        boolean boolean43 = partial34.equals((java.lang.Object) durationField35);
        org.joda.time.Chronology chronology44 = partial34.getChronology();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial34.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = partial34.getFieldTypes();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField49 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long52 = durationField49.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long54 = durationField49.getValueAsLong((long) 10);
        int int56 = durationField49.getValue((long) (byte) 10);
        boolean boolean57 = partial48.equals((java.lang.Object) durationField49);
        org.joda.time.Chronology chronology58 = partial48.getChronology();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        boolean boolean60 = partial48.isBefore((org.joda.time.ReadablePartial) partial59);
        int int61 = partial34.compareTo((org.joda.time.ReadablePartial) partial48);
        org.joda.time.ReadableInterval readableInterval62 = null;
        org.joda.time.ReadableInterval readableInterval63 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval62);
        org.joda.time.ReadableInterval readableInterval64 = null;
        boolean boolean65 = readableInterval63.contains(readableInterval64);
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.Period period67 = readableInterval63.toPeriod(periodType66);
        org.joda.time.DateTime dateTime68 = readableInterval63.getEnd();
        org.joda.time.MutableInterval mutableInterval69 = readableInterval63.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval70 = null;
        org.joda.time.ReadableInterval readableInterval71 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval70);
        org.joda.time.ReadableInterval readableInterval72 = null;
        boolean boolean73 = readableInterval71.contains(readableInterval72);
        org.joda.time.PeriodType periodType74 = null;
        org.joda.time.Period period75 = readableInterval71.toPeriod(periodType74);
        org.joda.time.DateTime dateTime76 = readableInterval71.getEnd();
        org.joda.time.ReadableInterval readableInterval77 = null;
        org.joda.time.ReadableInterval readableInterval78 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval77);
        org.joda.time.ReadableInterval readableInterval79 = null;
        boolean boolean80 = readableInterval78.contains(readableInterval79);
        boolean boolean81 = readableInterval71.overlaps(readableInterval78);
        boolean boolean82 = readableInterval63.contains(readableInterval78);
        org.joda.time.PeriodType periodType83 = null;
        org.joda.time.PeriodType periodType84 = org.joda.time.DateTimeUtils.getPeriodType(periodType83);
        org.joda.time.PeriodType periodType85 = org.joda.time.DateTimeUtils.getPeriodType(periodType84);
        org.joda.time.Period period86 = readableInterval63.toPeriod(periodType85);
        org.joda.time.Partial partial87 = partial34.plus((org.joda.time.ReadablePeriod) period86);
        boolean boolean88 = scaledDurationField17.equals((java.lang.Object) partial34);
        // The following exception was thrown during execution in test generation
        try {
            int int90 = scaledDurationField17.getValue(1711909549526L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1711909549526");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210866846400000L) + "'", long9 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(readableInterval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10L + "'", long54 == 10L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(readableInterval63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(mutableInterval69);
        org.junit.Assert.assertNotNull(readableInterval71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(readableInterval78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(partial87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        java.lang.String str25 = remainderDateTimeField22.getName();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "dayOfYear" + "'", str25, "dayOfYear");
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.Chronology chronology3 = iSOChronology0.withZone(dateTimeZone1);
        org.joda.time.Partial partial4 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField6 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long9 = durationField6.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long11 = durationField6.getValueAsLong((long) 10);
        int int13 = durationField6.getValue((long) (byte) 10);
        boolean boolean14 = partial5.equals((java.lang.Object) durationField6);
        boolean boolean15 = partial4.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = partial4.toDateTime(readableInstant16);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        int int2 = dateTimeZone0.getStandardOffset((long) 1);
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.clockhourOfDay();
        boolean boolean10 = dateTimeZone0.equals((java.lang.Object) dateTimeField9);
        org.joda.time.chrono.GregorianChronology gregorianChronology11 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(gregorianChronology11);
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getDurationField();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField13 = iSOChronology12.minutes();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str15 = dateTimeZone14.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology16 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology12, dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = zonedChronology16.getZone();
        org.joda.time.Partial partial18 = new org.joda.time.Partial((org.joda.time.Chronology) zonedChronology16);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField21 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long24 = durationField21.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long26 = durationField21.getValueAsLong((long) 10);
        int int28 = durationField21.getValue((long) (byte) 10);
        boolean boolean29 = partial20.equals((java.lang.Object) durationField21);
        org.joda.time.Chronology chronology30 = partial20.getChronology();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial20.isBefore((org.joda.time.ReadablePartial) partial31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = partial20.getFieldTypes();
        int[] intArray34 = partial20.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray36 = unsupportedDateTimeField6.addWrapField((org.joda.time.ReadablePartial) partial18, 29227999, intArray34, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[]");
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.Chronology chronology3 = iSOChronology0.withZone(dateTimeZone1);
        org.joda.time.Partial partial4 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField6 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long9 = durationField6.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long11 = durationField6.getValueAsLong((long) 10);
        int int13 = durationField6.getValue((long) (byte) 10);
        boolean boolean14 = partial5.equals((java.lang.Object) durationField6);
        boolean boolean15 = partial4.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str18 = dateTimeZone17.toString();
        org.joda.time.Chronology chronology19 = iSOChronology16.withZone(dateTimeZone17);
        org.joda.time.Partial partial20 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology16);
        boolean boolean21 = partial4.isBefore((org.joda.time.ReadablePartial) partial20);
        int int22 = partial4.size();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder0 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder3 = dateTimeZoneBuilder0.setFixedSavings("UTC", 100);
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeZoneBuilder3.toDateTimeZone("ISOChronology[America/Los_Angeles]", false);
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder8 = dateTimeZoneBuilder3.setStandardOffset((int) ' ');
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder19 = dateTimeZoneBuilder3.addRecurringSavings("UTC", 12, (int) '#', (int) (byte) 1, 'a', 0, 1439, 7330, true, (int) (byte) 1);
        java.io.OutputStream outputStream21 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeZoneBuilder19.writeTo("7", outputStream21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder8);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder19);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology3.getZone();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval7);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.joda.time.DurationField durationField12 = durationFieldType6.getField(chronology9);
        org.joda.time.field.DecoratedDurationField decoratedDurationField13 = new org.joda.time.field.DecoratedDurationField(durationField5, durationFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        org.joda.time.field.DecoratedDurationField decoratedDurationField16 = new org.joda.time.field.DecoratedDurationField((org.joda.time.DurationField) decoratedDurationField13, durationFieldType15);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        java.lang.String str13 = partial0.toStringList();
        java.lang.Object obj14 = null;
        boolean boolean15 = partial0.equals(obj14);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = durationField5.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        boolean boolean15 = durationFieldType10.isSupported(chronology13);
        org.joda.time.field.ScaledDurationField scaledDurationField17 = new org.joda.time.field.ScaledDurationField(durationField5, durationFieldType10, (int) 'a');
        org.joda.time.DurationField durationField18 = scaledDurationField17.getWrappedField();
        int int21 = scaledDurationField17.getDifference((long) (byte) -1, (long) (short) 0);
        org.joda.time.DurationFieldType durationFieldType22 = scaledDurationField17.getType();
        int int25 = scaledDurationField17.getDifference(0L, (long) (short) -1);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.years();
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.ReadableInterval readableInterval28 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval27);
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval27);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.minuteOfDay();
        org.joda.time.DurationField durationField32 = durationFieldType26.getField(chronology29);
        org.joda.time.field.DecoratedDurationField decoratedDurationField33 = new org.joda.time.field.DecoratedDurationField((org.joda.time.DurationField) scaledDurationField17, durationFieldType26);
        long long36 = scaledDurationField17.getDifferenceAsLong(166055223611306L, 2440588L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210866846400000L) + "'", long9 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(readableInterval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1711909496605L + "'", long36 == 1711909496605L);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.yearOfCentury();
        org.joda.time.DurationField durationField6 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DurationField durationField8 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.clockhourOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        java.lang.String str10 = durationField1.toString();
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DurationField[millis]" + "'", str10, "DurationField[millis]");
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = durationField5.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        boolean boolean15 = durationFieldType10.isSupported(chronology13);
        org.joda.time.field.ScaledDurationField scaledDurationField17 = new org.joda.time.field.ScaledDurationField(durationField5, durationFieldType10, (int) 'a');
        org.joda.time.DurationField durationField18 = scaledDurationField17.getWrappedField();
        int int21 = scaledDurationField17.getDifference((long) (byte) -1, (long) (short) 0);
        org.joda.time.DurationFieldType durationFieldType22 = scaledDurationField17.getType();
        long long25 = scaledDurationField17.subtract(1711909507175L, 53460006);
        long long27 = scaledDurationField17.getMillis(4);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210866846400000L) + "'", long9 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1706723886593L + "'", long25 == 1706723886593L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 388L + "'", long27 == 388L);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str1 = dateTimeFieldType0.toString();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology6 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology2, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = zonedChronology6.getZone();
        boolean boolean8 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) zonedChronology6);
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology6.hourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = zonedChronology6.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfMonth" + "'", str1, "dayOfMonth");
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        java.util.Locale locale14 = null;
        java.lang.String str15 = partial11.toString("723", locale14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField17 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long20 = durationField17.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long22 = durationField17.getValueAsLong((long) 10);
        int int24 = durationField17.getValue((long) (byte) 10);
        boolean boolean25 = partial16.equals((java.lang.Object) durationField17);
        org.joda.time.Chronology chronology26 = partial16.getChronology();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial16.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = partial16.getFieldTypes();
        java.lang.Object obj30 = null;
        boolean boolean31 = partial16.equals(obj30);
        boolean boolean32 = partial11.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = partial16.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.ReadableInterval readableInterval35 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval34);
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval34);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval39 = null;
        org.joda.time.ReadableInterval readableInterval40 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval39);
        org.joda.time.ReadableInterval readableInterval41 = null;
        boolean boolean42 = readableInterval40.contains(readableInterval41);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = readableInterval40.toPeriod(periodType43);
        int[] intArray46 = chronology36.get((org.joda.time.ReadablePeriod) period44, (-210866846400000L));
        org.joda.time.Partial partial47 = partial16.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.chrono.ISOChronology iSOChronology48 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField49 = iSOChronology48.minutes();
        org.joda.time.DateTimeZone dateTimeZone50 = iSOChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = iSOChronology48.yearOfCentury();
        boolean boolean52 = partial16.equals((java.lang.Object) iSOChronology48);
        org.joda.time.ReadablePartial readablePartial53 = null;
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField55 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long58 = durationField55.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long60 = durationField55.getValueAsLong((long) 10);
        int int62 = durationField55.getValue((long) (byte) 10);
        boolean boolean63 = partial54.equals((java.lang.Object) durationField55);
        org.joda.time.Chronology chronology64 = partial54.getChronology();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        boolean boolean66 = partial54.isBefore((org.joda.time.ReadablePartial) partial65);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray67 = partial54.getFieldTypes();
        org.joda.time.Partial partial68 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField69 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long72 = durationField69.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long74 = durationField69.getValueAsLong((long) 10);
        int int76 = durationField69.getValue((long) (byte) 10);
        boolean boolean77 = partial68.equals((java.lang.Object) durationField69);
        org.joda.time.Chronology chronology78 = partial68.getChronology();
        org.joda.time.Partial partial79 = new org.joda.time.Partial();
        boolean boolean80 = partial68.isBefore((org.joda.time.ReadablePartial) partial79);
        int int81 = partial54.compareTo((org.joda.time.ReadablePartial) partial68);
        org.joda.time.Partial partial82 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField83 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long86 = durationField83.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long88 = durationField83.getValueAsLong((long) 10);
        int int90 = durationField83.getValue((long) (byte) 10);
        boolean boolean91 = partial82.equals((java.lang.Object) durationField83);
        int int92 = partial68.compareTo((org.joda.time.ReadablePartial) partial82);
        int[] intArray93 = partial82.getValues();
        // The following exception was thrown during execution in test generation
        try {
            iSOChronology48.validate(readablePartial53, intArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "723" + "'", str15, "723");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(readableInterval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(readableInterval40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(intArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(iSOChronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10L + "'", long60 == 10L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray67);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 10L + "'", long74 == 10L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1L + "'", long86 == 1L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 10L + "'", long88 == 10L);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 10 + "'", int90 == 10);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[]");
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str4 = dateTimeZone3.toString();
        java.lang.String str6 = dateTimeZone3.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeUtils.getZone(dateTimeZone3);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone8 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone8);
        org.joda.time.DurationField durationField10 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.yearOfCentury();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        java.util.Locale locale28 = null;
        java.lang.String str29 = partial25.toString("723", locale28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField31 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long34 = durationField31.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long36 = durationField31.getValueAsLong((long) 10);
        int int38 = durationField31.getValue((long) (byte) 10);
        boolean boolean39 = partial30.equals((java.lang.Object) durationField31);
        org.joda.time.Chronology chronology40 = partial30.getChronology();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial30.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = partial30.getFieldTypes();
        java.lang.Object obj44 = null;
        boolean boolean45 = partial30.equals(obj44);
        boolean boolean46 = partial25.isBefore((org.joda.time.ReadablePartial) partial30);
        int int47 = partial30.size();
        java.util.Locale locale49 = null;
        java.lang.String str50 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) partial30, 17, locale49);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(cachedDateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "723" + "'", str29, "723");
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10L + "'", long36 == 10L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "17" + "'", str50, "17");
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        org.joda.time.DurationField durationField0 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long3 = durationField0.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long5 = durationField0.getValueAsLong((long) 10);
        int int7 = durationField0.getValue((long) (byte) 10);
        boolean boolean8 = durationField0.isPrecise();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.ReadableInterval readableInterval11 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval10);
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval10);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.DurationField durationField14 = chronology12.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField15 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType9, durationField14);
        long long18 = durationField14.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval20);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfCentury();
        boolean boolean24 = durationFieldType19.isSupported(chronology22);
        org.joda.time.field.ScaledDurationField scaledDurationField26 = new org.joda.time.field.ScaledDurationField(durationField14, durationFieldType19, (int) 'a');
        long long27 = scaledDurationField26.getUnitMillis();
        org.joda.time.DurationFieldType durationFieldType28 = scaledDurationField26.getType();
        org.joda.time.field.PreciseDurationField preciseDurationField30 = new org.joda.time.field.PreciseDurationField(durationFieldType28, (long) ' ');
        org.joda.time.field.DecoratedDurationField decoratedDurationField31 = new org.joda.time.field.DecoratedDurationField(durationField0, durationFieldType28);
        long long34 = decoratedDurationField31.getMillis((int) '4', 2440588L);
        org.junit.Assert.assertNotNull(durationField0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10L + "'", long5 == 10L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(readableInterval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-210866846400000L) + "'", long18 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 97L + "'", long27 == 97L);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 52L + "'", long34 == 52L);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField6 = iSOChronology0.eras();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        boolean boolean3 = readableInterval1.contains(readableInterval2);
        org.joda.time.Duration duration4 = readableInterval1.toDuration();
        org.joda.time.DateTime dateTime5 = readableInterval1.getEnd();
        org.joda.time.Period period6 = readableInterval1.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant8 = null;
        int int9 = dateTimeZone7.getOffset(readableInstant8);
        java.util.TimeZone timeZone10 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = readableInterval13.contains(readableInterval14);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = readableInterval13.toPeriod(periodType16);
        org.joda.time.DateTime dateTime18 = readableInterval13.getEnd();
        int int19 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime18);
        boolean boolean20 = readableInterval1.isBefore((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        org.joda.time.ReadableInterval readableInterval23 = null;
        boolean boolean24 = readableInterval22.contains(readableInterval23);
        org.joda.time.Duration duration25 = readableInterval22.toDuration();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.ReadableInterval readableInterval28 = null;
        boolean boolean29 = readableInterval27.contains(readableInterval28);
        org.joda.time.Duration duration30 = readableInterval27.toDuration();
        org.joda.time.DateTime dateTime31 = readableInterval27.getEnd();
        boolean boolean32 = readableInterval22.isBefore((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.ReadableInterval readableInterval34 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval33);
        org.joda.time.ReadableInterval readableInterval35 = null;
        boolean boolean36 = readableInterval34.contains(readableInterval35);
        org.joda.time.Duration duration37 = readableInterval34.toDuration();
        org.joda.time.DateTime dateTime38 = readableInterval34.getEnd();
        org.joda.time.Chronology chronology39 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime38);
        boolean boolean40 = readableInterval1.isBefore((org.joda.time.ReadableInstant) dateTime31);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(readableInterval22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(readableInterval34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        int int11 = partial0.indexOf(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str1 = dateTimeFieldType0.toString();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology6 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology2, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = zonedChronology6.getZone();
        boolean boolean8 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) zonedChronology6);
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = zonedChronology6.secondOfMinute();
        long long12 = dateTimeField10.roundHalfFloor(1711909557446L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfMonth" + "'", str1, "dayOfMonth");
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1711909557000L + "'", long12 == 1711909557000L);
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        int int12 = dividedDateTimeField11.iDivisor;
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        int[] intArray14 = partial13.getValues();
        int int15 = partial13.size();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField18 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long21 = durationField18.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long23 = durationField18.getValueAsLong((long) 10);
        int int25 = durationField18.getValue((long) (byte) 10);
        boolean boolean26 = partial17.equals((java.lang.Object) durationField18);
        org.joda.time.Chronology chronology27 = partial17.getChronology();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial17.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial17.getFieldTypes();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField32 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long35 = durationField32.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long37 = durationField32.getValueAsLong((long) 10);
        int int39 = durationField32.getValue((long) (byte) 10);
        boolean boolean40 = partial31.equals((java.lang.Object) durationField32);
        org.joda.time.Chronology chronology41 = partial31.getChronology();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial31.isBefore((org.joda.time.ReadablePartial) partial42);
        int int44 = partial17.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = partial17.getFieldTypes();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField47 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long50 = durationField47.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long52 = durationField47.getValueAsLong((long) 10);
        int int54 = durationField47.getValue((long) (byte) 10);
        boolean boolean55 = partial46.equals((java.lang.Object) durationField47);
        org.joda.time.Chronology chronology56 = partial46.getChronology();
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        boolean boolean58 = partial46.isBefore((org.joda.time.ReadablePartial) partial57);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = partial46.getFieldTypes();
        org.joda.time.Partial partial60 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField61 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long64 = durationField61.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long66 = durationField61.getValueAsLong((long) 10);
        int int68 = durationField61.getValue((long) (byte) 10);
        boolean boolean69 = partial60.equals((java.lang.Object) durationField61);
        org.joda.time.Chronology chronology70 = partial60.getChronology();
        org.joda.time.Partial partial71 = new org.joda.time.Partial();
        boolean boolean72 = partial60.isBefore((org.joda.time.ReadablePartial) partial71);
        int int73 = partial46.compareTo((org.joda.time.ReadablePartial) partial60);
        org.joda.time.Partial partial74 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField75 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long78 = durationField75.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long80 = durationField75.getValueAsLong((long) 10);
        int int82 = durationField75.getValue((long) (byte) 10);
        boolean boolean83 = partial74.equals((java.lang.Object) durationField75);
        int int84 = partial60.compareTo((org.joda.time.ReadablePartial) partial74);
        int[] intArray85 = partial74.getValues();
        org.joda.time.DurationFieldType durationFieldType86 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval87 = null;
        org.joda.time.ReadableInterval readableInterval88 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval87);
        org.joda.time.Chronology chronology89 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval87);
        org.joda.time.DateTimeField dateTimeField90 = chronology89.yearOfCentury();
        boolean boolean91 = durationFieldType86.isSupported(chronology89);
        org.joda.time.DurationField durationField92 = chronology89.halfdays();
        org.joda.time.DateTimeField dateTimeField93 = chronology89.weekyearOfCentury();
        org.joda.time.Partial partial94 = new org.joda.time.Partial(dateTimeFieldTypeArray45, intArray85, chronology89);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray96 = dividedDateTimeField11.addWrapField((org.joda.time.ReadablePartial) partial13, (int) (byte) -1, intArray85, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10L + "'", long23 == 10L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10L + "'", long37 == 10L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10L + "'", long52 == 10L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L + "'", long64 == 1L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10L + "'", long66 == 10L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1L + "'", long78 == 1L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 10L + "'", long80 == 10L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(durationFieldType86);
        org.junit.Assert.assertNotNull(readableInterval88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(durationField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        int int23 = remainderDateTimeField22.iDivisor;
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.ReadableInterval readableInterval26 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval25);
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval25);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DurationField durationField29 = chronology27.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType24, durationField29);
        long long33 = unsupportedDateTimeField30.add((-31L), (long) '#');
        org.joda.time.DurationField durationField34 = unsupportedDateTimeField30.getLeapDurationField();
        org.joda.time.DurationField durationField35 = unsupportedDateTimeField30.getDurationField();
        java.lang.String str36 = unsupportedDateTimeField30.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = unsupportedDateTimeField30.getType();
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType37.getDurationType();
        org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldType37, (int) (byte) 10);
        java.util.Locale locale42 = null;
        java.lang.String str43 = remainderDateTimeField22.getAsShortText((org.joda.time.ReadablePartial) partial40, 9, locale42);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(readableInterval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 4L + "'", long33 == 4L);
        org.junit.Assert.assertNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UnsupportedDateTimeField" + "'", str36, "UnsupportedDateTimeField");
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "9" + "'", str43, "9");
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        int[] intArray1 = partial0.getValues();
        int int2 = partial0.size();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.ReadableInterval readableInterval5 = null;
        boolean boolean6 = readableInterval4.contains(readableInterval5);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = readableInterval4.toPeriod(periodType7);
        org.joda.time.Partial partial10 = partial0.withPeriodAdded((org.joda.time.ReadablePeriod) period8, (int) (short) 100);
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        org.joda.time.DurationField durationField15 = chronology13.millis();
        org.joda.time.DurationField durationField16 = chronology13.centuries();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.ReadableInterval readableInterval18 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval17);
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval17);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DurationField durationField21 = chronology19.millis();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval23);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.ReadableInterval readableInterval29 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval28);
        org.joda.time.ReadableInterval readableInterval30 = null;
        boolean boolean31 = readableInterval29.contains(readableInterval30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = readableInterval29.toPeriod(periodType32);
        int[] intArray35 = chronology25.get((org.joda.time.ReadablePeriod) period33, (-210866846400000L));
        int[] intArray38 = chronology19.get((org.joda.time.ReadablePeriod) period33, 2173795348453L, (long) 1439);
        int[] intArray41 = chronology13.get((org.joda.time.ReadablePeriod) period33, 291L, 2580171L);
        org.joda.time.Partial partial43 = partial10.withPeriodAdded((org.joda.time.ReadablePeriod) period33, 0);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField45 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long48 = durationField45.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long50 = durationField45.getValueAsLong((long) 10);
        int int52 = durationField45.getValue((long) (byte) 10);
        boolean boolean53 = partial44.equals((java.lang.Object) durationField45);
        org.joda.time.Chronology chronology54 = partial44.getChronology();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial44.isBefore((org.joda.time.ReadablePartial) partial55);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = partial44.getFieldTypes();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField59 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long62 = durationField59.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long64 = durationField59.getValueAsLong((long) 10);
        int int66 = durationField59.getValue((long) (byte) 10);
        boolean boolean67 = partial58.equals((java.lang.Object) durationField59);
        org.joda.time.Chronology chronology68 = partial58.getChronology();
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        boolean boolean70 = partial58.isBefore((org.joda.time.ReadablePartial) partial69);
        int int71 = partial44.compareTo((org.joda.time.ReadablePartial) partial58);
        org.joda.time.ReadableInterval readableInterval72 = null;
        org.joda.time.ReadableInterval readableInterval73 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval72);
        org.joda.time.ReadableInterval readableInterval74 = null;
        boolean boolean75 = readableInterval73.contains(readableInterval74);
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.Period period77 = readableInterval73.toPeriod(periodType76);
        org.joda.time.DateTime dateTime78 = readableInterval73.getEnd();
        org.joda.time.MutableInterval mutableInterval79 = readableInterval73.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval80 = null;
        org.joda.time.ReadableInterval readableInterval81 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval80);
        org.joda.time.ReadableInterval readableInterval82 = null;
        boolean boolean83 = readableInterval81.contains(readableInterval82);
        org.joda.time.PeriodType periodType84 = null;
        org.joda.time.Period period85 = readableInterval81.toPeriod(periodType84);
        org.joda.time.DateTime dateTime86 = readableInterval81.getEnd();
        org.joda.time.ReadableInterval readableInterval87 = null;
        org.joda.time.ReadableInterval readableInterval88 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval87);
        org.joda.time.ReadableInterval readableInterval89 = null;
        boolean boolean90 = readableInterval88.contains(readableInterval89);
        boolean boolean91 = readableInterval81.overlaps(readableInterval88);
        boolean boolean92 = readableInterval73.contains(readableInterval88);
        org.joda.time.PeriodType periodType93 = null;
        org.joda.time.PeriodType periodType94 = org.joda.time.DateTimeUtils.getPeriodType(periodType93);
        org.joda.time.PeriodType periodType95 = org.joda.time.DateTimeUtils.getPeriodType(periodType94);
        org.joda.time.Period period96 = readableInterval73.toPeriod(periodType95);
        org.joda.time.Partial partial97 = partial44.plus((org.joda.time.ReadablePeriod) period96);
        int int98 = partial43.compareTo((org.joda.time.ReadablePartial) partial44);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(readableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(readableInterval29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(intArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(partial43);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 10L + "'", long64 == 10L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(readableInterval73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(mutableInterval79);
        org.junit.Assert.assertNotNull(readableInterval81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(readableInterval88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(periodType94);
        org.junit.Assert.assertNotNull(periodType95);
        org.junit.Assert.assertNotNull(period96);
        org.junit.Assert.assertNotNull(partial97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfSecond();
        int int9 = dateTimeField7.getMinimumValue((-1443850494178L));
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial19 = null;
        int[] intArray26 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int27 = dateTimeField18.getMaximumValue(readablePartial19, intArray26);
        java.util.Locale locale29 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray30 = dateTimeField7.set((org.joda.time.ReadablePartial) partial10, (int) (short) 1, intArray26, "dayOfMonth", locale29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"dayOfMonth\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 24 + "'", int27 == 24);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        long long16 = dividedDateTimeField11.roundFloor(291L);
        boolean boolean17 = dividedDateTimeField11.isSupported();
        org.joda.time.DurationField durationField18 = dividedDateTimeField11.getDurationField();
        java.lang.String str20 = dividedDateTimeField11.getAsShortText(166055221892365L);
        long long23 = dividedDateTimeField11.set(0L, 3);
        org.joda.time.DateTimeField dateTimeField24 = dividedDateTimeField11.getWrappedField();
        // The following exception was thrown during execution in test generation
        try {
            long long27 = dividedDateTimeField11.add((-210861660779418L), 1711909506613L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 17119095066130");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "723" + "'", str20, "723");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-61220448000000L) + "'", long23 == (-61220448000000L));
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        boolean boolean3 = readableInterval1.contains(readableInterval2);
        org.joda.time.Duration duration4 = readableInterval1.toDuration();
        org.joda.time.DateTime dateTime5 = readableInterval1.getEnd();
        org.joda.time.Period period6 = readableInterval1.toPeriod();
        long long7 = readableInterval1.getStartMillis();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(period6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711909572316L + "'", long7 == 1711909572316L);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        int[] intArray1 = partial0.getValues();
        int int2 = partial0.size();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.ReadableInterval readableInterval5 = null;
        boolean boolean6 = readableInterval4.contains(readableInterval5);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = readableInterval4.toPeriod(periodType7);
        org.joda.time.Partial partial10 = partial0.withPeriodAdded((org.joda.time.ReadablePeriod) period8, (int) (short) 100);
        java.lang.String str11 = partial10.toString();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.hours();
        java.lang.String str13 = durationFieldType12.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial15 = partial10.withFieldAddWrapped(durationFieldType12, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hours' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hours" + "'", str13, "hours");
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        org.joda.time.JodaTimePermission jodaTimePermission1 = new org.joda.time.JodaTimePermission("100");
        org.joda.time.JodaTimePermission jodaTimePermission3 = new org.joda.time.JodaTimePermission("100");
        java.lang.String str4 = jodaTimePermission3.toString();
        java.security.PermissionCollection permissionCollection5 = jodaTimePermission3.newPermissionCollection();
        boolean boolean6 = jodaTimePermission1.implies((java.security.Permission) jodaTimePermission3);
        boolean boolean8 = jodaTimePermission1.equals((java.lang.Object) (-25200000));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(\"org.joda.time.JodaTimePermission\" \"100\")" + "'", str4, "(\"org.joda.time.JodaTimePermission\" \"100\")");
        org.junit.Assert.assertNotNull(permissionCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = unsupportedDateTimeField6.getType();
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getDurationField();
        org.joda.time.DurationField durationField12 = unsupportedDateTimeField6.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField14 = new org.joda.time.field.ZeroIsMaxDateTimeField((org.joda.time.DateTimeField) unsupportedDateTimeField6, dateTimeFieldType13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field must be supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DurationField durationField28 = chronology26.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField29 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType23, durationField28);
        long long32 = durationField28.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.ReadableInterval readableInterval35 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval34);
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval34);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfCentury();
        boolean boolean38 = durationFieldType33.isSupported(chronology36);
        org.joda.time.field.ScaledDurationField scaledDurationField40 = new org.joda.time.field.ScaledDurationField(durationField28, durationFieldType33, (int) 'a');
        long long41 = scaledDurationField40.getUnitMillis();
        long long44 = scaledDurationField40.getMillis((long) 3, 3600000L);
        boolean boolean45 = scaledDurationField40.isPrecise();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField46 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, (org.joda.time.DurationField) scaledDurationField40);
        org.joda.time.chrono.ISOChronology iSOChronology47 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField48 = iSOChronology47.minutes();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology47.millisOfDay();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology47.centuryOfEra();
        org.joda.time.DurationField durationField51 = iSOChronology47.days();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.Chronology chronology53 = iSOChronology47.withZone(dateTimeZone52);
        org.joda.time.DurationField durationField54 = iSOChronology47.weeks();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval56 = null;
        org.joda.time.ReadableInterval readableInterval57 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval56);
        org.joda.time.Chronology chronology58 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval56);
        org.joda.time.DateTimeField dateTimeField59 = chronology58.yearOfCentury();
        org.joda.time.DurationField durationField60 = chronology58.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField61 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType55, durationField60);
        long long64 = durationField60.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType65 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval66 = null;
        org.joda.time.ReadableInterval readableInterval67 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval66);
        org.joda.time.Chronology chronology68 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval66);
        org.joda.time.DateTimeField dateTimeField69 = chronology68.yearOfCentury();
        boolean boolean70 = durationFieldType65.isSupported(chronology68);
        org.joda.time.field.ScaledDurationField scaledDurationField72 = new org.joda.time.field.ScaledDurationField(durationField60, durationFieldType65, (int) 'a');
        org.joda.time.DurationField durationField73 = scaledDurationField72.getWrappedField();
        boolean boolean74 = scaledDurationField72.isSupported();
        long long77 = scaledDurationField72.getMillis((-1), 1711909506613L);
        long long79 = scaledDurationField72.getValueAsLong((long) 1439);
        long long82 = scaledDurationField72.add(1396290305822L, (long) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType83 = scaledDurationField72.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.PreciseDateTimeField preciseDateTimeField84 = new org.joda.time.field.PreciseDateTimeField(dateTimeFieldType15, durationField54, (org.joda.time.DurationField) scaledDurationField72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The effective range must be at least 2");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-210866846400000L) + "'", long32 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(readableInterval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 97L + "'", long41 == 97L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 291L + "'", long44 == 291L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField46);
        org.junit.Assert.assertNotNull(iSOChronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(readableInterval57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-210866846400000L) + "'", long64 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertNotNull(readableInterval67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-97L) + "'", long77 == (-97L));
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 14L + "'", long79 == 14L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1396290306792L + "'", long82 == 1396290306792L);
        org.junit.Assert.assertNotNull(durationFieldType83);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = durationField5.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        boolean boolean15 = durationFieldType10.isSupported(chronology13);
        org.joda.time.field.ScaledDurationField scaledDurationField17 = new org.joda.time.field.ScaledDurationField(durationField5, durationFieldType10, (int) 'a');
        org.joda.time.DurationField durationField18 = scaledDurationField17.getWrappedField();
        long long21 = scaledDurationField17.add((-210866846400000L), (long) 53460006);
        long long24 = scaledDurationField17.add(4140004L, (long) 12);
        java.lang.String str25 = scaledDurationField17.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210866846400000L) + "'", long9 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-210861660779418L) + "'", long21 == (-210861660779418L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 4141168L + "'", long24 == 4141168L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hours" + "'", str25, "hours");
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField14 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType8, durationField13);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField7, dateTimeFieldType8);
        int int17 = zeroIsMaxDateTimeField15.getLeapAmount(1711909507403L);
        boolean boolean19 = zeroIsMaxDateTimeField15.isLeap(9003755385792000000L);
        int int20 = zeroIsMaxDateTimeField15.getMaximumValue();
        long long22 = zeroIsMaxDateTimeField15.roundHalfEven(1711909521833L);
        int int24 = zeroIsMaxDateTimeField15.getLeapAmount(4015592707175L);
        int int27 = zeroIsMaxDateTimeField15.getDifference((long) (short) 100, (long) 32);
        int int28 = zeroIsMaxDateTimeField15.getMinimumValue();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1704067200000L + "'", long22 == 1704067200000L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.DurationField durationField23 = dividedDateTimeField11.getDurationField();
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str26 = dateTimeZone25.toString();
        org.joda.time.Chronology chronology27 = iSOChronology24.withZone(dateTimeZone25);
        org.joda.time.Partial partial28 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology24);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField30 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long33 = durationField30.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long35 = durationField30.getValueAsLong((long) 10);
        int int37 = durationField30.getValue((long) (byte) 10);
        boolean boolean38 = partial29.equals((java.lang.Object) durationField30);
        boolean boolean39 = partial28.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.DateTimeField[] dateTimeFieldArray40 = partial28.getFields();
        org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone43 = iSOChronology42.getZone();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology42.minuteOfDay();
        org.joda.time.chrono.ISOChronology iSOChronology45 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str47 = dateTimeZone46.toString();
        org.joda.time.Chronology chronology48 = iSOChronology45.withZone(dateTimeZone46);
        org.joda.time.Partial partial49 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology45);
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField51 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long54 = durationField51.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long56 = durationField51.getValueAsLong((long) 10);
        int int58 = durationField51.getValue((long) (byte) 10);
        boolean boolean59 = partial50.equals((java.lang.Object) durationField51);
        boolean boolean60 = partial49.isBefore((org.joda.time.ReadablePartial) partial50);
        org.joda.time.ReadableInterval readableInterval61 = null;
        org.joda.time.ReadableInterval readableInterval62 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval61);
        org.joda.time.Chronology chronology63 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval61);
        org.joda.time.DateTimeField dateTimeField64 = chronology63.yearOfCentury();
        org.joda.time.DurationField durationField65 = chronology63.millis();
        org.joda.time.DurationField durationField66 = chronology63.centuries();
        org.joda.time.ReadableInterval readableInterval67 = null;
        org.joda.time.ReadableInterval readableInterval68 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval67);
        org.joda.time.Chronology chronology69 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval67);
        org.joda.time.DateTimeField dateTimeField70 = chronology69.yearOfCentury();
        org.joda.time.DurationField durationField71 = chronology69.millis();
        org.joda.time.DateTimeField dateTimeField72 = chronology69.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval73 = null;
        org.joda.time.ReadableInterval readableInterval74 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval73);
        org.joda.time.Chronology chronology75 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval73);
        org.joda.time.DateTimeField dateTimeField76 = chronology75.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField77 = chronology75.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval78 = null;
        org.joda.time.ReadableInterval readableInterval79 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval78);
        org.joda.time.ReadableInterval readableInterval80 = null;
        boolean boolean81 = readableInterval79.contains(readableInterval80);
        org.joda.time.PeriodType periodType82 = null;
        org.joda.time.Period period83 = readableInterval79.toPeriod(periodType82);
        int[] intArray85 = chronology75.get((org.joda.time.ReadablePeriod) period83, (-210866846400000L));
        int[] intArray88 = chronology69.get((org.joda.time.ReadablePeriod) period83, 2173795348453L, (long) 1439);
        int[] intArray91 = chronology63.get((org.joda.time.ReadablePeriod) period83, 291L, 2580171L);
        int int92 = dateTimeField44.getMaximumValue((org.joda.time.ReadablePartial) partial50, intArray91);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray94 = dividedDateTimeField11.add((org.joda.time.ReadablePartial) partial28, (int) ' ', intArray91, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray40);
        org.junit.Assert.assertNotNull(iSOChronology42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(iSOChronology45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10L + "'", long56 == 10L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(readableInterval62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(readableInterval68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(readableInterval74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(readableInterval79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(intArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1439 + "'", int92 == 1439);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.minuteOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DurationField durationField6 = zonedChronology4.centuries();
        org.joda.time.DateTimeField dateTimeField7 = zonedChronology4.dayOfMonth();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str12 = dateTimeZone11.toString();
        java.lang.String str14 = dateTimeZone11.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeUtils.getZone(dateTimeZone11);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone16 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = iSOChronology8.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone16);
        int int19 = cachedDateTimeZone16.getOffset((long) ' ');
        org.joda.time.Chronology chronology20 = zonedChronology4.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone16);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.weekyearOfCentury();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(cachedDateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = unsupportedDateTimeField6.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = unsupportedDateTimeField6.getType();
        org.joda.time.Partial partial12 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField13 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long16 = durationField13.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long18 = durationField13.getValueAsLong((long) 10);
        int int20 = durationField13.getValue((long) (byte) 10);
        boolean boolean21 = partial12.equals((java.lang.Object) durationField13);
        org.joda.time.Chronology chronology22 = partial12.getChronology();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        boolean boolean24 = partial12.isBefore((org.joda.time.ReadablePartial) partial23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = partial12.getFieldTypes();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField27 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long30 = durationField27.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long32 = durationField27.getValueAsLong((long) 10);
        int int34 = durationField27.getValue((long) (byte) 10);
        boolean boolean35 = partial26.equals((java.lang.Object) durationField27);
        org.joda.time.Chronology chronology36 = partial26.getChronology();
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        boolean boolean38 = partial26.isBefore((org.joda.time.ReadablePartial) partial37);
        int int39 = partial12.compareTo((org.joda.time.ReadablePartial) partial26);
        java.util.Locale locale41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = unsupportedDateTimeField6.getAsShortText((org.joda.time.ReadablePartial) partial12, (int) (byte) -1, locale41);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getDurationField();
        java.lang.String str12 = unsupportedDateTimeField6.toString();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField14 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long17 = durationField14.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long19 = durationField14.getValueAsLong((long) 10);
        int int21 = durationField14.getValue((long) (byte) 10);
        boolean boolean22 = partial13.equals((java.lang.Object) durationField14);
        org.joda.time.Chronology chronology23 = partial13.getChronology();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial13.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial13.getFieldTypes();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField28 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long31 = durationField28.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long33 = durationField28.getValueAsLong((long) 10);
        int int35 = durationField28.getValue((long) (byte) 10);
        boolean boolean36 = partial27.equals((java.lang.Object) durationField28);
        org.joda.time.Chronology chronology37 = partial27.getChronology();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial27.isBefore((org.joda.time.ReadablePartial) partial38);
        int int40 = partial13.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str42 = dateTimeZone41.toString();
        java.lang.String str44 = dateTimeZone41.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeUtils.getZone(dateTimeZone41);
        boolean boolean46 = partial27.equals((java.lang.Object) dateTimeZone45);
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField48 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long51 = durationField48.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long53 = durationField48.getValueAsLong((long) 10);
        int int55 = durationField48.getValue((long) (byte) 10);
        boolean boolean56 = partial47.equals((java.lang.Object) durationField48);
        org.joda.time.Chronology chronology57 = partial47.getChronology();
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        boolean boolean59 = partial47.isBefore((org.joda.time.ReadablePartial) partial58);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray60 = partial47.getFieldTypes();
        boolean boolean61 = partial27.isAfter((org.joda.time.ReadablePartial) partial47);
        int[] intArray62 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int63 = unsupportedDateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) partial27, intArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UnsupportedDateTimeField" + "'", str12, "UnsupportedDateTimeField");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10L + "'", long53 == 10L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, (java.lang.Number) 60035L, "");
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType0.getDurationType();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField5 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType6.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField9 = new org.joda.time.field.PreciseDurationField(durationFieldType7, 28531825L);
        long long12 = preciseDurationField9.getMillis(60035L, (-210866846400000L));
        boolean boolean13 = preciseDurationField9.isPrecise();
        boolean boolean14 = preciseDurationField9.isSupported();
        int int15 = unsupportedDurationField5.compareTo((org.joda.time.DurationField) preciseDurationField9);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = unsupportedDurationField5.getMillis(1711909507403L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: hours field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(unsupportedDurationField5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1712908113875L + "'", long12 == 1712908113875L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial4 = null;
        int int5 = dateTimeField3.getMinimumValue(readablePartial4);
        org.joda.time.ReadablePartial readablePartial6 = null;
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval7);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int[] intArray21 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int22 = dateTimeField13.getMaximumValue(readablePartial14, intArray21);
        int int23 = dateTimeField3.getMinimumValue(readablePartial6, intArray21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField26 = new org.joda.time.field.RemainderDateTimeField(dateTimeField3, dateTimeFieldType24, 10);
        long long29 = remainderDateTimeField26.addWrapField(3600000L, 0);
        java.util.Locale locale31 = null;
        java.lang.String str32 = remainderDateTimeField26.getAsText((-60000), locale31);
        long long34 = remainderDateTimeField26.remainder((-62135567870746L));
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 24 + "'", int22 == 24);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3600000L + "'", long29 == 3600000L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-60000" + "'", str32, "-60000");
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 28929254L + "'", long34 == 28929254L);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = durationField5.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        boolean boolean15 = durationFieldType10.isSupported(chronology13);
        org.joda.time.field.ScaledDurationField scaledDurationField17 = new org.joda.time.field.ScaledDurationField(durationField5, durationFieldType10, (int) 'a');
        int int19 = scaledDurationField17.getValue((long) (short) -1);
        long long22 = scaledDurationField17.getMillis((int) (byte) 1, 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210866846400000L) + "'", long9 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 97L + "'", long22 == 97L);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology6 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology2, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = zonedChronology6.getZone();
        org.joda.time.DurationField durationField8 = zonedChronology6.centuries();
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology6.dayOfMonth();
        boolean boolean10 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) zonedChronology6);
        org.joda.time.chrono.ISOChronology iSOChronology11 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField12 = iSOChronology11.minutes();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology15 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology11, dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = zonedChronology15.getZone();
        org.joda.time.DurationField durationField17 = zonedChronology15.centuries();
        org.joda.time.DateTimeField dateTimeField18 = zonedChronology15.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone19 = zonedChronology15.getZone();
        java.lang.String str20 = dateTimeZone19.getID();
        org.joda.time.Chronology chronology21 = zonedChronology6.withZone(dateTimeZone19);
        org.joda.time.DurationField durationField22 = zonedChronology6.seconds();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology6.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(iSOChronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        java.util.Locale locale14 = null;
        java.lang.String str15 = partial11.toString("723", locale14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField17 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long20 = durationField17.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long22 = durationField17.getValueAsLong((long) 10);
        int int24 = durationField17.getValue((long) (byte) 10);
        boolean boolean25 = partial16.equals((java.lang.Object) durationField17);
        org.joda.time.Chronology chronology26 = partial16.getChronology();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial16.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = partial16.getFieldTypes();
        java.lang.Object obj30 = null;
        boolean boolean31 = partial16.equals(obj30);
        boolean boolean32 = partial11.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = partial16.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.ReadableInterval readableInterval35 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval34);
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval34);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval39 = null;
        org.joda.time.ReadableInterval readableInterval40 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval39);
        org.joda.time.ReadableInterval readableInterval41 = null;
        boolean boolean42 = readableInterval40.contains(readableInterval41);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = readableInterval40.toPeriod(periodType43);
        int[] intArray46 = chronology36.get((org.joda.time.ReadablePeriod) period44, (-210866846400000L));
        org.joda.time.Partial partial47 = partial16.minus((org.joda.time.ReadablePeriod) period44);
        java.lang.String str48 = partial16.toStringList();
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "723" + "'", str15, "723");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(readableInterval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(readableInterval40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(intArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str4 = dateTimeZone3.toString();
        java.lang.String str6 = dateTimeZone3.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeUtils.getZone(dateTimeZone3);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone8 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone8);
        org.joda.time.DurationField durationField10 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology0.yearOfCentury();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(cachedDateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        org.joda.time.tz.DefaultNameProvider defaultNameProvider0 = new org.joda.time.tz.DefaultNameProvider();
        org.joda.time.DateTimeZone.setNameProvider((org.joda.time.tz.NameProvider) defaultNameProvider0);
        java.util.Locale locale2 = null;
        java.lang.String str5 = defaultNameProvider0.getName(locale2, "", "DateTimeField[yearOfCentury]");
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        long long26 = remainderDateTimeField22.roundHalfFloor((long) (short) 100);
        long long28 = remainderDateTimeField22.roundFloor((long) 100);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField11 = new org.joda.time.field.OffsetDateTimeField(dateTimeField8, dateTimeFieldType9, (int) (short) 1);
        int int13 = offsetDateTimeField11.get(60000L);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial14.getFieldTypes();
        int[] intArray28 = partial14.getValues();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField31 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long34 = durationField31.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long36 = durationField31.getValueAsLong((long) 10);
        int int38 = durationField31.getValue((long) (byte) 10);
        boolean boolean39 = partial30.equals((java.lang.Object) durationField31);
        org.joda.time.Chronology chronology40 = partial30.getChronology();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial30.isBefore((org.joda.time.ReadablePartial) partial41);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = partial30.getFieldTypes();
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField45 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long48 = durationField45.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long50 = durationField45.getValueAsLong((long) 10);
        int int52 = durationField45.getValue((long) (byte) 10);
        boolean boolean53 = partial44.equals((java.lang.Object) durationField45);
        org.joda.time.Chronology chronology54 = partial44.getChronology();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial44.isBefore((org.joda.time.ReadablePartial) partial55);
        int int57 = partial30.compareTo((org.joda.time.ReadablePartial) partial44);
        org.joda.time.Partial partial58 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField59 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long62 = durationField59.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long64 = durationField59.getValueAsLong((long) 10);
        int int66 = durationField59.getValue((long) (byte) 10);
        boolean boolean67 = partial58.equals((java.lang.Object) durationField59);
        int int68 = partial44.compareTo((org.joda.time.ReadablePartial) partial58);
        int[] intArray69 = partial58.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray71 = offsetDateTimeField11.addWrapPartial((org.joda.time.ReadablePartial) partial14, 0, intArray69, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10L + "'", long36 == 10L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 10L + "'", long64 == 10L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[]");
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField11 = new org.joda.time.field.OffsetDateTimeField(dateTimeField8, dateTimeFieldType9, (int) (short) 1);
        boolean boolean12 = offsetDateTimeField11.isSupported();
        long long14 = offsetDateTimeField11.remainder((long) 53460006);
        long long16 = offsetDateTimeField11.roundHalfFloor(1711909507403L);
        int int18 = offsetDateTimeField11.get(551169L);
        boolean boolean19 = offsetDateTimeField11.isLenient();
        java.lang.String str20 = offsetDateTimeField11.toString();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 3060006L + "'", long14 == 3060006L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711908000000L + "'", long16 == 1711908000000L);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DateTimeField[millisOfDay]" + "'", str20, "DateTimeField[millisOfDay]");
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        int int13 = unsupportedDateTimeField6.getDifference((long) (byte) 10, 10L);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial14.getFieldTypes();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        org.joda.time.Chronology chronology38 = partial28.getChronology();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial28.isBefore((org.joda.time.ReadablePartial) partial39);
        int int41 = partial14.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField43 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long46 = durationField43.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long48 = durationField43.getValueAsLong((long) 10);
        int int50 = durationField43.getValue((long) (byte) 10);
        boolean boolean51 = partial42.equals((java.lang.Object) durationField43);
        int int52 = partial28.compareTo((org.joda.time.ReadablePartial) partial42);
        int[] intArray53 = partial42.getValues();
        int[] intArray54 = partial42.getValues();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField56 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long59 = durationField56.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long61 = durationField56.getValueAsLong((long) 10);
        int int63 = durationField56.getValue((long) (byte) 10);
        boolean boolean64 = partial55.equals((java.lang.Object) durationField56);
        org.joda.time.Chronology chronology65 = partial55.getChronology();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial55.isBefore((org.joda.time.ReadablePartial) partial66);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = partial55.getFieldTypes();
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField70 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long73 = durationField70.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long75 = durationField70.getValueAsLong((long) 10);
        int int77 = durationField70.getValue((long) (byte) 10);
        boolean boolean78 = partial69.equals((java.lang.Object) durationField70);
        org.joda.time.Chronology chronology79 = partial69.getChronology();
        org.joda.time.Partial partial80 = new org.joda.time.Partial();
        boolean boolean81 = partial69.isBefore((org.joda.time.ReadablePartial) partial80);
        int int82 = partial55.compareTo((org.joda.time.ReadablePartial) partial69);
        org.joda.time.Partial partial83 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField84 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long87 = durationField84.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long89 = durationField84.getValueAsLong((long) 10);
        int int91 = durationField84.getValue((long) (byte) 10);
        boolean boolean92 = partial83.equals((java.lang.Object) durationField84);
        int int93 = partial69.compareTo((org.joda.time.ReadablePartial) partial83);
        int[] intArray94 = partial83.getValues();
        boolean boolean95 = partial42.isBefore((org.joda.time.ReadablePartial) partial83);
        java.util.Locale locale96 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str97 = unsupportedDateTimeField6.getAsText((org.joda.time.ReadablePartial) partial83, locale96);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10L + "'", long48 == 10L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[]");
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10L + "'", long61 == 10L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 10L + "'", long75 == 10L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1L + "'", long87 == 1L);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 10L + "'", long89 == 10L);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        long long16 = dividedDateTimeField11.roundFloor(291L);
        boolean boolean17 = dividedDateTimeField11.isSupported();
        org.joda.time.DurationField durationField18 = dividedDateTimeField11.getDurationField();
        java.lang.String str20 = dividedDateTimeField11.getAsShortText(166055221892365L);
        long long23 = dividedDateTimeField11.set(0L, 3);
        int int24 = dividedDateTimeField11.getMinimumValue();
        int int27 = dividedDateTimeField11.getDifference((long) (short) 0, 3600000L);
        long long29 = dividedDateTimeField11.roundHalfCeiling(2830L);
        int int30 = dividedDateTimeField11.getMinimumValue();
        java.lang.String str32 = dividedDateTimeField11.getAsShortText(0L);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "723" + "'", str20, "723");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-61220448000000L) + "'", long23 == (-61220448000000L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "197" + "'", str32, "197");
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField5 = zonedChronology4.secondOfDay();
        long long11 = zonedChronology4.getDateTimeMillis(2328L, 0, 0, (int) ' ', 1);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32001L + "'", long11 == 32001L);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology2.halfdayOfDay();
        org.joda.time.Partial partial9 = new org.joda.time.Partial(dateTimeFieldType0, 10, (org.joda.time.Chronology) iSOChronology2);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = dateTimeZone10.getOffset(readableInstant11);
        java.util.TimeZone timeZone13 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.ReadableInterval readableInterval17 = null;
        boolean boolean18 = readableInterval16.contains(readableInterval17);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = readableInterval16.toPeriod(periodType19);
        org.joda.time.DateTime dateTime21 = readableInterval16.getEnd();
        int int22 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField25 = iSOChronology24.minutes();
        org.joda.time.DateTimeField dateTimeField26 = iSOChronology24.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str28 = dateTimeZone27.toString();
        java.lang.String str30 = dateTimeZone27.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeUtils.getZone(dateTimeZone27);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone32 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone31);
        org.joda.time.Chronology chronology33 = iSOChronology24.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone32);
        org.joda.time.DurationField durationField34 = iSOChronology24.years();
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType23.getField((org.joda.time.Chronology) iSOChronology24);
        boolean boolean36 = dateTimeZone14.equals((java.lang.Object) dateTimeFieldType23);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = partial9.get(dateTimeFieldType23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(cachedDateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        org.joda.time.IllegalFieldValueException illegalFieldValueException2 = new org.joda.time.IllegalFieldValueException("53460006", "-07:52:58");
        java.lang.String str3 = illegalFieldValueException2.getIllegalValueAsString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "-07:52:58" + "'", str3, "-07:52:58");
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, (java.lang.Number) 60035L, "");
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType0.getDurationType();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField5 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType4);
        boolean boolean6 = unsupportedDurationField5.isSupported();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = unsupportedDurationField5.getValueAsLong(10L, 4015592707175L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: hours field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(unsupportedDurationField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str1 = dateTimeFieldType0.toString();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology6 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology2, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = zonedChronology6.getZone();
        boolean boolean8 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) zonedChronology6);
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = zonedChronology6.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = zonedChronology6.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfMonth" + "'", str1, "dayOfMonth");
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str1 = dateTimeFieldType0.toString();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology6 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology2, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = zonedChronology6.getZone();
        boolean boolean8 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) zonedChronology6);
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology6.hourOfDay();
        java.lang.String str10 = zonedChronology6.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfMonth" + "'", str1, "dayOfMonth");
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str10, "ZonedChronology[ISOChronology[UTC], UTC]");
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getRangeDurationField();
        long long14 = unsupportedDateTimeField6.getDifferenceAsLong(10L, 0L);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField16 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long19 = durationField16.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long21 = durationField16.getValueAsLong((long) 10);
        int int23 = durationField16.getValue((long) (byte) 10);
        boolean boolean24 = partial15.equals((java.lang.Object) durationField16);
        org.joda.time.Chronology chronology25 = partial15.getChronology();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial15.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = partial15.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.Chronology chronology32 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval30);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfCentury();
        org.joda.time.DurationField durationField34 = chronology32.millis();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.ReadableInterval readableInterval37 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval36);
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval36);
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval41 = null;
        org.joda.time.ReadableInterval readableInterval42 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval41);
        org.joda.time.ReadableInterval readableInterval43 = null;
        boolean boolean44 = readableInterval42.contains(readableInterval43);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = readableInterval42.toPeriod(periodType45);
        int[] intArray48 = chronology38.get((org.joda.time.ReadablePeriod) period46, (-210866846400000L));
        int[] intArray51 = chronology32.get((org.joda.time.ReadablePeriod) period46, 2173795348453L, (long) 1439);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray53 = unsupportedDateTimeField6.set((org.joda.time.ReadablePartial) partial15, 53460006, intArray51, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(readableInterval37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(readableInterval42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(intArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-68, -10, -2, -4, -16, -2, -27, -14]");
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str1 = dateTimeFieldType0.toString();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology6 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology2, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = zonedChronology6.getZone();
        boolean boolean8 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) zonedChronology6);
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology6.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfMonth" + "'", str1, "dayOfMonth");
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology6 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology2, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = zonedChronology6.getZone();
        org.joda.time.DurationField durationField8 = zonedChronology6.centuries();
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology6.dayOfMonth();
        boolean boolean10 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) zonedChronology6);
        org.joda.time.Partial partial12 = new org.joda.time.Partial(dateTimeFieldType0, 10);
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.ReadableInterval readableInterval14 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval13);
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval13);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.ReadableInterval readableInterval20 = null;
        boolean boolean21 = readableInterval19.contains(readableInterval20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = readableInterval19.toPeriod(periodType22);
        int[] intArray25 = chronology15.get((org.joda.time.ReadablePeriod) period23, (-210866846400000L));
        java.lang.String str26 = chronology15.toString();
        java.lang.String str27 = chronology15.toString();
        java.lang.String str28 = chronology15.toString();
        org.joda.time.DurationField durationField29 = chronology15.years();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType0.getField(chronology15);
        org.joda.time.DurationField durationField31 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.ReadableInterval readableInterval34 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval33);
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval33);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfCentury();
        org.joda.time.DurationField durationField37 = chronology35.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField38 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType32, durationField37);
        long long41 = durationField37.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval43 = null;
        org.joda.time.ReadableInterval readableInterval44 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval43);
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval43);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfCentury();
        boolean boolean47 = durationFieldType42.isSupported(chronology45);
        org.joda.time.field.ScaledDurationField scaledDurationField49 = new org.joda.time.field.ScaledDurationField(durationField37, durationFieldType42, (int) 'a');
        org.joda.time.DurationField durationField50 = scaledDurationField49.getWrappedField();
        long long53 = scaledDurationField49.add((-210866846400000L), (long) 53460006);
        int int56 = scaledDurationField49.getValue((long) 1, 1L);
        boolean boolean57 = scaledDurationField49.isPrecise();
        long long59 = scaledDurationField49.getMillis(0);
        long long61 = scaledDurationField49.getValueAsLong(0L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.PreciseDateTimeField preciseDateTimeField62 = new org.joda.time.field.PreciseDateTimeField(dateTimeFieldType0, durationField31, (org.joda.time.DurationField) scaledDurationField49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(readableInterval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, -348655, -3, -12, 0, 0, 0]");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[UTC]" + "'", str26, "ISOChronology[UTC]");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[UTC]" + "'", str27, "ISOChronology[UTC]");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ISOChronology[UTC]" + "'", str28, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(readableInterval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-210866846400000L) + "'", long41 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(readableInterval44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-210861660779418L) + "'", long53 == (-210861660779418L));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        long long16 = dividedDateTimeField11.roundFloor(291L);
        boolean boolean17 = dividedDateTimeField11.isSupported();
        org.joda.time.DurationField durationField18 = dividedDateTimeField11.getDurationField();
        java.lang.String str20 = dividedDateTimeField11.getAsShortText(166055221892365L);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField22 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long25 = durationField22.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long27 = durationField22.getValueAsLong((long) 10);
        int int29 = durationField22.getValue((long) (byte) 10);
        boolean boolean30 = partial21.equals((java.lang.Object) durationField22);
        org.joda.time.Chronology chronology31 = partial21.getChronology();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial21.isBefore((org.joda.time.ReadablePartial) partial32);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = partial21.getFieldTypes();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField36 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long39 = durationField36.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long41 = durationField36.getValueAsLong((long) 10);
        int int43 = durationField36.getValue((long) (byte) 10);
        boolean boolean44 = partial35.equals((java.lang.Object) durationField36);
        org.joda.time.Chronology chronology45 = partial35.getChronology();
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        boolean boolean47 = partial35.isBefore((org.joda.time.ReadablePartial) partial46);
        int int48 = partial21.compareTo((org.joda.time.ReadablePartial) partial35);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int50 = partial21.indexOf(dateTimeFieldType49);
        org.joda.time.chrono.ISOChronology iSOChronology52 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField53 = iSOChronology52.minutes();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str55 = dateTimeZone54.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology56 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology52, dateTimeZone54);
        org.joda.time.ReadableInterval readableInterval57 = null;
        org.joda.time.ReadableInterval readableInterval58 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval57);
        org.joda.time.ReadableInterval readableInterval59 = null;
        boolean boolean60 = readableInterval58.contains(readableInterval59);
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.Period period62 = readableInterval58.toPeriod(periodType61);
        org.joda.time.DateTime dateTime63 = readableInterval58.getEnd();
        org.joda.time.MutableInterval mutableInterval64 = readableInterval58.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval65 = null;
        org.joda.time.ReadableInterval readableInterval66 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval65);
        org.joda.time.ReadableInterval readableInterval67 = null;
        boolean boolean68 = readableInterval66.contains(readableInterval67);
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.Period period70 = readableInterval66.toPeriod(periodType69);
        org.joda.time.DateTime dateTime71 = readableInterval66.getEnd();
        org.joda.time.ReadableInterval readableInterval72 = null;
        org.joda.time.ReadableInterval readableInterval73 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval72);
        org.joda.time.ReadableInterval readableInterval74 = null;
        boolean boolean75 = readableInterval73.contains(readableInterval74);
        boolean boolean76 = readableInterval66.overlaps(readableInterval73);
        boolean boolean77 = readableInterval58.contains(readableInterval73);
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.PeriodType periodType79 = org.joda.time.DateTimeUtils.getPeriodType(periodType78);
        org.joda.time.PeriodType periodType80 = org.joda.time.DateTimeUtils.getPeriodType(periodType79);
        org.joda.time.Period period81 = readableInterval58.toPeriod(periodType80);
        int[] intArray84 = zonedChronology56.get((org.joda.time.ReadablePeriod) period81, (-53459996L), 27647338425L);
        int[] intArray86 = dividedDateTimeField11.addWrapField((org.joda.time.ReadablePartial) partial21, (int) (short) 0, intArray84, 1865);
        int[] intArray87 = partial21.getValues();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "723" + "'", str20, "723");
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(iSOChronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "UTC" + "'", str55, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology56);
        org.junit.Assert.assertNotNull(readableInterval58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(mutableInterval64);
        org.junit.Assert.assertNotNull(readableInterval66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(readableInterval73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1865, 10, 2, 2, 14, 39, 58, 421]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[1865, 10, 2, 2, 14, 39, 58, 421]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[]");
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str1 = dateTimeZone0.toString();
        java.lang.String str3 = dateTimeZone0.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeUtils.getZone(dateTimeZone0);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone5 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone4);
        java.lang.Object obj6 = null;
        boolean boolean7 = cachedDateTimeZone5.equals(obj6);
        long long9 = cachedDateTimeZone5.nextTransition(2580171L);
        boolean boolean11 = cachedDateTimeZone5.equals((java.lang.Object) 1396290306792L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "UTC" + "'", str1, "UTC");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(cachedDateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2580171L + "'", long9 == 2580171L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        int int27 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        int int38 = partial14.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.chrono.ISOChronology iSOChronology39 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone40 = iSOChronology39.getZone();
        org.joda.time.DateTimeZone dateTimeZone41 = iSOChronology39.getZone();
        org.joda.time.DurationField durationField42 = iSOChronology39.days();
        org.joda.time.DateTimeZone dateTimeZone43 = iSOChronology39.getZone();
        boolean boolean44 = partial28.equals((java.lang.Object) dateTimeZone43);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.weeks();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial47 = partial28.withFieldAdded(durationFieldType45, 274);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weeks' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(iSOChronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(durationFieldType45);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        boolean boolean7 = unsupportedDateTimeField6.isLenient();
        long long10 = unsupportedDateTimeField6.add(1396290305822L, (-53459996L));
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getLeapDurationField();
        long long14 = unsupportedDateTimeField6.getDifferenceAsLong(315479340004L, 139583L);
        long long17 = unsupportedDateTimeField6.add((long) 12, 12);
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval18);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology20.millis();
        org.joda.time.DurationField durationField23 = chronology20.centuries();
        org.joda.time.Chronology chronology24 = chronology20.withUTC();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = chronology24.add(readablePeriod25, 0L, (int) (short) 10);
        org.joda.time.DateTimeField dateTimeField29 = chronology24.clockhourOfHalfday();
        long long32 = dateTimeField29.addWrapField(0L, 1);
        long long35 = dateTimeField29.add(0L, (int) 'a');
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField37 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long40 = durationField37.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long42 = durationField37.getValueAsLong((long) 10);
        int int44 = durationField37.getValue((long) (byte) 10);
        boolean boolean45 = partial36.equals((java.lang.Object) durationField37);
        org.joda.time.Chronology chronology46 = partial36.getChronology();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        boolean boolean48 = partial36.isBefore((org.joda.time.ReadablePartial) partial47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = partial36.getFieldTypes();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField51 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long54 = durationField51.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long56 = durationField51.getValueAsLong((long) 10);
        int int58 = durationField51.getValue((long) (byte) 10);
        boolean boolean59 = partial50.equals((java.lang.Object) durationField51);
        org.joda.time.Chronology chronology60 = partial50.getChronology();
        org.joda.time.Partial partial61 = new org.joda.time.Partial();
        boolean boolean62 = partial50.isBefore((org.joda.time.ReadablePartial) partial61);
        int int63 = partial36.compareTo((org.joda.time.ReadablePartial) partial50);
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField65 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long68 = durationField65.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long70 = durationField65.getValueAsLong((long) 10);
        int int72 = durationField65.getValue((long) (byte) 10);
        boolean boolean73 = partial64.equals((java.lang.Object) durationField65);
        int int74 = partial50.compareTo((org.joda.time.ReadablePartial) partial64);
        java.util.Locale locale76 = null;
        java.lang.String str77 = dateTimeField29.getAsShortText((org.joda.time.ReadablePartial) partial64, 53460006, locale76);
        // The following exception was thrown during execution in test generation
        try {
            int int78 = unsupportedDateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) partial64);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1396236845826L + "'", long10 == 1396236845826L);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 315479200421L + "'", long14 == 315479200421L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 24L + "'", long17 == 24L);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3600000L + "'", long32 == 3600000L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 349200000L + "'", long35 == 349200000L);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10L + "'", long42 == 10L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10L + "'", long56 == 10L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 10L + "'", long70 == 10L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "53460006" + "'", str77, "53460006");
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology40 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField41 = iSOChronology40.minutes();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology40.millisOfDay();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology40.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology40.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology40.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology40.halfdayOfDay();
        org.joda.time.Partial partial47 = new org.joda.time.Partial(dateTimeFieldType38, 10, (org.joda.time.Chronology) iSOChronology40);
        int int48 = dividedDateTimeField37.getMaximumValue((org.joda.time.ReadablePartial) partial47);
        org.joda.time.ReadableInterval readableInterval49 = null;
        org.joda.time.ReadableInterval readableInterval50 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval49);
        org.joda.time.Chronology chronology51 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval49);
        org.joda.time.DateTimeField dateTimeField52 = chronology51.yearOfCentury();
        org.joda.time.DurationField durationField53 = chronology51.millis();
        org.joda.time.DurationField durationField54 = chronology51.centuries();
        org.joda.time.Chronology chronology55 = chronology51.withUTC();
        org.joda.time.DurationField durationField56 = chronology55.halfdays();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField60 = new org.joda.time.field.DividedDateTimeField(dateTimeField57, dateTimeFieldType58, 10);
        long long63 = dividedDateTimeField60.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval65 = null;
        org.joda.time.ReadableInterval readableInterval66 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval65);
        org.joda.time.Chronology chronology67 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval65);
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfCentury();
        org.joda.time.DurationField durationField69 = chronology67.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField70 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType64, durationField69);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField71 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField60, dateTimeFieldType64);
        long long73 = remainderDateTimeField71.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval75 = null;
        org.joda.time.ReadableInterval readableInterval76 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval75);
        org.joda.time.Chronology chronology77 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval75);
        org.joda.time.DateTimeField dateTimeField78 = chronology77.yearOfCentury();
        org.joda.time.DurationField durationField79 = chronology77.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField80 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType74, durationField79);
        long long83 = unsupportedDateTimeField80.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = unsupportedDateTimeField80.getType();
        org.joda.time.DurationFieldType durationFieldType85 = dateTimeFieldType84.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField86 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField71, dateTimeFieldType84);
        int int87 = dividedDateTimeField86.getMinimumValue();
        org.joda.time.DurationField durationField88 = dividedDateTimeField86.iRangeDurationField;
        boolean boolean89 = partial47.equals((java.lang.Object) dividedDateTimeField86);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(iSOChronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 29227899 + "'", int48 == 29227899);
        org.junit.Assert.assertNotNull(readableInterval50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-30610224000000L) + "'", long63 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(readableInterval66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField70);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(readableInterval76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField80);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 4L + "'", long83 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertNotNull(durationFieldType85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNull(durationField88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        java.lang.String str13 = dividedDateTimeField11.getAsText(3600000L);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial14.getFieldTypes();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        org.joda.time.Chronology chronology38 = partial28.getChronology();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial28.isBefore((org.joda.time.ReadablePartial) partial39);
        int int41 = partial14.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str43 = dateTimeZone42.toString();
        java.lang.String str45 = dateTimeZone42.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeUtils.getZone(dateTimeZone42);
        boolean boolean47 = partial28.equals((java.lang.Object) dateTimeZone46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField49 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long52 = durationField49.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long54 = durationField49.getValueAsLong((long) 10);
        int int56 = durationField49.getValue((long) (byte) 10);
        boolean boolean57 = partial48.equals((java.lang.Object) durationField49);
        org.joda.time.Chronology chronology58 = partial48.getChronology();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        boolean boolean60 = partial48.isBefore((org.joda.time.ReadablePartial) partial59);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray61 = partial48.getFieldTypes();
        boolean boolean62 = partial28.isAfter((org.joda.time.ReadablePartial) partial48);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.Partial partial64 = partial28.plus(readablePeriod63);
        java.util.Locale locale65 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = dividedDateTimeField11.getAsText((org.joda.time.ReadablePartial) partial64, locale65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'centuryOfEra' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "197" + "'", str13, "197");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "UTC" + "'", str43, "UTC");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10L + "'", long54 == 10L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(partial64);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = iSOChronology0.getZone();
        long long4 = dateTimeZone2.convertUTCToLocal(1711909557323L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1711909557323L + "'", long4 == 1711909557323L);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.DurationField durationField23 = remainderDateTimeField22.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.ReadableInterval readableInterval26 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval25);
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval25);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DurationField durationField29 = chronology27.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType24, durationField29);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField32 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField22, dateTimeFieldType24, 9);
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.ReadableInterval readableInterval34 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval33);
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval33);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfCentury();
        org.joda.time.DurationField durationField37 = chronology35.millis();
        org.joda.time.DurationField durationField38 = chronology35.centuries();
        org.joda.time.Chronology chronology39 = chronology35.withUTC();
        org.joda.time.DurationField durationField40 = chronology39.halfdays();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField44 = new org.joda.time.field.DividedDateTimeField(dateTimeField41, dateTimeFieldType42, 10);
        long long47 = dividedDateTimeField44.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval49 = null;
        org.joda.time.ReadableInterval readableInterval50 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval49);
        org.joda.time.Chronology chronology51 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval49);
        org.joda.time.DateTimeField dateTimeField52 = chronology51.yearOfCentury();
        org.joda.time.DurationField durationField53 = chronology51.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType48, durationField53);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField55 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField44, dateTimeFieldType48);
        org.joda.time.ReadablePartial readablePartial56 = null;
        java.util.Locale locale58 = null;
        java.lang.String str59 = dividedDateTimeField44.getAsShortText(readablePartial56, (int) ' ', locale58);
        org.joda.time.ReadablePartial readablePartial60 = null;
        java.util.Locale locale62 = null;
        java.lang.String str63 = dividedDateTimeField44.getAsText(readablePartial60, (int) (byte) 10, locale62);
        long long65 = dividedDateTimeField44.roundHalfFloor((long) 100);
        long long68 = dividedDateTimeField44.add(0L, 28531765);
        long long70 = dividedDateTimeField44.remainder((-53459996L));
        org.joda.time.DurationField durationField71 = dividedDateTimeField44.iDurationField;
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField72 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType24, durationField71);
        java.util.Locale locale74 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = unsupportedDateTimeField72.getAsShortText(274, locale74);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(readableInterval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertNotNull(readableInterval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-30610224000000L) + "'", long47 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(readableInterval50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField54);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "32" + "'", str59, "32");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "10" + "'", str63, "10");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 9003755385792000000L + "'", long68 == 9003755385792000000L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 315479340004L + "'", long70 == 315479340004L);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField72);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        int int2 = dateTimeZone0.getStandardOffset((long) 1);
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.clockhourOfDay();
        boolean boolean10 = dateTimeZone0.equals((java.lang.Object) dateTimeField9);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str1 = dateTimeFieldType0.toString();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology6 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology2, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = zonedChronology6.getZone();
        boolean boolean8 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) zonedChronology6);
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology6.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = zonedChronology6.getDateTimeMillis((-1940L), 29227999, 97, (int) (short) 10, (-60000));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 29227999 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfMonth" + "'", str1, "dayOfMonth");
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField11.getAsShortText(readablePartial23, (int) ' ', locale25);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField28 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField11, 100);
        org.joda.time.ReadablePartial readablePartial29 = null;
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.Chronology chronology32 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval30);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial34 = null;
        int[] intArray41 = new int[] { 53460006, ' ', (short) 100, 28531765, 53460006, 10 };
        int int42 = dateTimeField33.getMinimumValue(readablePartial34, intArray41);
        int int43 = dividedDateTimeField11.getMinimumValue(readablePartial29, intArray41);
        int int46 = dividedDateTimeField11.getDifference((long) 4, (long) (short) 0);
        org.joda.time.DurationField durationField47 = dividedDateTimeField11.iDurationField;
        org.joda.time.DurationField durationField48 = dividedDateTimeField11.iDurationField;
        int int51 = dividedDateTimeField11.getDifference(1711909511784L, (-898957916640000000L));
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[53460006, 32, 100, 28531765, 53460006, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2848689 + "'", int51 == 2848689);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        int int27 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.ReadableInterval readableInterval29 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval28);
        org.joda.time.ReadableInterval readableInterval30 = null;
        boolean boolean31 = readableInterval29.contains(readableInterval30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = readableInterval29.toPeriod(periodType32);
        org.joda.time.DateTime dateTime34 = readableInterval29.getEnd();
        org.joda.time.MutableInterval mutableInterval35 = readableInterval29.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.ReadableInterval readableInterval37 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval36);
        org.joda.time.ReadableInterval readableInterval38 = null;
        boolean boolean39 = readableInterval37.contains(readableInterval38);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = readableInterval37.toPeriod(periodType40);
        org.joda.time.DateTime dateTime42 = readableInterval37.getEnd();
        org.joda.time.ReadableInterval readableInterval43 = null;
        org.joda.time.ReadableInterval readableInterval44 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval43);
        org.joda.time.ReadableInterval readableInterval45 = null;
        boolean boolean46 = readableInterval44.contains(readableInterval45);
        boolean boolean47 = readableInterval37.overlaps(readableInterval44);
        boolean boolean48 = readableInterval29.contains(readableInterval44);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.PeriodType periodType50 = org.joda.time.DateTimeUtils.getPeriodType(periodType49);
        org.joda.time.PeriodType periodType51 = org.joda.time.DateTimeUtils.getPeriodType(periodType50);
        org.joda.time.Period period52 = readableInterval29.toPeriod(periodType51);
        org.joda.time.Partial partial53 = partial0.plus((org.joda.time.ReadablePeriod) period52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = partial0.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(readableInterval29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertNotNull(readableInterval37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(readableInterval44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(partial53);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("hi!", "53460006", (int) (short) 100, 29227899);
        int int6 = fixedDateTimeZone4.getOffsetFromLocal(22410261324L);
        int int8 = fixedDateTimeZone4.getOffset((-58877472891246L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.getDifferenceAsLong((-210861660779418L), 3600000L);
        boolean boolean10 = unsupportedDateTimeField6.isLenient();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        int[] intArray12 = partial11.getValues();
        int int13 = partial11.size();
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.ReadableInterval readableInterval15 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval14);
        org.joda.time.ReadableInterval readableInterval16 = null;
        boolean boolean17 = readableInterval15.contains(readableInterval16);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = readableInterval15.toPeriod(periodType18);
        org.joda.time.Partial partial21 = partial11.withPeriodAdded((org.joda.time.ReadablePeriod) period19, (int) (short) 100);
        java.util.Locale locale22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = unsupportedDateTimeField6.getAsShortText((org.joda.time.ReadablePartial) partial11, locale22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210861664379418L) + "'", long9 == (-210861664379418L));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(readableInterval15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(partial21);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial2 = new org.joda.time.Partial(dateTimeFieldType0, 9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.yearOfCentury();
        org.joda.time.DurationField durationField6 = iSOChronology0.seconds();
        org.joda.time.DurationField durationField7 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.minuteOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, (java.lang.Number) 60035L, "");
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType0.getDurationType();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField5 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType4);
        long long6 = unsupportedDurationField5.getUnitMillis();
        // The following exception was thrown during execution in test generation
        try {
            int int9 = unsupportedDurationField5.getValue(2440588L, (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: hours field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(unsupportedDurationField5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField12 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType8, 4, (int) ' ', (int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField15 = new org.joda.time.field.RemainderDateTimeField(dateTimeField7, dateTimeFieldType13, 28531765);
        org.joda.time.DurationField durationField16 = remainderDateTimeField15.getDurationField();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField18 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long21 = durationField18.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long23 = durationField18.getValueAsLong((long) 10);
        int int25 = durationField18.getValue((long) (byte) 10);
        boolean boolean26 = partial17.equals((java.lang.Object) durationField18);
        org.joda.time.Chronology chronology27 = partial17.getChronology();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial17.isBefore((org.joda.time.ReadablePartial) partial28);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = partial17.getFieldTypes();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField32 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long35 = durationField32.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long37 = durationField32.getValueAsLong((long) 10);
        int int39 = durationField32.getValue((long) (byte) 10);
        boolean boolean40 = partial31.equals((java.lang.Object) durationField32);
        org.joda.time.Chronology chronology41 = partial31.getChronology();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        boolean boolean43 = partial31.isBefore((org.joda.time.ReadablePartial) partial42);
        int int44 = partial17.compareTo((org.joda.time.ReadablePartial) partial31);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField46 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long49 = durationField46.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long51 = durationField46.getValueAsLong((long) 10);
        int int53 = durationField46.getValue((long) (byte) 10);
        boolean boolean54 = partial45.equals((java.lang.Object) durationField46);
        int int55 = partial31.compareTo((org.joda.time.ReadablePartial) partial45);
        org.joda.time.chrono.ISOChronology iSOChronology56 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone57 = iSOChronology56.getZone();
        org.joda.time.DateTimeZone dateTimeZone58 = iSOChronology56.getZone();
        org.joda.time.DurationField durationField59 = iSOChronology56.days();
        org.joda.time.DateTimeZone dateTimeZone60 = iSOChronology56.getZone();
        boolean boolean61 = partial45.equals((java.lang.Object) dateTimeZone60);
        java.lang.String str62 = partial45.toString();
        java.util.Locale locale63 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = remainderDateTimeField15.getAsShortText((org.joda.time.ReadablePartial) partial45, locale63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10L + "'", long23 == 10L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10L + "'", long37 == 10L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(iSOChronology56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "[]" + "'", str62, "[]");
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField14 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType8, durationField13);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField7, dateTimeFieldType8);
        int int17 = zeroIsMaxDateTimeField15.getLeapAmount(1711909507403L);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        int int19 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial18);
        long long21 = zeroIsMaxDateTimeField15.roundHalfCeiling((long) 323506);
        long long23 = zeroIsMaxDateTimeField15.roundHalfFloor((long) 28531765);
        org.joda.time.chrono.ISOChronology iSOChronology24 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str26 = dateTimeZone25.toString();
        org.joda.time.Chronology chronology27 = iSOChronology24.withZone(dateTimeZone25);
        org.joda.time.Partial partial28 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology24);
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField30 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long33 = durationField30.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long35 = durationField30.getValueAsLong((long) 10);
        int int37 = durationField30.getValue((long) (byte) 10);
        boolean boolean38 = partial29.equals((java.lang.Object) durationField30);
        boolean boolean39 = partial28.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.DateTimeField[] dateTimeFieldArray40 = partial28.getFields();
        org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField43 = iSOChronology42.minutes();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology42.millisOfDay();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField46 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long49 = durationField46.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long51 = durationField46.getValueAsLong((long) 10);
        int int53 = durationField46.getValue((long) (byte) 10);
        boolean boolean54 = partial45.equals((java.lang.Object) durationField46);
        org.joda.time.Chronology chronology55 = partial45.getChronology();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        boolean boolean57 = partial45.isBefore((org.joda.time.ReadablePartial) partial56);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = partial45.getFieldTypes();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField60 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long63 = durationField60.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long65 = durationField60.getValueAsLong((long) 10);
        int int67 = durationField60.getValue((long) (byte) 10);
        boolean boolean68 = partial59.equals((java.lang.Object) durationField60);
        org.joda.time.Chronology chronology69 = partial59.getChronology();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        boolean boolean71 = partial59.isBefore((org.joda.time.ReadablePartial) partial70);
        int int72 = partial45.compareTo((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField74 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long77 = durationField74.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long79 = durationField74.getValueAsLong((long) 10);
        int int81 = durationField74.getValue((long) (byte) 10);
        boolean boolean82 = partial73.equals((java.lang.Object) durationField74);
        int int83 = partial59.compareTo((org.joda.time.ReadablePartial) partial73);
        int[] intArray84 = partial73.getValues();
        int[] intArray86 = iSOChronology42.get((org.joda.time.ReadablePartial) partial73, 10L);
        java.util.Locale locale88 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray89 = zeroIsMaxDateTimeField15.set((org.joda.time.ReadablePartial) partial28, 5682, intArray86, "471", locale88);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 471 for dayOfYear must be in the range [1,100]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(iSOChronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray40);
        org.junit.Assert.assertNotNull(iSOChronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 10L + "'", long79 == 10L);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DurationField durationField6 = zonedChronology4.centuries();
        org.joda.time.DateTimeField dateTimeField7 = zonedChronology4.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone8 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology4.dayOfYear();
        long long12 = dateTimeField9.set(31380171L, 3);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 204180171L + "'", long12 == 204180171L);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        int int27 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        int int38 = partial14.compareTo((org.joda.time.ReadablePartial) partial28);
        int[] intArray39 = partial28.getValues();
        int[] intArray40 = partial28.getValues();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField42 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long45 = durationField42.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long47 = durationField42.getValueAsLong((long) 10);
        int int49 = durationField42.getValue((long) (byte) 10);
        boolean boolean50 = partial41.equals((java.lang.Object) durationField42);
        org.joda.time.Chronology chronology51 = partial41.getChronology();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        boolean boolean53 = partial41.isBefore((org.joda.time.ReadablePartial) partial52);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = partial41.getFieldTypes();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField56 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long59 = durationField56.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long61 = durationField56.getValueAsLong((long) 10);
        int int63 = durationField56.getValue((long) (byte) 10);
        boolean boolean64 = partial55.equals((java.lang.Object) durationField56);
        org.joda.time.Chronology chronology65 = partial55.getChronology();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial55.isBefore((org.joda.time.ReadablePartial) partial66);
        int int68 = partial41.compareTo((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField70 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long73 = durationField70.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long75 = durationField70.getValueAsLong((long) 10);
        int int77 = durationField70.getValue((long) (byte) 10);
        boolean boolean78 = partial69.equals((java.lang.Object) durationField70);
        int int79 = partial55.compareTo((org.joda.time.ReadablePartial) partial69);
        int[] intArray80 = partial69.getValues();
        boolean boolean81 = partial28.isBefore((org.joda.time.ReadablePartial) partial69);
        int[] intArray82 = partial69.getValues();
        java.lang.String str83 = partial69.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.IllegalFieldValueException illegalFieldValueException87 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType84, (java.lang.Number) 10L, "hourOfDay");
        int int88 = partial69.indexOf(dateTimeFieldType84);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10L + "'", long61 == 10L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 10L + "'", long75 == 10L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "[]" + "'", str83, "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, (java.lang.Number) 60035L, "");
        boolean boolean4 = org.joda.time.IllegalInstantException.isIllegalInstant((java.lang.Throwable) illegalFieldValueException3);
        java.lang.Number number5 = illegalFieldValueException3.getUpperBound();
        java.lang.Number number6 = illegalFieldValueException3.getIllegalNumberValue();
        java.lang.String str7 = illegalFieldValueException3.getIllegalValueAsString();
        java.lang.Throwable[] throwableArray8 = illegalFieldValueException3.getSuppressed();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(number5);
        org.junit.Assert.assertEquals("'" + number6 + "' != '" + 60035L + "'", number6, 60035L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "60035" + "'", str7, "60035");
        org.junit.Assert.assertNotNull(throwableArray8);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, (java.lang.Number) 60035L, "");
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType0.getDurationType();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField5 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType6.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField9 = new org.joda.time.field.PreciseDurationField(durationFieldType7, 28531825L);
        long long12 = preciseDurationField9.getMillis(60035L, (-210866846400000L));
        boolean boolean13 = preciseDurationField9.isPrecise();
        boolean boolean14 = preciseDurationField9.isSupported();
        int int15 = unsupportedDurationField5.compareTo((org.joda.time.DurationField) preciseDurationField9);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = unsupportedDurationField5.getMillis(32, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: hours field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(unsupportedDurationField5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1712908113875L + "'", long12 == 1712908113875L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.getDifferenceAsLong((long) (short) 100, (-30610224000000L));
        long long12 = unsupportedDateTimeField6.add((-210866846400000L), 166055223611306L);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        int[] intArray14 = partial13.getValues();
        int int15 = partial13.size();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.ReadableInterval readableInterval18 = null;
        boolean boolean19 = readableInterval17.contains(readableInterval18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = readableInterval17.toPeriod(periodType20);
        org.joda.time.Partial partial23 = partial13.withPeriodAdded((org.joda.time.ReadablePeriod) period21, (int) (short) 100);
        java.util.Locale locale24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = unsupportedDateTimeField6.getAsShortText((org.joda.time.ReadablePartial) partial23, locale24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 30610224000100L + "'", long9 == 30610224000100L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-44811622788694L) + "'", long12 == (-44811622788694L));
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(partial23);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, (java.lang.Number) 60035L, "");
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType0.getDurationType();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField5 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType6.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField9 = new org.joda.time.field.PreciseDurationField(durationFieldType7, 28531825L);
        long long12 = preciseDurationField9.getMillis(60035L, (-210866846400000L));
        boolean boolean13 = preciseDurationField9.isPrecise();
        boolean boolean14 = preciseDurationField9.isSupported();
        int int15 = unsupportedDurationField5.compareTo((org.joda.time.DurationField) preciseDurationField9);
        boolean boolean16 = unsupportedDurationField5.isSupported();
        // The following exception was thrown during execution in test generation
        try {
            int int19 = unsupportedDurationField5.getValue((long) 1969, 1711909555198L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: hours field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(unsupportedDurationField5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1712908113875L + "'", long12 == 1712908113875L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField14 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType8, durationField13);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField7, dateTimeFieldType8);
        int int17 = zeroIsMaxDateTimeField15.getLeapAmount(1711909507403L);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        int int19 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType21 = partial18.getFieldType(97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField12 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType8, 4, (int) ' ', (int) (short) -1);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField14 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long17 = durationField14.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long19 = durationField14.getValueAsLong((long) 10);
        int int21 = durationField14.getValue((long) (byte) 10);
        boolean boolean22 = partial13.equals((java.lang.Object) durationField14);
        org.joda.time.Chronology chronology23 = partial13.getChronology();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial13.isBefore((org.joda.time.ReadablePartial) partial24);
        int int26 = offsetDateTimeField12.getMinimumValue((org.joda.time.ReadablePartial) partial24);
        java.lang.String str27 = offsetDateTimeField12.getName();
        java.util.Locale locale28 = null;
        int int29 = offsetDateTimeField12.getMaximumTextLength(locale28);
        long long31 = offsetDateTimeField12.roundHalfCeiling((long) 2);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "weekOfWeekyear" + "'", str27, "weekOfWeekyear");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = dividedDateTimeField11.roundFloor(1711909511783L);
        long long26 = dividedDateTimeField11.roundFloor(1711909554484L);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1577836800000L + "'", long24 == 1577836800000L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1577836800000L + "'", long26 == 1577836800000L);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.Chronology chronology3 = iSOChronology0.withZone(dateTimeZone1);
        org.joda.time.Partial partial4 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.minuteOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        org.joda.time.DateTimeUtils.setCurrentMillisOffset(4015592707175L);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = durationField5.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        boolean boolean15 = durationFieldType10.isSupported(chronology13);
        org.joda.time.field.ScaledDurationField scaledDurationField17 = new org.joda.time.field.ScaledDurationField(durationField5, durationFieldType10, (int) 'a');
        int int19 = scaledDurationField17.getValue((long) (short) -1);
        long long22 = scaledDurationField17.add((long) (-1), 10);
        org.joda.time.DurationFieldType durationFieldType23 = scaledDurationField17.getType();
        org.joda.time.IllegalFieldValueException illegalFieldValueException25 = new org.joda.time.IllegalFieldValueException(durationFieldType23, "69");
        org.joda.time.field.PreciseDurationField preciseDurationField27 = new org.joda.time.field.PreciseDurationField(durationFieldType23, 28531765L);
        long long30 = preciseDurationField27.getMillis(0L, 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210866846400000L) + "'", long9 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 969L + "'", long22 == 969L);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, (java.lang.Number) 60035L, "");
        boolean boolean4 = org.joda.time.IllegalInstantException.isIllegalInstant((java.lang.Throwable) illegalFieldValueException3);
        java.lang.Number number5 = illegalFieldValueException3.getUpperBound();
        java.lang.String str6 = illegalFieldValueException3.getFieldName();
        java.lang.String str7 = illegalFieldValueException3.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(number5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hourOfDay" + "'", str6, "hourOfDay");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.joda.time.IllegalFieldValueException: Value 60035 for hourOfDay is not supported: " + "'", str7, "org.joda.time.IllegalFieldValueException: Value 60035 for hourOfDay is not supported: ");
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.seconds();
        org.joda.time.DurationField durationField5 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField7 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.yearOfEra();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField11 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long14 = durationField11.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long16 = durationField11.getValueAsLong((long) 10);
        int int18 = durationField11.getValue((long) (byte) 10);
        boolean boolean19 = partial10.equals((java.lang.Object) durationField11);
        org.joda.time.Chronology chronology20 = partial10.getChronology();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial10.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = partial10.getFieldTypes();
        int[] intArray24 = partial10.getValues();
        org.joda.time.Chronology chronology25 = partial10.getChronology();
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.ReadableInterval readableInterval28 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval27);
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval27);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        org.joda.time.ReadableInterval readableInterval34 = null;
        boolean boolean35 = readableInterval33.contains(readableInterval34);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = readableInterval33.toPeriod(periodType36);
        int[] intArray39 = chronology29.get((org.joda.time.ReadablePeriod) period37, (-210866846400000L));
        java.util.Locale locale41 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray42 = dateTimeField9.set((org.joda.time.ReadablePartial) partial10, 28531765, intArray39, "", locale41);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(readableInterval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(readableInterval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, -348655, -3, -12, 0, 0, 0]");
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, (java.lang.Number) 10L, "hourOfDay");
        java.lang.String str4 = illegalFieldValueException3.getIllegalValueAsString();
        java.lang.Number number5 = illegalFieldValueException3.getIllegalNumberValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "10" + "'", str4, "10");
        org.junit.Assert.assertEquals("'" + number5 + "' != '" + 10L + "'", number5, 10L);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.minutes();
        org.joda.time.DurationField durationField5 = chronology2.halfdays();
        org.joda.time.DurationField durationField6 = chronology2.weeks();
        org.joda.time.Partial partial7 = new org.joda.time.Partial();
        int[] intArray8 = partial7.getValues();
        int int9 = partial7.size();
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.ReadableInterval readableInterval11 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        boolean boolean13 = readableInterval11.contains(readableInterval12);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = readableInterval11.toPeriod(periodType14);
        org.joda.time.Partial partial17 = partial7.withPeriodAdded((org.joda.time.ReadablePeriod) period15, (int) (short) 100);
        int[] intArray19 = chronology2.get((org.joda.time.ReadablePeriod) period15, 4141168L);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(readableInterval11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0, 0, 0, 1, 9, 1, 168]");
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DurationField durationField6 = gregorianChronology5.days();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField8 = iSOChronology7.minutes();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology7.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str11 = dateTimeZone10.toString();
        java.lang.String str13 = dateTimeZone10.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeUtils.getZone(dateTimeZone10);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone15 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone14);
        org.joda.time.Chronology chronology16 = iSOChronology7.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone15);
        int int18 = cachedDateTimeZone15.getOffset((long) ' ');
        org.joda.time.Chronology chronology19 = gregorianChronology5.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone15);
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology5.year();
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(cachedDateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, (java.lang.Number) 60035L, "");
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType0.getDurationType();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField5 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType4);
        boolean boolean6 = unsupportedDurationField5.isSupported();
        // The following exception was thrown during execution in test generation
        try {
            long long8 = unsupportedDurationField5.getValueAsLong((-62135568421900L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: hours field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(unsupportedDurationField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        int[] intArray12 = partial11.getValues();
        int int13 = partial11.size();
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.ReadableInterval readableInterval15 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval14);
        org.joda.time.ReadableInterval readableInterval16 = null;
        boolean boolean17 = readableInterval15.contains(readableInterval16);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = readableInterval15.toPeriod(periodType18);
        org.joda.time.Partial partial21 = partial11.withPeriodAdded((org.joda.time.ReadablePeriod) period19, (int) (short) 100);
        org.joda.time.ReadableInterval readableInterval22 = null;
        org.joda.time.ReadableInterval readableInterval23 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval22);
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval22);
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfCentury();
        org.joda.time.DurationField durationField26 = chronology24.millis();
        org.joda.time.DurationField durationField27 = chronology24.centuries();
        org.joda.time.Chronology chronology28 = chronology24.withUTC();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        long long32 = chronology28.add(readablePeriod29, 0L, (int) (short) 10);
        org.joda.time.DateTimeField dateTimeField33 = chronology28.centuryOfEra();
        long long36 = dateTimeField33.add(1711909505822L, (int) (byte) -1);
        boolean boolean37 = partial21.equals((java.lang.Object) dateTimeField33);
        java.util.Locale locale39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = unsupportedDateTimeField6.getAsShortText((org.joda.time.ReadablePartial) partial21, 0, locale39);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(readableInterval15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(partial21);
        org.junit.Assert.assertNotNull(readableInterval23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1443850494178L) + "'", long36 == (-1443850494178L));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DurationField durationField6 = zonedChronology4.centuries();
        org.joda.time.DateTimeField dateTimeField7 = zonedChronology4.dayOfMonth();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str12 = dateTimeZone11.toString();
        java.lang.String str14 = dateTimeZone11.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeUtils.getZone(dateTimeZone11);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone16 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = iSOChronology8.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone16);
        int int19 = cachedDateTimeZone16.getOffset((long) ' ');
        org.joda.time.Chronology chronology20 = zonedChronology4.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone16);
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology4.era();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology4.minuteOfHour();
        java.lang.Class<?> wildcardClass23 = zonedChronology4.getClass();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(cachedDateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        java.util.Locale locale14 = null;
        java.lang.String str15 = partial11.toString("723", locale14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField17 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long20 = durationField17.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long22 = durationField17.getValueAsLong((long) 10);
        int int24 = durationField17.getValue((long) (byte) 10);
        boolean boolean25 = partial16.equals((java.lang.Object) durationField17);
        org.joda.time.Chronology chronology26 = partial16.getChronology();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial16.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = partial16.getFieldTypes();
        java.lang.Object obj30 = null;
        boolean boolean31 = partial16.equals(obj30);
        boolean boolean32 = partial11.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = partial16.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.ReadableInterval readableInterval35 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval34);
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval34);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval39 = null;
        org.joda.time.ReadableInterval readableInterval40 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval39);
        org.joda.time.ReadableInterval readableInterval41 = null;
        boolean boolean42 = readableInterval40.contains(readableInterval41);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = readableInterval40.toPeriod(periodType43);
        int[] intArray46 = chronology36.get((org.joda.time.ReadablePeriod) period44, (-210866846400000L));
        org.joda.time.Partial partial47 = partial16.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.chrono.ISOChronology iSOChronology48 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField49 = iSOChronology48.minutes();
        org.joda.time.DateTimeZone dateTimeZone50 = iSOChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = iSOChronology48.yearOfCentury();
        boolean boolean52 = partial16.equals((java.lang.Object) iSOChronology48);
        org.joda.time.Chronology chronology53 = partial16.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.millisOfSecond();
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "723" + "'", str15, "723");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(readableInterval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(readableInterval40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(iSOChronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        boolean boolean3 = readableInterval1.contains(readableInterval2);
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval2);
        org.joda.time.DateTimeField dateTimeField5 = chronology4.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology2.halfdayOfDay();
        org.joda.time.Partial partial9 = new org.joda.time.Partial(dateTimeFieldType0, 10, (org.joda.time.Chronology) iSOChronology2);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = iSOChronology2.getDateTimeMillis((-196), 0, (int) (byte) -1, 100, 2848689, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology6 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology2, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = zonedChronology6.getZone();
        org.joda.time.DurationField durationField8 = zonedChronology6.centuries();
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology6.dayOfMonth();
        boolean boolean10 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) zonedChronology6);
        org.joda.time.Partial partial12 = new org.joda.time.Partial(dateTimeFieldType0, 10);
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.ReadableInterval readableInterval14 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval13);
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval13);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.ReadableInterval readableInterval20 = null;
        boolean boolean21 = readableInterval19.contains(readableInterval20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = readableInterval19.toPeriod(periodType22);
        int[] intArray25 = chronology15.get((org.joda.time.ReadablePeriod) period23, (-210866846400000L));
        java.lang.String str26 = chronology15.toString();
        java.lang.String str27 = chronology15.toString();
        java.lang.String str28 = chronology15.toString();
        org.joda.time.DurationField durationField29 = chronology15.years();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType0.getField(chronology15);
        // The following exception was thrown during execution in test generation
        try {
            long long33 = dateTimeField30.set(1711909521833L, (-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(readableInterval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[UTC]" + "'", str26, "ISOChronology[UTC]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[UTC]" + "'", str27, "ISOChronology[UTC]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ISOChronology[UTC]" + "'", str28, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology2.era();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField8 = iSOChronology7.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = iSOChronology7.getZone();
        org.joda.time.DurationField durationField10 = iSOChronology7.centuries();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField17 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType11, durationField16);
        long long20 = unsupportedDateTimeField17.add((-31L), (long) '#');
        org.joda.time.DurationField durationField21 = unsupportedDateTimeField17.getLeapDurationField();
        org.joda.time.DurationField durationField22 = unsupportedDateTimeField17.getDurationField();
        java.lang.String str23 = unsupportedDateTimeField17.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = unsupportedDateTimeField17.getType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField26 = new org.joda.time.field.RemainderDateTimeField(dateTimeField6, durationField10, dateTimeFieldType24, 24);
        boolean boolean27 = gregorianChronology1.equals((java.lang.Object) 24);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 4L + "'", long20 == 4L);
        org.junit.Assert.assertNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UnsupportedDateTimeField" + "'", str23, "UnsupportedDateTimeField");
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        long long2 = readableInterval1.getStartMillis();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        long long5 = readableInterval4.getEndMillis();
        boolean boolean6 = readableInterval1.overlaps(readableInterval4);
        java.lang.String str7 = readableInterval4.toString();
        org.joda.time.MutableInterval mutableInterval8 = readableInterval4.toMutableInterval();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField10 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long13 = durationField10.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long15 = durationField10.getValueAsLong((long) 10);
        int int17 = durationField10.getValue((long) (byte) 10);
        boolean boolean18 = partial9.equals((java.lang.Object) durationField10);
        org.joda.time.Chronology chronology19 = partial9.getChronology();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial9.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = partial9.getFieldTypes();
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField24 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long27 = durationField24.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long29 = durationField24.getValueAsLong((long) 10);
        int int31 = durationField24.getValue((long) (byte) 10);
        boolean boolean32 = partial23.equals((java.lang.Object) durationField24);
        org.joda.time.Chronology chronology33 = partial23.getChronology();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        boolean boolean35 = partial23.isBefore((org.joda.time.ReadablePartial) partial34);
        int int36 = partial9.compareTo((org.joda.time.ReadablePartial) partial23);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField38 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long41 = durationField38.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long43 = durationField38.getValueAsLong((long) 10);
        int int45 = durationField38.getValue((long) (byte) 10);
        boolean boolean46 = partial37.equals((java.lang.Object) durationField38);
        int int47 = partial23.compareTo((org.joda.time.ReadablePartial) partial37);
        org.joda.time.ReadableInterval readableInterval48 = null;
        org.joda.time.ReadableInterval readableInterval49 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval48);
        long long50 = readableInterval49.getStartMillis();
        org.joda.time.ReadableInterval readableInterval51 = null;
        org.joda.time.ReadableInterval readableInterval52 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval51);
        org.joda.time.ReadableInterval readableInterval53 = null;
        boolean boolean54 = readableInterval52.contains(readableInterval53);
        org.joda.time.Duration duration55 = readableInterval52.toDuration();
        org.joda.time.DateTime dateTime56 = readableInterval52.getEnd();
        boolean boolean57 = readableInterval49.contains((org.joda.time.ReadableInstant) dateTime56);
        long long58 = org.joda.time.DateTimeUtils.getInstantMillis((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Chronology chronology59 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime60 = partial23.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Chronology chronology61 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime60);
        boolean boolean62 = readableInterval4.contains((org.joda.time.ReadableInstant) dateTime60);
        org.junit.Assert.assertNotNull(readableInterval1);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 5727502308321L + "'", long2 == 5727502308321L);
        org.junit.Assert.assertNotNull(readableInterval4);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 5727502308321L + "'", long5 == 5727502308321L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2151-07-01T12:51:48.321Z/2151-07-01T12:51:48.321Z" + "'", str7, "2151-07-01T12:51:48.321Z/2151-07-01T12:51:48.321Z");
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(readableInterval49);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 5727502308325L + "'", long50 == 5727502308325L);
        org.junit.Assert.assertNotNull(readableInterval52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 5727502308325L + "'", long58 == 5727502308325L);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField11 = new org.joda.time.field.OffsetDateTimeField(dateTimeField8, dateTimeFieldType9, (int) (short) 1);
        int int12 = offsetDateTimeField11.getOffset();
        int int13 = offsetDateTimeField11.getOffset();
        long long15 = offsetDateTimeField11.roundHalfEven(0L);
        long long17 = offsetDateTimeField11.roundHalfEven(28531825L);
        int int18 = offsetDateTimeField11.getMinimumValue();
        boolean boolean20 = offsetDateTimeField11.isLeap((long) (byte) 0);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 28800000L + "'", long17 == 28800000L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet2);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        int int27 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str29 = dateTimeZone28.toString();
        java.lang.String str31 = dateTimeZone28.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeUtils.getZone(dateTimeZone28);
        boolean boolean33 = partial14.equals((java.lang.Object) dateTimeZone32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField35 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long38 = durationField35.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long40 = durationField35.getValueAsLong((long) 10);
        int int42 = durationField35.getValue((long) (byte) 10);
        boolean boolean43 = partial34.equals((java.lang.Object) durationField35);
        org.joda.time.Chronology chronology44 = partial34.getChronology();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial34.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = partial34.getFieldTypes();
        boolean boolean48 = partial14.isAfter((org.joda.time.ReadablePartial) partial34);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.Partial partial50 = partial14.plus(readablePeriod49);
        org.joda.time.ReadablePartial readablePartial51 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = partial50.isAfter(readablePartial51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(partial50);
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str1 = dateTimeFieldType0.toString();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology6 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology2, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = zonedChronology6.getZone();
        boolean boolean8 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) zonedChronology6);
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = zonedChronology6.secondOfMinute();
        org.joda.time.DurationField durationField11 = zonedChronology6.months();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfMonth" + "'", str1, "dayOfMonth");
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone5);
        org.joda.time.DurationField durationField7 = durationFieldType0.getField((org.joda.time.Chronology) gregorianChronology6);
        org.joda.time.DurationField durationField8 = gregorianChronology6.days();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.centuryOfEra();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.minuteOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DurationField durationField25 = remainderDateTimeField22.iRangeField;
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.ReadableInterval readableInterval28 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval27);
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval27);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        boolean boolean31 = durationFieldType26.isSupported(chronology29);
        org.joda.time.DurationField durationField32 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = dateTimeField33.getType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField35 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType34);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(readableInterval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DurationField durationField6 = zonedChronology4.centuries();
        org.joda.time.DateTimeField dateTimeField7 = zonedChronology4.dayOfMonth();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str12 = dateTimeZone11.toString();
        java.lang.String str14 = dateTimeZone11.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeUtils.getZone(dateTimeZone11);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone16 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = iSOChronology8.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone16);
        int int19 = cachedDateTimeZone16.getOffset((long) ' ');
        org.joda.time.Chronology chronology20 = zonedChronology4.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone16);
        int int22 = cachedDateTimeZone16.getStandardOffset(1711909511783L);
        java.util.Locale locale24 = null;
        java.lang.String str25 = cachedDateTimeZone16.getName((long) 1439, locale24);
        boolean boolean27 = cachedDateTimeZone16.isStandardOffset((-1295939965L));
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(cachedDateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField11 = new org.joda.time.field.OffsetDateTimeField(dateTimeField8, dateTimeFieldType9, (int) (short) 1);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField13 = new org.joda.time.field.OffsetDateTimeField(dateTimeField8, (-1));
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial14.getFieldTypes();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        org.joda.time.Chronology chronology38 = partial28.getChronology();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial28.isBefore((org.joda.time.ReadablePartial) partial39);
        int int41 = partial14.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.ReadableInterval readableInterval43 = null;
        org.joda.time.ReadableInterval readableInterval44 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval43);
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval43);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfCentury();
        org.joda.time.DurationField durationField47 = chronology45.millis();
        org.joda.time.DurationField durationField48 = chronology45.centuries();
        org.joda.time.ReadableInterval readableInterval49 = null;
        org.joda.time.ReadableInterval readableInterval50 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval49);
        org.joda.time.Chronology chronology51 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval49);
        org.joda.time.DateTimeField dateTimeField52 = chronology51.yearOfCentury();
        org.joda.time.DurationField durationField53 = chronology51.millis();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval55 = null;
        org.joda.time.ReadableInterval readableInterval56 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval55);
        org.joda.time.Chronology chronology57 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval55);
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval60 = null;
        org.joda.time.ReadableInterval readableInterval61 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval60);
        org.joda.time.ReadableInterval readableInterval62 = null;
        boolean boolean63 = readableInterval61.contains(readableInterval62);
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = readableInterval61.toPeriod(periodType64);
        int[] intArray67 = chronology57.get((org.joda.time.ReadablePeriod) period65, (-210866846400000L));
        int[] intArray70 = chronology51.get((org.joda.time.ReadablePeriod) period65, 2173795348453L, (long) 1439);
        int[] intArray73 = chronology45.get((org.joda.time.ReadablePeriod) period65, 291L, 2580171L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray75 = offsetDateTimeField13.set((org.joda.time.ReadablePartial) partial14, (int) (short) 0, intArray73, (-196));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -196 for hourOfDay must be in the range [-1,22]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(readableInterval44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(readableInterval50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(readableInterval56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(readableInterval61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 0, 0, 0, 0, 42, 59, 880]");
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str1 = dateTimeFieldType0.toString();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology6 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology2, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = zonedChronology6.getZone();
        boolean boolean8 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) zonedChronology6);
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = zonedChronology6.secondOfMinute();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField12 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long15 = durationField12.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long17 = durationField12.getValueAsLong((long) 10);
        int int19 = durationField12.getValue((long) (byte) 10);
        boolean boolean20 = partial11.equals((java.lang.Object) durationField12);
        org.joda.time.Chronology chronology21 = partial11.getChronology();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial11.isBefore((org.joda.time.ReadablePartial) partial22);
        java.util.Locale locale25 = null;
        java.lang.String str26 = partial22.toString("723", locale25);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField28 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long31 = durationField28.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long33 = durationField28.getValueAsLong((long) 10);
        int int35 = durationField28.getValue((long) (byte) 10);
        boolean boolean36 = partial27.equals((java.lang.Object) durationField28);
        org.joda.time.Chronology chronology37 = partial27.getChronology();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial27.isBefore((org.joda.time.ReadablePartial) partial38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = partial27.getFieldTypes();
        java.lang.Object obj41 = null;
        boolean boolean42 = partial27.equals(obj41);
        boolean boolean43 = partial22.isBefore((org.joda.time.ReadablePartial) partial27);
        long long45 = zonedChronology6.set((org.joda.time.ReadablePartial) partial27, 0L);
        // The following exception was thrown during execution in test generation
        try {
            long long51 = zonedChronology6.getDateTimeMillis(2409L, 9, 22, 8639999, 1439);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 8639999 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfMonth" + "'", str1, "dayOfMonth");
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "723" + "'", str26, "723");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField11.getAsShortText(readablePartial23, (int) ' ', locale25);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField28 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField11, 100);
        org.joda.time.ReadablePartial readablePartial29 = null;
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.Chronology chronology32 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval30);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial34 = null;
        int[] intArray41 = new int[] { 53460006, ' ', (short) 100, 28531765, 53460006, 10 };
        int int42 = dateTimeField33.getMinimumValue(readablePartial34, intArray41);
        int int43 = dividedDateTimeField11.getMinimumValue(readablePartial29, intArray41);
        int int44 = dividedDateTimeField11.getDivisor();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[53460006, 32, 100, 28531765, 53460006, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        int[] intArray1 = partial0.getValues();
        int int2 = partial0.size();
        int int3 = partial0.size();
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.monthOfYear();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = unsupportedDateTimeField6.getType();
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getDurationField();
        org.joda.time.DurationField durationField12 = unsupportedDateTimeField6.getRangeDurationField();
        org.joda.time.DurationField durationField13 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField26 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long29 = durationField26.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long31 = durationField26.getValueAsLong((long) 10);
        int int33 = durationField26.getValue((long) (byte) 10);
        boolean boolean34 = partial25.equals((java.lang.Object) durationField26);
        org.joda.time.Chronology chronology35 = partial25.getChronology();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial25.isBefore((org.joda.time.ReadablePartial) partial36);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = partial25.getFieldTypes();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField40 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long43 = durationField40.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long45 = durationField40.getValueAsLong((long) 10);
        int int47 = durationField40.getValue((long) (byte) 10);
        boolean boolean48 = partial39.equals((java.lang.Object) durationField40);
        org.joda.time.Chronology chronology49 = partial39.getChronology();
        org.joda.time.Partial partial50 = new org.joda.time.Partial();
        boolean boolean51 = partial39.isBefore((org.joda.time.ReadablePartial) partial50);
        int int52 = partial25.compareTo((org.joda.time.ReadablePartial) partial39);
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField54 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long57 = durationField54.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long59 = durationField54.getValueAsLong((long) 10);
        int int61 = durationField54.getValue((long) (byte) 10);
        boolean boolean62 = partial53.equals((java.lang.Object) durationField54);
        int int63 = partial39.compareTo((org.joda.time.ReadablePartial) partial53);
        int[] intArray64 = partial53.getValues();
        int[] intArray65 = partial53.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray67 = unsupportedDateTimeField6.set((org.joda.time.ReadablePartial) partial14, 12, intArray65, 197);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNull(durationField12);
        org.junit.Assert.assertNull(durationField13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10L + "'", long31 == 10L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10L + "'", long45 == 10L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 10L + "'", long59 == 10L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[]");
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[]");
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, (java.lang.Number) 60035L, "");
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType0.getDurationType();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField5 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType6.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField9 = new org.joda.time.field.PreciseDurationField(durationFieldType7, 28531825L);
        long long12 = preciseDurationField9.getMillis(60035L, (-210866846400000L));
        boolean boolean13 = preciseDurationField9.isPrecise();
        boolean boolean14 = preciseDurationField9.isSupported();
        int int15 = unsupportedDurationField5.compareTo((org.joda.time.DurationField) preciseDurationField9);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = unsupportedDurationField5.getValue(315532800000L, 1711909507403L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: hours field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(unsupportedDurationField5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1712908113875L + "'", long12 == 1712908113875L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField14 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType8, durationField13);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField7, dateTimeFieldType8);
        int int17 = zeroIsMaxDateTimeField15.getLeapAmount(1711909507403L);
        boolean boolean19 = zeroIsMaxDateTimeField15.isLeap(9003755385792000000L);
        int int20 = zeroIsMaxDateTimeField15.getMaximumValue();
        int int22 = zeroIsMaxDateTimeField15.getMinimumValue(432000032L);
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str25 = dateTimeZone24.toString();
        org.joda.time.Chronology chronology26 = iSOChronology23.withZone(dateTimeZone24);
        org.joda.time.Partial partial27 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology23);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        boolean boolean38 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        int int39 = zeroIsMaxDateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) partial27);
        int int41 = zeroIsMaxDateTimeField15.get((-110602L));
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 69 + "'", int41 == 69);
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.ReadableInterval readableInterval6 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval5);
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = readableInterval6.contains(readableInterval7);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = readableInterval6.toPeriod(periodType9);
        org.joda.time.DateTime dateTime11 = readableInterval6.getEnd();
        org.joda.time.MutableInterval mutableInterval12 = readableInterval6.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.ReadableInterval readableInterval14 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval13);
        org.joda.time.ReadableInterval readableInterval15 = null;
        boolean boolean16 = readableInterval14.contains(readableInterval15);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = readableInterval14.toPeriod(periodType17);
        org.joda.time.DateTime dateTime19 = readableInterval14.getEnd();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        boolean boolean24 = readableInterval14.overlaps(readableInterval21);
        boolean boolean25 = readableInterval6.contains(readableInterval21);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.DateTimeUtils.getPeriodType(periodType26);
        org.joda.time.PeriodType periodType28 = org.joda.time.DateTimeUtils.getPeriodType(periodType27);
        org.joda.time.Period period29 = readableInterval6.toPeriod(periodType28);
        int[] intArray32 = zonedChronology4.get((org.joda.time.ReadablePeriod) period29, (-53459996L), 27647338425L);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology4.secondOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(readableInterval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertNotNull(readableInterval14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 10, 2, 2, 14, 39, 58, 421]");
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology2.halfdayOfDay();
        org.joda.time.Partial partial9 = new org.joda.time.Partial(dateTimeFieldType0, 10, (org.joda.time.Chronology) iSOChronology2);
        int int10 = partial9.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = partial9.getFormatter();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str1 = dateTimeFieldType0.toString();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology6 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology2, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = zonedChronology6.getZone();
        boolean boolean8 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) zonedChronology6);
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology6.dayOfMonth();
        org.joda.time.DurationField durationField10 = zonedChronology6.weeks();
        org.joda.time.DateTimeField dateTimeField11 = zonedChronology6.year();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = zonedChronology6.getDateTimeMillis(24L, 297, (int) '#', 274, 2);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 297 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfMonth" + "'", str1, "dayOfMonth");
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField14 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType8, durationField13);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField7, dateTimeFieldType8);
        int int17 = zeroIsMaxDateTimeField15.getLeapAmount(1711909507403L);
        boolean boolean19 = zeroIsMaxDateTimeField15.isLeap(9003755385792000000L);
        int int20 = zeroIsMaxDateTimeField15.getMaximumValue();
        long long22 = zeroIsMaxDateTimeField15.roundFloor(27647338425L);
        boolean boolean24 = zeroIsMaxDateTimeField15.isLeap(1711908000000L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.Partial partial4 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = partial4.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = durationField5.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        boolean boolean15 = durationFieldType10.isSupported(chronology13);
        org.joda.time.field.ScaledDurationField scaledDurationField17 = new org.joda.time.field.ScaledDurationField(durationField5, durationFieldType10, (int) 'a');
        org.joda.time.DurationField durationField18 = scaledDurationField17.getWrappedField();
        long long21 = scaledDurationField17.add(2440588L, 1439);
        long long23 = scaledDurationField17.getValueAsLong((long) 1439);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210866846400000L) + "'", long9 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2580171L + "'", long21 == 2580171L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 14L + "'", long23 == 14L);
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        java.util.Locale locale14 = null;
        java.lang.String str15 = partial11.toString("723", locale14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField17 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long20 = durationField17.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long22 = durationField17.getValueAsLong((long) 10);
        int int24 = durationField17.getValue((long) (byte) 10);
        boolean boolean25 = partial16.equals((java.lang.Object) durationField17);
        org.joda.time.Chronology chronology26 = partial16.getChronology();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial16.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = partial16.getFieldTypes();
        java.lang.Object obj30 = null;
        boolean boolean31 = partial16.equals(obj30);
        boolean boolean32 = partial11.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField34 = iSOChronology33.minutes();
        org.joda.time.DurationField durationField35 = iSOChronology33.months();
        org.joda.time.DurationField durationField36 = iSOChronology33.years();
        org.joda.time.chrono.ISOChronology iSOChronology37 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone38 = iSOChronology37.getZone();
        org.joda.time.DateTimeZone dateTimeZone39 = iSOChronology37.getZone();
        org.joda.time.DurationField durationField40 = iSOChronology37.days();
        org.joda.time.DateTimeZone dateTimeZone41 = iSOChronology37.getZone();
        org.joda.time.Chronology chronology42 = iSOChronology33.withZone(dateTimeZone41);
        org.joda.time.Partial partial43 = partial16.withChronologyRetainFields(chronology42);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "723" + "'", str15, "723");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(iSOChronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(iSOChronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(partial43);
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.ReadableInterval readableInterval6 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval5);
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = readableInterval6.contains(readableInterval7);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = readableInterval6.toPeriod(periodType9);
        org.joda.time.DateTime dateTime11 = readableInterval6.getEnd();
        int int12 = dateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField14 = iSOChronology13.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone15 = iSOChronology13.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(readableInterval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField11 = new org.joda.time.field.OffsetDateTimeField(dateTimeField8, dateTimeFieldType9, (int) (short) 1);
        boolean boolean12 = offsetDateTimeField11.isSupported();
        long long14 = offsetDateTimeField11.remainder((long) 53460006);
        long long16 = offsetDateTimeField11.roundHalfFloor(1711909507403L);
        int int17 = offsetDateTimeField11.getOffset();
        int int19 = offsetDateTimeField11.get(1711909511783L);
        long long21 = offsetDateTimeField11.roundHalfFloor(819598L);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 3060006L + "'", long14 == 3060006L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711908000000L + "'", long16 == 1711908000000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 19 + "'", int19 == 19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.year();
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField6 = iSOChronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str8 = dateTimeZone7.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology9 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology5, dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = zonedChronology9.getZone();
        org.joda.time.DurationField durationField11 = zonedChronology9.centuries();
        org.joda.time.DateTimeField dateTimeField12 = zonedChronology9.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone13 = zonedChronology9.getZone();
        boolean boolean14 = iSOChronology0.equals((java.lang.Object) zonedChronology9);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField16 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long19 = durationField16.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long21 = durationField16.getValueAsLong((long) 10);
        int int23 = durationField16.getValue((long) (byte) 10);
        boolean boolean24 = partial15.equals((java.lang.Object) durationField16);
        org.joda.time.Chronology chronology25 = partial15.getChronology();
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        boolean boolean27 = partial15.isBefore((org.joda.time.ReadablePartial) partial26);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = partial15.getFieldTypes();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField30 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long33 = durationField30.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long35 = durationField30.getValueAsLong((long) 10);
        int int37 = durationField30.getValue((long) (byte) 10);
        boolean boolean38 = partial29.equals((java.lang.Object) durationField30);
        org.joda.time.Chronology chronology39 = partial29.getChronology();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        boolean boolean41 = partial29.isBefore((org.joda.time.ReadablePartial) partial40);
        int int42 = partial15.compareTo((org.joda.time.ReadablePartial) partial29);
        org.joda.time.ReadableInterval readableInterval43 = null;
        org.joda.time.ReadableInterval readableInterval44 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval43);
        org.joda.time.ReadableInterval readableInterval45 = null;
        boolean boolean46 = readableInterval44.contains(readableInterval45);
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Period period48 = readableInterval44.toPeriod(periodType47);
        org.joda.time.DateTime dateTime49 = readableInterval44.getEnd();
        org.joda.time.MutableInterval mutableInterval50 = readableInterval44.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval51 = null;
        org.joda.time.ReadableInterval readableInterval52 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval51);
        org.joda.time.ReadableInterval readableInterval53 = null;
        boolean boolean54 = readableInterval52.contains(readableInterval53);
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Period period56 = readableInterval52.toPeriod(periodType55);
        org.joda.time.DateTime dateTime57 = readableInterval52.getEnd();
        org.joda.time.ReadableInterval readableInterval58 = null;
        org.joda.time.ReadableInterval readableInterval59 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval58);
        org.joda.time.ReadableInterval readableInterval60 = null;
        boolean boolean61 = readableInterval59.contains(readableInterval60);
        boolean boolean62 = readableInterval52.overlaps(readableInterval59);
        boolean boolean63 = readableInterval44.contains(readableInterval59);
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.PeriodType periodType65 = org.joda.time.DateTimeUtils.getPeriodType(periodType64);
        org.joda.time.PeriodType periodType66 = org.joda.time.DateTimeUtils.getPeriodType(periodType65);
        org.joda.time.Period period67 = readableInterval44.toPeriod(periodType66);
        org.joda.time.Partial partial68 = partial15.plus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.ReadableInterval readableInterval69 = null;
        org.joda.time.ReadableInterval readableInterval70 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval69);
        org.joda.time.Chronology chronology71 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval69);
        org.joda.time.DateTimeField dateTimeField72 = chronology71.yearOfCentury();
        org.joda.time.DurationField durationField73 = chronology71.millis();
        org.joda.time.DateTimeField dateTimeField74 = chronology71.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField75 = chronology71.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial76 = null;
        int[] intArray83 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int84 = dateTimeField75.getMaximumValue(readablePartial76, intArray83);
        iSOChronology0.validate((org.joda.time.ReadablePartial) partial15, intArray83);
        org.joda.time.DurationField durationField86 = iSOChronology0.halfdays();
        org.joda.time.ReadablePartial readablePartial87 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long89 = iSOChronology0.set(readablePartial87, 28800001L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(readableInterval44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(mutableInterval50);
        org.junit.Assert.assertNotNull(readableInterval52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(readableInterval59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(readableInterval70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 24 + "'", int84 == 24);
        org.junit.Assert.assertNotNull(durationField86);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfCentury();
        org.joda.time.DurationField durationField28 = chronology26.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField29 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType23, durationField28);
        long long32 = durationField28.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.ReadableInterval readableInterval35 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval34);
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval34);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfCentury();
        boolean boolean38 = durationFieldType33.isSupported(chronology36);
        org.joda.time.field.ScaledDurationField scaledDurationField40 = new org.joda.time.field.ScaledDurationField(durationField28, durationFieldType33, (int) 'a');
        long long41 = scaledDurationField40.getUnitMillis();
        long long44 = scaledDurationField40.getMillis((long) 3, 3600000L);
        boolean boolean45 = scaledDurationField40.isPrecise();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField46 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, (org.joda.time.DurationField) scaledDurationField40);
        org.joda.time.DurationField durationField47 = unsupportedDateTimeField46.getDurationField();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField49 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long52 = durationField49.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long54 = durationField49.getValueAsLong((long) 10);
        int int56 = durationField49.getValue((long) (byte) 10);
        boolean boolean57 = partial48.equals((java.lang.Object) durationField49);
        org.joda.time.Chronology chronology58 = partial48.getChronology();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        boolean boolean60 = partial48.isBefore((org.joda.time.ReadablePartial) partial59);
        java.util.Locale locale62 = null;
        java.lang.String str63 = partial59.toString("723", locale62);
        org.joda.time.Partial partial64 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField65 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long68 = durationField65.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long70 = durationField65.getValueAsLong((long) 10);
        int int72 = durationField65.getValue((long) (byte) 10);
        boolean boolean73 = partial64.equals((java.lang.Object) durationField65);
        org.joda.time.Chronology chronology74 = partial64.getChronology();
        org.joda.time.Partial partial75 = new org.joda.time.Partial();
        boolean boolean76 = partial64.isBefore((org.joda.time.ReadablePartial) partial75);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray77 = partial64.getFieldTypes();
        java.lang.Object obj78 = null;
        boolean boolean79 = partial64.equals(obj78);
        boolean boolean80 = partial59.isBefore((org.joda.time.ReadablePartial) partial64);
        org.joda.time.ReadableInterval readableInterval82 = null;
        org.joda.time.ReadableInterval readableInterval83 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval82);
        org.joda.time.Chronology chronology84 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval82);
        org.joda.time.DateTimeField dateTimeField85 = chronology84.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial86 = null;
        int[] intArray93 = new int[] { 53460006, ' ', (short) 100, 28531765, 53460006, 10 };
        int int94 = dateTimeField85.getMinimumValue(readablePartial86, intArray93);
        java.util.Locale locale96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray97 = unsupportedDateTimeField46.set((org.joda.time.ReadablePartial) partial64, 0, intArray93, "hours", locale96);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-210866846400000L) + "'", long32 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(readableInterval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 97L + "'", long41 == 97L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 291L + "'", long44 == 291L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10L + "'", long54 == 10L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "723" + "'", str63, "723");
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1L + "'", long68 == 1L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 10L + "'", long70 == 10L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(readableInterval83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[53460006, 32, 100, 28531765, 53460006, 10]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getDurationField();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology14.millis();
        org.joda.time.DurationField durationField17 = chronology14.centuries();
        org.joda.time.Chronology chronology18 = chronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField20 = chronology14.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField23 = new org.joda.time.field.OffsetDateTimeField(dateTimeField20, dateTimeFieldType21, (int) (short) 1);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField25 = new org.joda.time.field.OffsetDateTimeField(dateTimeField20, (-1));
        java.lang.String str27 = offsetDateTimeField25.getAsShortText(2173795348453L);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        org.joda.time.Chronology chronology38 = partial28.getChronology();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial28.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = partial28.getFieldTypes();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField43 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long46 = durationField43.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long48 = durationField43.getValueAsLong((long) 10);
        int int50 = durationField43.getValue((long) (byte) 10);
        boolean boolean51 = partial42.equals((java.lang.Object) durationField43);
        org.joda.time.Chronology chronology52 = partial42.getChronology();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = partial42.isBefore((org.joda.time.ReadablePartial) partial53);
        int int55 = partial28.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField57 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long60 = durationField57.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long62 = durationField57.getValueAsLong((long) 10);
        int int64 = durationField57.getValue((long) (byte) 10);
        boolean boolean65 = partial56.equals((java.lang.Object) durationField57);
        int int66 = partial42.compareTo((org.joda.time.ReadablePartial) partial56);
        int int67 = offsetDateTimeField25.getMinimumValue((org.joda.time.ReadablePartial) partial42);
        int[] intArray68 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int69 = unsupportedDateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) partial42, intArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "15" + "'", str27, "15");
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10L + "'", long48 == 10L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 10L + "'", long62 == 10L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField5 = zonedChronology4.secondOfDay();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone7 = zonedChronology4.getZone();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        int int27 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = partial0.getFieldTypes();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField30 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long33 = durationField30.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long35 = durationField30.getValueAsLong((long) 10);
        int int37 = durationField30.getValue((long) (byte) 10);
        boolean boolean38 = partial29.equals((java.lang.Object) durationField30);
        org.joda.time.Chronology chronology39 = partial29.getChronology();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        boolean boolean41 = partial29.isBefore((org.joda.time.ReadablePartial) partial40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = partial29.getFieldTypes();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField44 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long47 = durationField44.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long49 = durationField44.getValueAsLong((long) 10);
        int int51 = durationField44.getValue((long) (byte) 10);
        boolean boolean52 = partial43.equals((java.lang.Object) durationField44);
        org.joda.time.Chronology chronology53 = partial43.getChronology();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial43.isBefore((org.joda.time.ReadablePartial) partial54);
        int int56 = partial29.compareTo((org.joda.time.ReadablePartial) partial43);
        org.joda.time.Partial partial57 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField58 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long61 = durationField58.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long63 = durationField58.getValueAsLong((long) 10);
        int int65 = durationField58.getValue((long) (byte) 10);
        boolean boolean66 = partial57.equals((java.lang.Object) durationField58);
        int int67 = partial43.compareTo((org.joda.time.ReadablePartial) partial57);
        int[] intArray68 = partial57.getValues();
        org.joda.time.DurationFieldType durationFieldType69 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval70 = null;
        org.joda.time.ReadableInterval readableInterval71 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval70);
        org.joda.time.Chronology chronology72 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval70);
        org.joda.time.DateTimeField dateTimeField73 = chronology72.yearOfCentury();
        boolean boolean74 = durationFieldType69.isSupported(chronology72);
        org.joda.time.DurationField durationField75 = chronology72.halfdays();
        org.joda.time.DateTimeField dateTimeField76 = chronology72.weekyearOfCentury();
        org.joda.time.Partial partial77 = new org.joda.time.Partial(dateTimeFieldTypeArray28, intArray68, chronology72);
        org.joda.time.DurationFieldType durationFieldType78 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval79 = null;
        org.joda.time.ReadableInterval readableInterval80 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval79);
        org.joda.time.Chronology chronology81 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval79);
        org.joda.time.DateTimeField dateTimeField82 = chronology81.yearOfCentury();
        boolean boolean83 = durationFieldType78.isSupported(chronology81);
        org.joda.time.DurationField durationField84 = chronology81.halfdays();
        org.joda.time.DateTimeField dateTimeField85 = chronology81.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField90 = new org.joda.time.field.OffsetDateTimeField(dateTimeField85, dateTimeFieldType86, 4, (int) ' ', (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial92 = partial77.withField(dateTimeFieldType86, (-25200000));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekOfWeekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10L + "'", long49 == 10L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 10L + "'", long63 == 10L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertNotNull(readableInterval71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertNotNull(readableInterval80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.getDifferenceAsLong((-210861660779418L), 3600000L);
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField11 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long14 = durationField11.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long16 = durationField11.getValueAsLong((long) 10);
        int int18 = durationField11.getValue((long) (byte) 10);
        boolean boolean19 = partial10.equals((java.lang.Object) durationField11);
        org.joda.time.Chronology chronology20 = partial10.getChronology();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        boolean boolean22 = partial10.isBefore((org.joda.time.ReadablePartial) partial21);
        java.lang.String str23 = partial10.toStringList();
        boolean boolean24 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) partial10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = partial10.getFormatter();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.DurationField durationField31 = chronology28.centuries();
        org.joda.time.Chronology chronology32 = chronology28.withUTC();
        org.joda.time.DurationField durationField33 = chronology32.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(dateTimeField34, dateTimeFieldType35, 10);
        long long40 = dividedDateTimeField37.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval42 = null;
        org.joda.time.ReadableInterval readableInterval43 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval42);
        org.joda.time.Chronology chronology44 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval42);
        org.joda.time.DateTimeField dateTimeField45 = chronology44.yearOfCentury();
        org.joda.time.DurationField durationField46 = chronology44.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField47 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType41, durationField46);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField48 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField37, dateTimeFieldType41);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval50 = null;
        org.joda.time.ReadableInterval readableInterval51 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval50);
        org.joda.time.Chronology chronology52 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval50);
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfCentury();
        org.joda.time.DurationField durationField54 = chronology52.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField55 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType49, durationField54);
        long long58 = durationField54.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval60 = null;
        org.joda.time.ReadableInterval readableInterval61 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval60);
        org.joda.time.Chronology chronology62 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval60);
        org.joda.time.DateTimeField dateTimeField63 = chronology62.yearOfCentury();
        boolean boolean64 = durationFieldType59.isSupported(chronology62);
        org.joda.time.field.ScaledDurationField scaledDurationField66 = new org.joda.time.field.ScaledDurationField(durationField54, durationFieldType59, (int) 'a');
        long long67 = scaledDurationField66.getUnitMillis();
        long long70 = scaledDurationField66.getMillis((long) 3, 3600000L);
        boolean boolean71 = scaledDurationField66.isPrecise();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField72 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType41, (org.joda.time.DurationField) scaledDurationField66);
        org.joda.time.Partial partial73 = partial10.without(dateTimeFieldType41);
        // The following exception was thrown during execution in test generation
        try {
            int int74 = unsupportedDateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) partial73);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210861664379418L) + "'", long9 == (-210861664379418L));
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10L + "'", long16 == 10L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-30610224000000L) + "'", long40 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(readableInterval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(readableInterval51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-210866846400000L) + "'", long58 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertNotNull(readableInterval61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 97L + "'", long67 == 97L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 291L + "'", long70 == 291L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField72);
        org.junit.Assert.assertNotNull(partial73);
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        java.lang.String str13 = partial0.toStringList();
        boolean boolean14 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) partial0);
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.ReadableInterval readableInterval17 = null;
        boolean boolean18 = readableInterval16.contains(readableInterval17);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = readableInterval16.toPeriod(periodType19);
        org.joda.time.DateTime dateTime21 = readableInterval16.getEnd();
        org.joda.time.MutableInterval mutableInterval22 = readableInterval16.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.ReadableInterval readableInterval25 = null;
        boolean boolean26 = readableInterval24.contains(readableInterval25);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = readableInterval24.toPeriod(periodType27);
        org.joda.time.DateTime dateTime29 = readableInterval24.getEnd();
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.ReadableInterval readableInterval32 = null;
        boolean boolean33 = readableInterval31.contains(readableInterval32);
        boolean boolean34 = readableInterval24.overlaps(readableInterval31);
        boolean boolean35 = readableInterval16.contains(readableInterval31);
        org.joda.time.ReadableInterval readableInterval36 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField38 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long41 = durationField38.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long43 = durationField38.getValueAsLong((long) 10);
        int int45 = durationField38.getValue((long) (byte) 10);
        boolean boolean46 = partial37.equals((java.lang.Object) durationField38);
        org.joda.time.Chronology chronology47 = partial37.getChronology();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial37.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = partial37.getFieldTypes();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField52 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long55 = durationField52.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long57 = durationField52.getValueAsLong((long) 10);
        int int59 = durationField52.getValue((long) (byte) 10);
        boolean boolean60 = partial51.equals((java.lang.Object) durationField52);
        org.joda.time.Chronology chronology61 = partial51.getChronology();
        org.joda.time.Partial partial62 = new org.joda.time.Partial();
        boolean boolean63 = partial51.isBefore((org.joda.time.ReadablePartial) partial62);
        int int64 = partial37.compareTo((org.joda.time.ReadablePartial) partial51);
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField66 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long69 = durationField66.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long71 = durationField66.getValueAsLong((long) 10);
        int int73 = durationField66.getValue((long) (byte) 10);
        boolean boolean74 = partial65.equals((java.lang.Object) durationField66);
        int int75 = partial51.compareTo((org.joda.time.ReadablePartial) partial65);
        org.joda.time.ReadableInterval readableInterval76 = null;
        org.joda.time.ReadableInterval readableInterval77 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval76);
        org.joda.time.ReadableInterval readableInterval78 = null;
        boolean boolean79 = readableInterval77.contains(readableInterval78);
        org.joda.time.Duration duration80 = readableInterval77.toDuration();
        org.joda.time.DateTime dateTime81 = readableInterval77.getEnd();
        org.joda.time.DateTime dateTime82 = readableInterval77.getStart();
        org.joda.time.DateTime dateTime83 = partial65.toDateTime((org.joda.time.ReadableInstant) dateTime82);
        boolean boolean84 = readableInterval36.isBefore((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime85 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime83);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(readableInterval36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1L + "'", long55 == 1L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 10L + "'", long57 == 10L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L + "'", long69 == 1L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 10L + "'", long71 == 10L);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(readableInterval77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(dateTime85);
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str1 = dateTimeFieldType0.toString();
        java.lang.String str2 = dateTimeFieldType0.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfMonth" + "'", str1, "dayOfMonth");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "dayOfMonth" + "'", str2, "dayOfMonth");
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField11.getAsShortText(readablePartial23, (int) ' ', locale25);
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = null;
        java.lang.String str30 = dividedDateTimeField11.getAsText(readablePartial27, (int) (byte) 10, locale29);
        boolean boolean31 = dividedDateTimeField11.isSupported();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField33 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long36 = durationField33.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long38 = durationField33.getValueAsLong((long) 10);
        int int40 = durationField33.getValue((long) (byte) 10);
        boolean boolean41 = partial32.equals((java.lang.Object) durationField33);
        org.joda.time.Chronology chronology42 = partial32.getChronology();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial32.isBefore((org.joda.time.ReadablePartial) partial43);
        java.util.Locale locale46 = null;
        java.lang.String str47 = partial43.toString("723", locale46);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField49 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long52 = durationField49.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long54 = durationField49.getValueAsLong((long) 10);
        int int56 = durationField49.getValue((long) (byte) 10);
        boolean boolean57 = partial48.equals((java.lang.Object) durationField49);
        org.joda.time.Chronology chronology58 = partial48.getChronology();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        boolean boolean60 = partial48.isBefore((org.joda.time.ReadablePartial) partial59);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray61 = partial48.getFieldTypes();
        java.lang.Object obj62 = null;
        boolean boolean63 = partial48.equals(obj62);
        boolean boolean64 = partial43.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray65 = partial48.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval66 = null;
        org.joda.time.ReadableInterval readableInterval67 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval66);
        org.joda.time.Chronology chronology68 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval66);
        org.joda.time.DateTimeField dateTimeField69 = chronology68.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField70 = chronology68.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval71 = null;
        org.joda.time.ReadableInterval readableInterval72 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval71);
        org.joda.time.ReadableInterval readableInterval73 = null;
        boolean boolean74 = readableInterval72.contains(readableInterval73);
        org.joda.time.PeriodType periodType75 = null;
        org.joda.time.Period period76 = readableInterval72.toPeriod(periodType75);
        int[] intArray78 = chronology68.get((org.joda.time.ReadablePeriod) period76, (-210866846400000L));
        org.joda.time.Partial partial79 = partial48.minus((org.joda.time.ReadablePeriod) period76);
        org.joda.time.chrono.ISOChronology iSOChronology80 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField81 = iSOChronology80.minutes();
        org.joda.time.Partial partial82 = partial79.withChronologyRetainFields((org.joda.time.Chronology) iSOChronology80);
        java.util.Locale locale84 = null;
        java.lang.String str85 = dividedDateTimeField11.getAsText((org.joda.time.ReadablePartial) partial82, 551134, locale84);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "10" + "'", str30, "10");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "723" + "'", str47, "723");
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10L + "'", long54 == 10L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray65);
        org.junit.Assert.assertNotNull(readableInterval67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(readableInterval72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(partial79);
        org.junit.Assert.assertNotNull(iSOChronology80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(partial82);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "551134" + "'", str85, "551134");
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        boolean boolean25 = remainderDateTimeField22.isLenient();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str1 = dateTimeZone0.toString();
        java.lang.String str3 = dateTimeZone0.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeUtils.getZone(dateTimeZone0);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone5 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone4);
        java.lang.Object obj6 = null;
        boolean boolean7 = cachedDateTimeZone5.equals(obj6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        boolean boolean13 = durationFieldType8.isSupported(chronology11);
        org.joda.time.DurationField durationField14 = chronology11.eras();
        java.lang.String str15 = chronology11.toString();
        boolean boolean16 = cachedDateTimeZone5.equals((java.lang.Object) chronology11);
        org.joda.time.chrono.GregorianChronology gregorianChronology17 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) cachedDateTimeZone5);
        // The following exception was thrown during execution in test generation
        try {
            long long22 = gregorianChronology17.getDateTimeMillis(3, 17, (int) (short) 0, 28531765);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 17 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "UTC" + "'", str1, "UTC");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(cachedDateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[UTC]" + "'", str15, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(gregorianChronology17);
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        long long16 = dividedDateTimeField11.roundFloor(291L);
        boolean boolean17 = dividedDateTimeField11.isSupported();
        org.joda.time.DurationField durationField18 = dividedDateTimeField11.getDurationField();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField19 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11);
        org.joda.time.DurationField durationField20 = dividedDateTimeField11.getDurationField();
        java.lang.String str22 = dividedDateTimeField11.getAsShortText(1232572248000000L);
        long long24 = dividedDateTimeField11.roundHalfCeiling(1711909521766L);
        org.joda.time.chrono.ISOChronology iSOChronology25 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str27 = dateTimeZone26.toString();
        org.joda.time.Chronology chronology28 = iSOChronology25.withZone(dateTimeZone26);
        org.joda.time.Partial partial29 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology25);
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField31 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long34 = durationField31.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long36 = durationField31.getValueAsLong((long) 10);
        int int38 = durationField31.getValue((long) (byte) 10);
        boolean boolean39 = partial30.equals((java.lang.Object) durationField31);
        boolean boolean40 = partial29.isBefore((org.joda.time.ReadablePartial) partial30);
        java.util.Locale locale42 = null;
        java.lang.String str43 = dividedDateTimeField11.getAsText((org.joda.time.ReadablePartial) partial30, (int) (short) 100, locale42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField45 = partial30.getField((-25200000));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -25200000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "4102" + "'", str22, "4102");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1577836800000L + "'", long24 == 1577836800000L);
        org.junit.Assert.assertNotNull(iSOChronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10L + "'", long36 == 10L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "100" + "'", str43, "100");
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.secondOfDay();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekyear();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.era();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        int[] intArray1 = partial0.getValues();
        int int2 = partial0.size();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.ReadableInterval readableInterval5 = null;
        boolean boolean6 = readableInterval4.contains(readableInterval5);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = readableInterval4.toPeriod(periodType7);
        org.joda.time.Partial partial10 = partial0.withPeriodAdded((org.joda.time.ReadablePeriod) period8, (int) (short) 100);
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        org.joda.time.DurationField durationField15 = chronology13.millis();
        org.joda.time.DurationField durationField16 = chronology13.centuries();
        org.joda.time.Chronology chronology17 = chronology13.withUTC();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = chronology17.add(readablePeriod18, 0L, (int) (short) 10);
        org.joda.time.DateTimeField dateTimeField22 = chronology17.centuryOfEra();
        long long25 = dateTimeField22.add(1711909505822L, (int) (byte) -1);
        boolean boolean26 = partial10.equals((java.lang.Object) dateTimeField22);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField28 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long31 = durationField28.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long33 = durationField28.getValueAsLong((long) 10);
        int int35 = durationField28.getValue((long) (byte) 10);
        boolean boolean36 = partial27.equals((java.lang.Object) durationField28);
        org.joda.time.Chronology chronology37 = partial27.getChronology();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial27.isBefore((org.joda.time.ReadablePartial) partial38);
        java.util.Locale locale41 = null;
        java.lang.String str42 = partial38.toString("723", locale41);
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField44 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long47 = durationField44.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long49 = durationField44.getValueAsLong((long) 10);
        int int51 = durationField44.getValue((long) (byte) 10);
        boolean boolean52 = partial43.equals((java.lang.Object) durationField44);
        org.joda.time.Chronology chronology53 = partial43.getChronology();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        boolean boolean55 = partial43.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = partial43.getFieldTypes();
        java.lang.Object obj57 = null;
        boolean boolean58 = partial43.equals(obj57);
        boolean boolean59 = partial38.isBefore((org.joda.time.ReadablePartial) partial43);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray60 = partial43.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval61 = null;
        org.joda.time.ReadableInterval readableInterval62 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval61);
        org.joda.time.Chronology chronology63 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval61);
        org.joda.time.DateTimeField dateTimeField64 = chronology63.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField65 = chronology63.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval66 = null;
        org.joda.time.ReadableInterval readableInterval67 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval66);
        org.joda.time.ReadableInterval readableInterval68 = null;
        boolean boolean69 = readableInterval67.contains(readableInterval68);
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.Period period71 = readableInterval67.toPeriod(periodType70);
        int[] intArray73 = chronology63.get((org.joda.time.ReadablePeriod) period71, (-210866846400000L));
        org.joda.time.Partial partial74 = partial43.minus((org.joda.time.ReadablePeriod) period71);
        org.joda.time.chrono.ISOChronology iSOChronology75 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField76 = iSOChronology75.minutes();
        org.joda.time.Partial partial77 = partial74.withChronologyRetainFields((org.joda.time.Chronology) iSOChronology75);
        org.joda.time.Partial partial78 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField79 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long82 = durationField79.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long84 = durationField79.getValueAsLong((long) 10);
        int int86 = durationField79.getValue((long) (byte) 10);
        boolean boolean87 = partial78.equals((java.lang.Object) durationField79);
        org.joda.time.Chronology chronology88 = partial78.getChronology();
        org.joda.time.Partial partial89 = new org.joda.time.Partial();
        boolean boolean90 = partial78.isBefore((org.joda.time.ReadablePartial) partial89);
        java.lang.String str91 = partial78.toStringList();
        boolean boolean92 = partial74.isBefore((org.joda.time.ReadablePartial) partial78);
        boolean boolean93 = partial10.isEqual((org.joda.time.ReadablePartial) partial78);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1443850494178L) + "'", long25 == (-1443850494178L));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "723" + "'", str42, "723");
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1L + "'", long47 == 1L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10L + "'", long49 == 10L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray60);
        org.junit.Assert.assertNotNull(readableInterval62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(readableInterval67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(iSOChronology75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(partial77);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1L + "'", long82 == 1L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 10L + "'", long84 == 10L);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10 + "'", int86 == 10);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "[]" + "'", str91, "[]");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.DurationField durationField23 = remainderDateTimeField22.getDurationField();
        int int24 = remainderDateTimeField22.getDivisor();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        boolean boolean3 = readableInterval1.contains(readableInterval2);
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str6 = dateTimeFieldType5.toString();
        org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField8 = iSOChronology7.minutes();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str10 = dateTimeZone9.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology11 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology7, dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = zonedChronology11.getZone();
        boolean boolean13 = dateTimeFieldType5.isSupported((org.joda.time.Chronology) zonedChronology11);
        org.joda.time.DateTimeField dateTimeField14 = zonedChronology11.dayOfMonth();
        org.joda.time.DurationField durationField15 = zonedChronology11.weeks();
        org.joda.time.DateTimeField dateTimeField16 = zonedChronology11.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = zonedChronology11.getZone();
        org.joda.time.chrono.ZonedChronology zonedChronology18 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone17);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "dayOfMonth" + "'", str6, "dayOfMonth");
        org.junit.Assert.assertNotNull(iSOChronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(zonedChronology18);
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        long long2 = readableInterval1.getStartMillis();
        org.joda.time.ReadableInterval readableInterval3 = null;
        boolean boolean4 = readableInterval1.isAfter(readableInterval3);
        org.joda.time.Interval interval5 = readableInterval1.toInterval();
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.ReadableInterval readableInterval7 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval6);
        long long8 = readableInterval7.getStartMillis();
        org.joda.time.ReadableInterval readableInterval9 = null;
        boolean boolean10 = readableInterval7.isAfter(readableInterval9);
        org.joda.time.Interval interval11 = readableInterval7.toInterval();
        org.joda.time.Duration duration12 = interval11.toDuration();
        boolean boolean13 = readableInterval1.isBefore((org.joda.time.ReadableInterval) interval11);
        org.junit.Assert.assertNotNull(readableInterval1);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 5727502326003L + "'", long2 == 5727502326003L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(readableInterval7);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 5727502326003L + "'", long8 == 5727502326003L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getDurationField();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = unsupportedDateTimeField6.isLeap((long) 52);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test298");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        int int27 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        int int38 = partial14.compareTo((org.joda.time.ReadablePartial) partial28);
        int[] intArray39 = partial28.getValues();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField41 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long44 = durationField41.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long46 = durationField41.getValueAsLong((long) 10);
        int int48 = durationField41.getValue((long) (byte) 10);
        boolean boolean49 = partial40.equals((java.lang.Object) durationField41);
        boolean boolean50 = partial28.isBefore((org.joda.time.ReadablePartial) partial40);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = partial40.getValue(52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test299");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        long long16 = dividedDateTimeField11.roundFloor(291L);
        int int17 = dividedDateTimeField11.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str19 = dateTimeFieldType18.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField20 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial22 = new org.joda.time.Partial(dateTimeFieldType18, 297);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 297 for dayOfMonth must not be larger than 31");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "dayOfMonth" + "'", str19, "dayOfMonth");
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test300");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str1 = dateTimeFieldType0.toString();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology6 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology2, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = zonedChronology6.getZone();
        boolean boolean8 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) zonedChronology6);
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology6.hourOfDay();
        org.joda.time.Partial partial10 = new org.joda.time.Partial();
        int[] intArray11 = partial10.getValues();
        int int12 = partial10.size();
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.ReadableInterval readableInterval14 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval13);
        org.joda.time.ReadableInterval readableInterval15 = null;
        boolean boolean16 = readableInterval14.contains(readableInterval15);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = readableInterval14.toPeriod(periodType17);
        org.joda.time.Partial partial20 = partial10.withPeriodAdded((org.joda.time.ReadablePeriod) period18, (int) (short) 100);
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval21);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfCentury();
        org.joda.time.DurationField durationField25 = chronology23.millis();
        org.joda.time.DurationField durationField26 = chronology23.centuries();
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.ReadableInterval readableInterval28 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval27);
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval27);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DurationField durationField31 = chronology29.millis();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.ReadableInterval readableInterval34 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval33);
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval33);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        org.joda.time.ReadableInterval readableInterval40 = null;
        boolean boolean41 = readableInterval39.contains(readableInterval40);
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Period period43 = readableInterval39.toPeriod(periodType42);
        int[] intArray45 = chronology35.get((org.joda.time.ReadablePeriod) period43, (-210866846400000L));
        int[] intArray48 = chronology29.get((org.joda.time.ReadablePeriod) period43, 2173795348453L, (long) 1439);
        int[] intArray51 = chronology23.get((org.joda.time.ReadablePeriod) period43, 291L, 2580171L);
        org.joda.time.Partial partial53 = partial20.withPeriodAdded((org.joda.time.ReadablePeriod) period43, 0);
        int[] intArray56 = zonedChronology6.get((org.joda.time.ReadablePeriod) period43, 1396290306792L, (long) 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfMonth" + "'", str1, "dayOfMonth");
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(readableInterval14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(partial20);
        org.junit.Assert.assertNotNull(readableInterval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(readableInterval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(readableInterval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(readableInterval39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-44, -2, -4, -2, -18, -25, -6, -788]");
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test301");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField5 = zonedChronology4.secondOfDay();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = zonedChronology4.getDateTimeMillis(8446, (int) '4', 0, 323506);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test302");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str11 = dateTimeZone10.toString();
        org.joda.time.Chronology chronology12 = iSOChronology9.withZone(dateTimeZone10);
        org.joda.time.Partial partial13 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology9);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        boolean boolean24 = partial13.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = partial13.getFields();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.ReadableInterval readableInterval28 = null;
        boolean boolean29 = readableInterval27.contains(readableInterval28);
        org.joda.time.Duration duration30 = readableInterval27.toDuration();
        org.joda.time.DateTime dateTime31 = readableInterval27.getEnd();
        org.joda.time.Period period32 = readableInterval27.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant34 = null;
        int int35 = dateTimeZone33.getOffset(readableInstant34);
        java.util.TimeZone timeZone36 = dateTimeZone33.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        org.joda.time.ReadableInterval readableInterval40 = null;
        boolean boolean41 = readableInterval39.contains(readableInterval40);
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Period period43 = readableInterval39.toPeriod(periodType42);
        org.joda.time.DateTime dateTime44 = readableInterval39.getEnd();
        int int45 = dateTimeZone37.getOffset((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean46 = readableInterval27.isBefore((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = partial13.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        java.util.Locale locale48 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) partial13, locale48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfEra' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(iSOChronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(readableInterval39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test303");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        long long2 = readableInterval1.getStartMillis();
        org.joda.time.ReadableInterval readableInterval3 = null;
        boolean boolean4 = readableInterval1.isAfter(readableInterval3);
        org.joda.time.Interval interval5 = readableInterval1.toInterval();
        org.joda.time.Duration duration6 = interval5.toDuration();
        long long7 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration6);
        org.junit.Assert.assertNotNull(readableInterval1);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 5727502327845L + "'", long2 == 5727502327845L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test304");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.ReadableInterval readableInterval6 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval5);
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = readableInterval6.contains(readableInterval7);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = readableInterval6.toPeriod(periodType9);
        org.joda.time.DateTime dateTime11 = readableInterval6.getEnd();
        org.joda.time.MutableInterval mutableInterval12 = readableInterval6.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.ReadableInterval readableInterval14 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval13);
        org.joda.time.ReadableInterval readableInterval15 = null;
        boolean boolean16 = readableInterval14.contains(readableInterval15);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = readableInterval14.toPeriod(periodType17);
        org.joda.time.DateTime dateTime19 = readableInterval14.getEnd();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        boolean boolean24 = readableInterval14.overlaps(readableInterval21);
        boolean boolean25 = readableInterval6.contains(readableInterval21);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.DateTimeUtils.getPeriodType(periodType26);
        org.joda.time.PeriodType periodType28 = org.joda.time.DateTimeUtils.getPeriodType(periodType27);
        org.joda.time.Period period29 = readableInterval6.toPeriod(periodType28);
        int[] intArray32 = zonedChronology4.get((org.joda.time.ReadablePeriod) period29, (-53459996L), 27647338425L);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone37 = new org.joda.time.tz.FixedDateTimeZone("hi!", "53460006", (int) (short) 100, 29227899);
        boolean boolean38 = zonedChronology4.equals((java.lang.Object) (short) 100);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(readableInterval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertNotNull(readableInterval14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 10, 2, 2, 14, 39, 58, 421]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test305");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.secondOfDay();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.weekyear();
        org.joda.time.DurationField durationField4 = iSOChronology0.seconds();
        org.joda.time.DurationField durationField5 = iSOChronology0.minutes();
        org.joda.time.Chronology chronology6 = iSOChronology0.withUTC();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test306");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.Partial partial1 = new org.joda.time.Partial(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField8 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType2, durationField7);
        long long11 = unsupportedDateTimeField8.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = unsupportedDateTimeField8.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = unsupportedDateTimeField8.getType();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = partial1.get(dateTimeFieldType13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4L + "'", long11 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test307");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, (java.lang.Number) 60035L, "");
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType0.getDurationType();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField5 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType6.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField9 = new org.joda.time.field.PreciseDurationField(durationFieldType7, 28531825L);
        long long12 = preciseDurationField9.getMillis(60035L, (-210866846400000L));
        boolean boolean13 = preciseDurationField9.isPrecise();
        boolean boolean14 = preciseDurationField9.isSupported();
        int int15 = unsupportedDurationField5.compareTo((org.joda.time.DurationField) preciseDurationField9);
        boolean boolean16 = unsupportedDurationField5.isSupported();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = unsupportedDurationField5.getValue(5727502324347L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: hours field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(unsupportedDurationField5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1712908113875L + "'", long12 == 1712908113875L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test308");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.halfdayOfDay();
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval7);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.joda.time.DurationField durationField12 = chronology9.centuries();
        org.joda.time.Chronology chronology13 = chronology9.withUTC();
        org.joda.time.DurationField durationField14 = chronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField18 = new org.joda.time.field.DividedDateTimeField(dateTimeField15, dateTimeFieldType16, 10);
        long long21 = dividedDateTimeField18.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval23);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        org.joda.time.DurationField durationField27 = chronology25.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField28 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType22, durationField27);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField29 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField18, dateTimeFieldType22);
        long long31 = remainderDateTimeField29.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.ReadableInterval readableInterval34 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval33);
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval33);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfCentury();
        org.joda.time.DurationField durationField37 = chronology35.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField38 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType32, durationField37);
        long long41 = unsupportedDateTimeField38.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = unsupportedDateTimeField38.getType();
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType42.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField44 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField29, dateTimeFieldType42);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology47 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField48 = iSOChronology47.minutes();
        org.joda.time.DateTimeField dateTimeField49 = iSOChronology47.millisOfDay();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology47.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField51 = iSOChronology47.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology47.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology47.halfdayOfDay();
        org.joda.time.Partial partial54 = new org.joda.time.Partial(dateTimeFieldType45, 10, (org.joda.time.Chronology) iSOChronology47);
        int int55 = dividedDateTimeField44.getMaximumValue((org.joda.time.ReadablePartial) partial54);
        long long57 = iSOChronology0.set((org.joda.time.ReadablePartial) partial54, 60035L);
        // The following exception was thrown during execution in test generation
        try {
            long long63 = iSOChronology0.getDateTimeMillis(0L, (-196), 97, 7330, 1439);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -196 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-30610224000000L) + "'", long21 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(readableInterval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 4L + "'", long41 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(iSOChronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 29227899 + "'", int55 == 29227899);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 5443260035L + "'", long57 == 5443260035L);
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test309");
        org.joda.time.DateTimeField dateTimeField0 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology3 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField4 = iSOChronology3.minutes();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology3.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology3.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology3.halfdayOfDay();
        org.joda.time.Partial partial10 = new org.joda.time.Partial(dateTimeFieldType1, 10, (org.joda.time.Chronology) iSOChronology3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.DividedDateTimeField dividedDateTimeField12 = new org.joda.time.field.DividedDateTimeField(dateTimeField0, dateTimeFieldType1, 5682);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(iSOChronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test310");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial2 = new org.joda.time.Partial(dateTimeFieldType0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test311");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        java.lang.String str13 = partial0.toStringList();
        boolean boolean14 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) partial0);
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.ReadableInterval readableInterval17 = null;
        boolean boolean18 = readableInterval16.contains(readableInterval17);
        org.joda.time.Duration duration19 = readableInterval16.toDuration();
        org.joda.time.DateTime dateTime20 = readableInterval16.getEnd();
        org.joda.time.DateTime dateTime21 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test312");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone1 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.clockhourOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test313");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str4 = dateTimeZone3.toString();
        java.lang.String str6 = dateTimeZone3.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeUtils.getZone(dateTimeZone3);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone8 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone8);
        org.joda.time.DurationField durationField10 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = iSOChronology0.dayOfYear();
        java.lang.String str15 = dateTimeField13.getAsShortText((long) 4);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(cachedDateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test314");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DurationField durationField6 = zonedChronology4.centuries();
        org.joda.time.DateTimeField dateTimeField7 = zonedChronology4.dayOfMonth();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str12 = dateTimeZone11.toString();
        java.lang.String str14 = dateTimeZone11.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeUtils.getZone(dateTimeZone11);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone16 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = iSOChronology8.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone16);
        int int19 = cachedDateTimeZone16.getOffset((long) ' ');
        org.joda.time.Chronology chronology20 = zonedChronology4.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone16);
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology4.era();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology4.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long30 = zonedChronology4.getDateTimeMillis((int) (short) -1, (int) (byte) 10, 24, 2848689, 29227999, 24, 22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2848689 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(cachedDateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test315");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        int int2 = gregorianChronology1.getMinimumDaysInFirstWeek();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test316");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField5 = zonedChronology4.secondOfDay();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        int[] intArray7 = partial6.getValues();
        int int8 = partial6.size();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.ReadableInterval readableInterval11 = null;
        boolean boolean12 = readableInterval10.contains(readableInterval11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = readableInterval10.toPeriod(periodType13);
        org.joda.time.Partial partial16 = partial6.withPeriodAdded((org.joda.time.ReadablePeriod) period14, (int) (short) 100);
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.ReadableInterval readableInterval18 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval17);
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval17);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DurationField durationField21 = chronology19.millis();
        org.joda.time.DurationField durationField22 = chronology19.centuries();
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval23);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        org.joda.time.DurationField durationField27 = chronology25.millis();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval29);
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.ReadableInterval readableInterval35 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval34);
        org.joda.time.ReadableInterval readableInterval36 = null;
        boolean boolean37 = readableInterval35.contains(readableInterval36);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = readableInterval35.toPeriod(periodType38);
        int[] intArray41 = chronology31.get((org.joda.time.ReadablePeriod) period39, (-210866846400000L));
        int[] intArray44 = chronology25.get((org.joda.time.ReadablePeriod) period39, 2173795348453L, (long) 1439);
        int[] intArray47 = chronology19.get((org.joda.time.ReadablePeriod) period39, 291L, 2580171L);
        org.joda.time.Partial partial49 = partial16.withPeriodAdded((org.joda.time.ReadablePeriod) period39, 0);
        int[] intArray52 = zonedChronology4.get((org.joda.time.ReadablePeriod) period39, (-210863520000000L), 315511200000L);
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology4.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long59 = zonedChronology4.getDateTimeMillis(1396290305822L, 4, 8, 471, 28531765);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 471 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(readableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(readableInterval35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[6691, 11, 4, 2, 18, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTimeField53);
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test317");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField14 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType8, durationField13);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField7, dateTimeFieldType8);
        int int17 = zeroIsMaxDateTimeField15.getLeapAmount(1711909507403L);
        boolean boolean19 = zeroIsMaxDateTimeField15.isLeap(9003755385792000000L);
        int int20 = zeroIsMaxDateTimeField15.getMaximumValue();
        int int22 = zeroIsMaxDateTimeField15.getMinimumValue(432000032L);
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str25 = dateTimeZone24.toString();
        org.joda.time.Chronology chronology26 = iSOChronology23.withZone(dateTimeZone24);
        org.joda.time.Partial partial27 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology23);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        boolean boolean38 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        int int39 = zeroIsMaxDateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) partial27);
        long long41 = zeroIsMaxDateTimeField15.roundCeiling(1893417120000000L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1893417120000000L + "'", long41 == 1893417120000000L);
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test318");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        int int13 = unsupportedDateTimeField6.getDifference((long) (byte) 10, 10L);
        long long16 = unsupportedDateTimeField6.add((long) 197, 2835106217L);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = unsupportedDateTimeField6.get(1711909521774L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2835106414L + "'", long16 == 2835106414L);
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test319");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DurationField durationField6 = zonedChronology4.centuries();
        org.joda.time.DateTimeField dateTimeField7 = zonedChronology4.dayOfMonth();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str12 = dateTimeZone11.toString();
        java.lang.String str14 = dateTimeZone11.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeUtils.getZone(dateTimeZone11);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone16 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = iSOChronology8.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone16);
        int int19 = cachedDateTimeZone16.getOffset((long) ' ');
        org.joda.time.Chronology chronology20 = zonedChronology4.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone16);
        java.lang.String str22 = cachedDateTimeZone16.getNameKey((-58877480091246L));
        org.joda.time.chrono.GregorianChronology gregorianChronology23 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) cachedDateTimeZone16);
        java.lang.String str24 = gregorianChronology23.toString();
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology23.centuryOfEra();
        org.joda.time.Chronology chronology26 = gregorianChronology23.withUTC();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(cachedDateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(gregorianChronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GregorianChronology[UTC]" + "'", str24, "GregorianChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology26);
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test320");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        int int27 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.ReadableInterval readableInterval29 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval28);
        org.joda.time.ReadableInterval readableInterval30 = null;
        boolean boolean31 = readableInterval29.contains(readableInterval30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = readableInterval29.toPeriod(periodType32);
        org.joda.time.DateTime dateTime34 = readableInterval29.getEnd();
        org.joda.time.MutableInterval mutableInterval35 = readableInterval29.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.ReadableInterval readableInterval37 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval36);
        org.joda.time.ReadableInterval readableInterval38 = null;
        boolean boolean39 = readableInterval37.contains(readableInterval38);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = readableInterval37.toPeriod(periodType40);
        org.joda.time.DateTime dateTime42 = readableInterval37.getEnd();
        org.joda.time.ReadableInterval readableInterval43 = null;
        org.joda.time.ReadableInterval readableInterval44 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval43);
        org.joda.time.ReadableInterval readableInterval45 = null;
        boolean boolean46 = readableInterval44.contains(readableInterval45);
        boolean boolean47 = readableInterval37.overlaps(readableInterval44);
        boolean boolean48 = readableInterval29.contains(readableInterval44);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.PeriodType periodType50 = org.joda.time.DateTimeUtils.getPeriodType(periodType49);
        org.joda.time.PeriodType periodType51 = org.joda.time.DateTimeUtils.getPeriodType(periodType50);
        org.joda.time.Period period52 = readableInterval29.toPeriod(periodType51);
        org.joda.time.Partial partial53 = partial0.plus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval55 = null;
        org.joda.time.ReadableInterval readableInterval56 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval55);
        org.joda.time.Chronology chronology57 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval55);
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfCentury();
        org.joda.time.DurationField durationField59 = chronology57.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField60 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType54, durationField59);
        long long63 = durationField59.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval65 = null;
        org.joda.time.ReadableInterval readableInterval66 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval65);
        org.joda.time.Chronology chronology67 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval65);
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfCentury();
        boolean boolean69 = durationFieldType64.isSupported(chronology67);
        org.joda.time.field.ScaledDurationField scaledDurationField71 = new org.joda.time.field.ScaledDurationField(durationField59, durationFieldType64, (int) 'a');
        org.joda.time.DurationField durationField72 = scaledDurationField71.getWrappedField();
        boolean boolean73 = scaledDurationField71.isSupported();
        long long76 = scaledDurationField71.getMillis((-1), 1711909506613L);
        long long78 = scaledDurationField71.getValueAsLong((long) 1439);
        long long81 = scaledDurationField71.add(1396290305822L, (long) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType82 = scaledDurationField71.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial84 = partial0.withFieldAdded(durationFieldType82, 2848689);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hours' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(readableInterval29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertNotNull(readableInterval37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(readableInterval44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(readableInterval56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-210866846400000L) + "'", long63 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertNotNull(readableInterval66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-97L) + "'", long76 == (-97L));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 14L + "'", long78 == 14L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1396290306792L + "'", long81 == 1396290306792L);
        org.junit.Assert.assertNotNull(durationFieldType82);
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test321");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.getDifferenceAsLong((long) (short) 100, (-30610224000000L));
        long long12 = unsupportedDateTimeField6.add((-210866846400000L), 166055223611306L);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField14 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long17 = durationField14.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long19 = durationField14.getValueAsLong((long) 10);
        int int21 = durationField14.getValue((long) (byte) 10);
        boolean boolean22 = partial13.equals((java.lang.Object) durationField14);
        org.joda.time.Chronology chronology23 = partial13.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Partial partial26 = partial13.with(dateTimeFieldType24, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.RemainderDateTimeField remainderDateTimeField28 = new org.joda.time.field.RemainderDateTimeField((org.joda.time.DateTimeField) unsupportedDateTimeField6, dateTimeFieldType24, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field must be supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 30610224000100L + "'", long9 == 30610224000100L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-44811622788694L) + "'", long12 == (-44811622788694L));
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(partial26);
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test322");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        int int27 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        int int38 = partial14.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.ReadableInterval readableInterval39 = null;
        org.joda.time.ReadableInterval readableInterval40 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval39);
        long long41 = readableInterval40.getStartMillis();
        org.joda.time.ReadableInterval readableInterval42 = null;
        org.joda.time.ReadableInterval readableInterval43 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval42);
        org.joda.time.ReadableInterval readableInterval44 = null;
        boolean boolean45 = readableInterval43.contains(readableInterval44);
        org.joda.time.Duration duration46 = readableInterval43.toDuration();
        org.joda.time.DateTime dateTime47 = readableInterval43.getEnd();
        boolean boolean48 = readableInterval40.contains((org.joda.time.ReadableInstant) dateTime47);
        long long49 = org.joda.time.DateTimeUtils.getInstantMillis((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Chronology chronology50 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime51 = partial14.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Chronology chronology52 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime47);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(readableInterval40);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 5727502336049L + "'", long41 == 5727502336049L);
        org.junit.Assert.assertNotNull(readableInterval43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 5727502336050L + "'", long49 == 5727502336050L);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test323");
        org.joda.time.JodaTimePermission jodaTimePermission1 = new org.joda.time.JodaTimePermission("302");
        org.joda.time.JodaTimePermission jodaTimePermission3 = new org.joda.time.JodaTimePermission("100");
        org.joda.time.JodaTimePermission jodaTimePermission5 = new org.joda.time.JodaTimePermission("100");
        java.lang.String str6 = jodaTimePermission5.toString();
        java.security.PermissionCollection permissionCollection7 = jodaTimePermission5.newPermissionCollection();
        boolean boolean8 = jodaTimePermission3.implies((java.security.Permission) jodaTimePermission5);
        boolean boolean9 = jodaTimePermission1.implies((java.security.Permission) jodaTimePermission5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(\"org.joda.time.JodaTimePermission\" \"100\")" + "'", str6, "(\"org.joda.time.JodaTimePermission\" \"100\")");
        org.junit.Assert.assertNotNull(permissionCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test324");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = unsupportedDateTimeField6.getType();
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getDurationField();
        org.joda.time.DurationField durationField12 = unsupportedDateTimeField6.getRangeDurationField();
        org.joda.time.DurationField durationField13 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.ReadableInterval readableInterval15 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval14);
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval14);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfCentury();
        org.joda.time.DurationField durationField18 = chronology16.millis();
        org.joda.time.DurationField durationField19 = chronology16.centuries();
        org.joda.time.Chronology chronology20 = chronology16.withUTC();
        org.joda.time.DurationField durationField21 = chronology20.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField25 = new org.joda.time.field.DividedDateTimeField(dateTimeField22, dateTimeFieldType23, 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.DividedDateTimeField dividedDateTimeField27 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) unsupportedDateTimeField6, dateTimeFieldType23, 24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field must be supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNull(durationField12);
        org.junit.Assert.assertNull(durationField13);
        org.junit.Assert.assertNotNull(readableInterval15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test325");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        int int27 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str29 = dateTimeZone28.toString();
        java.lang.String str31 = dateTimeZone28.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeUtils.getZone(dateTimeZone28);
        boolean boolean33 = partial14.equals((java.lang.Object) dateTimeZone32);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField35 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long38 = durationField35.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long40 = durationField35.getValueAsLong((long) 10);
        int int42 = durationField35.getValue((long) (byte) 10);
        boolean boolean43 = partial34.equals((java.lang.Object) durationField35);
        org.joda.time.Chronology chronology44 = partial34.getChronology();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial34.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = partial34.getFieldTypes();
        org.joda.time.chrono.ISOChronology iSOChronology48 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField49 = iSOChronology48.minutes();
        org.joda.time.DateTimeField dateTimeField50 = iSOChronology48.millisOfDay();
        org.joda.time.DateTimeField dateTimeField51 = iSOChronology48.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology48.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology48.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology48.halfdayOfDay();
        org.joda.time.Partial partial55 = partial34.withChronologyRetainFields((org.joda.time.Chronology) iSOChronology48);
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology48.clockhourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = dateTimeField56.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial59 = partial14.with(dateTimeFieldType57, 53460006);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53460006 for clockhourOfDay must not be larger than 24");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNotNull(iSOChronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test326");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = chronology6.add(readablePeriod7, 0L, (int) (short) 10);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.clockhourOfHalfday();
        long long14 = dateTimeField11.addWrapField(0L, 1);
        long long17 = dateTimeField11.add(0L, (int) 'a');
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField19 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long22 = durationField19.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long24 = durationField19.getValueAsLong((long) 10);
        int int26 = durationField19.getValue((long) (byte) 10);
        boolean boolean27 = partial18.equals((java.lang.Object) durationField19);
        org.joda.time.Chronology chronology28 = partial18.getChronology();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        boolean boolean30 = partial18.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = partial18.getFieldTypes();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField33 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long36 = durationField33.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long38 = durationField33.getValueAsLong((long) 10);
        int int40 = durationField33.getValue((long) (byte) 10);
        boolean boolean41 = partial32.equals((java.lang.Object) durationField33);
        org.joda.time.Chronology chronology42 = partial32.getChronology();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial32.isBefore((org.joda.time.ReadablePartial) partial43);
        int int45 = partial18.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField47 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long50 = durationField47.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long52 = durationField47.getValueAsLong((long) 10);
        int int54 = durationField47.getValue((long) (byte) 10);
        boolean boolean55 = partial46.equals((java.lang.Object) durationField47);
        int int56 = partial32.compareTo((org.joda.time.ReadablePartial) partial46);
        java.util.Locale locale58 = null;
        java.lang.String str59 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) partial46, 53460006, locale58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval61 = null;
        org.joda.time.ReadableInterval readableInterval62 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval61);
        org.joda.time.Chronology chronology63 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval61);
        org.joda.time.DateTimeField dateTimeField64 = chronology63.yearOfCentury();
        org.joda.time.DurationField durationField65 = chronology63.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField66 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType60, durationField65);
        long long69 = durationField65.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval71 = null;
        org.joda.time.ReadableInterval readableInterval72 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval71);
        org.joda.time.Chronology chronology73 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval71);
        org.joda.time.DateTimeField dateTimeField74 = chronology73.yearOfCentury();
        boolean boolean75 = durationFieldType70.isSupported(chronology73);
        org.joda.time.field.ScaledDurationField scaledDurationField77 = new org.joda.time.field.ScaledDurationField(durationField65, durationFieldType70, (int) 'a');
        org.joda.time.DurationField durationField78 = scaledDurationField77.getWrappedField();
        boolean boolean79 = scaledDurationField77.isSupported();
        org.joda.time.DurationField durationField80 = scaledDurationField77.getWrappedField();
        org.joda.time.DurationFieldType durationFieldType81 = scaledDurationField77.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial83 = partial46.withFieldAdded(durationFieldType81, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hours' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 3600000L + "'", long14 == 3600000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 349200000L + "'", long17 == 349200000L);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10L + "'", long52 == 10L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "53460006" + "'", str59, "53460006");
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(readableInterval62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField66);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-210866846400000L) + "'", long69 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertNotNull(readableInterval72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(durationFieldType81);
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test327");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        int int13 = unsupportedDateTimeField6.getDifference((long) (byte) 10, 10L);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = partial14.getFieldTypes();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        org.joda.time.Chronology chronology38 = partial28.getChronology();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial28.isBefore((org.joda.time.ReadablePartial) partial39);
        int int41 = partial14.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField43 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long46 = durationField43.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long48 = durationField43.getValueAsLong((long) 10);
        int int50 = durationField43.getValue((long) (byte) 10);
        boolean boolean51 = partial42.equals((java.lang.Object) durationField43);
        int int52 = partial28.compareTo((org.joda.time.ReadablePartial) partial42);
        int[] intArray53 = partial42.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int int54 = unsupportedDateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) partial42);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10L + "'", long48 == 10L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test328");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.year();
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField6 = iSOChronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str8 = dateTimeZone7.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology9 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology5, dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = zonedChronology9.getZone();
        org.joda.time.DurationField durationField11 = zonedChronology9.centuries();
        org.joda.time.DateTimeField dateTimeField12 = zonedChronology9.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone13 = zonedChronology9.getZone();
        boolean boolean14 = iSOChronology0.equals((java.lang.Object) zonedChronology9);
        org.joda.time.DurationField durationField15 = zonedChronology9.millis();
        java.lang.Class<?> wildcardClass16 = durationField15.getClass();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test329");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.secondOfDay();
        long long9 = dateTimeField6.add(29227899L, (long) 7330);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeField6.getAsText(1711938393597L, locale11);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 36557899L + "'", long9 == 36557899L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8793" + "'", str12, "8793");
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test330");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, (java.lang.Number) 60035L, "");
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType0.getDurationType();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField5 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType4);
        boolean boolean6 = unsupportedDurationField5.isSupported();
        // The following exception was thrown during execution in test generation
        try {
            long long8 = unsupportedDurationField5.getMillis((-210863490802402L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: hours field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(unsupportedDurationField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test331");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeZone dateTimeZone1 = gregorianChronology0.getZone();
        org.joda.time.Chronology chronology2 = gregorianChronology0.withUTC();
        java.lang.String str3 = gregorianChronology0.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long8 = gregorianChronology0.getDateTimeMillis(29227899, 12, (int) '#', (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GregorianChronology[UTC]" + "'", str3, "GregorianChronology[UTC]");
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test332");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        int[] intArray14 = partial0.getValues();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DurationField durationField19 = chronology17.millis();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval21);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.ReadableInterval readableInterval28 = null;
        boolean boolean29 = readableInterval27.contains(readableInterval28);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = readableInterval27.toPeriod(periodType30);
        int[] intArray33 = chronology23.get((org.joda.time.ReadablePeriod) period31, (-210866846400000L));
        int[] intArray36 = chronology17.get((org.joda.time.ReadablePeriod) period31, 2173795348453L, (long) 1439);
        org.joda.time.Partial partial37 = partial0.plus((org.joda.time.ReadablePeriod) period31);
        int int38 = partial37.size();
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(readableInterval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(partial37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test333");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.seconds();
        org.joda.time.DurationField durationField5 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField7 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.era();
        org.joda.time.DurationField durationField9 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.secondOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test334");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone1 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.minuteOfDay();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        int[] intArray4 = partial3.getValues();
        int int5 = partial3.size();
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.ReadableInterval readableInterval7 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval6);
        org.joda.time.ReadableInterval readableInterval8 = null;
        boolean boolean9 = readableInterval7.contains(readableInterval8);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = readableInterval7.toPeriod(periodType10);
        org.joda.time.Partial partial13 = partial3.withPeriodAdded((org.joda.time.ReadablePeriod) period11, (int) (short) 100);
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.ReadableInterval readableInterval15 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval14);
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval14);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfCentury();
        org.joda.time.DurationField durationField18 = chronology16.millis();
        org.joda.time.DurationField durationField19 = chronology16.centuries();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval20);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfCentury();
        org.joda.time.DurationField durationField24 = chronology22.millis();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.ReadableInterval readableInterval32 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval31);
        org.joda.time.ReadableInterval readableInterval33 = null;
        boolean boolean34 = readableInterval32.contains(readableInterval33);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = readableInterval32.toPeriod(periodType35);
        int[] intArray38 = chronology28.get((org.joda.time.ReadablePeriod) period36, (-210866846400000L));
        int[] intArray41 = chronology22.get((org.joda.time.ReadablePeriod) period36, 2173795348453L, (long) 1439);
        int[] intArray44 = chronology16.get((org.joda.time.ReadablePeriod) period36, 291L, 2580171L);
        org.joda.time.Partial partial46 = partial13.withPeriodAdded((org.joda.time.ReadablePeriod) period36, 0);
        java.util.Locale locale48 = null;
        java.lang.String str49 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) partial46, (-1), locale48);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(readableInterval7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(partial13);
        org.junit.Assert.assertNotNull(readableInterval15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(readableInterval32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(partial46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "-1" + "'", str49, "-1");
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test335");
        org.joda.time.JodaTimePermission jodaTimePermission1 = new org.joda.time.JodaTimePermission("hi!");
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.ReadableInterval readableInterval3 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval2);
        org.joda.time.Chronology chronology4 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval2);
        org.joda.time.DateTimeField dateTimeField5 = chronology4.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.minuteOfDay();
        int int7 = dateTimeField6.getMinimumValue();
        long long10 = dateTimeField6.add(0L, (long) (byte) 1);
        java.util.Locale locale13 = null;
        long long14 = dateTimeField6.set(4L, "69", locale13);
        jodaTimePermission1.checkGuard((java.lang.Object) locale13);
        org.joda.time.JodaTimePermission jodaTimePermission17 = new org.joda.time.JodaTimePermission("hi!");
        boolean boolean18 = jodaTimePermission1.implies((java.security.Permission) jodaTimePermission17);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.PeriodType periodType20 = org.joda.time.DateTimeUtils.getPeriodType(periodType19);
        org.joda.time.PeriodType periodType21 = org.joda.time.DateTimeUtils.getPeriodType(periodType20);
        boolean boolean22 = jodaTimePermission1.equals((java.lang.Object) periodType21);
        org.joda.time.JodaTimePermission jodaTimePermission24 = new org.joda.time.JodaTimePermission("hi!");
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.ReadableInterval readableInterval26 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval25);
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval25);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.minuteOfDay();
        int int30 = dateTimeField29.getMinimumValue();
        long long33 = dateTimeField29.add(0L, (long) (byte) 1);
        java.util.Locale locale36 = null;
        long long37 = dateTimeField29.set(4L, "69", locale36);
        jodaTimePermission24.checkGuard((java.lang.Object) locale36);
        org.joda.time.JodaTimePermission jodaTimePermission40 = new org.joda.time.JodaTimePermission("hi!");
        boolean boolean41 = jodaTimePermission24.implies((java.security.Permission) jodaTimePermission40);
        boolean boolean42 = jodaTimePermission1.implies((java.security.Permission) jodaTimePermission40);
        org.junit.Assert.assertNotNull(readableInterval3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 4140004L + "'", long14 == 4140004L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readableInterval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 60000L + "'", long33 == 60000L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 4140004L + "'", long37 == 4140004L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test336");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField2 = iSOChronology1.minutes();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology1.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str5 = dateTimeZone4.toString();
        java.lang.String str7 = dateTimeZone4.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeUtils.getZone(dateTimeZone4);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone9 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone8);
        org.joda.time.Chronology chronology10 = iSOChronology1.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone9);
        org.joda.time.DurationField durationField11 = iSOChronology1.years();
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType0.getField((org.joda.time.Chronology) iSOChronology1);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField14 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long17 = durationField14.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long19 = durationField14.getValueAsLong((long) 10);
        int int21 = durationField14.getValue((long) (byte) 10);
        boolean boolean22 = partial13.equals((java.lang.Object) durationField14);
        org.joda.time.Chronology chronology23 = partial13.getChronology();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial13.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial13.getFieldTypes();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField28 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long31 = durationField28.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long33 = durationField28.getValueAsLong((long) 10);
        int int35 = durationField28.getValue((long) (byte) 10);
        boolean boolean36 = partial27.equals((java.lang.Object) durationField28);
        org.joda.time.Chronology chronology37 = partial27.getChronology();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial27.isBefore((org.joda.time.ReadablePartial) partial38);
        int int40 = partial13.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField42 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long45 = durationField42.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long47 = durationField42.getValueAsLong((long) 10);
        int int49 = durationField42.getValue((long) (byte) 10);
        boolean boolean50 = partial41.equals((java.lang.Object) durationField42);
        int int51 = partial27.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.ReadableInterval readableInterval52 = null;
        org.joda.time.ReadableInterval readableInterval53 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval52);
        long long54 = readableInterval53.getStartMillis();
        org.joda.time.ReadableInterval readableInterval55 = null;
        org.joda.time.ReadableInterval readableInterval56 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval55);
        org.joda.time.ReadableInterval readableInterval57 = null;
        boolean boolean58 = readableInterval56.contains(readableInterval57);
        org.joda.time.Duration duration59 = readableInterval56.toDuration();
        org.joda.time.DateTime dateTime60 = readableInterval56.getEnd();
        boolean boolean61 = readableInterval53.contains((org.joda.time.ReadableInstant) dateTime60);
        long long62 = org.joda.time.DateTimeUtils.getInstantMillis((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Chronology chronology63 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime64 = partial27.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Chronology chronology65 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime64);
        boolean boolean66 = dateTimeFieldType0.isSupported(chronology65);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(cachedDateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(readableInterval53);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-5820000L) + "'", long54 == (-5820000L));
        org.junit.Assert.assertNotNull(readableInterval56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-5820000L) + "'", long62 == (-5820000L));
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test337");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.secondOfDay();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        org.joda.time.DateTimeZone dateTimeZone3 = iSOChronology0.getZone();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test338");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField14 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType8, durationField13);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField7, dateTimeFieldType8);
        int int17 = zeroIsMaxDateTimeField15.getMaximumValue((long) 100);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test339");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField14 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType8, durationField13);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField7, dateTimeFieldType8);
        int int17 = zeroIsMaxDateTimeField15.getLeapAmount(1711909507403L);
        boolean boolean19 = zeroIsMaxDateTimeField15.isLeap(9003755385792000000L);
        int int20 = zeroIsMaxDateTimeField15.getMaximumValue();
        int int22 = zeroIsMaxDateTimeField15.getMinimumValue(432000032L);
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str25 = dateTimeZone24.toString();
        org.joda.time.Chronology chronology26 = iSOChronology23.withZone(dateTimeZone24);
        org.joda.time.Partial partial27 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology23);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        boolean boolean38 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        int int39 = zeroIsMaxDateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) partial27);
        // The following exception was thrown during execution in test generation
        try {
            long long42 = zeroIsMaxDateTimeField15.add(1711938393447L, (-30610224000000L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -30610224000000");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test340");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField11 = new org.joda.time.field.OffsetDateTimeField(dateTimeField8, dateTimeFieldType9, (int) (short) 1);
        boolean boolean12 = offsetDateTimeField11.isSupported();
        long long14 = offsetDateTimeField11.remainder((long) 53460006);
        boolean boolean15 = offsetDateTimeField11.isLenient();
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str18 = dateTimeZone17.toString();
        org.joda.time.Chronology chronology19 = iSOChronology16.withZone(dateTimeZone17);
        org.joda.time.Partial partial20 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology16);
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField22 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long25 = durationField22.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long27 = durationField22.getValueAsLong((long) 10);
        int int29 = durationField22.getValue((long) (byte) 10);
        boolean boolean30 = partial21.equals((java.lang.Object) durationField22);
        boolean boolean31 = partial20.isBefore((org.joda.time.ReadablePartial) partial21);
        org.joda.time.chrono.ISOChronology iSOChronology32 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str34 = dateTimeZone33.toString();
        org.joda.time.Chronology chronology35 = iSOChronology32.withZone(dateTimeZone33);
        org.joda.time.Partial partial36 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology32);
        boolean boolean37 = partial20.isBefore((org.joda.time.ReadablePartial) partial36);
        java.util.Locale locale38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = offsetDateTimeField11.getAsShortText((org.joda.time.ReadablePartial) partial20, locale38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 3060006L + "'", long14 == 3060006L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(iSOChronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(iSOChronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test341");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DurationField durationField6 = zonedChronology4.centuries();
        org.joda.time.DateTimeField dateTimeField7 = zonedChronology4.dayOfMonth();
        long long9 = dateTimeField7.roundFloor(551169L);
        long long11 = dateTimeField7.roundHalfEven((long) (short) 0);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test342");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.seconds();
        org.joda.time.DurationField durationField5 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField7 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.era();
        org.joda.time.DateTimeField dateTimeField9 = iSOChronology0.monthOfYear();
        java.lang.String str10 = iSOChronology0.toString();
        org.joda.time.DurationField durationField11 = iSOChronology0.days();
        org.joda.time.chrono.ISOChronology iSOChronology12 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str14 = dateTimeZone13.toString();
        org.joda.time.Chronology chronology15 = iSOChronology12.withZone(dateTimeZone13);
        org.joda.time.Partial partial16 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology12);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField18 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long21 = durationField18.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long23 = durationField18.getValueAsLong((long) 10);
        int int25 = durationField18.getValue((long) (byte) 10);
        boolean boolean26 = partial17.equals((java.lang.Object) durationField18);
        boolean boolean27 = partial16.isBefore((org.joda.time.ReadablePartial) partial17);
        org.joda.time.DateTimeField[] dateTimeFieldArray28 = partial16.getFields();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = readableInterval30.contains(readableInterval31);
        org.joda.time.Duration duration33 = readableInterval30.toDuration();
        org.joda.time.DateTime dateTime34 = readableInterval30.getEnd();
        org.joda.time.Period period35 = readableInterval30.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant37 = null;
        int int38 = dateTimeZone36.getOffset(readableInstant37);
        java.util.TimeZone timeZone39 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.ReadableInterval readableInterval41 = null;
        org.joda.time.ReadableInterval readableInterval42 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval41);
        org.joda.time.ReadableInterval readableInterval43 = null;
        boolean boolean44 = readableInterval42.contains(readableInterval43);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = readableInterval42.toPeriod(periodType45);
        org.joda.time.DateTime dateTime47 = readableInterval42.getEnd();
        int int48 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean49 = readableInterval30.isBefore((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime50 = partial16.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        int[] intArray52 = iSOChronology0.get((org.joda.time.ReadablePartial) partial16, 6043118400000L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ISOChronology[UTC]" + "'", str10, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(iSOChronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10L + "'", long23 == 10L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(readableInterval42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test343");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = gregorianChronology1.clockhourOfHalfday();
        java.lang.String str3 = gregorianChronology1.toString();
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GregorianChronology[UTC]" + "'", str3, "GregorianChronology[UTC]");
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test344");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, (java.lang.Number) 10L, "hourOfDay");
        illegalFieldValueException3.prependMessage("8");
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException9 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType6, (java.lang.Number) 60035L, "");
        boolean boolean10 = org.joda.time.IllegalInstantException.isIllegalInstant((java.lang.Throwable) illegalFieldValueException9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.IllegalFieldValueException illegalFieldValueException14 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType11, (java.lang.Number) 10L, "hourOfDay");
        java.lang.Number number15 = illegalFieldValueException14.getIllegalNumberValue();
        illegalFieldValueException9.addSuppressed((java.lang.Throwable) illegalFieldValueException14);
        java.lang.String str17 = illegalFieldValueException9.getIllegalValueAsString();
        illegalFieldValueException3.addSuppressed((java.lang.Throwable) illegalFieldValueException9);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertEquals("'" + number15 + "' != '" + 10L + "'", number15, 10L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "60035" + "'", str17, "60035");
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test345");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone1 = iSOChronology0.getZone();
        org.joda.time.DateTimeZone dateTimeZone2 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField3 = iSOChronology0.years();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology6 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone4);
        org.joda.time.Chronology chronology7 = zonedChronology6.withUTC();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology6);
        org.junit.Assert.assertNotNull(chronology7);
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test346");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, (java.lang.Number) 60035L, "");
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType0.getDurationType();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField5 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType4);
        long long6 = unsupportedDurationField5.getUnitMillis();
        // The following exception was thrown during execution in test generation
        try {
            long long8 = unsupportedDurationField5.getMillis(0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: hours field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(unsupportedDurationField5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test347");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.year();
        org.joda.time.DurationField durationField5 = iSOChronology0.months();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str7 = dateTimeZone6.toString();
        java.lang.String str9 = dateTimeZone6.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeUtils.getZone(dateTimeZone6);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        java.lang.Object obj12 = null;
        boolean boolean13 = cachedDateTimeZone11.equals(obj12);
        long long15 = cachedDateTimeZone11.nextTransition(2580171L);
        boolean boolean16 = cachedDateTimeZone11.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology17 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, (org.joda.time.DateTimeZone) cachedDateTimeZone11);
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.ReadableInterval readableInterval20 = null;
        boolean boolean21 = readableInterval19.contains(readableInterval20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = readableInterval19.toPeriod(periodType22);
        org.joda.time.DateTime dateTime24 = readableInterval19.getEnd();
        org.joda.time.MutableInterval mutableInterval25 = readableInterval19.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.ReadableInterval readableInterval28 = null;
        boolean boolean29 = readableInterval27.contains(readableInterval28);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = readableInterval27.toPeriod(periodType30);
        org.joda.time.DateTime dateTime32 = readableInterval27.getEnd();
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.ReadableInterval readableInterval34 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval33);
        org.joda.time.ReadableInterval readableInterval35 = null;
        boolean boolean36 = readableInterval34.contains(readableInterval35);
        boolean boolean37 = readableInterval27.overlaps(readableInterval34);
        boolean boolean38 = readableInterval19.contains(readableInterval34);
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval19);
        boolean boolean40 = cachedDateTimeZone11.equals((java.lang.Object) readableInterval19);
        long long42 = cachedDateTimeZone11.nextTransition(100L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.GregorianChronology gregorianChronology44 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) cachedDateTimeZone11, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 100");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(cachedDateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2580171L + "'", long15 == 2580171L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(zonedChronology17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableInterval25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(readableInterval34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(readableInterval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 100L + "'", long42 == 100L);
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test348");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = durationField5.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        boolean boolean15 = durationFieldType10.isSupported(chronology13);
        org.joda.time.field.ScaledDurationField scaledDurationField17 = new org.joda.time.field.ScaledDurationField(durationField5, durationFieldType10, (int) 'a');
        org.joda.time.DurationField durationField18 = scaledDurationField17.getWrappedField();
        int int21 = scaledDurationField17.getDifference((long) (byte) -1, (long) (short) 0);
        org.joda.time.DurationFieldType durationFieldType22 = scaledDurationField17.getType();
        int int25 = scaledDurationField17.getDifference(0L, (long) (short) -1);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.years();
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.ReadableInterval readableInterval28 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval27);
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval27);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.minuteOfDay();
        org.joda.time.DurationField durationField32 = durationFieldType26.getField(chronology29);
        org.joda.time.field.DecoratedDurationField decoratedDurationField33 = new org.joda.time.field.DecoratedDurationField((org.joda.time.DurationField) scaledDurationField17, durationFieldType26);
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField35 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long38 = durationField35.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long40 = durationField35.getValueAsLong((long) 10);
        int int42 = durationField35.getValue((long) (byte) 10);
        boolean boolean43 = partial34.equals((java.lang.Object) durationField35);
        org.joda.time.Chronology chronology44 = partial34.getChronology();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial34.isBefore((org.joda.time.ReadablePartial) partial45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = partial34.getFieldTypes();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField49 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long52 = durationField49.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long54 = durationField49.getValueAsLong((long) 10);
        int int56 = durationField49.getValue((long) (byte) 10);
        boolean boolean57 = partial48.equals((java.lang.Object) durationField49);
        org.joda.time.Chronology chronology58 = partial48.getChronology();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        boolean boolean60 = partial48.isBefore((org.joda.time.ReadablePartial) partial59);
        int int61 = partial34.compareTo((org.joda.time.ReadablePartial) partial48);
        org.joda.time.ReadableInterval readableInterval62 = null;
        org.joda.time.ReadableInterval readableInterval63 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval62);
        org.joda.time.ReadableInterval readableInterval64 = null;
        boolean boolean65 = readableInterval63.contains(readableInterval64);
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.Period period67 = readableInterval63.toPeriod(periodType66);
        org.joda.time.DateTime dateTime68 = readableInterval63.getEnd();
        org.joda.time.MutableInterval mutableInterval69 = readableInterval63.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval70 = null;
        org.joda.time.ReadableInterval readableInterval71 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval70);
        org.joda.time.ReadableInterval readableInterval72 = null;
        boolean boolean73 = readableInterval71.contains(readableInterval72);
        org.joda.time.PeriodType periodType74 = null;
        org.joda.time.Period period75 = readableInterval71.toPeriod(periodType74);
        org.joda.time.DateTime dateTime76 = readableInterval71.getEnd();
        org.joda.time.ReadableInterval readableInterval77 = null;
        org.joda.time.ReadableInterval readableInterval78 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval77);
        org.joda.time.ReadableInterval readableInterval79 = null;
        boolean boolean80 = readableInterval78.contains(readableInterval79);
        boolean boolean81 = readableInterval71.overlaps(readableInterval78);
        boolean boolean82 = readableInterval63.contains(readableInterval78);
        org.joda.time.PeriodType periodType83 = null;
        org.joda.time.PeriodType periodType84 = org.joda.time.DateTimeUtils.getPeriodType(periodType83);
        org.joda.time.PeriodType periodType85 = org.joda.time.DateTimeUtils.getPeriodType(periodType84);
        org.joda.time.Period period86 = readableInterval63.toPeriod(periodType85);
        org.joda.time.Partial partial87 = partial34.plus((org.joda.time.ReadablePeriod) period86);
        boolean boolean88 = scaledDurationField17.equals((java.lang.Object) partial34);
        long long91 = scaledDurationField17.getDifferenceAsLong((long) 28531765, (-62135567870746L));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210866846400000L) + "'", long9 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(readableInterval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10L + "'", long54 == 10L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(readableInterval63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(mutableInterval69);
        org.junit.Assert.assertNotNull(readableInterval71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(readableInterval78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(partial87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 640573158788L + "'", long91 == 640573158788L);
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test349");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.yearOfCentury();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test350");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField11.getAsShortText(readablePartial23, (int) ' ', locale25);
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = null;
        java.lang.String str30 = dividedDateTimeField11.getAsText(readablePartial27, (int) (byte) 10, locale29);
        long long32 = dividedDateTimeField11.roundHalfFloor((long) 100);
        long long35 = dividedDateTimeField11.add(0L, 28531765);
        long long37 = dividedDateTimeField11.remainder((-53459996L));
        org.joda.time.DurationField durationField38 = dividedDateTimeField11.getDurationField();
        long long41 = dividedDateTimeField11.addWrapField((-210861664379418L), 0);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "10" + "'", str30, "10");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 9003755385792000000L + "'", long35 == 9003755385792000000L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 315479340004L + "'", long37 == 315479340004L);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-210861664379418L) + "'", long41 == (-210861664379418L));
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test351");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology2.halfdayOfDay();
        org.joda.time.Partial partial9 = new org.joda.time.Partial(dateTimeFieldType0, 10, (org.joda.time.Chronology) iSOChronology2);
        org.joda.time.DurationField durationField10 = iSOChronology2.hours();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test352");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationField durationField1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField8 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType2, durationField7);
        long long11 = durationField7.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.ReadableInterval readableInterval14 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval13);
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval13);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        boolean boolean17 = durationFieldType12.isSupported(chronology15);
        org.joda.time.field.ScaledDurationField scaledDurationField19 = new org.joda.time.field.ScaledDurationField(durationField7, durationFieldType12, (int) 'a');
        org.joda.time.DurationField durationField20 = scaledDurationField19.getWrappedField();
        long long23 = scaledDurationField19.add((-210866846400000L), (long) 53460006);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.PreciseDateTimeField preciseDateTimeField24 = new org.joda.time.field.PreciseDateTimeField(dateTimeFieldType0, durationField1, (org.joda.time.DurationField) scaledDurationField19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-210866846400000L) + "'", long11 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(readableInterval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-210861660779418L) + "'", long23 == (-210861660779418L));
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test353");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology2.centuryOfEra();
        org.joda.time.DurationField durationField6 = iSOChronology2.days();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Chronology chronology8 = iSOChronology2.withZone(dateTimeZone7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial(dateTimeFieldType0, 274, chronology8);
        java.lang.String str10 = partial9.toStringList();
        org.joda.time.DurationFieldType durationFieldType11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial13 = partial9.withFieldAddWrapped(durationFieldType11, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[year=274]" + "'", str10, "[year=274]");
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test354");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str1 = dateTimeFieldType0.toString();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology6 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology2, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = zonedChronology6.getZone();
        boolean boolean8 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) zonedChronology6);
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = zonedChronology6.secondOfMinute();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField12 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long15 = durationField12.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long17 = durationField12.getValueAsLong((long) 10);
        int int19 = durationField12.getValue((long) (byte) 10);
        boolean boolean20 = partial11.equals((java.lang.Object) durationField12);
        org.joda.time.Chronology chronology21 = partial11.getChronology();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        boolean boolean23 = partial11.isBefore((org.joda.time.ReadablePartial) partial22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = partial11.getFieldTypes();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField26 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long29 = durationField26.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long31 = durationField26.getValueAsLong((long) 10);
        int int33 = durationField26.getValue((long) (byte) 10);
        boolean boolean34 = partial25.equals((java.lang.Object) durationField26);
        org.joda.time.Chronology chronology35 = partial25.getChronology();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        boolean boolean37 = partial25.isBefore((org.joda.time.ReadablePartial) partial36);
        int int38 = partial11.compareTo((org.joda.time.ReadablePartial) partial25);
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField40 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long43 = durationField40.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long45 = durationField40.getValueAsLong((long) 10);
        int int47 = durationField40.getValue((long) (byte) 10);
        boolean boolean48 = partial39.equals((java.lang.Object) durationField40);
        int int49 = partial25.compareTo((org.joda.time.ReadablePartial) partial39);
        org.joda.time.chrono.ISOChronology iSOChronology50 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField51 = iSOChronology50.minutes();
        org.joda.time.DateTimeField dateTimeField52 = iSOChronology50.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str54 = dateTimeZone53.toString();
        java.lang.String str56 = dateTimeZone53.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeUtils.getZone(dateTimeZone53);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone58 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone57);
        org.joda.time.Chronology chronology59 = iSOChronology50.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone58);
        org.joda.time.DurationField durationField60 = iSOChronology50.years();
        org.joda.time.DateTimeField dateTimeField61 = iSOChronology50.dayOfWeek();
        boolean boolean62 = partial25.equals((java.lang.Object) dateTimeField61);
        int int63 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) partial25);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfMonth" + "'", str1, "dayOfMonth");
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10L + "'", long31 == 10L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10L + "'", long45 == 10L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(iSOChronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "UTC" + "'", str54, "UTC");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00" + "'", str56, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(cachedDateTimeZone58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test355");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = durationField5.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        boolean boolean15 = durationFieldType10.isSupported(chronology13);
        org.joda.time.field.ScaledDurationField scaledDurationField17 = new org.joda.time.field.ScaledDurationField(durationField5, durationFieldType10, (int) 'a');
        org.joda.time.DurationField durationField18 = scaledDurationField17.getWrappedField();
        boolean boolean19 = scaledDurationField17.isSupported();
        org.joda.time.DurationField durationField20 = scaledDurationField17.getWrappedField();
        long long23 = scaledDurationField17.add(29227899L, 9);
        int int25 = scaledDurationField17.getValue(31380171L);
        // The following exception was thrown during execution in test generation
        try {
            int int28 = scaledDurationField17.getDifference(31380082L, (-58877472891246L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 58877504271328");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210866846400000L) + "'", long9 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 29228772L + "'", long23 == 29228772L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 323506 + "'", int25 == 323506);
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test356");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getDurationField();
        java.lang.String str12 = unsupportedDateTimeField6.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = unsupportedDateTimeField6.getType();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField15 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType14);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = unsupportedDurationField15.add((long) 70, (-210861658800000L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: days field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UnsupportedDateTimeField" + "'", str12, "UnsupportedDateTimeField");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(unsupportedDurationField15);
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test357");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField11.getAsShortText(readablePartial23, (int) ' ', locale25);
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = null;
        java.lang.String str30 = dividedDateTimeField11.getAsText(readablePartial27, (int) (byte) 10, locale29);
        long long32 = dividedDateTimeField11.roundHalfFloor((long) 100);
        long long35 = dividedDateTimeField11.getDifferenceAsLong((-30610224000000L), (long) 24);
        java.util.Locale locale36 = null;
        int int37 = dividedDateTimeField11.getMaximumShortTextLength(locale36);
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField39 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long42 = durationField39.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long44 = durationField39.getValueAsLong((long) 10);
        int int46 = durationField39.getValue((long) (byte) 10);
        boolean boolean47 = partial38.equals((java.lang.Object) durationField39);
        org.joda.time.Chronology chronology48 = partial38.getChronology();
        org.joda.time.Partial partial49 = new org.joda.time.Partial();
        boolean boolean50 = partial38.isBefore((org.joda.time.ReadablePartial) partial49);
        java.util.Locale locale52 = null;
        java.lang.String str53 = partial49.toString("723", locale52);
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField55 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long58 = durationField55.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long60 = durationField55.getValueAsLong((long) 10);
        int int62 = durationField55.getValue((long) (byte) 10);
        boolean boolean63 = partial54.equals((java.lang.Object) durationField55);
        org.joda.time.Chronology chronology64 = partial54.getChronology();
        org.joda.time.Partial partial65 = new org.joda.time.Partial();
        boolean boolean66 = partial54.isBefore((org.joda.time.ReadablePartial) partial65);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray67 = partial54.getFieldTypes();
        java.lang.Object obj68 = null;
        boolean boolean69 = partial54.equals(obj68);
        boolean boolean70 = partial49.isBefore((org.joda.time.ReadablePartial) partial54);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray71 = partial54.getFieldTypes();
        java.util.Locale locale72 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = dividedDateTimeField11.getAsShortText((org.joda.time.ReadablePartial) partial54, locale72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'centuryOfEra' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "10" + "'", str30, "10");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-97L) + "'", long35 == (-97L));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10L + "'", long44 == 10L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "723" + "'", str53, "723");
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10L + "'", long60 == 10L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray71);
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test358");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DurationField durationField6 = gregorianChronology5.days();
        java.lang.String str7 = gregorianChronology5.toString();
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.ReadableInterval readableInterval9 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval8);
        org.joda.time.Chronology chronology10 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval8);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.yearOfCentury();
        org.joda.time.DurationField durationField12 = chronology10.millis();
        org.joda.time.DurationField durationField13 = chronology10.centuries();
        org.joda.time.Chronology chronology14 = chronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = chronology10.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField19 = new org.joda.time.field.OffsetDateTimeField(dateTimeField16, dateTimeFieldType17, (int) (short) 1);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField21 = new org.joda.time.field.OffsetDateTimeField(dateTimeField16, (-1));
        org.joda.time.chrono.ISOChronology iSOChronology22 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str24 = dateTimeZone23.toString();
        org.joda.time.Chronology chronology25 = iSOChronology22.withZone(dateTimeZone23);
        org.joda.time.Partial partial26 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology22);
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField28 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long31 = durationField28.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long33 = durationField28.getValueAsLong((long) 10);
        int int35 = durationField28.getValue((long) (byte) 10);
        boolean boolean36 = partial27.equals((java.lang.Object) durationField28);
        boolean boolean37 = partial26.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str40 = dateTimeZone39.toString();
        org.joda.time.Chronology chronology41 = iSOChronology38.withZone(dateTimeZone39);
        org.joda.time.Partial partial42 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology38);
        boolean boolean43 = partial26.isBefore((org.joda.time.ReadablePartial) partial42);
        int int44 = offsetDateTimeField21.getMinimumValue((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField46 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long49 = durationField46.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long51 = durationField46.getValueAsLong((long) 10);
        int int53 = durationField46.getValue((long) (byte) 10);
        boolean boolean54 = partial45.equals((java.lang.Object) durationField46);
        org.joda.time.Chronology chronology55 = partial45.getChronology();
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        boolean boolean57 = partial45.isBefore((org.joda.time.ReadablePartial) partial56);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = partial45.getFieldTypes();
        org.joda.time.Partial partial59 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField60 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long63 = durationField60.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long65 = durationField60.getValueAsLong((long) 10);
        int int67 = durationField60.getValue((long) (byte) 10);
        boolean boolean68 = partial59.equals((java.lang.Object) durationField60);
        org.joda.time.Chronology chronology69 = partial59.getChronology();
        org.joda.time.Partial partial70 = new org.joda.time.Partial();
        boolean boolean71 = partial59.isBefore((org.joda.time.ReadablePartial) partial70);
        int int72 = partial45.compareTo((org.joda.time.ReadablePartial) partial59);
        org.joda.time.Partial partial73 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField74 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long77 = durationField74.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long79 = durationField74.getValueAsLong((long) 10);
        int int81 = durationField74.getValue((long) (byte) 10);
        boolean boolean82 = partial73.equals((java.lang.Object) durationField74);
        int int83 = partial59.compareTo((org.joda.time.ReadablePartial) partial73);
        int[] intArray84 = partial73.getValues();
        gregorianChronology5.validate((org.joda.time.ReadablePartial) partial42, intArray84);
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GregorianChronology[100]" + "'", str7, "GregorianChronology[100]");
        org.junit.Assert.assertNotNull(readableInterval9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(iSOChronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(iSOChronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 10L + "'", long79 == 10L);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[]");
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test359");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        long long2 = readableInterval1.getStartMillis();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        long long5 = readableInterval4.getEndMillis();
        boolean boolean6 = readableInterval1.overlaps(readableInterval4);
        java.lang.String str7 = readableInterval4.toString();
        org.joda.time.MutableInterval mutableInterval8 = readableInterval4.toMutableInterval();
        org.joda.time.DateTime dateTime9 = mutableInterval8.getEnd();
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.ReadableInterval readableInterval11 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        boolean boolean13 = readableInterval11.contains(readableInterval12);
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = readableInterval11.isBefore(readableInterval14);
        boolean boolean16 = mutableInterval8.isBefore(readableInterval11);
        org.junit.Assert.assertNotNull(readableInterval1);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-5820000L) + "'", long2 == (-5820000L));
        org.junit.Assert.assertNotNull(readableInterval4);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-5820000L) + "'", long5 == (-5820000L));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1969-12-31T22:23:00.000Z/1969-12-31T22:23:00.000Z" + "'", str7, "1969-12-31T22:23:00.000Z/1969-12-31T22:23:00.000Z");
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(readableInterval11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test360");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str1 = dateTimeZone0.toString();
        java.lang.String str3 = dateTimeZone0.getShortName((-210866846400000L));
        java.lang.String str5 = dateTimeZone0.getName((long) 1969);
        long long7 = dateTimeZone0.convertUTCToLocal(1711909507408682L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "UTC" + "'", str1, "UTC");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1711909507408682L + "'", long7 == 1711909507408682L);
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test361");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, (java.lang.Number) 60035L, "");
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType0.getDurationType();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField5 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType4);
        boolean boolean6 = unsupportedDurationField5.isSupported();
        long long7 = unsupportedDurationField5.getUnitMillis();
        // The following exception was thrown during execution in test generation
        try {
            long long10 = unsupportedDurationField5.getDifferenceAsLong(0L, (-4000L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: hours field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(unsupportedDurationField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test362");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = durationField5.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        boolean boolean15 = durationFieldType10.isSupported(chronology13);
        org.joda.time.field.ScaledDurationField scaledDurationField17 = new org.joda.time.field.ScaledDurationField(durationField5, durationFieldType10, (int) 'a');
        org.joda.time.DurationField durationField18 = scaledDurationField17.getWrappedField();
        long long21 = scaledDurationField17.add(2440588L, 1439);
        long long23 = scaledDurationField17.getMillis(0L);
        long long26 = scaledDurationField17.subtract((long) 1, 0);
        int int29 = scaledDurationField17.getValue((long) (byte) 0, 1577836800000L);
        long long32 = scaledDurationField17.getDifferenceAsLong(315532800000L, (long) ' ');
        long long35 = scaledDurationField17.add(1711909564745L, (int) (byte) 10);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210866846400000L) + "'", long9 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2580171L + "'", long21 == 2580171L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3252915463L + "'", long32 == 3252915463L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1711909565715L + "'", long35 == 1711909565715L);
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test363");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField14 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType8, durationField13);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField7, dateTimeFieldType8);
        int int17 = zeroIsMaxDateTimeField15.getLeapAmount(1711909507403L);
        boolean boolean19 = zeroIsMaxDateTimeField15.isLeap(9003755385792000000L);
        int int20 = zeroIsMaxDateTimeField15.getMaximumValue();
        int int22 = zeroIsMaxDateTimeField15.getMinimumValue(432000032L);
        org.joda.time.chrono.ISOChronology iSOChronology23 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str25 = dateTimeZone24.toString();
        org.joda.time.Chronology chronology26 = iSOChronology23.withZone(dateTimeZone24);
        org.joda.time.Partial partial27 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology23);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        boolean boolean38 = partial27.isBefore((org.joda.time.ReadablePartial) partial28);
        int int39 = zeroIsMaxDateTimeField15.getMaximumValue((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial42 = partial27.withField(dateTimeFieldType40, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'clockhourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(iSOChronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 100 + "'", int39 == 100);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test364");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        int[] intArray14 = partial0.getValues();
        org.joda.time.Chronology chronology15 = partial0.getChronology();
        java.lang.String str16 = partial0.toString();
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[]");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test365");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField3 = new org.joda.time.field.PreciseDurationField(durationFieldType1, 28531825L);
        long long6 = preciseDurationField3.getMillis(60035L, (-210866846400000L));
        boolean boolean7 = preciseDurationField3.isPrecise();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField14 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType8, durationField13);
        long long17 = durationField13.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval19 = null;
        org.joda.time.ReadableInterval readableInterval20 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval19);
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval19);
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury();
        boolean boolean23 = durationFieldType18.isSupported(chronology21);
        org.joda.time.field.ScaledDurationField scaledDurationField25 = new org.joda.time.field.ScaledDurationField(durationField13, durationFieldType18, (int) 'a');
        org.joda.time.DurationField durationField26 = scaledDurationField25.getWrappedField();
        int int29 = scaledDurationField25.getDifference((long) (byte) -1, (long) (short) 0);
        org.joda.time.DurationFieldType durationFieldType30 = scaledDurationField25.getType();
        org.joda.time.field.DecoratedDurationField decoratedDurationField31 = new org.joda.time.field.DecoratedDurationField((org.joda.time.DurationField) preciseDurationField3, durationFieldType30);
        long long34 = preciseDurationField3.getValueAsLong((long) (-60000), 1711909507403L);
        long long37 = preciseDurationField3.getMillis(3060006L, 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1712908113875L + "'", long6 == 1712908113875L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-210866846400000L) + "'", long17 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(readableInterval20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 87307555690950L + "'", long37 == 87307555690950L);
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test366");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.year();
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField6 = iSOChronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str8 = dateTimeZone7.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology9 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology5, dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone10 = zonedChronology9.getZone();
        org.joda.time.DurationField durationField11 = zonedChronology9.centuries();
        org.joda.time.DateTimeField dateTimeField12 = zonedChronology9.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone13 = zonedChronology9.getZone();
        boolean boolean14 = iSOChronology0.equals((java.lang.Object) zonedChronology9);
        org.joda.time.DurationField durationField15 = zonedChronology9.millis();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test367");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        int int27 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.ReadableInterval readableInterval29 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval28);
        org.joda.time.ReadableInterval readableInterval30 = null;
        boolean boolean31 = readableInterval29.contains(readableInterval30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = readableInterval29.toPeriod(periodType32);
        org.joda.time.DateTime dateTime34 = readableInterval29.getEnd();
        org.joda.time.MutableInterval mutableInterval35 = readableInterval29.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.ReadableInterval readableInterval37 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval36);
        org.joda.time.ReadableInterval readableInterval38 = null;
        boolean boolean39 = readableInterval37.contains(readableInterval38);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = readableInterval37.toPeriod(periodType40);
        org.joda.time.DateTime dateTime42 = readableInterval37.getEnd();
        org.joda.time.ReadableInterval readableInterval43 = null;
        org.joda.time.ReadableInterval readableInterval44 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval43);
        org.joda.time.ReadableInterval readableInterval45 = null;
        boolean boolean46 = readableInterval44.contains(readableInterval45);
        boolean boolean47 = readableInterval37.overlaps(readableInterval44);
        boolean boolean48 = readableInterval29.contains(readableInterval44);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.PeriodType periodType50 = org.joda.time.DateTimeUtils.getPeriodType(periodType49);
        org.joda.time.PeriodType periodType51 = org.joda.time.DateTimeUtils.getPeriodType(periodType50);
        org.joda.time.Period period52 = readableInterval29.toPeriod(periodType51);
        org.joda.time.Partial partial53 = partial0.plus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.centuries();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial56 = partial53.withFieldAdded(durationFieldType54, 17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'centuries' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(readableInterval29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertNotNull(readableInterval37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(readableInterval44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(partial53);
        org.junit.Assert.assertNotNull(durationFieldType54);
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test368");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField14 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType8, durationField13);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField7, dateTimeFieldType8);
        int int17 = zeroIsMaxDateTimeField15.getLeapAmount(1711909507403L);
        boolean boolean19 = zeroIsMaxDateTimeField15.isLeap(9003755385792000000L);
        int int20 = zeroIsMaxDateTimeField15.getMaximumValue();
        long long22 = zeroIsMaxDateTimeField15.roundHalfEven(1711909521833L);
        int int24 = zeroIsMaxDateTimeField15.getLeapAmount(4015592707175L);
        int int27 = zeroIsMaxDateTimeField15.getDifference((long) (short) 100, (long) 32);
        int int29 = zeroIsMaxDateTimeField15.getMinimumValue(5727502308321L);
        org.joda.time.chrono.ISOChronology iSOChronology30 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str32 = dateTimeZone31.toString();
        org.joda.time.Chronology chronology33 = iSOChronology30.withZone(dateTimeZone31);
        org.joda.time.Partial partial34 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology30);
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField36 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long39 = durationField36.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long41 = durationField36.getValueAsLong((long) 10);
        int int43 = durationField36.getValue((long) (byte) 10);
        boolean boolean44 = partial35.equals((java.lang.Object) durationField36);
        boolean boolean45 = partial34.isBefore((org.joda.time.ReadablePartial) partial35);
        int int46 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial34);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1704067200000L + "'", long22 == 1704067200000L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(iSOChronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test369");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField14 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType8, durationField13);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField7, dateTimeFieldType8);
        int int17 = zeroIsMaxDateTimeField15.getLeapAmount(1711909507403L);
        boolean boolean19 = zeroIsMaxDateTimeField15.isLeap(9003755385792000000L);
        int int20 = zeroIsMaxDateTimeField15.getMaximumValue();
        long long22 = zeroIsMaxDateTimeField15.roundHalfEven(1711909521833L);
        int int24 = zeroIsMaxDateTimeField15.getLeapAmount(4015592707175L);
        int int27 = zeroIsMaxDateTimeField15.getDifference((long) (short) 100, (long) 32);
        long long30 = zeroIsMaxDateTimeField15.add((-63879074170616L), 1439);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1704067200000L + "'", long22 == 1704067200000L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-18468875770616L) + "'", long30 == (-18468875770616L));
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test370");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, (java.lang.Number) 60035L, "");
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType0.getDurationType();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField5 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType4);
        boolean boolean6 = unsupportedDurationField5.isSupported();
        org.joda.time.DurationFieldType durationFieldType7 = unsupportedDurationField5.getType();
        java.lang.String str8 = durationFieldType7.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(unsupportedDurationField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hours" + "'", str8, "hours");
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test371");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = durationField5.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        boolean boolean15 = durationFieldType10.isSupported(chronology13);
        org.joda.time.field.ScaledDurationField scaledDurationField17 = new org.joda.time.field.ScaledDurationField(durationField5, durationFieldType10, (int) 'a');
        int int19 = scaledDurationField17.getValue((long) (short) -1);
        long long22 = scaledDurationField17.add((long) (-1), 10);
        org.joda.time.DurationFieldType durationFieldType23 = scaledDurationField17.getType();
        long long26 = scaledDurationField17.getMillis(1711909504045L, (long) (-1));
        long long27 = scaledDurationField17.getUnitMillis();
        long long29 = scaledDurationField17.getMillis(5682);
        int int32 = scaledDurationField17.getDifference((-110602L), (long) 32);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210866846400000L) + "'", long9 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 969L + "'", long22 == 969L);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 166055221892365L + "'", long26 == 166055221892365L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 97L + "'", long27 == 97L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 551154L + "'", long29 == 551154L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1140) + "'", int32 == (-1140));
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test372");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.ReadableInterval readableInterval9 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval8);
        org.joda.time.Chronology chronology10 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval8);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.yearOfCentury();
        org.joda.time.DurationField durationField12 = chronology10.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField13 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType7, durationField12);
        long long16 = durationField12.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval18);
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        boolean boolean22 = durationFieldType17.isSupported(chronology20);
        org.joda.time.field.ScaledDurationField scaledDurationField24 = new org.joda.time.field.ScaledDurationField(durationField12, durationFieldType17, (int) 'a');
        int int26 = scaledDurationField24.getValue((long) (short) -1);
        long long29 = scaledDurationField24.add((long) (-1), 10);
        org.joda.time.DurationFieldType durationFieldType30 = scaledDurationField24.getType();
        org.joda.time.IllegalFieldValueException illegalFieldValueException32 = new org.joda.time.IllegalFieldValueException(durationFieldType30, "69");
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.ReadableInterval readableInterval35 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval34);
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval34);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfCentury();
        org.joda.time.DurationField durationField38 = chronology36.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField39 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType33, durationField38);
        long long42 = durationField38.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval44 = null;
        org.joda.time.ReadableInterval readableInterval45 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval44);
        org.joda.time.Chronology chronology46 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval44);
        org.joda.time.DateTimeField dateTimeField47 = chronology46.yearOfCentury();
        boolean boolean48 = durationFieldType43.isSupported(chronology46);
        org.joda.time.field.ScaledDurationField scaledDurationField50 = new org.joda.time.field.ScaledDurationField(durationField38, durationFieldType43, (int) 'a');
        int int52 = scaledDurationField50.getValue((long) (short) -1);
        long long55 = scaledDurationField50.add((long) (-1), 10);
        org.joda.time.DurationFieldType durationFieldType56 = scaledDurationField50.getType();
        org.joda.time.IllegalFieldValueException illegalFieldValueException58 = new org.joda.time.IllegalFieldValueException(durationFieldType56, "69");
        illegalFieldValueException32.addSuppressed((java.lang.Throwable) illegalFieldValueException58);
        org.joda.time.DurationFieldType durationFieldType60 = illegalFieldValueException32.getDurationFieldType();
        org.joda.time.field.DecoratedDurationField decoratedDurationField61 = new org.joda.time.field.DecoratedDurationField(durationField5, durationFieldType60);
        long long64 = decoratedDurationField61.subtract(27647338425L, 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(readableInterval9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-210866846400000L) + "'", long16 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 969L + "'", long29 == 969L);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(readableInterval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-210866846400000L) + "'", long42 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(readableInterval45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 969L + "'", long55 == 969L);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 27647338416L + "'", long64 == 27647338416L);
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test373");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DurationField durationField6 = zonedChronology4.centuries();
        org.joda.time.DateTimeField dateTimeField7 = zonedChronology4.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone8 = zonedChronology4.getZone();
        java.lang.String str9 = dateTimeZone8.getID();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant11 = null;
        int int12 = dateTimeZone10.getOffset(readableInstant11);
        java.util.TimeZone timeZone13 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.ReadableInterval readableInterval17 = null;
        boolean boolean18 = readableInterval16.contains(readableInterval17);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = readableInterval16.toPeriod(periodType19);
        org.joda.time.DateTime dateTime21 = readableInterval16.getEnd();
        int int22 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime21);
        int int23 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test374");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology6 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology2, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = zonedChronology6.getZone();
        org.joda.time.DurationField durationField8 = zonedChronology6.centuries();
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology6.dayOfMonth();
        boolean boolean10 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) zonedChronology6);
        org.joda.time.DateTimeField dateTimeField11 = zonedChronology6.weekyearOfCentury();
        org.joda.time.DurationField durationField12 = zonedChronology6.weeks();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test375");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName((-210866846400000L));
        boolean boolean5 = dateTimeZone1.isFixed();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        boolean boolean7 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.IllegalFieldValueException illegalFieldValueException11 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, (java.lang.Number) 1711909511784L, (java.lang.Number) 969L, (java.lang.Number) 22410261324L);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType12.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField15 = new org.joda.time.field.PreciseDurationField(durationFieldType13, 28531825L);
        long long18 = preciseDurationField15.getMillis(60035L, (-210866846400000L));
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField19 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, (org.joda.time.DurationField) preciseDurationField15);
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField21 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long24 = durationField21.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long26 = durationField21.getValueAsLong((long) 10);
        int int28 = durationField21.getValue((long) (byte) 10);
        boolean boolean29 = partial20.equals((java.lang.Object) durationField21);
        org.joda.time.Chronology chronology30 = partial20.getChronology();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial20.isBefore((org.joda.time.ReadablePartial) partial31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = partial20.getFieldTypes();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField35 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long38 = durationField35.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long40 = durationField35.getValueAsLong((long) 10);
        int int42 = durationField35.getValue((long) (byte) 10);
        boolean boolean43 = partial34.equals((java.lang.Object) durationField35);
        org.joda.time.Chronology chronology44 = partial34.getChronology();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial34.isBefore((org.joda.time.ReadablePartial) partial45);
        int int47 = partial20.compareTo((org.joda.time.ReadablePartial) partial34);
        org.joda.time.ReadableInterval readableInterval48 = null;
        org.joda.time.ReadableInterval readableInterval49 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval48);
        org.joda.time.ReadableInterval readableInterval50 = null;
        boolean boolean51 = readableInterval49.contains(readableInterval50);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = readableInterval49.toPeriod(periodType52);
        org.joda.time.DateTime dateTime54 = readableInterval49.getEnd();
        org.joda.time.MutableInterval mutableInterval55 = readableInterval49.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval56 = null;
        org.joda.time.ReadableInterval readableInterval57 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval56);
        org.joda.time.ReadableInterval readableInterval58 = null;
        boolean boolean59 = readableInterval57.contains(readableInterval58);
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Period period61 = readableInterval57.toPeriod(periodType60);
        org.joda.time.DateTime dateTime62 = readableInterval57.getEnd();
        org.joda.time.ReadableInterval readableInterval63 = null;
        org.joda.time.ReadableInterval readableInterval64 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval63);
        org.joda.time.ReadableInterval readableInterval65 = null;
        boolean boolean66 = readableInterval64.contains(readableInterval65);
        boolean boolean67 = readableInterval57.overlaps(readableInterval64);
        boolean boolean68 = readableInterval49.contains(readableInterval64);
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.PeriodType periodType70 = org.joda.time.DateTimeUtils.getPeriodType(periodType69);
        org.joda.time.PeriodType periodType71 = org.joda.time.DateTimeUtils.getPeriodType(periodType70);
        org.joda.time.Period period72 = readableInterval49.toPeriod(periodType71);
        org.joda.time.Partial partial73 = partial20.plus((org.joda.time.ReadablePeriod) period72);
        // The following exception was thrown during execution in test generation
        try {
            int int74 = unsupportedDateTimeField19.getMinimumValue((org.joda.time.ReadablePartial) partial20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: yearOfEra field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1712908113875L + "'", long18 == 1712908113875L);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(readableInterval49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(mutableInterval55);
        org.junit.Assert.assertNotNull(readableInterval57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(readableInterval64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(partial73);
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test376");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DurationField durationField6 = zonedChronology4.centuries();
        org.joda.time.DateTimeField dateTimeField7 = zonedChronology4.dayOfMonth();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str12 = dateTimeZone11.toString();
        java.lang.String str14 = dateTimeZone11.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeUtils.getZone(dateTimeZone11);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone16 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = iSOChronology8.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone16);
        int int19 = cachedDateTimeZone16.getOffset((long) ' ');
        org.joda.time.Chronology chronology20 = zonedChronology4.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone16);
        java.lang.String str22 = cachedDateTimeZone16.getNameKey((-58877480091246L));
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval23);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.minuteOfDay();
        long long29 = dateTimeField27.roundHalfFloor(0L);
        int int31 = dateTimeField27.getMinimumValue(35L);
        boolean boolean32 = cachedDateTimeZone16.equals((java.lang.Object) dateTimeField27);
        org.joda.time.DateTimeZone dateTimeZone33 = cachedDateTimeZone16.getUncachedZone();
        java.lang.String str35 = cachedDateTimeZone16.getName(432000032L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(cachedDateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test377");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = unsupportedDateTimeField6.getType();
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getDurationField();
        org.joda.time.DurationField durationField12 = unsupportedDateTimeField6.getRangeDurationField();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField14 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long17 = durationField14.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long19 = durationField14.getValueAsLong((long) 10);
        int int21 = durationField14.getValue((long) (byte) 10);
        boolean boolean22 = partial13.equals((java.lang.Object) durationField14);
        org.joda.time.Chronology chronology23 = partial13.getChronology();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial13.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial13.getFieldTypes();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField28 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long31 = durationField28.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long33 = durationField28.getValueAsLong((long) 10);
        int int35 = durationField28.getValue((long) (byte) 10);
        boolean boolean36 = partial27.equals((java.lang.Object) durationField28);
        org.joda.time.Chronology chronology37 = partial27.getChronology();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial27.isBefore((org.joda.time.ReadablePartial) partial38);
        int int40 = partial13.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField42 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long45 = durationField42.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long47 = durationField42.getValueAsLong((long) 10);
        int int49 = durationField42.getValue((long) (byte) 10);
        boolean boolean50 = partial41.equals((java.lang.Object) durationField42);
        int int51 = partial27.compareTo((org.joda.time.ReadablePartial) partial41);
        org.joda.time.chrono.ISOChronology iSOChronology52 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField53 = iSOChronology52.minutes();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology52.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str56 = dateTimeZone55.toString();
        java.lang.String str58 = dateTimeZone55.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeUtils.getZone(dateTimeZone55);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone60 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone59);
        org.joda.time.Chronology chronology61 = iSOChronology52.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone60);
        org.joda.time.DurationField durationField62 = iSOChronology52.years();
        org.joda.time.DateTimeField dateTimeField63 = iSOChronology52.dayOfWeek();
        boolean boolean64 = partial27.equals((java.lang.Object) dateTimeField63);
        // The following exception was thrown during execution in test generation
        try {
            int int65 = unsupportedDateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) partial27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNull(durationField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(iSOChronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "UTC" + "'", str56, "UTC");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(cachedDateTimeZone60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test378");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology40 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField41 = iSOChronology40.minutes();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology40.millisOfDay();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology40.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology40.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology40.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology40.halfdayOfDay();
        org.joda.time.Partial partial47 = new org.joda.time.Partial(dateTimeFieldType38, 10, (org.joda.time.Chronology) iSOChronology40);
        int int48 = dividedDateTimeField37.getMaximumValue((org.joda.time.ReadablePartial) partial47);
        java.lang.String str50 = dividedDateTimeField37.getAsShortText(35L);
        org.joda.time.DurationField durationField51 = dividedDateTimeField37.getLeapDurationField();
        long long54 = dividedDateTimeField37.addWrapField(5727502308321L, 0);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(iSOChronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 29227899 + "'", int48 == 29227899);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "197" + "'", str50, "197");
        org.junit.Assert.assertNull(durationField51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 5727502308321L + "'", long54 == 5727502308321L);
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test379");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField12 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType8, 4, (int) ' ', (int) (short) -1);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField14 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long17 = durationField14.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long19 = durationField14.getValueAsLong((long) 10);
        int int21 = durationField14.getValue((long) (byte) 10);
        boolean boolean22 = partial13.equals((java.lang.Object) durationField14);
        org.joda.time.Chronology chronology23 = partial13.getChronology();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial13.isBefore((org.joda.time.ReadablePartial) partial24);
        int int26 = offsetDateTimeField12.getMinimumValue((org.joda.time.ReadablePartial) partial24);
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = offsetDateTimeField12.getAsShortText(readablePartial27, locale28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test380");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField14 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType8, durationField13);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField7, dateTimeFieldType8);
        int int17 = zeroIsMaxDateTimeField15.getLeapAmount(1711909507403L);
        boolean boolean19 = zeroIsMaxDateTimeField15.isLeap(9003755385792000000L);
        int int20 = zeroIsMaxDateTimeField15.getMaximumValue();
        org.joda.time.Partial partial21 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField22 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long25 = durationField22.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long27 = durationField22.getValueAsLong((long) 10);
        int int29 = durationField22.getValue((long) (byte) 10);
        boolean boolean30 = partial21.equals((java.lang.Object) durationField22);
        org.joda.time.Chronology chronology31 = partial21.getChronology();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        boolean boolean33 = partial21.isBefore((org.joda.time.ReadablePartial) partial32);
        java.util.Locale locale35 = null;
        java.lang.String str36 = partial32.toString("723", locale35);
        org.joda.time.Partial partial37 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField38 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long41 = durationField38.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long43 = durationField38.getValueAsLong((long) 10);
        int int45 = durationField38.getValue((long) (byte) 10);
        boolean boolean46 = partial37.equals((java.lang.Object) durationField38);
        org.joda.time.Chronology chronology47 = partial37.getChronology();
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        boolean boolean49 = partial37.isBefore((org.joda.time.ReadablePartial) partial48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = partial37.getFieldTypes();
        java.lang.Object obj51 = null;
        boolean boolean52 = partial37.equals(obj51);
        boolean boolean53 = partial32.isBefore((org.joda.time.ReadablePartial) partial37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = partial37.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval55 = null;
        org.joda.time.ReadableInterval readableInterval56 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval55);
        org.joda.time.Chronology chronology57 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval55);
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval60 = null;
        org.joda.time.ReadableInterval readableInterval61 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval60);
        org.joda.time.ReadableInterval readableInterval62 = null;
        boolean boolean63 = readableInterval61.contains(readableInterval62);
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = readableInterval61.toPeriod(periodType64);
        int[] intArray67 = chronology57.get((org.joda.time.ReadablePeriod) period65, (-210866846400000L));
        org.joda.time.Partial partial68 = partial37.minus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.chrono.ISOChronology iSOChronology69 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField70 = iSOChronology69.minutes();
        org.joda.time.DateTimeZone dateTimeZone71 = iSOChronology69.getZone();
        org.joda.time.DateTimeField dateTimeField72 = iSOChronology69.yearOfCentury();
        boolean boolean73 = partial37.equals((java.lang.Object) iSOChronology69);
        org.joda.time.Chronology chronology74 = partial37.getChronology();
        int int75 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial37);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "723" + "'", str36, "723");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNotNull(readableInterval56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(readableInterval61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(partial68);
        org.junit.Assert.assertNotNull(iSOChronology69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test381");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = zonedChronology4.getDateTimeMillis(0, (int) (short) -1, (int) (byte) 10, 70, (int) (byte) -1, (-196), 54);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test382");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField5 = zonedChronology4.secondOfDay();
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        int[] intArray7 = partial6.getValues();
        int int8 = partial6.size();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.ReadableInterval readableInterval11 = null;
        boolean boolean12 = readableInterval10.contains(readableInterval11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = readableInterval10.toPeriod(periodType13);
        org.joda.time.Partial partial16 = partial6.withPeriodAdded((org.joda.time.ReadablePeriod) period14, (int) (short) 100);
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.ReadableInterval readableInterval18 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval17);
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval17);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DurationField durationField21 = chronology19.millis();
        org.joda.time.DurationField durationField22 = chronology19.centuries();
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval23);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        org.joda.time.DurationField durationField27 = chronology25.millis();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval29);
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.ReadableInterval readableInterval35 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval34);
        org.joda.time.ReadableInterval readableInterval36 = null;
        boolean boolean37 = readableInterval35.contains(readableInterval36);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = readableInterval35.toPeriod(periodType38);
        int[] intArray41 = chronology31.get((org.joda.time.ReadablePeriod) period39, (-210866846400000L));
        int[] intArray44 = chronology25.get((org.joda.time.ReadablePeriod) period39, 2173795348453L, (long) 1439);
        int[] intArray47 = chronology19.get((org.joda.time.ReadablePeriod) period39, 291L, 2580171L);
        org.joda.time.Partial partial49 = partial16.withPeriodAdded((org.joda.time.ReadablePeriod) period39, 0);
        int[] intArray52 = zonedChronology4.get((org.joda.time.ReadablePeriod) period39, (-210863520000000L), 315511200000L);
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology4.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant55 = null;
        int int56 = dateTimeZone54.getOffset(readableInstant55);
        java.util.TimeZone timeZone57 = dateTimeZone54.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        org.joda.time.ReadableInterval readableInterval59 = null;
        org.joda.time.ReadableInterval readableInterval60 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval59);
        org.joda.time.ReadableInterval readableInterval61 = null;
        boolean boolean62 = readableInterval60.contains(readableInterval61);
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.Period period64 = readableInterval60.toPeriod(periodType63);
        org.joda.time.DateTime dateTime65 = readableInterval60.getEnd();
        int int66 = dateTimeZone58.getOffset((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.chrono.ISOChronology iSOChronology67 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone58);
        org.joda.time.DurationField durationField68 = iSOChronology67.weeks();
        org.joda.time.ReadableInterval readableInterval69 = null;
        org.joda.time.ReadableInterval readableInterval70 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval69);
        org.joda.time.ReadableInterval readableInterval71 = null;
        boolean boolean72 = readableInterval70.contains(readableInterval71);
        org.joda.time.Duration duration73 = readableInterval70.toDuration();
        org.joda.time.Period period74 = readableInterval70.toPeriod();
        int[] intArray76 = iSOChronology67.get((org.joda.time.ReadablePeriod) period74, (long) (short) 10);
        long long79 = zonedChronology4.add((org.joda.time.ReadablePeriod) period74, 1711909521774L, 1969);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(partial16);
        org.junit.Assert.assertNotNull(readableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(readableInterval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(readableInterval35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(partial49);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[6691, 11, 4, 2, 18, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(timeZone57);
        org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(readableInterval60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(iSOChronology67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(readableInterval70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1711909521774L + "'", long79 == 1711909521774L);
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test383");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        long long16 = dividedDateTimeField11.roundFloor(291L);
        int int17 = dividedDateTimeField11.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str19 = dateTimeFieldType18.toString();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField20 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType18);
        long long22 = dividedDateTimeField11.roundHalfEven((-4000L));
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "dayOfMonth" + "'", str19, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test384");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField11.getAsShortText(readablePartial23, (int) ' ', locale25);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField28 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField11, 100);
        org.joda.time.ReadablePartial readablePartial29 = null;
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.ReadableInterval readableInterval31 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval30);
        org.joda.time.Chronology chronology32 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval30);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial34 = null;
        int[] intArray41 = new int[] { 53460006, ' ', (short) 100, 28531765, 53460006, 10 };
        int int42 = dateTimeField33.getMinimumValue(readablePartial34, intArray41);
        int int43 = dividedDateTimeField11.getMinimumValue(readablePartial29, intArray41);
        long long45 = dividedDateTimeField11.roundFloor(551169L);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = dividedDateTimeField11.getType();
        org.joda.time.chrono.ISOChronology iSOChronology47 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField48 = iSOChronology47.minutes();
        org.joda.time.DurationField durationField49 = iSOChronology47.months();
        org.joda.time.DurationField durationField50 = iSOChronology47.days();
        org.joda.time.DurationField durationField51 = iSOChronology47.weekyears();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException55 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType52, (java.lang.Number) 60035L, "");
        org.joda.time.DurationFieldType durationFieldType56 = dateTimeFieldType52.getDurationType();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField57 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType59 = dateTimeFieldType58.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField61 = new org.joda.time.field.PreciseDurationField(durationFieldType59, 28531825L);
        long long64 = preciseDurationField61.getMillis(60035L, (-210866846400000L));
        boolean boolean65 = preciseDurationField61.isPrecise();
        boolean boolean66 = preciseDurationField61.isSupported();
        int int67 = unsupportedDurationField57.compareTo((org.joda.time.DurationField) preciseDurationField61);
        boolean boolean68 = unsupportedDurationField57.isSupported();
        long long69 = unsupportedDurationField57.getUnitMillis();
        boolean boolean70 = unsupportedDurationField57.isPrecise();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.PreciseDateTimeField preciseDateTimeField71 = new org.joda.time.field.PreciseDateTimeField(dateTimeFieldType46, durationField51, (org.joda.time.DurationField) unsupportedDurationField57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unit duration field must be precise");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertNotNull(readableInterval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[53460006, 32, 100, 28531765, 53460006, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(iSOChronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(unsupportedDurationField57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1712908113875L + "'", long64 == 1712908113875L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test385");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        long long16 = dividedDateTimeField11.roundFloor(291L);
        boolean boolean17 = dividedDateTimeField11.isSupported();
        org.joda.time.DurationField durationField18 = dividedDateTimeField11.getDurationField();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField19 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11);
        int int21 = remainderDateTimeField19.get((-58877472891246L));
        int int22 = remainderDateTimeField19.getMinimumValue();
        int int23 = remainderDateTimeField19.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField27 = iSOChronology26.minutes();
        org.joda.time.DateTimeField dateTimeField28 = iSOChronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField29 = iSOChronology26.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology26.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology26.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology26.halfdayOfDay();
        org.joda.time.Partial partial33 = new org.joda.time.Partial(dateTimeFieldType24, 10, (org.joda.time.Chronology) iSOChronology26);
        int int34 = partial33.size();
        java.lang.String str35 = partial33.toString();
        int int36 = remainderDateTimeField19.getMaximumValue((org.joda.time.ReadablePartial) partial33);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = partial33.getValue(8446);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8446");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(iSOChronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "-W10" + "'", str35, "-W10");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test386");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        int[] intArray1 = partial0.getValues();
        int int2 = partial0.size();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.ReadableInterval readableInterval5 = null;
        boolean boolean6 = readableInterval4.contains(readableInterval5);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = readableInterval4.toPeriod(periodType7);
        org.joda.time.Partial partial10 = partial0.withPeriodAdded((org.joda.time.ReadablePeriod) period8, (int) (short) 100);
        java.lang.String str11 = partial10.toString();
        boolean boolean13 = partial10.equals((java.lang.Object) 1711909554485L);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Partial partial15 = partial10.without(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(partial10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(partial15);
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test387");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField11 = new org.joda.time.field.OffsetDateTimeField(dateTimeField8, dateTimeFieldType9, (int) (short) 1);
        boolean boolean12 = offsetDateTimeField11.isSupported();
        long long14 = offsetDateTimeField11.remainder((long) 53460006);
        long long16 = offsetDateTimeField11.roundHalfFloor(1711909507403L);
        int int18 = offsetDateTimeField11.get(551169L);
        long long21 = offsetDateTimeField11.getDifferenceAsLong(5727502319752L, 1711938393447L);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 3060006L + "'", long14 == 3060006L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711908000000L + "'", long16 == 1711908000000L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1115434L + "'", long21 == 1115434L);
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test388");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        int int27 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        int int38 = partial14.compareTo((org.joda.time.ReadablePartial) partial28);
        org.joda.time.chrono.ISOChronology iSOChronology39 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone40 = iSOChronology39.getZone();
        org.joda.time.DateTimeZone dateTimeZone41 = iSOChronology39.getZone();
        org.joda.time.DurationField durationField42 = iSOChronology39.days();
        org.joda.time.DateTimeZone dateTimeZone43 = iSOChronology39.getZone();
        boolean boolean44 = partial28.equals((java.lang.Object) dateTimeZone43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType46 = partial28.getFieldType(22);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 22");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(iSOChronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test389");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        int int38 = dividedDateTimeField37.getMinimumValue();
        org.joda.time.DurationField durationField39 = dividedDateTimeField37.iRangeDurationField;
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField41 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long44 = durationField41.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long46 = durationField41.getValueAsLong((long) 10);
        int int48 = durationField41.getValue((long) (byte) 10);
        boolean boolean49 = partial40.equals((java.lang.Object) durationField41);
        org.joda.time.Chronology chronology50 = partial40.getChronology();
        org.joda.time.Partial partial51 = new org.joda.time.Partial();
        boolean boolean52 = partial40.isBefore((org.joda.time.ReadablePartial) partial51);
        java.util.Locale locale54 = null;
        java.lang.String str55 = partial51.toString("723", locale54);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField57 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long60 = durationField57.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long62 = durationField57.getValueAsLong((long) 10);
        int int64 = durationField57.getValue((long) (byte) 10);
        boolean boolean65 = partial56.equals((java.lang.Object) durationField57);
        org.joda.time.Chronology chronology66 = partial56.getChronology();
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        boolean boolean68 = partial56.isBefore((org.joda.time.ReadablePartial) partial67);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = partial56.getFieldTypes();
        java.lang.Object obj70 = null;
        boolean boolean71 = partial56.equals(obj70);
        boolean boolean72 = partial51.isBefore((org.joda.time.ReadablePartial) partial56);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray73 = partial56.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval74 = null;
        org.joda.time.ReadableInterval readableInterval75 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval74);
        org.joda.time.Chronology chronology76 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval74);
        org.joda.time.DateTimeField dateTimeField77 = chronology76.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField78 = chronology76.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval79 = null;
        org.joda.time.ReadableInterval readableInterval80 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval79);
        org.joda.time.ReadableInterval readableInterval81 = null;
        boolean boolean82 = readableInterval80.contains(readableInterval81);
        org.joda.time.PeriodType periodType83 = null;
        org.joda.time.Period period84 = readableInterval80.toPeriod(periodType83);
        int[] intArray86 = chronology76.get((org.joda.time.ReadablePeriod) period84, (-210866846400000L));
        org.joda.time.Partial partial87 = partial56.minus((org.joda.time.ReadablePeriod) period84);
        org.joda.time.chrono.ISOChronology iSOChronology88 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField89 = iSOChronology88.minutes();
        org.joda.time.Partial partial90 = partial87.withChronologyRetainFields((org.joda.time.Chronology) iSOChronology88);
        java.util.Locale locale92 = null;
        java.lang.String str93 = dividedDateTimeField37.getAsText((org.joda.time.ReadablePartial) partial90, 52, locale92);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(durationField39);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "723" + "'", str55, "723");
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 10L + "'", long62 == 10L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray73);
        org.junit.Assert.assertNotNull(readableInterval75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(readableInterval80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(partial87);
        org.junit.Assert.assertNotNull(iSOChronology88);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(partial90);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "52" + "'", str93, "52");
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test390");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.millis();
        org.joda.time.DurationField durationField8 = chronology5.centuries();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.ReadableInterval readableInterval16 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = readableInterval21.toPeriod(periodType24);
        int[] intArray27 = chronology17.get((org.joda.time.ReadablePeriod) period25, (-210866846400000L));
        int[] intArray30 = chronology11.get((org.joda.time.ReadablePeriod) period25, 2173795348453L, (long) 1439);
        int[] intArray33 = chronology5.get((org.joda.time.ReadablePeriod) period25, 291L, 2580171L);
        int[] intArray36 = iSOChronology0.get((org.joda.time.ReadablePeriod) period25, (-30610224000000L), 291L);
        org.joda.time.DateTimeField dateTimeField37 = iSOChronology0.dayOfMonth();
        org.joda.time.DurationField durationField38 = iSOChronology0.months();
        org.joda.time.ReadableInterval readableInterval39 = null;
        org.joda.time.ReadableInterval readableInterval40 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval39);
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval39);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DurationField durationField43 = chronology41.millis();
        org.joda.time.DurationField durationField44 = chronology41.centuries();
        org.joda.time.ReadableInterval readableInterval45 = null;
        org.joda.time.ReadableInterval readableInterval46 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval45);
        org.joda.time.Chronology chronology47 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval45);
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfCentury();
        org.joda.time.DurationField durationField49 = chronology47.millis();
        org.joda.time.DateTimeField dateTimeField50 = chronology47.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval51 = null;
        org.joda.time.ReadableInterval readableInterval52 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval51);
        org.joda.time.Chronology chronology53 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval51);
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval56 = null;
        org.joda.time.ReadableInterval readableInterval57 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval56);
        org.joda.time.ReadableInterval readableInterval58 = null;
        boolean boolean59 = readableInterval57.contains(readableInterval58);
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Period period61 = readableInterval57.toPeriod(periodType60);
        int[] intArray63 = chronology53.get((org.joda.time.ReadablePeriod) period61, (-210866846400000L));
        int[] intArray66 = chronology47.get((org.joda.time.ReadablePeriod) period61, 2173795348453L, (long) 1439);
        int[] intArray69 = chronology41.get((org.joda.time.ReadablePeriod) period61, 291L, 2580171L);
        int[] intArray71 = iSOChronology0.get((org.joda.time.ReadablePeriod) period61, 32L);
        org.joda.time.DurationField durationField72 = iSOChronology0.weekyears();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(readableInterval16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(readableInterval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(readableInterval46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(readableInterval52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(readableInterval57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0, 0, 0, 0, 0, 0, 0, 32]");
        org.junit.Assert.assertNotNull(durationField72);
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test391");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial4 = null;
        int int5 = dateTimeField3.getMinimumValue(readablePartial4);
        org.joda.time.ReadablePartial readablePartial6 = null;
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval7);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.joda.time.DurationField durationField11 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int[] intArray21 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int22 = dateTimeField13.getMaximumValue(readablePartial14, intArray21);
        int int23 = dateTimeField3.getMinimumValue(readablePartial6, intArray21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField26 = new org.joda.time.field.RemainderDateTimeField(dateTimeField3, dateTimeFieldType24, 10);
        long long29 = remainderDateTimeField26.addWrapField(3600000L, 0);
        java.util.Locale locale31 = null;
        java.lang.String str32 = remainderDateTimeField26.getAsText((-60000), locale31);
        long long34 = remainderDateTimeField26.remainder((-62135567870746L));
        boolean boolean35 = remainderDateTimeField26.isLenient();
        int int36 = remainderDateTimeField26.getDivisor();
        java.util.Locale locale39 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long40 = remainderDateTimeField26.set(551154L, "2151-07-01T12:51:48.321Z/2151-07-01T12:51:48.321Z", locale39);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2151-07-01T12:51:48.321Z/2151-07-01T12:51:48.321Z\" for hourOfHalfday is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 24 + "'", int22 == 24);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3600000L + "'", long29 == 3600000L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-60000" + "'", str32, "-60000");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 28929254L + "'", long34 == 28929254L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test392");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology6 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology2, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = zonedChronology6.getZone();
        org.joda.time.DurationField durationField8 = zonedChronology6.centuries();
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology6.dayOfMonth();
        boolean boolean10 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) zonedChronology6);
        org.joda.time.DurationField durationField11 = zonedChronology6.months();
        org.joda.time.DateTimeField dateTimeField12 = zonedChronology6.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test393");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.ReadableInterval readableInterval3 = null;
        boolean boolean4 = readableInterval2.contains(readableInterval3);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = readableInterval2.toPeriod(periodType5);
        org.joda.time.DateTime dateTime7 = readableInterval2.getEnd();
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField10 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long13 = durationField10.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long15 = durationField10.getValueAsLong((long) 10);
        int int17 = durationField10.getValue((long) (byte) 10);
        boolean boolean18 = partial9.equals((java.lang.Object) durationField10);
        org.joda.time.Chronology chronology19 = partial9.getChronology();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        boolean boolean21 = partial9.isBefore((org.joda.time.ReadablePartial) partial20);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = partial9.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.ReadableInterval readableInterval24 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval23);
        long long25 = readableInterval24.getStartMillis();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        long long28 = readableInterval27.getEndMillis();
        boolean boolean29 = readableInterval24.overlaps(readableInterval27);
        boolean boolean30 = partial9.equals((java.lang.Object) readableInterval24);
        long long32 = chronology8.set((org.joda.time.ReadablePartial) partial9, 9700L);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(readableInterval24);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 24595579173176L + "'", long25 == 24595579173176L);
        org.junit.Assert.assertNotNull(readableInterval27);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 24595579173176L + "'", long28 == 24595579173176L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 9700L + "'", long32 == 9700L);
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test394");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.weekyear();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.clockhourOfDay();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test395");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, (java.lang.Number) 60035L, "");
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType0.getDurationType();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField5 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType6.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField9 = new org.joda.time.field.PreciseDurationField(durationFieldType7, 28531825L);
        long long12 = preciseDurationField9.getMillis(60035L, (-210866846400000L));
        boolean boolean13 = preciseDurationField9.isPrecise();
        boolean boolean14 = preciseDurationField9.isSupported();
        int int15 = unsupportedDurationField5.compareTo((org.joda.time.DurationField) preciseDurationField9);
        java.lang.String str16 = unsupportedDurationField5.toString();
        boolean boolean17 = unsupportedDurationField5.isSupported();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(unsupportedDurationField5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1712908113875L + "'", long12 == 1712908113875L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UnsupportedDurationField[hours]" + "'", str16, "UnsupportedDurationField[hours]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test396");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.year();
        org.joda.time.DurationField durationField5 = iSOChronology0.months();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str7 = dateTimeZone6.toString();
        java.lang.String str9 = dateTimeZone6.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeUtils.getZone(dateTimeZone6);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        java.lang.Object obj12 = null;
        boolean boolean13 = cachedDateTimeZone11.equals(obj12);
        long long15 = cachedDateTimeZone11.nextTransition(2580171L);
        boolean boolean16 = cachedDateTimeZone11.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology17 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, (org.joda.time.DateTimeZone) cachedDateTimeZone11);
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField19 = iSOChronology18.minutes();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology18.millisOfDay();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval21);
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfCentury();
        org.joda.time.DurationField durationField25 = chronology23.millis();
        org.joda.time.DurationField durationField26 = chronology23.centuries();
        org.joda.time.ReadableInterval readableInterval27 = null;
        org.joda.time.ReadableInterval readableInterval28 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval27);
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval27);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfCentury();
        org.joda.time.DurationField durationField31 = chronology29.millis();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.ReadableInterval readableInterval34 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval33);
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval33);
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval38 = null;
        org.joda.time.ReadableInterval readableInterval39 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval38);
        org.joda.time.ReadableInterval readableInterval40 = null;
        boolean boolean41 = readableInterval39.contains(readableInterval40);
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Period period43 = readableInterval39.toPeriod(periodType42);
        int[] intArray45 = chronology35.get((org.joda.time.ReadablePeriod) period43, (-210866846400000L));
        int[] intArray48 = chronology29.get((org.joda.time.ReadablePeriod) period43, 2173795348453L, (long) 1439);
        int[] intArray51 = chronology23.get((org.joda.time.ReadablePeriod) period43, 291L, 2580171L);
        int[] intArray54 = iSOChronology18.get((org.joda.time.ReadablePeriod) period43, (-30610224000000L), 291L);
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology18.dayOfMonth();
        org.joda.time.DurationField durationField56 = iSOChronology18.months();
        org.joda.time.ReadableInterval readableInterval57 = null;
        org.joda.time.ReadableInterval readableInterval58 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval57);
        org.joda.time.Chronology chronology59 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval57);
        org.joda.time.DateTimeField dateTimeField60 = chronology59.yearOfCentury();
        org.joda.time.DurationField durationField61 = chronology59.millis();
        org.joda.time.DurationField durationField62 = chronology59.centuries();
        org.joda.time.ReadableInterval readableInterval63 = null;
        org.joda.time.ReadableInterval readableInterval64 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval63);
        org.joda.time.Chronology chronology65 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval63);
        org.joda.time.DateTimeField dateTimeField66 = chronology65.yearOfCentury();
        org.joda.time.DurationField durationField67 = chronology65.millis();
        org.joda.time.DateTimeField dateTimeField68 = chronology65.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval69 = null;
        org.joda.time.ReadableInterval readableInterval70 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval69);
        org.joda.time.Chronology chronology71 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval69);
        org.joda.time.DateTimeField dateTimeField72 = chronology71.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField73 = chronology71.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval74 = null;
        org.joda.time.ReadableInterval readableInterval75 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval74);
        org.joda.time.ReadableInterval readableInterval76 = null;
        boolean boolean77 = readableInterval75.contains(readableInterval76);
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.Period period79 = readableInterval75.toPeriod(periodType78);
        int[] intArray81 = chronology71.get((org.joda.time.ReadablePeriod) period79, (-210866846400000L));
        int[] intArray84 = chronology65.get((org.joda.time.ReadablePeriod) period79, 2173795348453L, (long) 1439);
        int[] intArray87 = chronology59.get((org.joda.time.ReadablePeriod) period79, 291L, 2580171L);
        int[] intArray89 = iSOChronology18.get((org.joda.time.ReadablePeriod) period79, 32L);
        int[] intArray92 = iSOChronology0.get((org.joda.time.ReadablePeriod) period79, 5727499200000L, 5727502323097L);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(cachedDateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2580171L + "'", long15 == 2580171L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(zonedChronology17);
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(readableInterval22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(readableInterval28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(readableInterval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(readableInterval39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[970, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(readableInterval58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(readableInterval64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(readableInterval70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(readableInterval75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0, 0, 0, 0, 0, 0, 0, 32]");
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[0, 0, 0, 0, 0, 52, 3, 97]");
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test397");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, (java.lang.Number) 60035L, "");
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType0.getDurationType();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField5 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType6.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField9 = new org.joda.time.field.PreciseDurationField(durationFieldType7, 28531825L);
        long long12 = preciseDurationField9.getMillis(60035L, (-210866846400000L));
        boolean boolean13 = preciseDurationField9.isPrecise();
        boolean boolean14 = preciseDurationField9.isSupported();
        int int15 = unsupportedDurationField5.compareTo((org.joda.time.DurationField) preciseDurationField9);
        boolean boolean16 = unsupportedDurationField5.isSupported();
        long long17 = unsupportedDurationField5.getUnitMillis();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = unsupportedDurationField5.add(32001L, 315479340004L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: hours field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(unsupportedDurationField5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1712908113875L + "'", long12 == 1712908113875L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test398");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.centuryOfEra();
        org.joda.time.DurationField durationField6 = iSOChronology0.millis();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test399");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName((-210866846400000L));
        boolean boolean5 = dateTimeZone1.isFixed();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        boolean boolean7 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.IllegalFieldValueException illegalFieldValueException11 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, (java.lang.Number) 1711909511784L, (java.lang.Number) 969L, (java.lang.Number) 22410261324L);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType12.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField15 = new org.joda.time.field.PreciseDurationField(durationFieldType13, 28531825L);
        long long18 = preciseDurationField15.getMillis(60035L, (-210866846400000L));
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField19 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, (org.joda.time.DurationField) preciseDurationField15);
        org.joda.time.DurationField durationField20 = unsupportedDateTimeField19.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1712908113875L + "'", long18 == 1712908113875L);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField19);
        org.junit.Assert.assertNull(durationField20);
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test400");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField11 = new org.joda.time.field.OffsetDateTimeField(dateTimeField8, dateTimeFieldType9, (int) (short) 1);
        int int13 = offsetDateTimeField11.get(60000L);
        int int14 = offsetDateTimeField11.getMaximumValue();
        boolean boolean15 = offsetDateTimeField11.isSupported();
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField17 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long20 = durationField17.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long22 = durationField17.getValueAsLong((long) 10);
        int int24 = durationField17.getValue((long) (byte) 10);
        boolean boolean25 = partial16.equals((java.lang.Object) durationField17);
        org.joda.time.Chronology chronology26 = partial16.getChronology();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial16.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = partial16.getFieldTypes();
        org.joda.time.Partial partial30 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField31 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long34 = durationField31.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long36 = durationField31.getValueAsLong((long) 10);
        int int38 = durationField31.getValue((long) (byte) 10);
        boolean boolean39 = partial30.equals((java.lang.Object) durationField31);
        org.joda.time.Chronology chronology40 = partial30.getChronology();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        boolean boolean42 = partial30.isBefore((org.joda.time.ReadablePartial) partial41);
        int int43 = partial16.compareTo((org.joda.time.ReadablePartial) partial30);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField45 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long48 = durationField45.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long50 = durationField45.getValueAsLong((long) 10);
        int int52 = durationField45.getValue((long) (byte) 10);
        boolean boolean53 = partial44.equals((java.lang.Object) durationField45);
        int int54 = partial30.compareTo((org.joda.time.ReadablePartial) partial44);
        org.joda.time.ReadableInterval readableInterval55 = null;
        org.joda.time.ReadableInterval readableInterval56 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval55);
        org.joda.time.ReadableInterval readableInterval57 = null;
        boolean boolean58 = readableInterval56.contains(readableInterval57);
        org.joda.time.Duration duration59 = readableInterval56.toDuration();
        org.joda.time.DateTime dateTime60 = readableInterval56.getEnd();
        org.joda.time.DateTime dateTime61 = readableInterval56.getStart();
        org.joda.time.DateTime dateTime62 = partial44.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        java.util.Locale locale64 = null;
        java.lang.String str65 = offsetDateTimeField11.getAsShortText((org.joda.time.ReadablePartial) partial44, 24, locale64);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 24 + "'", int14 == 24);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10L + "'", long36 == 10L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(readableInterval56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "24" + "'", str65, "24");
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test401");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone1 = iSOChronology0.getZone();
        org.joda.time.DateTimeZone dateTimeZone2 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField3 = iSOChronology0.days();
        org.joda.time.DateTimeZone dateTimeZone4 = iSOChronology0.getZone();
        org.joda.time.Chronology chronology5 = iSOChronology0.withUTC();
        org.joda.time.DurationField durationField6 = iSOChronology0.years();
        org.joda.time.ReadablePartial readablePartial7 = null;
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.ReadableInterval readableInterval9 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval8);
        org.joda.time.Chronology chronology10 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval8);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.yearOfCentury();
        org.joda.time.DurationField durationField12 = chronology10.millis();
        org.joda.time.DurationField durationField13 = chronology10.centuries();
        org.joda.time.Chronology chronology14 = chronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = chronology10.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField19 = new org.joda.time.field.OffsetDateTimeField(dateTimeField16, dateTimeFieldType17, (int) (short) 1);
        boolean boolean20 = offsetDateTimeField19.isSupported();
        long long22 = offsetDateTimeField19.remainder((long) 53460006);
        long long24 = offsetDateTimeField19.roundHalfFloor(1711909507403L);
        int int26 = offsetDateTimeField19.get(551169L);
        long long28 = offsetDateTimeField19.roundFloor((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField33 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) offsetDateTimeField19, dateTimeFieldType29, (int) '#', (int) (byte) 10, 3);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField37 = iSOChronology36.minutes();
        org.joda.time.DateTimeField dateTimeField38 = iSOChronology36.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = iSOChronology36.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField40 = iSOChronology36.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField41 = iSOChronology36.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology36.halfdayOfDay();
        org.joda.time.Partial partial43 = new org.joda.time.Partial(dateTimeFieldType34, 10, (org.joda.time.Chronology) iSOChronology36);
        int int44 = partial43.size();
        java.lang.String str45 = partial43.toString();
        org.joda.time.chrono.ISOChronology iSOChronology47 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField48 = iSOChronology47.minutes();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str50 = dateTimeZone49.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology51 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology47, dateTimeZone49);
        org.joda.time.ReadableInterval readableInterval52 = null;
        org.joda.time.ReadableInterval readableInterval53 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval52);
        org.joda.time.ReadableInterval readableInterval54 = null;
        boolean boolean55 = readableInterval53.contains(readableInterval54);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = readableInterval53.toPeriod(periodType56);
        org.joda.time.DateTime dateTime58 = readableInterval53.getEnd();
        org.joda.time.MutableInterval mutableInterval59 = readableInterval53.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval60 = null;
        org.joda.time.ReadableInterval readableInterval61 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval60);
        org.joda.time.ReadableInterval readableInterval62 = null;
        boolean boolean63 = readableInterval61.contains(readableInterval62);
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = readableInterval61.toPeriod(periodType64);
        org.joda.time.DateTime dateTime66 = readableInterval61.getEnd();
        org.joda.time.ReadableInterval readableInterval67 = null;
        org.joda.time.ReadableInterval readableInterval68 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval67);
        org.joda.time.ReadableInterval readableInterval69 = null;
        boolean boolean70 = readableInterval68.contains(readableInterval69);
        boolean boolean71 = readableInterval61.overlaps(readableInterval68);
        boolean boolean72 = readableInterval53.contains(readableInterval68);
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.PeriodType periodType74 = org.joda.time.DateTimeUtils.getPeriodType(periodType73);
        org.joda.time.PeriodType periodType75 = org.joda.time.DateTimeUtils.getPeriodType(periodType74);
        org.joda.time.Period period76 = readableInterval53.toPeriod(periodType75);
        int[] intArray79 = zonedChronology51.get((org.joda.time.ReadablePeriod) period76, (-53459996L), 27647338425L);
        int[] intArray81 = offsetDateTimeField19.addWrapPartial((org.joda.time.ReadablePartial) partial43, (int) (short) 1, intArray79, 10);
        // The following exception was thrown during execution in test generation
        try {
            iSOChronology0.validate(readablePartial7, intArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(readableInterval9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 3060006L + "'", long22 == 3060006L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1711908000000L + "'", long24 == 1711908000000L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-3600000L) + "'", long28 == (-3600000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-W10" + "'", str45, "-W10");
        org.junit.Assert.assertNotNull(iSOChronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "UTC" + "'", str50, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology51);
        org.junit.Assert.assertNotNull(readableInterval53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(mutableInterval59);
        org.junit.Assert.assertNotNull(readableInterval61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(readableInterval68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, 20, 2, 2, 14, 39, 58, 421]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 20, 2, 2, 14, 39, 58, 421]");
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test402");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str1 = dateTimeZone0.toString();
        java.lang.String str3 = dateTimeZone0.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeUtils.getZone(dateTimeZone0);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone5 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone4);
        java.lang.Object obj6 = null;
        boolean boolean7 = cachedDateTimeZone5.equals(obj6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        boolean boolean13 = durationFieldType8.isSupported(chronology11);
        org.joda.time.DurationField durationField14 = chronology11.eras();
        java.lang.String str15 = chronology11.toString();
        boolean boolean16 = cachedDateTimeZone5.equals((java.lang.Object) chronology11);
        java.lang.String str18 = cachedDateTimeZone5.getNameKey(0L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "UTC" + "'", str1, "UTC");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(cachedDateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[UTC]" + "'", str15, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test403");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        long long16 = dividedDateTimeField11.roundFloor(291L);
        boolean boolean17 = dividedDateTimeField11.isSupported();
        org.joda.time.DurationField durationField18 = dividedDateTimeField11.getDurationField();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField19 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11);
        org.joda.time.DurationField durationField20 = dividedDateTimeField11.getDurationField();
        java.lang.String str22 = dividedDateTimeField11.getAsShortText(1232572248000000L);
        long long24 = dividedDateTimeField11.roundHalfFloor(315479340004L);
        org.joda.time.DurationField durationField25 = dividedDateTimeField11.getDurationField();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "4102" + "'", str22, "4102");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 315532800000L + "'", long24 == 315532800000L);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test404");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.Chronology chronology3 = iSOChronology0.withZone(dateTimeZone1);
        org.joda.time.Partial partial4 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField6 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long9 = durationField6.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long11 = durationField6.getValueAsLong((long) 10);
        int int13 = durationField6.getValue((long) (byte) 10);
        boolean boolean14 = partial5.equals((java.lang.Object) durationField6);
        boolean boolean15 = partial4.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = partial4.getFields();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.ReadableInterval readableInterval18 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval17);
        org.joda.time.ReadableInterval readableInterval19 = null;
        boolean boolean20 = readableInterval18.contains(readableInterval19);
        org.joda.time.Duration duration21 = readableInterval18.toDuration();
        org.joda.time.DateTime dateTime22 = readableInterval18.getEnd();
        org.joda.time.Period period23 = readableInterval18.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant25 = null;
        int int26 = dateTimeZone24.getOffset(readableInstant25);
        java.util.TimeZone timeZone27 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        boolean boolean32 = readableInterval30.contains(readableInterval31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = readableInterval30.toPeriod(periodType33);
        org.joda.time.DateTime dateTime35 = readableInterval30.getEnd();
        int int36 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) dateTime35);
        boolean boolean37 = readableInterval18.isBefore((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime38 = partial4.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.chrono.ISOChronology iSOChronology39 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str41 = dateTimeZone40.toString();
        org.joda.time.Chronology chronology42 = iSOChronology39.withZone(dateTimeZone40);
        org.joda.time.Partial partial43 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology39);
        org.joda.time.Partial partial44 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField45 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long48 = durationField45.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long50 = durationField45.getValueAsLong((long) 10);
        int int52 = durationField45.getValue((long) (byte) 10);
        boolean boolean53 = partial44.equals((java.lang.Object) durationField45);
        org.joda.time.Chronology chronology54 = partial44.getChronology();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        boolean boolean56 = partial44.isBefore((org.joda.time.ReadablePartial) partial55);
        java.lang.String str57 = partial44.toStringList();
        boolean boolean58 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) partial44);
        int int59 = partial43.compareTo((org.joda.time.ReadablePartial) partial44);
        boolean boolean60 = partial4.isMatch((org.joda.time.ReadablePartial) partial43);
        org.joda.time.ReadablePartial readablePartial61 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int62 = partial43.compareTo(readablePartial61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
        org.junit.Assert.assertNotNull(readableInterval18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(iSOChronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test405");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str4 = dateTimeZone3.toString();
        java.lang.String str6 = dateTimeZone3.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeUtils.getZone(dateTimeZone3);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone8 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone8);
        org.joda.time.DurationField durationField10 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.minuteOfDay();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField14 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long17 = durationField14.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long19 = durationField14.getValueAsLong((long) 10);
        int int21 = durationField14.getValue((long) (byte) 10);
        boolean boolean22 = partial13.equals((java.lang.Object) durationField14);
        org.joda.time.Chronology chronology23 = partial13.getChronology();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial13.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial13.getFieldTypes();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField28 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long31 = durationField28.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long33 = durationField28.getValueAsLong((long) 10);
        int int35 = durationField28.getValue((long) (byte) 10);
        boolean boolean36 = partial27.equals((java.lang.Object) durationField28);
        org.joda.time.Chronology chronology37 = partial27.getChronology();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial27.isBefore((org.joda.time.ReadablePartial) partial38);
        int int40 = partial13.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField42 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long45 = durationField42.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long47 = durationField42.getValueAsLong((long) 10);
        int int49 = durationField42.getValue((long) (byte) 10);
        boolean boolean50 = partial41.equals((java.lang.Object) durationField42);
        int int51 = partial27.compareTo((org.joda.time.ReadablePartial) partial41);
        int[] intArray52 = partial41.getValues();
        int[] intArray53 = partial41.getValues();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        int[] intArray55 = partial54.getValues();
        iSOChronology0.validate((org.joda.time.ReadablePartial) partial41, intArray55);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = partial41.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval58 = null;
        org.joda.time.ReadableInterval readableInterval59 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval58);
        org.joda.time.Chronology chronology60 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval58);
        org.joda.time.DateTimeField dateTimeField61 = chronology60.yearOfCentury();
        org.joda.time.DurationField durationField62 = chronology60.millis();
        org.joda.time.DateTimeField dateTimeField63 = chronology60.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval64 = null;
        org.joda.time.ReadableInterval readableInterval65 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval64);
        org.joda.time.Chronology chronology66 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval64);
        org.joda.time.DateTimeField dateTimeField67 = chronology66.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField68 = chronology66.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval69 = null;
        org.joda.time.ReadableInterval readableInterval70 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval69);
        org.joda.time.ReadableInterval readableInterval71 = null;
        boolean boolean72 = readableInterval70.contains(readableInterval71);
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = readableInterval70.toPeriod(periodType73);
        int[] intArray76 = chronology66.get((org.joda.time.ReadablePeriod) period74, (-210866846400000L));
        int[] intArray79 = chronology60.get((org.joda.time.ReadablePeriod) period74, 2173795348453L, (long) 1439);
        org.joda.time.Partial partial80 = partial41.minus((org.joda.time.ReadablePeriod) period74);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(cachedDateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertNotNull(readableInterval59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(readableInterval65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(readableInterval70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(partial80);
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test406");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        int int38 = remainderDateTimeField22.getDivisor();
        org.joda.time.DateTimeField dateTimeField39 = remainderDateTimeField22.getWrappedField();
        long long41 = remainderDateTimeField22.roundCeiling(1711909517307L);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = remainderDateTimeField22.getType();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1735689600000L + "'", long41 == 1735689600000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test407");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField4 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long7 = durationField4.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long9 = durationField4.getValueAsLong((long) 10);
        int int11 = durationField4.getValue((long) (byte) 10);
        boolean boolean12 = partial3.equals((java.lang.Object) durationField4);
        org.joda.time.Chronology chronology13 = partial3.getChronology();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        boolean boolean15 = partial3.isBefore((org.joda.time.ReadablePartial) partial14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = partial3.getFieldTypes();
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField18 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long21 = durationField18.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long23 = durationField18.getValueAsLong((long) 10);
        int int25 = durationField18.getValue((long) (byte) 10);
        boolean boolean26 = partial17.equals((java.lang.Object) durationField18);
        org.joda.time.Chronology chronology27 = partial17.getChronology();
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        boolean boolean29 = partial17.isBefore((org.joda.time.ReadablePartial) partial28);
        int int30 = partial3.compareTo((org.joda.time.ReadablePartial) partial17);
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField32 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long35 = durationField32.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long37 = durationField32.getValueAsLong((long) 10);
        int int39 = durationField32.getValue((long) (byte) 10);
        boolean boolean40 = partial31.equals((java.lang.Object) durationField32);
        int int41 = partial17.compareTo((org.joda.time.ReadablePartial) partial31);
        int[] intArray42 = partial31.getValues();
        int[] intArray44 = iSOChronology0.get((org.joda.time.ReadablePartial) partial31, 10L);
        // The following exception was thrown during execution in test generation
        try {
            long long49 = iSOChronology0.getDateTimeMillis(9, 274, (-60000), (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 274 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10L + "'", long23 == 10L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10L + "'", long37 == 10L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[]");
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test408");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.yearOfCentury();
        org.joda.time.DurationField durationField6 = iSOChronology0.seconds();
        org.joda.time.DurationField durationField7 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.centuryOfEra();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone13 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.Chronology chronology14 = iSOChronology0.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean16 = fixedDateTimeZone13.equals((java.lang.Object) dateTimeFieldType15);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test409");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.millisOfDay();
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone6 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.Chronology chronology7 = gregorianChronology0.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone6);
        org.joda.time.DurationField durationField8 = gregorianChronology0.seconds();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test410");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.getDifferenceAsLong((-210861660779418L), 3600000L);
        boolean boolean10 = unsupportedDateTimeField6.isLenient();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval12);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfCentury();
        boolean boolean16 = durationFieldType11.isSupported(chronology14);
        org.joda.time.DurationField durationField17 = chronology14.halfdays();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField23 = new org.joda.time.field.OffsetDateTimeField(dateTimeField18, dateTimeFieldType19, 4, (int) ' ', (int) (short) -1);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField25 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long28 = durationField25.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long30 = durationField25.getValueAsLong((long) 10);
        int int32 = durationField25.getValue((long) (byte) 10);
        boolean boolean33 = partial24.equals((java.lang.Object) durationField25);
        org.joda.time.Chronology chronology34 = partial24.getChronology();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial24.isBefore((org.joda.time.ReadablePartial) partial35);
        int int37 = offsetDateTimeField23.getMinimumValue((org.joda.time.ReadablePartial) partial35);
        org.joda.time.ReadableInterval readableInterval39 = null;
        org.joda.time.ReadableInterval readableInterval40 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval39);
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval39);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DurationField durationField43 = chronology41.millis();
        org.joda.time.DurationField durationField44 = chronology41.centuries();
        org.joda.time.Chronology chronology45 = chronology41.withUTC();
        org.joda.time.DateTimeField dateTimeField46 = chronology41.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField47 = chronology41.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField50 = new org.joda.time.field.OffsetDateTimeField(dateTimeField47, dateTimeFieldType48, (int) (short) 1);
        boolean boolean51 = offsetDateTimeField50.isSupported();
        long long53 = offsetDateTimeField50.remainder((long) 53460006);
        boolean boolean54 = offsetDateTimeField50.isLenient();
        int int57 = offsetDateTimeField50.getDifference(0L, 1367L);
        java.lang.String str58 = offsetDateTimeField50.toString();
        org.joda.time.ReadablePartial readablePartial59 = null;
        org.joda.time.chrono.ISOChronology iSOChronology60 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField61 = iSOChronology60.minutes();
        org.joda.time.DateTimeField dateTimeField62 = iSOChronology60.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str64 = dateTimeZone63.toString();
        java.lang.String str66 = dateTimeZone63.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeUtils.getZone(dateTimeZone63);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone68 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone67);
        org.joda.time.Chronology chronology69 = iSOChronology60.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone68);
        org.joda.time.DurationField durationField70 = iSOChronology60.years();
        org.joda.time.DateTimeField dateTimeField71 = iSOChronology60.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval72 = null;
        org.joda.time.ReadableInterval readableInterval73 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval72);
        org.joda.time.Chronology chronology74 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval72);
        org.joda.time.DateTimeField dateTimeField75 = chronology74.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField76 = chronology74.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval77 = null;
        org.joda.time.ReadableInterval readableInterval78 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval77);
        org.joda.time.ReadableInterval readableInterval79 = null;
        boolean boolean80 = readableInterval78.contains(readableInterval79);
        org.joda.time.PeriodType periodType81 = null;
        org.joda.time.Period period82 = readableInterval78.toPeriod(periodType81);
        int[] intArray84 = chronology74.get((org.joda.time.ReadablePeriod) period82, (-210866846400000L));
        int[] intArray86 = iSOChronology60.get((org.joda.time.ReadablePeriod) period82, 291L);
        int int87 = offsetDateTimeField50.getMaximumValue(readablePartial59, intArray86);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray89 = unsupportedDateTimeField6.addWrapPartial((org.joda.time.ReadablePartial) partial35, (int) '4', intArray86, 323506);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210861664379418L) + "'", long9 == (-210861664379418L));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 32 + "'", int37 == 32);
        org.junit.Assert.assertNotNull(readableInterval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 3060006L + "'", long53 == 3060006L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "DateTimeField[millisOfDay]" + "'", str58, "DateTimeField[millisOfDay]");
        org.junit.Assert.assertNotNull(iSOChronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "UTC" + "'", str64, "UTC");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(cachedDateTimeZone68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(readableInterval73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(readableInterval78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 24 + "'", int87 == 24);
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test411");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        int int27 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        int int38 = partial14.compareTo((org.joda.time.ReadablePartial) partial28);
        int[] intArray39 = partial28.getValues();
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField41 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long44 = durationField41.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long46 = durationField41.getValueAsLong((long) 10);
        int int48 = durationField41.getValue((long) (byte) 10);
        boolean boolean49 = partial40.equals((java.lang.Object) durationField41);
        boolean boolean50 = partial28.isBefore((org.joda.time.ReadablePartial) partial40);
        java.util.Locale locale52 = null;
        java.lang.String str53 = partial28.toString("471", locale52);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "471" + "'", str53, "471");
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test412");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.year();
        org.joda.time.DurationField durationField5 = iSOChronology0.millis();
        org.joda.time.DurationField durationField6 = iSOChronology0.hours();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test413");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, (java.lang.Number) 60035L, "");
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType0.getDurationType();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField5 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType6.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField9 = new org.joda.time.field.PreciseDurationField(durationFieldType7, 28531825L);
        long long12 = preciseDurationField9.getMillis(60035L, (-210866846400000L));
        boolean boolean13 = preciseDurationField9.isPrecise();
        boolean boolean14 = preciseDurationField9.isSupported();
        int int15 = unsupportedDurationField5.compareTo((org.joda.time.DurationField) preciseDurationField9);
        boolean boolean16 = unsupportedDurationField5.isSupported();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = unsupportedDurationField5.getDifferenceAsLong(1711909558172L, 551169L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: hours field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(unsupportedDurationField5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1712908113875L + "'", long12 == 1712908113875L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test414");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField11 = new org.joda.time.field.OffsetDateTimeField(dateTimeField8, dateTimeFieldType9, (int) (short) 1);
        int int12 = offsetDateTimeField11.getOffset();
        int int13 = offsetDateTimeField11.getOffset();
        int int14 = offsetDateTimeField11.getMinimumValue();
        java.lang.String str16 = offsetDateTimeField11.getAsShortText((long) 12);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test415");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = chronology6.add(readablePeriod7, 0L, (int) (short) 10);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.clockhourOfHalfday();
        long long14 = dateTimeField11.addWrapField(0L, 1);
        long long17 = dateTimeField11.add(0L, (int) 'a');
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField19 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long22 = durationField19.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long24 = durationField19.getValueAsLong((long) 10);
        int int26 = durationField19.getValue((long) (byte) 10);
        boolean boolean27 = partial18.equals((java.lang.Object) durationField19);
        org.joda.time.Chronology chronology28 = partial18.getChronology();
        org.joda.time.Partial partial29 = new org.joda.time.Partial();
        boolean boolean30 = partial18.isBefore((org.joda.time.ReadablePartial) partial29);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = partial18.getFieldTypes();
        org.joda.time.Partial partial32 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField33 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long36 = durationField33.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long38 = durationField33.getValueAsLong((long) 10);
        int int40 = durationField33.getValue((long) (byte) 10);
        boolean boolean41 = partial32.equals((java.lang.Object) durationField33);
        org.joda.time.Chronology chronology42 = partial32.getChronology();
        org.joda.time.Partial partial43 = new org.joda.time.Partial();
        boolean boolean44 = partial32.isBefore((org.joda.time.ReadablePartial) partial43);
        int int45 = partial18.compareTo((org.joda.time.ReadablePartial) partial32);
        org.joda.time.Partial partial46 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField47 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long50 = durationField47.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long52 = durationField47.getValueAsLong((long) 10);
        int int54 = durationField47.getValue((long) (byte) 10);
        boolean boolean55 = partial46.equals((java.lang.Object) durationField47);
        int int56 = partial32.compareTo((org.joda.time.ReadablePartial) partial46);
        java.util.Locale locale58 = null;
        java.lang.String str59 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) partial46, 53460006, locale58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.centuryOfEra();
        java.lang.String str61 = dateTimeFieldType60.getName();
        int int62 = partial46.indexOf(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 3600000L + "'", long14 == 3600000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 349200000L + "'", long17 == 349200000L);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10L + "'", long52 == 10L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "53460006" + "'", str59, "53460006");
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "centuryOfEra" + "'", str61, "centuryOfEra");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test416");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.yearOfCentury();
        org.joda.time.DurationField durationField6 = iSOChronology0.seconds();
        org.joda.time.DurationField durationField7 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.minuteOfDay();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test417");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str4 = dateTimeZone3.toString();
        java.lang.String str6 = dateTimeZone3.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeUtils.getZone(dateTimeZone3);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone8 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone8);
        org.joda.time.DurationField durationField10 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.minuteOfDay();
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField14 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long17 = durationField14.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long19 = durationField14.getValueAsLong((long) 10);
        int int21 = durationField14.getValue((long) (byte) 10);
        boolean boolean22 = partial13.equals((java.lang.Object) durationField14);
        org.joda.time.Chronology chronology23 = partial13.getChronology();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial13.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = partial13.getFieldTypes();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField28 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long31 = durationField28.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long33 = durationField28.getValueAsLong((long) 10);
        int int35 = durationField28.getValue((long) (byte) 10);
        boolean boolean36 = partial27.equals((java.lang.Object) durationField28);
        org.joda.time.Chronology chronology37 = partial27.getChronology();
        org.joda.time.Partial partial38 = new org.joda.time.Partial();
        boolean boolean39 = partial27.isBefore((org.joda.time.ReadablePartial) partial38);
        int int40 = partial13.compareTo((org.joda.time.ReadablePartial) partial27);
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField42 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long45 = durationField42.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long47 = durationField42.getValueAsLong((long) 10);
        int int49 = durationField42.getValue((long) (byte) 10);
        boolean boolean50 = partial41.equals((java.lang.Object) durationField42);
        int int51 = partial27.compareTo((org.joda.time.ReadablePartial) partial41);
        int[] intArray52 = partial41.getValues();
        int[] intArray53 = partial41.getValues();
        org.joda.time.Partial partial54 = new org.joda.time.Partial();
        int[] intArray55 = partial54.getValues();
        iSOChronology0.validate((org.joda.time.ReadablePartial) partial41, intArray55);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = partial41.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField59 = partial41.getField(62);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 62");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(cachedDateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10L + "'", long33 == 10L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test418");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        org.joda.time.DurationField durationField6 = gregorianChronology5.days();
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology5.weekyearOfCentury();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField9 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long12 = durationField9.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long14 = durationField9.getValueAsLong((long) 10);
        int int16 = durationField9.getValue((long) (byte) 10);
        boolean boolean17 = partial8.equals((java.lang.Object) durationField9);
        org.joda.time.Chronology chronology18 = partial8.getChronology();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial8.isBefore((org.joda.time.ReadablePartial) partial19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = partial8.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray22 = partial8.getFieldTypes();
        org.joda.time.Chronology chronology23 = partial8.getChronology();
        int[] intArray25 = null;
        java.util.Locale locale27 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray28 = dateTimeField7.set((org.joda.time.ReadablePartial) partial8, (int) (byte) 100, intArray25, "DateTimeField[dayOfYear]", locale27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"DateTimeField[dayOfYear]\" for weekyearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray22);
        org.junit.Assert.assertNotNull(chronology23);
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test419");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial0.getFieldTypes();
        java.lang.String str15 = partial0.toString();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.ReadableInterval readableInterval18 = null;
        boolean boolean19 = readableInterval17.contains(readableInterval18);
        org.joda.time.Duration duration20 = readableInterval17.toDuration();
        org.joda.time.ReadableInterval readableInterval21 = null;
        org.joda.time.ReadableInterval readableInterval22 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval21);
        org.joda.time.ReadableInterval readableInterval23 = null;
        boolean boolean24 = readableInterval22.contains(readableInterval23);
        org.joda.time.Duration duration25 = readableInterval22.toDuration();
        org.joda.time.DateTime dateTime26 = readableInterval22.getEnd();
        boolean boolean27 = readableInterval17.isBefore((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.ReadableInterval readableInterval29 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval28);
        org.joda.time.ReadableInterval readableInterval30 = null;
        boolean boolean31 = readableInterval29.contains(readableInterval30);
        org.joda.time.Duration duration32 = readableInterval29.toDuration();
        org.joda.time.DateTime dateTime33 = readableInterval29.getEnd();
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType37 = partial0.getFieldType(3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(readableInterval22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(readableInterval29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test420");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField31 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType25, durationField30);
        long long34 = unsupportedDateTimeField31.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = unsupportedDateTimeField31.getType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField22, dateTimeFieldType35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology40 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField41 = iSOChronology40.minutes();
        org.joda.time.DateTimeField dateTimeField42 = iSOChronology40.millisOfDay();
        org.joda.time.DateTimeField dateTimeField43 = iSOChronology40.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField44 = iSOChronology40.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField45 = iSOChronology40.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField46 = iSOChronology40.halfdayOfDay();
        org.joda.time.Partial partial47 = new org.joda.time.Partial(dateTimeFieldType38, 10, (org.joda.time.Chronology) iSOChronology40);
        int int48 = dividedDateTimeField37.getMaximumValue((org.joda.time.ReadablePartial) partial47);
        java.lang.String str50 = dividedDateTimeField37.getAsShortText(35L);
        org.joda.time.DurationField durationField51 = dividedDateTimeField37.getLeapDurationField();
        java.util.Locale locale54 = null;
        long long55 = dividedDateTimeField37.set((-115167999L), "11", locale54);
        java.util.Locale locale57 = null;
        java.lang.String str58 = dividedDateTimeField37.getAsShortText(2219715943200000L, locale57);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4L + "'", long34 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(iSOChronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 29227899 + "'", int48 == 29227899);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "197" + "'", str50, "197");
        org.junit.Assert.assertNull(durationField51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-58380508767999L) + "'", long55 == (-58380508767999L));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "7230" + "'", str58, "7230");
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test421");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = durationField5.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType10 = durationField5.getType();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210866846400000L) + "'", long9 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType10);
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test422");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        long long13 = unsupportedDateTimeField6.add(28531765L, 100);
        java.lang.String str14 = unsupportedDateTimeField6.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 28531865L + "'", long13 == 28531865L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UnsupportedDateTimeField" + "'", str14, "UnsupportedDateTimeField");
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test423");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.era();
        org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField6 = iSOChronology5.minutes();
        org.joda.time.DateTimeZone dateTimeZone7 = iSOChronology5.getZone();
        org.joda.time.DurationField durationField8 = iSOChronology5.centuries();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.ReadableInterval readableInterval11 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval10);
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval10);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.DurationField durationField14 = chronology12.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField15 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType9, durationField14);
        long long18 = unsupportedDateTimeField15.add((-31L), (long) '#');
        org.joda.time.DurationField durationField19 = unsupportedDateTimeField15.getLeapDurationField();
        org.joda.time.DurationField durationField20 = unsupportedDateTimeField15.getDurationField();
        java.lang.String str21 = unsupportedDateTimeField15.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = unsupportedDateTimeField15.getType();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField24 = new org.joda.time.field.RemainderDateTimeField(dateTimeField4, durationField8, dateTimeFieldType22, 24);
        java.lang.String str25 = remainderDateTimeField24.toString();
        org.joda.time.ReadableInterval readableInterval26 = null;
        org.joda.time.ReadableInterval readableInterval27 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval26);
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology28.millis();
        org.joda.time.DurationField durationField31 = chronology28.centuries();
        org.joda.time.Chronology chronology32 = chronology28.withUTC();
        org.joda.time.DurationField durationField33 = chronology32.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField37 = new org.joda.time.field.DividedDateTimeField(dateTimeField34, dateTimeFieldType35, 10);
        long long40 = dividedDateTimeField37.set(0L, 100);
        long long42 = dividedDateTimeField37.roundFloor(291L);
        boolean boolean43 = dividedDateTimeField37.isSupported();
        org.joda.time.DurationField durationField44 = dividedDateTimeField37.getDurationField();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField45 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField37);
        int int47 = remainderDateTimeField45.get((-58877472891246L));
        int int48 = remainderDateTimeField45.getMinimumValue();
        int int49 = remainderDateTimeField45.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology52 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField53 = iSOChronology52.minutes();
        org.joda.time.DateTimeField dateTimeField54 = iSOChronology52.millisOfDay();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology52.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology52.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField57 = iSOChronology52.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField58 = iSOChronology52.halfdayOfDay();
        org.joda.time.Partial partial59 = new org.joda.time.Partial(dateTimeFieldType50, 10, (org.joda.time.Chronology) iSOChronology52);
        int int60 = partial59.size();
        java.lang.String str61 = partial59.toString();
        int int62 = remainderDateTimeField45.getMaximumValue((org.joda.time.ReadablePartial) partial59);
        java.util.Locale locale64 = null;
        java.lang.String str65 = remainderDateTimeField24.getAsText((org.joda.time.ReadablePartial) partial59, 8446, locale64);
        org.joda.time.DurationField durationField66 = remainderDateTimeField24.iRangeField;
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(iSOChronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(readableInterval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 4L + "'", long18 == 4L);
        org.junit.Assert.assertNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UnsupportedDateTimeField" + "'", str21, "UnsupportedDateTimeField");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DateTimeField[dayOfYear]" + "'", str25, "DateTimeField[dayOfYear]");
        org.junit.Assert.assertNotNull(readableInterval27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-30610224000000L) + "'", long40 == (-30610224000000L));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(iSOChronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-W10" + "'", str61, "-W10");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "8446" + "'", str65, "8446");
        org.junit.Assert.assertNotNull(durationField66);
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test424");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        int int27 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int29 = partial0.indexOf(dateTimeFieldType28);
        org.joda.time.Partial partial30 = new org.joda.time.Partial((org.joda.time.ReadablePartial) partial0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test425");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField12 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType8, 4, (int) ' ', (int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField15 = new org.joda.time.field.RemainderDateTimeField(dateTimeField7, dateTimeFieldType13, 28531765);
        org.joda.time.DurationField durationField16 = remainderDateTimeField15.getDurationField();
        int int18 = remainderDateTimeField15.getMinimumValue((-58877472891246L));
        long long20 = remainderDateTimeField15.roundHalfEven((-210861660779418L));
        long long23 = remainderDateTimeField15.set(3060006L, 8);
        java.lang.String str24 = remainderDateTimeField15.toString();
        java.util.Locale locale26 = null;
        java.lang.String str27 = remainderDateTimeField15.getAsShortText(0, locale26);
        boolean boolean29 = remainderDateTimeField15.isLeap(60035L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-210863520000000L) + "'", long20 == (-210863520000000L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1956611339994L) + "'", long23 == (-1956611339994L));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DateTimeField[dayOfYear]" + "'", str24, "DateTimeField[dayOfYear]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0" + "'", str27, "0");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test426");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DurationField durationField3 = iSOChronology0.minutes();
        org.joda.time.Partial partial4 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology0);
        // The following exception was thrown during execution in test generation
        try {
            int int6 = partial4.getValue((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test427");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.getDifferenceAsLong((long) (short) 100, (-30610224000000L));
        long long12 = unsupportedDateTimeField6.add((-210866846400000L), 166055223611306L);
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.ReadableInterval readableInterval14 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval13);
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval13);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DurationField durationField17 = chronology15.millis();
        org.joda.time.DurationField durationField18 = chronology15.centuries();
        org.joda.time.Chronology chronology19 = chronology15.withUTC();
        org.joda.time.DurationField durationField20 = chronology19.halfdays();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField24 = new org.joda.time.field.DividedDateTimeField(dateTimeField21, dateTimeFieldType22, 10);
        long long27 = dividedDateTimeField24.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29);
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval29);
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfCentury();
        org.joda.time.DurationField durationField33 = chronology31.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField34 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType28, durationField33);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField35 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField24, dateTimeFieldType28);
        long long37 = remainderDateTimeField35.roundHalfFloor(3600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval39 = null;
        org.joda.time.ReadableInterval readableInterval40 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval39);
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval39);
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfCentury();
        org.joda.time.DurationField durationField43 = chronology41.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField44 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType38, durationField43);
        long long47 = unsupportedDateTimeField44.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = unsupportedDateTimeField44.getType();
        org.joda.time.DurationFieldType durationFieldType49 = dateTimeFieldType48.getRangeDurationType();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField50 = new org.joda.time.field.DividedDateTimeField(remainderDateTimeField35, dateTimeFieldType48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology53 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField54 = iSOChronology53.minutes();
        org.joda.time.DateTimeField dateTimeField55 = iSOChronology53.millisOfDay();
        org.joda.time.DateTimeField dateTimeField56 = iSOChronology53.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField57 = iSOChronology53.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField58 = iSOChronology53.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField59 = iSOChronology53.halfdayOfDay();
        org.joda.time.Partial partial60 = new org.joda.time.Partial(dateTimeFieldType51, 10, (org.joda.time.Chronology) iSOChronology53);
        int int61 = dividedDateTimeField50.getMaximumValue((org.joda.time.ReadablePartial) partial60);
        java.util.Locale locale62 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = unsupportedDateTimeField6.getAsText((org.joda.time.ReadablePartial) partial60, locale62);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 30610224000100L + "'", long9 == 30610224000100L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-44811622788694L) + "'", long12 == (-44811622788694L));
        org.junit.Assert.assertNotNull(readableInterval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-30610224000000L) + "'", long27 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(readableInterval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(readableInterval40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 4L + "'", long47 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(iSOChronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 29227899 + "'", int61 == 29227899);
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test428");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField5 = zonedChronology4.secondOfDay();
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology4.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField7 = zonedChronology4.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test429");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        java.lang.String str2 = partial0.toString("10");
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial.Property property4 = partial0.property(dateTimeFieldType3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "10" + "'", str2, "10");
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test430");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone1 = iSOChronology0.getZone();
        org.joda.time.DateTimeZone dateTimeZone2 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField3 = iSOChronology0.years();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology6 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = zonedChronology6.getZone();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test431");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField14 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType8, durationField13);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField7, dateTimeFieldType8);
        int int17 = zeroIsMaxDateTimeField15.getLeapAmount(1711909507403L);
        boolean boolean19 = zeroIsMaxDateTimeField15.isLeap(9003755385792000000L);
        int int20 = zeroIsMaxDateTimeField15.getMinimumValue();
        boolean boolean21 = zeroIsMaxDateTimeField15.isSupported();
        org.joda.time.Partial partial22 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField23 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long26 = durationField23.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long28 = durationField23.getValueAsLong((long) 10);
        int int30 = durationField23.getValue((long) (byte) 10);
        boolean boolean31 = partial22.equals((java.lang.Object) durationField23);
        org.joda.time.Chronology chronology32 = partial22.getChronology();
        org.joda.time.Partial partial33 = new org.joda.time.Partial();
        boolean boolean34 = partial22.isBefore((org.joda.time.ReadablePartial) partial33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = partial22.getFieldTypes();
        org.joda.time.Partial partial36 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField37 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long40 = durationField37.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long42 = durationField37.getValueAsLong((long) 10);
        int int44 = durationField37.getValue((long) (byte) 10);
        boolean boolean45 = partial36.equals((java.lang.Object) durationField37);
        org.joda.time.Chronology chronology46 = partial36.getChronology();
        org.joda.time.Partial partial47 = new org.joda.time.Partial();
        boolean boolean48 = partial36.isBefore((org.joda.time.ReadablePartial) partial47);
        int int49 = partial22.compareTo((org.joda.time.ReadablePartial) partial36);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str51 = dateTimeZone50.toString();
        java.lang.String str53 = dateTimeZone50.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeUtils.getZone(dateTimeZone50);
        boolean boolean55 = partial36.equals((java.lang.Object) dateTimeZone54);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField57 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long60 = durationField57.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long62 = durationField57.getValueAsLong((long) 10);
        int int64 = durationField57.getValue((long) (byte) 10);
        boolean boolean65 = partial56.equals((java.lang.Object) durationField57);
        org.joda.time.Chronology chronology66 = partial56.getChronology();
        org.joda.time.Partial partial67 = new org.joda.time.Partial();
        boolean boolean68 = partial56.isBefore((org.joda.time.ReadablePartial) partial67);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray69 = partial56.getFieldTypes();
        boolean boolean70 = partial36.isAfter((org.joda.time.ReadablePartial) partial56);
        org.joda.time.chrono.ISOChronology iSOChronology71 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField72 = iSOChronology71.minutes();
        org.joda.time.DateTimeField dateTimeField73 = iSOChronology71.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str75 = dateTimeZone74.toString();
        java.lang.String str77 = dateTimeZone74.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeUtils.getZone(dateTimeZone74);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone79 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone78);
        org.joda.time.Chronology chronology80 = iSOChronology71.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone79);
        org.joda.time.DurationField durationField81 = iSOChronology71.years();
        org.joda.time.DateTimeField dateTimeField82 = iSOChronology71.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval83 = null;
        org.joda.time.ReadableInterval readableInterval84 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval83);
        org.joda.time.Chronology chronology85 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval83);
        org.joda.time.DateTimeField dateTimeField86 = chronology85.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField87 = chronology85.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval88 = null;
        org.joda.time.ReadableInterval readableInterval89 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval88);
        org.joda.time.ReadableInterval readableInterval90 = null;
        boolean boolean91 = readableInterval89.contains(readableInterval90);
        org.joda.time.PeriodType periodType92 = null;
        org.joda.time.Period period93 = readableInterval89.toPeriod(periodType92);
        int[] intArray95 = chronology85.get((org.joda.time.ReadablePeriod) period93, (-210866846400000L));
        int[] intArray97 = iSOChronology71.get((org.joda.time.ReadablePeriod) period93, 291L);
        int int98 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial36, intArray97);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10L + "'", long42 == 10L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "UTC" + "'", str51, "UTC");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 10L + "'", long62 == 10L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(iSOChronology71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "UTC" + "'", str75, "UTC");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+00:00" + "'", str77, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(cachedDateTimeZone79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(readableInterval84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(readableInterval89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[0, 0, 0, 0, 0, 0, 0, 291]");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test432");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = durationField5.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        boolean boolean15 = durationFieldType10.isSupported(chronology13);
        org.joda.time.field.ScaledDurationField scaledDurationField17 = new org.joda.time.field.ScaledDurationField(durationField5, durationFieldType10, (int) 'a');
        long long18 = scaledDurationField17.getUnitMillis();
        org.joda.time.DurationFieldType durationFieldType19 = scaledDurationField17.getType();
        org.joda.time.field.PreciseDurationField preciseDurationField21 = new org.joda.time.field.PreciseDurationField(durationFieldType19, (long) ' ');
        long long22 = preciseDurationField21.getUnitMillis();
        long long25 = preciseDurationField21.getMillis(70, 204180171L);
        long long28 = preciseDurationField21.getMillis(1577836800000L, (long) 24);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210866846400000L) + "'", long9 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 97L + "'", long18 == 97L);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32L + "'", long22 == 32L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2240L + "'", long25 == 2240L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 50490777600000L + "'", long28 == 50490777600000L);
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test433");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = unsupportedDateTimeField6.getType();
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getDurationField();
        org.joda.time.DurationField durationField12 = unsupportedDateTimeField6.getRangeDurationField();
        org.joda.time.DurationField durationField13 = unsupportedDateTimeField6.getLeapDurationField();
        java.lang.String str14 = unsupportedDateTimeField6.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNull(durationField12);
        org.junit.Assert.assertNull(durationField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "dayOfYear" + "'", str14, "dayOfYear");
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test434");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.ReadableInterval readableInterval6 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval5);
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = readableInterval6.contains(readableInterval7);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = readableInterval6.toPeriod(periodType9);
        org.joda.time.DateTime dateTime11 = readableInterval6.getEnd();
        org.joda.time.MutableInterval mutableInterval12 = readableInterval6.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.ReadableInterval readableInterval14 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval13);
        org.joda.time.ReadableInterval readableInterval15 = null;
        boolean boolean16 = readableInterval14.contains(readableInterval15);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = readableInterval14.toPeriod(periodType17);
        org.joda.time.DateTime dateTime19 = readableInterval14.getEnd();
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.ReadableInterval readableInterval22 = null;
        boolean boolean23 = readableInterval21.contains(readableInterval22);
        boolean boolean24 = readableInterval14.overlaps(readableInterval21);
        boolean boolean25 = readableInterval6.contains(readableInterval21);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.DateTimeUtils.getPeriodType(periodType26);
        org.joda.time.PeriodType periodType28 = org.joda.time.DateTimeUtils.getPeriodType(periodType27);
        org.joda.time.Period period29 = readableInterval6.toPeriod(periodType28);
        int[] intArray32 = zonedChronology4.get((org.joda.time.ReadablePeriod) period29, (-53459996L), 27647338425L);
        // The following exception was thrown during execution in test generation
        try {
            long long37 = zonedChronology4.getDateTimeMillis((int) (byte) 10, (int) (short) 100, 100, 1439);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(readableInterval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertNotNull(readableInterval14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 10, 2, 2, 14, 39, 58, 421]");
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test435");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str1 = dateTimeFieldType0.toString();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology6 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology2, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = zonedChronology6.getZone();
        boolean boolean8 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) zonedChronology6);
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology6.hourOfDay();
        java.lang.String str10 = zonedChronology6.toString();
        org.joda.time.DateTimeField dateTimeField11 = zonedChronology6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = zonedChronology6.getZone();
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology6.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfMonth" + "'", str1, "dayOfMonth");
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str10, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test436");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add(97L, 24);
        org.joda.time.chrono.ISOChronology iSOChronology10 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str12 = dateTimeZone11.toString();
        org.joda.time.Chronology chronology13 = iSOChronology10.withZone(dateTimeZone11);
        org.joda.time.Partial partial14 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.Partial partial17 = partial14.with(dateTimeFieldType15, (int) '4');
        org.joda.time.chrono.ISOChronology iSOChronology19 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField20 = iSOChronology19.minutes();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology19.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str23 = dateTimeZone22.toString();
        java.lang.String str25 = dateTimeZone22.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeUtils.getZone(dateTimeZone22);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone27 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone26);
        org.joda.time.Chronology chronology28 = iSOChronology19.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone27);
        org.joda.time.DurationField durationField29 = iSOChronology19.years();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology19.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.ReadableInterval readableInterval32 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval31);
        org.joda.time.Chronology chronology33 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval31);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.ReadableInterval readableInterval37 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval36);
        org.joda.time.ReadableInterval readableInterval38 = null;
        boolean boolean39 = readableInterval37.contains(readableInterval38);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = readableInterval37.toPeriod(periodType40);
        int[] intArray43 = chronology33.get((org.joda.time.ReadablePeriod) period41, (-210866846400000L));
        int[] intArray45 = iSOChronology19.get((org.joda.time.ReadablePeriod) period41, 291L);
        java.util.Locale locale47 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray48 = unsupportedDateTimeField6.set((org.joda.time.ReadablePartial) partial14, 54, intArray45, "8793", locale47);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 121L + "'", long9 == 121L);
        org.junit.Assert.assertNotNull(iSOChronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(iSOChronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(cachedDateTimeZone27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(readableInterval32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(readableInterval37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, 0, 0, 0, 0, 0, 291]");
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test437");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval9 = null;
        org.joda.time.ReadableInterval readableInterval10 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval9);
        org.joda.time.Chronology chronology11 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval9);
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField14 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType8, durationField13);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField15 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField7, dateTimeFieldType8);
        int int17 = zeroIsMaxDateTimeField15.getLeapAmount(1711909507403L);
        org.joda.time.Partial partial18 = new org.joda.time.Partial();
        int int19 = zeroIsMaxDateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) partial18);
        long long21 = zeroIsMaxDateTimeField15.roundHalfCeiling((long) 323506);
        // The following exception was thrown during execution in test generation
        try {
            long long24 = zeroIsMaxDateTimeField15.set((-115167999L), 1865);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1865 for dayOfYear must be in the range [1,100]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(readableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test438");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        java.util.Locale locale14 = null;
        java.lang.String str15 = partial11.toString("723", locale14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField17 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long20 = durationField17.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long22 = durationField17.getValueAsLong((long) 10);
        int int24 = durationField17.getValue((long) (byte) 10);
        boolean boolean25 = partial16.equals((java.lang.Object) durationField17);
        org.joda.time.Chronology chronology26 = partial16.getChronology();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial16.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = partial16.getFieldTypes();
        java.lang.Object obj30 = null;
        boolean boolean31 = partial16.equals(obj30);
        boolean boolean32 = partial11.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = partial16.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.ReadableInterval readableInterval35 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval34);
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval34);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval39 = null;
        org.joda.time.ReadableInterval readableInterval40 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval39);
        org.joda.time.ReadableInterval readableInterval41 = null;
        boolean boolean42 = readableInterval40.contains(readableInterval41);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = readableInterval40.toPeriod(periodType43);
        int[] intArray46 = chronology36.get((org.joda.time.ReadablePeriod) period44, (-210866846400000L));
        org.joda.time.Partial partial47 = partial16.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.chrono.ISOChronology iSOChronology48 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField49 = iSOChronology48.minutes();
        org.joda.time.Partial partial50 = partial47.withChronologyRetainFields((org.joda.time.Chronology) iSOChronology48);
        int int51 = partial47.size();
        java.lang.String str52 = partial47.toString();
        java.lang.String str53 = partial47.toStringList();
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "723" + "'", str15, "723");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(readableInterval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(readableInterval40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(iSOChronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test439");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology6 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology2, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = zonedChronology6.getZone();
        org.joda.time.DurationField durationField8 = zonedChronology6.centuries();
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology6.dayOfMonth();
        boolean boolean10 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) zonedChronology6);
        org.joda.time.DurationField durationField11 = zonedChronology6.months();
        org.joda.time.DateTimeZone dateTimeZone12 = zonedChronology6.getZone();
        org.joda.time.DurationField durationField13 = zonedChronology6.halfdays();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test440");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DurationField durationField6 = zonedChronology4.centuries();
        org.joda.time.DateTimeField dateTimeField7 = zonedChronology4.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = zonedChronology4.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology4.dayOfMonth();
        org.joda.time.Chronology chronology10 = zonedChronology4.withUTC();
        org.joda.time.DurationField durationField11 = chronology10.days();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test441");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology2.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology2.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology2.halfdayOfDay();
        org.joda.time.Partial partial9 = new org.joda.time.Partial(dateTimeFieldType0, 10, (org.joda.time.Chronology) iSOChronology2);
        int int10 = partial9.size();
        java.lang.String str11 = partial9.toString();
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = readableInterval13.contains(readableInterval14);
        org.joda.time.Duration duration16 = readableInterval13.toDuration();
        org.joda.time.DateTime dateTime17 = readableInterval13.getEnd();
        org.joda.time.Period period18 = readableInterval13.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant20 = null;
        int int21 = dateTimeZone19.getOffset(readableInstant20);
        java.util.TimeZone timeZone22 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = readableInterval25.contains(readableInterval26);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = readableInterval25.toPeriod(periodType28);
        org.joda.time.DateTime dateTime30 = readableInterval25.getEnd();
        int int31 = dateTimeZone23.getOffset((org.joda.time.ReadableInstant) dateTime30);
        boolean boolean32 = readableInterval13.isBefore((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.ReadableInterval readableInterval33 = null;
        org.joda.time.ReadableInterval readableInterval34 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval33);
        org.joda.time.ReadableInterval readableInterval35 = null;
        boolean boolean36 = readableInterval34.contains(readableInterval35);
        org.joda.time.Duration duration37 = readableInterval34.toDuration();
        org.joda.time.DateTime dateTime38 = readableInterval34.getEnd();
        boolean boolean39 = readableInterval13.isBefore((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime41 = partial9.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-W10" + "'", str11, "-W10");
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(readableInterval34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test442");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        int int27 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        int int38 = partial14.compareTo((org.joda.time.ReadablePartial) partial28);
        int[] intArray39 = partial28.getValues();
        int[] intArray40 = partial28.getValues();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField42 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long45 = durationField42.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long47 = durationField42.getValueAsLong((long) 10);
        int int49 = durationField42.getValue((long) (byte) 10);
        boolean boolean50 = partial41.equals((java.lang.Object) durationField42);
        org.joda.time.Chronology chronology51 = partial41.getChronology();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        boolean boolean53 = partial41.isBefore((org.joda.time.ReadablePartial) partial52);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = partial41.getFieldTypes();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField56 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long59 = durationField56.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long61 = durationField56.getValueAsLong((long) 10);
        int int63 = durationField56.getValue((long) (byte) 10);
        boolean boolean64 = partial55.equals((java.lang.Object) durationField56);
        org.joda.time.Chronology chronology65 = partial55.getChronology();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial55.isBefore((org.joda.time.ReadablePartial) partial66);
        int int68 = partial41.compareTo((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField70 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long73 = durationField70.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long75 = durationField70.getValueAsLong((long) 10);
        int int77 = durationField70.getValue((long) (byte) 10);
        boolean boolean78 = partial69.equals((java.lang.Object) durationField70);
        int int79 = partial55.compareTo((org.joda.time.ReadablePartial) partial69);
        int[] intArray80 = partial69.getValues();
        boolean boolean81 = partial28.isBefore((org.joda.time.ReadablePartial) partial69);
        org.joda.time.ReadableInterval readableInterval82 = null;
        org.joda.time.ReadableInterval readableInterval83 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval82);
        org.joda.time.Chronology chronology84 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval82);
        org.joda.time.DateTimeField dateTimeField85 = chronology84.yearOfCentury();
        org.joda.time.DurationField durationField86 = chronology84.millis();
        org.joda.time.DurationField durationField87 = chronology84.centuries();
        org.joda.time.Chronology chronology88 = chronology84.withUTC();
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        long long92 = chronology88.add(readablePeriod89, 0L, (int) (short) 10);
        org.joda.time.DateTimeField dateTimeField93 = chronology88.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField94 = chronology88.hourOfHalfday();
        org.joda.time.DurationField durationField95 = chronology88.months();
        org.joda.time.DateTimeField dateTimeField96 = chronology88.era();
        org.joda.time.Partial partial97 = partial28.withChronologyRetainFields(chronology88);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10L + "'", long61 == 10L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 10L + "'", long75 == 10L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(readableInterval83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(durationField95);
        org.junit.Assert.assertNotNull(dateTimeField96);
        org.junit.Assert.assertNotNull(partial97);
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test443");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DurationField durationField6 = zonedChronology4.centuries();
        org.joda.time.DateTimeField dateTimeField7 = zonedChronology4.dayOfMonth();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str12 = dateTimeZone11.toString();
        java.lang.String str14 = dateTimeZone11.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeUtils.getZone(dateTimeZone11);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone16 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = iSOChronology8.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone16);
        int int19 = cachedDateTimeZone16.getOffset((long) ' ');
        org.joda.time.Chronology chronology20 = zonedChronology4.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone16);
        java.lang.String str22 = cachedDateTimeZone16.getNameKey((-58877480091246L));
        org.joda.time.chrono.GregorianChronology gregorianChronology23 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) cachedDateTimeZone16);
        java.lang.String str24 = gregorianChronology23.toString();
        int int25 = gregorianChronology23.getMinimumDaysInFirstWeek();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(cachedDateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(gregorianChronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GregorianChronology[UTC]" + "'", str24, "GregorianChronology[UTC]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test444");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        java.util.Locale locale14 = null;
        java.lang.String str15 = partial11.toString("723", locale14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField17 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long20 = durationField17.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long22 = durationField17.getValueAsLong((long) 10);
        int int24 = durationField17.getValue((long) (byte) 10);
        boolean boolean25 = partial16.equals((java.lang.Object) durationField17);
        org.joda.time.Chronology chronology26 = partial16.getChronology();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial16.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = partial16.getFieldTypes();
        java.lang.Object obj30 = null;
        boolean boolean31 = partial16.equals(obj30);
        boolean boolean32 = partial11.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = partial16.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.ReadableInterval readableInterval35 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval34);
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval34);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval39 = null;
        org.joda.time.ReadableInterval readableInterval40 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval39);
        org.joda.time.ReadableInterval readableInterval41 = null;
        boolean boolean42 = readableInterval40.contains(readableInterval41);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = readableInterval40.toPeriod(periodType43);
        int[] intArray46 = chronology36.get((org.joda.time.ReadablePeriod) period44, (-210866846400000L));
        org.joda.time.Partial partial47 = partial16.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.chrono.ISOChronology iSOChronology48 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField49 = iSOChronology48.minutes();
        org.joda.time.DateTimeZone dateTimeZone50 = iSOChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = iSOChronology48.yearOfCentury();
        boolean boolean52 = partial16.equals((java.lang.Object) iSOChronology48);
        org.joda.time.DateTimeField dateTimeField53 = iSOChronology48.clockhourOfDay();
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "723" + "'", str15, "723");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(readableInterval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(readableInterval40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(iSOChronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeField53);
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test445");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        long long24 = remainderDateTimeField22.roundHalfFloor(3600000L);
        java.util.Locale locale26 = null;
        java.lang.String str27 = remainderDateTimeField22.getAsText(442L, locale26);
        long long29 = remainderDateTimeField22.roundFloor(1711938394191L);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0" + "'", str27, "0");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1704067200000L + "'", long29 == 1704067200000L);
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test446");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        java.util.Locale locale14 = null;
        java.lang.String str15 = partial11.toString("723", locale14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField17 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long20 = durationField17.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long22 = durationField17.getValueAsLong((long) 10);
        int int24 = durationField17.getValue((long) (byte) 10);
        boolean boolean25 = partial16.equals((java.lang.Object) durationField17);
        org.joda.time.Chronology chronology26 = partial16.getChronology();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial16.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = partial16.getFieldTypes();
        java.lang.Object obj30 = null;
        boolean boolean31 = partial16.equals(obj30);
        boolean boolean32 = partial11.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = partial16.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.ReadableInterval readableInterval35 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval34);
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval34);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval39 = null;
        org.joda.time.ReadableInterval readableInterval40 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval39);
        org.joda.time.ReadableInterval readableInterval41 = null;
        boolean boolean42 = readableInterval40.contains(readableInterval41);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = readableInterval40.toPeriod(periodType43);
        int[] intArray46 = chronology36.get((org.joda.time.ReadablePeriod) period44, (-210866846400000L));
        org.joda.time.Partial partial47 = partial16.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int49 = partial47.get(dateTimeFieldType48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "723" + "'", str15, "723");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(readableInterval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(readableInterval40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test447");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField2 = iSOChronology0.months();
        org.joda.time.DurationField durationField3 = iSOChronology0.years();
        org.joda.time.chrono.ISOChronology iSOChronology4 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone5 = iSOChronology4.getZone();
        org.joda.time.DateTimeZone dateTimeZone6 = iSOChronology4.getZone();
        org.joda.time.DurationField durationField7 = iSOChronology4.days();
        org.joda.time.DateTimeZone dateTimeZone8 = iSOChronology4.getZone();
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.OffsetDateTimeField offsetDateTimeField13 = new org.joda.time.field.OffsetDateTimeField(dateTimeField10, dateTimeFieldType11, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(iSOChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test448");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.seconds();
        org.joda.time.DurationField durationField5 = iSOChronology0.millis();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.dayOfYear();
        org.joda.time.DurationField durationField7 = iSOChronology0.seconds();
        org.joda.time.DateTimeField dateTimeField8 = iSOChronology0.era();
        org.joda.time.DurationField durationField9 = iSOChronology0.centuries();
        org.joda.time.ReadableInterval readableInterval10 = null;
        org.joda.time.ReadableInterval readableInterval11 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval10);
        org.joda.time.Chronology chronology12 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval10);
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.DurationField durationField14 = chronology12.millis();
        org.joda.time.DurationField durationField15 = chronology12.centuries();
        org.joda.time.Chronology chronology16 = chronology12.withUTC();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = chronology16.add(readablePeriod17, 0L, (int) (short) 10);
        org.joda.time.DateTimeField dateTimeField21 = chronology16.clockhourOfHalfday();
        long long24 = dateTimeField21.addWrapField(0L, 1);
        long long27 = dateTimeField21.add(0L, (int) 'a');
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        org.joda.time.Chronology chronology38 = partial28.getChronology();
        org.joda.time.Partial partial39 = new org.joda.time.Partial();
        boolean boolean40 = partial28.isBefore((org.joda.time.ReadablePartial) partial39);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = partial28.getFieldTypes();
        org.joda.time.Partial partial42 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField43 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long46 = durationField43.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long48 = durationField43.getValueAsLong((long) 10);
        int int50 = durationField43.getValue((long) (byte) 10);
        boolean boolean51 = partial42.equals((java.lang.Object) durationField43);
        org.joda.time.Chronology chronology52 = partial42.getChronology();
        org.joda.time.Partial partial53 = new org.joda.time.Partial();
        boolean boolean54 = partial42.isBefore((org.joda.time.ReadablePartial) partial53);
        int int55 = partial28.compareTo((org.joda.time.ReadablePartial) partial42);
        org.joda.time.Partial partial56 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField57 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long60 = durationField57.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long62 = durationField57.getValueAsLong((long) 10);
        int int64 = durationField57.getValue((long) (byte) 10);
        boolean boolean65 = partial56.equals((java.lang.Object) durationField57);
        int int66 = partial42.compareTo((org.joda.time.ReadablePartial) partial56);
        java.util.Locale locale68 = null;
        java.lang.String str69 = dateTimeField21.getAsShortText((org.joda.time.ReadablePartial) partial56, 53460006, locale68);
        int[] intArray70 = null;
        iSOChronology0.validate((org.joda.time.ReadablePartial) partial56, intArray70);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(readableInterval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3600000L + "'", long24 == 3600000L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 349200000L + "'", long27 == 349200000L);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10L + "'", long48 == 10L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 10L + "'", long62 == 10L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "53460006" + "'", str69, "53460006");
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test449");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        org.joda.time.chrono.GregorianChronology gregorianChronology5 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone4);
        int int7 = fixedDateTimeZone4.getOffsetFromLocal(97L);
        int int9 = fixedDateTimeZone4.getStandardOffset(3060006L);
        java.util.TimeZone timeZone10 = fixedDateTimeZone4.toTimeZone();
        java.util.TimeZone timeZone11 = fixedDateTimeZone4.toTimeZone();
        org.junit.Assert.assertNotNull(gregorianChronology5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test450");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.era();
        org.joda.time.DurationField durationField7 = iSOChronology0.weekyears();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test451");
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder0 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder11 = dateTimeZoneBuilder0.addRecurringSavings("millis", 100, 28531764, 100, '#', 54, 100, (int) (byte) 1, false, 323506);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder11);
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test452");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.DurationField durationField23 = remainderDateTimeField22.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.ReadableInterval readableInterval26 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval25);
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval25);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DurationField durationField29 = chronology27.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType24, durationField29);
        org.joda.time.field.DividedDateTimeField dividedDateTimeField32 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField) remainderDateTimeField22, dateTimeFieldType24, 9);
        org.joda.time.DurationField durationField33 = dividedDateTimeField32.iDurationField;
        int int35 = dividedDateTimeField32.getMinimumValue(0L);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(readableInterval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test453");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        boolean boolean7 = unsupportedDateTimeField6.isLenient();
        java.lang.String str8 = unsupportedDateTimeField6.toString();
        org.joda.time.Partial partial9 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField10 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long13 = durationField10.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long15 = durationField10.getValueAsLong((long) 10);
        int int17 = durationField10.getValue((long) (byte) 10);
        boolean boolean18 = partial9.equals((java.lang.Object) durationField10);
        org.joda.time.Chronology chronology19 = partial9.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Partial partial22 = partial9.with(dateTimeFieldType20, (int) (byte) 10);
        java.util.Locale locale24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = unsupportedDateTimeField6.getAsShortText((org.joda.time.ReadablePartial) partial9, (int) 'a', locale24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UnsupportedDateTimeField" + "'", str8, "UnsupportedDateTimeField");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(partial22);
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test454");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField12 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType8, 4, (int) ' ', (int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField15 = new org.joda.time.field.RemainderDateTimeField(dateTimeField7, dateTimeFieldType13, 28531765);
        org.joda.time.DurationField durationField16 = remainderDateTimeField15.getDurationField();
        int int18 = remainderDateTimeField15.getMinimumValue((-58877472891246L));
        long long20 = remainderDateTimeField15.roundHalfEven((-210861660779418L));
        long long22 = remainderDateTimeField15.remainder(204180171L);
        int int24 = remainderDateTimeField15.get(31380082L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-210863520000000L) + "'", long20 == (-210863520000000L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 204180171L + "'", long22 == 204180171L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 70 + "'", int24 == 70);
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test455");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        java.util.Locale locale14 = null;
        java.lang.String str15 = partial11.toString("723", locale14);
        org.joda.time.Partial partial16 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField17 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long20 = durationField17.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long22 = durationField17.getValueAsLong((long) 10);
        int int24 = durationField17.getValue((long) (byte) 10);
        boolean boolean25 = partial16.equals((java.lang.Object) durationField17);
        org.joda.time.Chronology chronology26 = partial16.getChronology();
        org.joda.time.Partial partial27 = new org.joda.time.Partial();
        boolean boolean28 = partial16.isBefore((org.joda.time.ReadablePartial) partial27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = partial16.getFieldTypes();
        java.lang.Object obj30 = null;
        boolean boolean31 = partial16.equals(obj30);
        boolean boolean32 = partial11.isBefore((org.joda.time.ReadablePartial) partial16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = partial16.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval34 = null;
        org.joda.time.ReadableInterval readableInterval35 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval34);
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval34);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval39 = null;
        org.joda.time.ReadableInterval readableInterval40 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval39);
        org.joda.time.ReadableInterval readableInterval41 = null;
        boolean boolean42 = readableInterval40.contains(readableInterval41);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = readableInterval40.toPeriod(periodType43);
        int[] intArray46 = chronology36.get((org.joda.time.ReadablePeriod) period44, (-210866846400000L));
        org.joda.time.Partial partial47 = partial16.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.chrono.ISOChronology iSOChronology48 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField49 = iSOChronology48.minutes();
        org.joda.time.Partial partial50 = partial47.withChronologyRetainFields((org.joda.time.Chronology) iSOChronology48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = partial47.getFieldTypes();
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "723" + "'", str15, "723");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(readableInterval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(readableInterval40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(partial47);
        org.junit.Assert.assertNotNull(iSOChronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(partial50);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test456");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        int int27 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        int int38 = partial14.compareTo((org.joda.time.ReadablePartial) partial28);
        int[] intArray39 = partial28.getValues();
        int[] intArray40 = partial28.getValues();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField42 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long45 = durationField42.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long47 = durationField42.getValueAsLong((long) 10);
        int int49 = durationField42.getValue((long) (byte) 10);
        boolean boolean50 = partial41.equals((java.lang.Object) durationField42);
        org.joda.time.Chronology chronology51 = partial41.getChronology();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        boolean boolean53 = partial41.isBefore((org.joda.time.ReadablePartial) partial52);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = partial41.getFieldTypes();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField56 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long59 = durationField56.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long61 = durationField56.getValueAsLong((long) 10);
        int int63 = durationField56.getValue((long) (byte) 10);
        boolean boolean64 = partial55.equals((java.lang.Object) durationField56);
        org.joda.time.Chronology chronology65 = partial55.getChronology();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial55.isBefore((org.joda.time.ReadablePartial) partial66);
        int int68 = partial41.compareTo((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField70 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long73 = durationField70.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long75 = durationField70.getValueAsLong((long) 10);
        int int77 = durationField70.getValue((long) (byte) 10);
        boolean boolean78 = partial69.equals((java.lang.Object) durationField70);
        int int79 = partial55.compareTo((org.joda.time.ReadablePartial) partial69);
        int[] intArray80 = partial69.getValues();
        boolean boolean81 = partial28.isBefore((org.joda.time.ReadablePartial) partial69);
        org.joda.time.Chronology chronology82 = partial28.getChronology();
        java.lang.String str83 = partial28.toStringList();
        boolean boolean84 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) partial28);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean86 = partial28.isSupported(dateTimeFieldType85);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = org.joda.time.DateTimeFieldType.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial89 = partial28.withField(dateTimeFieldType87, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10L + "'", long61 == 10L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 10L + "'", long75 == 10L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "[]" + "'", str83, "[]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test457");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField11 = new org.joda.time.field.OffsetDateTimeField(dateTimeField8, dateTimeFieldType9, (int) (short) 1);
        boolean boolean12 = offsetDateTimeField11.isSupported();
        long long14 = offsetDateTimeField11.remainder((long) 53460006);
        long long16 = offsetDateTimeField11.roundHalfFloor(1711909507403L);
        int int18 = offsetDateTimeField11.get(551169L);
        long long20 = offsetDateTimeField11.roundFloor((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField25 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) offsetDateTimeField11, dateTimeFieldType21, (int) '#', (int) (byte) 10, 3);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField29 = iSOChronology28.minutes();
        org.joda.time.DateTimeField dateTimeField30 = iSOChronology28.millisOfDay();
        org.joda.time.DateTimeField dateTimeField31 = iSOChronology28.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField32 = iSOChronology28.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField33 = iSOChronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField34 = iSOChronology28.halfdayOfDay();
        org.joda.time.Partial partial35 = new org.joda.time.Partial(dateTimeFieldType26, 10, (org.joda.time.Chronology) iSOChronology28);
        int int36 = partial35.size();
        java.lang.String str37 = partial35.toString();
        org.joda.time.chrono.ISOChronology iSOChronology39 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField40 = iSOChronology39.minutes();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str42 = dateTimeZone41.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology43 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology39, dateTimeZone41);
        org.joda.time.ReadableInterval readableInterval44 = null;
        org.joda.time.ReadableInterval readableInterval45 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval44);
        org.joda.time.ReadableInterval readableInterval46 = null;
        boolean boolean47 = readableInterval45.contains(readableInterval46);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = readableInterval45.toPeriod(periodType48);
        org.joda.time.DateTime dateTime50 = readableInterval45.getEnd();
        org.joda.time.MutableInterval mutableInterval51 = readableInterval45.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval52 = null;
        org.joda.time.ReadableInterval readableInterval53 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval52);
        org.joda.time.ReadableInterval readableInterval54 = null;
        boolean boolean55 = readableInterval53.contains(readableInterval54);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = readableInterval53.toPeriod(periodType56);
        org.joda.time.DateTime dateTime58 = readableInterval53.getEnd();
        org.joda.time.ReadableInterval readableInterval59 = null;
        org.joda.time.ReadableInterval readableInterval60 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval59);
        org.joda.time.ReadableInterval readableInterval61 = null;
        boolean boolean62 = readableInterval60.contains(readableInterval61);
        boolean boolean63 = readableInterval53.overlaps(readableInterval60);
        boolean boolean64 = readableInterval45.contains(readableInterval60);
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.PeriodType periodType66 = org.joda.time.DateTimeUtils.getPeriodType(periodType65);
        org.joda.time.PeriodType periodType67 = org.joda.time.DateTimeUtils.getPeriodType(periodType66);
        org.joda.time.Period period68 = readableInterval45.toPeriod(periodType67);
        int[] intArray71 = zonedChronology43.get((org.joda.time.ReadablePeriod) period68, (-53459996L), 27647338425L);
        int[] intArray73 = offsetDateTimeField11.addWrapPartial((org.joda.time.ReadablePartial) partial35, (int) (short) 1, intArray71, 10);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.Partial partial75 = partial35.withChronologyRetainFields(chronology74);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 3060006L + "'", long14 == 3060006L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1711908000000L + "'", long16 == 1711908000000L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-3600000L) + "'", long20 == (-3600000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(iSOChronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-W10" + "'", str37, "-W10");
        org.junit.Assert.assertNotNull(iSOChronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology43);
        org.junit.Assert.assertNotNull(readableInterval45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(mutableInterval51);
        org.junit.Assert.assertNotNull(readableInterval53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(readableInterval60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0, 20, 2, 2, 14, 39, 58, 421]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 20, 2, 2, 14, 39, 58, 421]");
        org.junit.Assert.assertNotNull(partial75);
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test458");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str1 = dateTimeFieldType0.toString();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology6 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology2, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = zonedChronology6.getZone();
        boolean boolean8 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) zonedChronology6);
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology6.hourOfDay();
        java.lang.String str10 = zonedChronology6.toString();
        java.lang.String str11 = zonedChronology6.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfMonth" + "'", str1, "dayOfMonth");
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str10, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str11, "ZonedChronology[ISOChronology[UTC], UTC]");
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test459");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = durationField5.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        boolean boolean15 = durationFieldType10.isSupported(chronology13);
        org.joda.time.field.ScaledDurationField scaledDurationField17 = new org.joda.time.field.ScaledDurationField(durationField5, durationFieldType10, (int) 'a');
        long long20 = scaledDurationField17.getMillis(0L, (long) (byte) 1);
        long long22 = scaledDurationField17.getValueAsLong((long) 203);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210866846400000L) + "'", long9 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2L + "'", long22 == 2L);
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test460");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, (java.lang.Number) 60035L, "");
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType0.getDurationType();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField5 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType4);
        java.lang.String str6 = unsupportedDurationField5.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(unsupportedDurationField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hours" + "'", str6, "hours");
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test461");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        long long16 = dividedDateTimeField11.roundFloor(291L);
        boolean boolean17 = dividedDateTimeField11.isSupported();
        org.joda.time.DurationField durationField18 = dividedDateTimeField11.getDurationField();
        java.lang.String str20 = dividedDateTimeField11.getAsShortText(166055221892365L);
        long long23 = dividedDateTimeField11.set(0L, 3);
        int int24 = dividedDateTimeField11.getMinimumValue();
        int int27 = dividedDateTimeField11.getDifference((long) (short) 0, 3600000L);
        long long29 = dividedDateTimeField11.roundHalfCeiling(2830L);
        int int30 = dividedDateTimeField11.getMinimumValue();
        int int31 = dividedDateTimeField11.getMaximumValue();
        int int34 = dividedDateTimeField11.getDifference((-62104060799900L), 1711909504045L);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "723" + "'", str20, "723");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-61220448000000L) + "'", long23 == (-61220448000000L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 29227899 + "'", int31 == 29227899);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-202) + "'", int34 == (-202));
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test462");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = null;
        java.lang.String str26 = dividedDateTimeField11.getAsShortText(readablePartial23, (int) ' ', locale25);
        org.joda.time.ReadablePartial readablePartial27 = null;
        java.util.Locale locale29 = null;
        java.lang.String str30 = dividedDateTimeField11.getAsText(readablePartial27, (int) (byte) 10, locale29);
        boolean boolean31 = dividedDateTimeField11.isSupported();
        java.util.Locale locale33 = null;
        java.lang.String str34 = dividedDateTimeField11.getAsText(9, locale33);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField35 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11);
        int int36 = remainderDateTimeField35.getMaximumValue();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "32" + "'", str26, "32");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "10" + "'", str30, "10");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "9" + "'", str34, "9");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test463");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.IllegalFieldValueException illegalFieldValueException3 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, (java.lang.Number) 60035L, "");
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType0.getDurationType();
        org.joda.time.field.UnsupportedDurationField unsupportedDurationField5 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType4);
        org.joda.time.IllegalFieldValueException illegalFieldValueException7 = new org.joda.time.IllegalFieldValueException(durationFieldType4, "22");
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(unsupportedDurationField5);
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test464");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getDurationField();
        java.lang.String str12 = unsupportedDateTimeField6.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = unsupportedDateTimeField6.getType();
        long long16 = unsupportedDateTimeField6.add((long) 8446, 97);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UnsupportedDateTimeField" + "'", str12, "UnsupportedDateTimeField");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 8543L + "'", long16 == 8543L);
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test465");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        boolean boolean7 = unsupportedDateTimeField6.isLenient();
        long long10 = unsupportedDateTimeField6.add(1396290305822L, (-53459996L));
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getLeapDurationField();
        long long14 = unsupportedDateTimeField6.getDifferenceAsLong(315479340004L, 139583L);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = unsupportedDateTimeField6.get((-58877480091246L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1396236845826L + "'", long10 == 1396236845826L);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 315479200421L + "'", long14 == 315479200421L);
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test466");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField7 = chronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology2.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField11 = new org.joda.time.field.OffsetDateTimeField(dateTimeField8, dateTimeFieldType9, (int) (short) 1);
        int int12 = offsetDateTimeField11.getOffset();
        int int13 = offsetDateTimeField11.getOffset();
        long long15 = offsetDateTimeField11.roundHalfEven(0L);
        long long17 = offsetDateTimeField11.roundHalfEven(28531825L);
        int int20 = offsetDateTimeField11.getDifference((long) 28531764, (long) (-202));
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 28800000L + "'", long17 == 28800000L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 7 + "'", int20 == 7);
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test467");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.Chronology chronology3 = iSOChronology0.withZone(dateTimeZone1);
        org.joda.time.Partial partial4 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology0);
        org.joda.time.Partial partial5 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField6 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long9 = durationField6.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long11 = durationField6.getValueAsLong((long) 10);
        int int13 = durationField6.getValue((long) (byte) 10);
        boolean boolean14 = partial5.equals((java.lang.Object) durationField6);
        boolean boolean15 = partial4.isBefore((org.joda.time.ReadablePartial) partial5);
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = partial4.getFields();
        org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField18 = iSOChronology17.minutes();
        org.joda.time.DateTimeField dateTimeField19 = iSOChronology17.millisOfDay();
        org.joda.time.Partial partial20 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField21 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long24 = durationField21.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long26 = durationField21.getValueAsLong((long) 10);
        int int28 = durationField21.getValue((long) (byte) 10);
        boolean boolean29 = partial20.equals((java.lang.Object) durationField21);
        org.joda.time.Chronology chronology30 = partial20.getChronology();
        org.joda.time.Partial partial31 = new org.joda.time.Partial();
        boolean boolean32 = partial20.isBefore((org.joda.time.ReadablePartial) partial31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = partial20.getFieldTypes();
        org.joda.time.Partial partial34 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField35 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long38 = durationField35.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long40 = durationField35.getValueAsLong((long) 10);
        int int42 = durationField35.getValue((long) (byte) 10);
        boolean boolean43 = partial34.equals((java.lang.Object) durationField35);
        org.joda.time.Chronology chronology44 = partial34.getChronology();
        org.joda.time.Partial partial45 = new org.joda.time.Partial();
        boolean boolean46 = partial34.isBefore((org.joda.time.ReadablePartial) partial45);
        int int47 = partial20.compareTo((org.joda.time.ReadablePartial) partial34);
        org.joda.time.Partial partial48 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField49 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long52 = durationField49.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long54 = durationField49.getValueAsLong((long) 10);
        int int56 = durationField49.getValue((long) (byte) 10);
        boolean boolean57 = partial48.equals((java.lang.Object) durationField49);
        int int58 = partial34.compareTo((org.joda.time.ReadablePartial) partial48);
        int[] intArray59 = partial48.getValues();
        int[] intArray61 = iSOChronology17.get((org.joda.time.ReadablePartial) partial48, 10L);
        int int62 = partial4.compareTo((org.joda.time.ReadablePartial) partial48);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
        org.junit.Assert.assertNotNull(iSOChronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10L + "'", long54 == 10L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test468");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = chronology2.getZone();
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test469");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone1 = iSOChronology0.getZone();
        org.joda.time.DateTimeZone dateTimeZone2 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField3 = iSOChronology0.years();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology6 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone4);
        java.util.Locale locale8 = null;
        java.lang.String str9 = dateTimeZone4.getShortName(0L, locale8);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test470");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.ReadableInterval readableInterval3 = null;
        boolean boolean4 = readableInterval2.contains(readableInterval3);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = readableInterval2.toPeriod(periodType5);
        org.joda.time.DateTime dateTime7 = readableInterval2.getEnd();
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone13 = new org.joda.time.tz.FixedDateTimeZone("100", "ISOChronology[America/Los_Angeles]", 0, 0);
        int int15 = fixedDateTimeZone13.getStandardOffset((long) 1439);
        java.lang.String str17 = fixedDateTimeZone13.getNameKey(1711909511783L);
        java.lang.String str19 = fixedDateTimeZone13.getNameKey((-31L));
        int int21 = fixedDateTimeZone13.getOffsetFromLocal(1711909505822L);
        org.joda.time.chrono.ZonedChronology zonedChronology22 = org.joda.time.chrono.ZonedChronology.getInstance(chronology8, (org.joda.time.DateTimeZone) fixedDateTimeZone13);
        // The following exception was thrown during execution in test generation
        try {
            long long27 = zonedChronology22.getDateTimeMillis((-25200000), 323506, 62, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 323506 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[America/Los_Angeles]" + "'", str17, "ISOChronology[America/Los_Angeles]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[America/Los_Angeles]" + "'", str19, "ISOChronology[America/Los_Angeles]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(zonedChronology22);
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test471");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField3 = iSOChronology2.minutes();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str5 = dateTimeZone4.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology6 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology2, dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone7 = zonedChronology6.getZone();
        org.joda.time.DurationField durationField8 = zonedChronology6.centuries();
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology6.dayOfMonth();
        boolean boolean10 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) zonedChronology6);
        org.joda.time.Partial partial12 = new org.joda.time.Partial(dateTimeFieldType0, 10);
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.ReadableInterval readableInterval14 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval13);
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval13);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.ReadableInterval readableInterval19 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval18);
        org.joda.time.ReadableInterval readableInterval20 = null;
        boolean boolean21 = readableInterval19.contains(readableInterval20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = readableInterval19.toPeriod(periodType22);
        int[] intArray25 = chronology15.get((org.joda.time.ReadablePeriod) period23, (-210866846400000L));
        java.lang.String str26 = chronology15.toString();
        java.lang.String str27 = chronology15.toString();
        java.lang.String str28 = chronology15.toString();
        org.joda.time.DurationField durationField29 = chronology15.years();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType0.getField(chronology15);
        org.joda.time.DateTimeField dateTimeField31 = chronology15.year();
        org.joda.time.DurationField durationField32 = chronology15.years();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(iSOChronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(readableInterval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(readableInterval19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, -348655, -3, -12, 0, 0, 0]");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[100]" + "'", str26, "ISOChronology[100]");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[100]" + "'", str27, "ISOChronology[100]");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ISOChronology[100]" + "'", str28, "ISOChronology[100]");
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test472");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone1 = iSOChronology0.getZone();
        org.joda.time.DateTimeZone dateTimeZone2 = iSOChronology0.getZone();
        org.joda.time.DurationField durationField3 = iSOChronology0.years();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.year();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test473");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone1 = iSOChronology0.getZone();
        org.joda.time.DateTimeZone dateTimeZone2 = iSOChronology0.getZone();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.millisOfSecond();
        long long6 = dateTimeField3.set((-124272105650862L), (int) (byte) 100);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-124272105650900L) + "'", long6 == (-124272105650900L));
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test474");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.year();
        org.joda.time.DurationField durationField5 = iSOChronology0.months();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str7 = dateTimeZone6.toString();
        java.lang.String str9 = dateTimeZone6.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeUtils.getZone(dateTimeZone6);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone11 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone10);
        java.lang.Object obj12 = null;
        boolean boolean13 = cachedDateTimeZone11.equals(obj12);
        long long15 = cachedDateTimeZone11.nextTransition(2580171L);
        boolean boolean16 = cachedDateTimeZone11.isFixed();
        org.joda.time.chrono.ZonedChronology zonedChronology17 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, (org.joda.time.DateTimeZone) cachedDateTimeZone11);
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology0.year();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(cachedDateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2580171L + "'", long15 == 2580171L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(zonedChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test475");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField12 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType8, 4, (int) ' ', (int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField15 = new org.joda.time.field.RemainderDateTimeField(dateTimeField7, dateTimeFieldType13, 28531765);
        org.joda.time.DurationField durationField16 = remainderDateTimeField15.getDurationField();
        java.util.Locale locale18 = null;
        java.lang.String str19 = remainderDateTimeField15.getAsShortText((-60000), locale18);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-60000" + "'", str19, "-60000");
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test476");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = durationField5.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        boolean boolean15 = durationFieldType10.isSupported(chronology13);
        org.joda.time.field.ScaledDurationField scaledDurationField17 = new org.joda.time.field.ScaledDurationField(durationField5, durationFieldType10, (int) 'a');
        int int19 = scaledDurationField17.getValue((long) (short) -1);
        long long22 = scaledDurationField17.getDifferenceAsLong(5727502308325L, 1711909543618L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210866846400000L) + "'", long9 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 41397863553L + "'", long22 == 41397863553L);
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test477");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName((-210866846400000L));
        boolean boolean5 = dateTimeZone1.isFixed();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        boolean boolean7 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.IllegalFieldValueException illegalFieldValueException11 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, (java.lang.Number) 1711909511784L, (java.lang.Number) 969L, (java.lang.Number) 22410261324L);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField14 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.millisOfDay();
        org.joda.time.DurationField durationField16 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.yearOfCentury();
        org.joda.time.DurationField durationField19 = iSOChronology13.seconds();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.weekyearOfCentury();
        org.joda.time.Partial partial21 = new org.joda.time.Partial(dateTimeFieldType0, 203, (org.joda.time.Chronology) iSOChronology13);
        java.lang.String str22 = dateTimeFieldType0.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.ReadableInterval readableInterval26 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval25);
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval25);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DurationField durationField29 = chronology27.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField30 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType24, durationField29);
        long long33 = unsupportedDateTimeField30.add((-31L), (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = unsupportedDateTimeField30.getType();
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType34.getRangeDurationType();
        org.joda.time.chrono.ISOChronology iSOChronology36 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField37 = iSOChronology36.minutes();
        boolean boolean38 = durationFieldType35.isSupported((org.joda.time.Chronology) iSOChronology36);
        org.joda.time.Partial partial39 = new org.joda.time.Partial(dateTimeFieldType0, 323506, (org.joda.time.Chronology) iSOChronology36);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "yearOfEra" + "'", str22, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(readableInterval26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 4L + "'", long33 == 4L);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(iSOChronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test478");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.joda.time.DurationField durationField5 = chronology2.centuries();
        org.joda.time.Chronology chronology6 = chronology2.withUTC();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10);
        long long14 = dividedDateTimeField11.set(0L, 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval16 = null;
        org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology18.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField21 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType15, durationField20);
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField22 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField11, dateTimeFieldType15);
        java.util.Locale locale23 = null;
        int int24 = dividedDateTimeField11.getMaximumShortTextLength(locale23);
        long long27 = dividedDateTimeField11.set((-3155695200000L), 0);
        java.util.Locale locale30 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long31 = dividedDateTimeField11.set(10208863728000000L, "DateTimeField[yearOfCentury]", locale30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"DateTimeField[yearOfCentury]\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-30610224000000L) + "'", long14 == (-30610224000000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(readableInterval17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-61851621600000L) + "'", long27 == (-61851621600000L));
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test479");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField3 = new org.joda.time.field.PreciseDurationField(durationFieldType1, 28531825L);
        long long6 = preciseDurationField3.getMillis(60035L, (-210866846400000L));
        boolean boolean7 = preciseDurationField3.isPrecise();
        long long10 = preciseDurationField3.getDifferenceAsLong((-1893477600000L), 28531765L);
        int int12 = preciseDurationField3.getValue(7842340326L);
        long long13 = preciseDurationField3.getUnitMillis();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1712908113875L + "'", long6 == 1712908113875L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-66364L) + "'", long10 == (-66364L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 274 + "'", int12 == 274);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 28531825L + "'", long13 == 28531825L);
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test480");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        int int27 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int29 = partial0.indexOf(dateTimeFieldType28);
        org.joda.time.Chronology chronology30 = partial0.getChronology();
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.ReadableInterval readableInterval32 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval31);
        org.joda.time.ReadableInterval readableInterval33 = null;
        boolean boolean34 = readableInterval32.contains(readableInterval33);
        org.joda.time.Duration duration35 = readableInterval32.toDuration();
        org.joda.time.DateTime dateTime36 = readableInterval32.getEnd();
        org.joda.time.DateTime dateTime37 = partial0.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(readableInterval32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test481");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.ReadableInterval readableInterval2 = null;
        boolean boolean3 = readableInterval1.contains(readableInterval2);
        org.joda.time.Duration duration4 = readableInterval1.toDuration();
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.ReadableInterval readableInterval6 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval5);
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = readableInterval6.contains(readableInterval7);
        org.joda.time.Duration duration9 = readableInterval6.toDuration();
        org.joda.time.DateTime dateTime10 = readableInterval6.getEnd();
        boolean boolean11 = readableInterval1.isBefore((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.ReadableInterval readableInterval12 = null;
        org.joda.time.ReadableInterval readableInterval13 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval12);
        org.joda.time.ReadableInterval readableInterval14 = null;
        boolean boolean15 = readableInterval13.contains(readableInterval14);
        org.joda.time.Duration duration16 = readableInterval13.toDuration();
        org.joda.time.DateTime dateTime17 = readableInterval13.getEnd();
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.ReadableInterval readableInterval19 = null;
        org.joda.time.ReadableInterval readableInterval20 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval19);
        org.joda.time.ReadableInterval readableInterval21 = null;
        boolean boolean22 = readableInterval20.contains(readableInterval21);
        org.joda.time.Duration duration23 = readableInterval20.toDuration();
        org.joda.time.DateTime dateTime24 = readableInterval20.getEnd();
        org.joda.time.Period period25 = readableInterval20.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant27 = null;
        int int28 = dateTimeZone26.getOffset(readableInstant27);
        java.util.TimeZone timeZone29 = dateTimeZone26.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.ReadableInterval readableInterval32 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval31);
        org.joda.time.ReadableInterval readableInterval33 = null;
        boolean boolean34 = readableInterval32.contains(readableInterval33);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = readableInterval32.toPeriod(periodType35);
        org.joda.time.DateTime dateTime37 = readableInterval32.getEnd();
        int int38 = dateTimeZone30.getOffset((org.joda.time.ReadableInstant) dateTime37);
        boolean boolean39 = readableInterval20.isBefore((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadableInterval readableInterval40 = null;
        org.joda.time.ReadableInterval readableInterval41 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval40);
        org.joda.time.ReadableInterval readableInterval42 = null;
        boolean boolean43 = readableInterval41.contains(readableInterval42);
        org.joda.time.Duration duration44 = readableInterval41.toDuration();
        org.joda.time.ReadableInterval readableInterval45 = null;
        org.joda.time.ReadableInterval readableInterval46 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval45);
        org.joda.time.ReadableInterval readableInterval47 = null;
        boolean boolean48 = readableInterval46.contains(readableInterval47);
        org.joda.time.Duration duration49 = readableInterval46.toDuration();
        org.joda.time.DateTime dateTime50 = readableInterval46.getEnd();
        boolean boolean51 = readableInterval41.isBefore((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.ReadableInterval readableInterval52 = null;
        org.joda.time.ReadableInterval readableInterval53 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval52);
        org.joda.time.ReadableInterval readableInterval54 = null;
        boolean boolean55 = readableInterval53.contains(readableInterval54);
        org.joda.time.Duration duration56 = readableInterval53.toDuration();
        org.joda.time.DateTime dateTime57 = readableInterval53.getEnd();
        org.joda.time.Chronology chronology58 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime57);
        boolean boolean59 = readableInterval20.isBefore((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology60 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology61 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime17);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(readableInterval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(readableInterval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(readableInterval20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(readableInterval32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(readableInterval41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(readableInterval46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(readableInterval53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(chronology61);
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test482");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.toString();
        org.joda.time.Chronology chronology3 = iSOChronology0.withZone(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = iSOChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = iSOChronology0.yearOfCentury();
        org.joda.time.Partial partial8 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField9 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long12 = durationField9.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long14 = durationField9.getValueAsLong((long) 10);
        int int16 = durationField9.getValue((long) (byte) 10);
        boolean boolean17 = partial8.equals((java.lang.Object) durationField9);
        org.joda.time.Chronology chronology18 = partial8.getChronology();
        org.joda.time.Partial partial19 = new org.joda.time.Partial();
        boolean boolean20 = partial8.isBefore((org.joda.time.ReadablePartial) partial19);
        java.util.Locale locale22 = null;
        java.lang.String str23 = partial19.toString("723", locale22);
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField25 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long28 = durationField25.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long30 = durationField25.getValueAsLong((long) 10);
        int int32 = durationField25.getValue((long) (byte) 10);
        boolean boolean33 = partial24.equals((java.lang.Object) durationField25);
        org.joda.time.Chronology chronology34 = partial24.getChronology();
        org.joda.time.Partial partial35 = new org.joda.time.Partial();
        boolean boolean36 = partial24.isBefore((org.joda.time.ReadablePartial) partial35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = partial24.getFieldTypes();
        java.lang.Object obj38 = null;
        boolean boolean39 = partial24.equals(obj38);
        boolean boolean40 = partial19.isBefore((org.joda.time.ReadablePartial) partial24);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = partial24.getFieldTypes();
        org.joda.time.ReadableInterval readableInterval42 = null;
        org.joda.time.ReadableInterval readableInterval43 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval42);
        org.joda.time.Chronology chronology44 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval42);
        org.joda.time.DateTimeField dateTimeField45 = chronology44.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval47 = null;
        org.joda.time.ReadableInterval readableInterval48 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval47);
        org.joda.time.ReadableInterval readableInterval49 = null;
        boolean boolean50 = readableInterval48.contains(readableInterval49);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Period period52 = readableInterval48.toPeriod(periodType51);
        int[] intArray54 = chronology44.get((org.joda.time.ReadablePeriod) period52, (-210866846400000L));
        org.joda.time.Partial partial55 = partial24.minus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant58 = null;
        int int59 = dateTimeZone57.getOffset(readableInstant58);
        java.util.TimeZone timeZone60 = dateTimeZone57.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        org.joda.time.ReadableInterval readableInterval62 = null;
        org.joda.time.ReadableInterval readableInterval63 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval62);
        org.joda.time.ReadableInterval readableInterval64 = null;
        boolean boolean65 = readableInterval63.contains(readableInterval64);
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.Period period67 = readableInterval63.toPeriod(periodType66);
        org.joda.time.DateTime dateTime68 = readableInterval63.getEnd();
        int int69 = dateTimeZone61.getOffset((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.chrono.ISOChronology iSOChronology70 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone61);
        org.joda.time.DurationField durationField71 = iSOChronology70.weeks();
        org.joda.time.ReadableInterval readableInterval72 = null;
        org.joda.time.ReadableInterval readableInterval73 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval72);
        org.joda.time.ReadableInterval readableInterval74 = null;
        boolean boolean75 = readableInterval73.contains(readableInterval74);
        org.joda.time.Duration duration76 = readableInterval73.toDuration();
        org.joda.time.Period period77 = readableInterval73.toPeriod();
        int[] intArray79 = iSOChronology70.get((org.joda.time.ReadablePeriod) period77, (long) (short) 10);
        int[] intArray81 = dateTimeField7.addWrapField((org.joda.time.ReadablePartial) partial24, (int) (short) 0, intArray79, 0);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "723" + "'", str23, "723");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(readableInterval43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(readableInterval48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(partial55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(readableInterval63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(iSOChronology70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(readableInterval73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 0, 0, 0, 0, 0, 0, 10]");
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test483");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str4 = dateTimeZone3.toString();
        java.lang.String str6 = dateTimeZone3.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeUtils.getZone(dateTimeZone3);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone8 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.yearOfCentury();
        java.lang.String str12 = iSOChronology0.toString();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(cachedDateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[100]" + "'", str12, "ISOChronology[100]");
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test484");
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder0 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder3 = dateTimeZoneBuilder0.setFixedSavings("UTC", 100);
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeZoneBuilder3.toDateTimeZone("ISOChronology[America/Los_Angeles]", false);
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder8 = dateTimeZoneBuilder3.setStandardOffset((int) ' ');
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder10 = dateTimeZoneBuilder3.setStandardOffset((int) (byte) 100);
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder21 = dateTimeZoneBuilder10.addRecurringSavings("7", 10, 297, (int) '#', '4', (int) (short) 0, (int) (short) -1, 28531765, false, 10);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeZoneBuilder21.toDateTimeZone("DateTimeField[secondOfDay]", false);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder8);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder10);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test485");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getRangeDurationField();
        long long14 = unsupportedDateTimeField6.getDifferenceAsLong(10L, 0L);
        java.lang.String str15 = unsupportedDateTimeField6.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField19 = iSOChronology18.minutes();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology18.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = iSOChronology18.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField22 = iSOChronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField23 = iSOChronology18.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField24 = iSOChronology18.halfdayOfDay();
        org.joda.time.Partial partial25 = new org.joda.time.Partial(dateTimeFieldType16, 10, (org.joda.time.Chronology) iSOChronology18);
        int int26 = partial25.size();
        java.lang.String str27 = partial25.toString();
        org.joda.time.Chronology chronology28 = partial25.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            int int29 = unsupportedDateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) partial25);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UnsupportedDateTimeField" + "'", str15, "UnsupportedDateTimeField");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-W10" + "'", str27, "-W10");
        org.junit.Assert.assertNotNull(chronology28);
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test486");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) iSOChronology0, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone5 = zonedChronology4.getZone();
        org.joda.time.DurationField durationField6 = zonedChronology4.centuries();
        org.joda.time.DateTimeField dateTimeField7 = zonedChronology4.dayOfMonth();
        org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField9 = iSOChronology8.minutes();
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology8.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str12 = dateTimeZone11.toString();
        java.lang.String str14 = dateTimeZone11.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeUtils.getZone(dateTimeZone11);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone16 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone15);
        org.joda.time.Chronology chronology17 = iSOChronology8.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone16);
        int int19 = cachedDateTimeZone16.getOffset((long) ' ');
        org.joda.time.Chronology chronology20 = zonedChronology4.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone16);
        java.lang.String str22 = cachedDateTimeZone16.getNameKey((-58877480091246L));
        org.joda.time.chrono.GregorianChronology gregorianChronology23 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) cachedDateTimeZone16);
        java.lang.String str24 = gregorianChronology23.toString();
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology23.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone26 = gregorianChronology23.getZone();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(iSOChronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(cachedDateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(gregorianChronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GregorianChronology[UTC]" + "'", str24, "GregorianChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test487");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str4 = dateTimeZone3.toString();
        java.lang.String str6 = dateTimeZone3.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeUtils.getZone(dateTimeZone3);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone8 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone7);
        org.joda.time.Chronology chronology9 = iSOChronology0.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = dateTimeField12.set(5727502313636L, 551134);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 551134 for halfdayOfDay must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTC" + "'", str4, "UTC");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(cachedDateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test488");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.millisOfDay();
        org.joda.time.Partial partial2 = new org.joda.time.Partial();
        java.lang.String str4 = partial2.toString("10");
        int[] intArray6 = gregorianChronology0.get((org.joda.time.ReadablePartial) partial2, 1711909496605L);
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "10" + "'", str4, "10");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test489");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.eras();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology3.getZone();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeUtils.getZone(dateTimeZone7);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test490");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        boolean boolean7 = unsupportedDateTimeField6.isLenient();
        java.lang.String str8 = unsupportedDateTimeField6.toString();
        java.util.Locale locale10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = unsupportedDateTimeField6.getAsShortText(53460006, locale10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UnsupportedDateTimeField" + "'", str8, "UnsupportedDateTimeField");
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test491");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone1.toString();
        java.lang.String str4 = dateTimeZone1.getShortName((-210866846400000L));
        boolean boolean5 = dateTimeZone1.isFixed();
        org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone1);
        boolean boolean7 = dateTimeFieldType0.isSupported((org.joda.time.Chronology) iSOChronology6);
        org.joda.time.IllegalFieldValueException illegalFieldValueException11 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType0, (java.lang.Number) 1711909511784L, (java.lang.Number) 969L, (java.lang.Number) 22410261324L);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField14 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology13.millisOfDay();
        org.joda.time.DurationField durationField16 = iSOChronology13.minutes();
        org.joda.time.DateTimeField dateTimeField17 = iSOChronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = iSOChronology13.yearOfCentury();
        org.joda.time.DurationField durationField19 = iSOChronology13.seconds();
        org.joda.time.DateTimeField dateTimeField20 = iSOChronology13.weekyearOfCentury();
        org.joda.time.Partial partial21 = new org.joda.time.Partial(dateTimeFieldType0, 203, (org.joda.time.Chronology) iSOChronology13);
        org.joda.time.DateTimeZone dateTimeZone22 = iSOChronology13.getZone();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(iSOChronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test492");
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder0 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder3 = dateTimeZoneBuilder0.setFixedSavings("UTC", 100);
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeZoneBuilder3.toDateTimeZone("ISOChronology[America/Los_Angeles]", false);
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder8 = dateTimeZoneBuilder3.setStandardOffset((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder16 = dateTimeZoneBuilder3.addCutover(17, 'a', (int) (short) -1, (int) ' ', (int) (short) 1, true, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mode: a");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder8);
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test493");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        int int27 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.Partial partial28 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField29 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long32 = durationField29.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long34 = durationField29.getValueAsLong((long) 10);
        int int36 = durationField29.getValue((long) (byte) 10);
        boolean boolean37 = partial28.equals((java.lang.Object) durationField29);
        int int38 = partial14.compareTo((org.joda.time.ReadablePartial) partial28);
        int[] intArray39 = partial28.getValues();
        int[] intArray40 = partial28.getValues();
        org.joda.time.Partial partial41 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField42 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long45 = durationField42.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long47 = durationField42.getValueAsLong((long) 10);
        int int49 = durationField42.getValue((long) (byte) 10);
        boolean boolean50 = partial41.equals((java.lang.Object) durationField42);
        org.joda.time.Chronology chronology51 = partial41.getChronology();
        org.joda.time.Partial partial52 = new org.joda.time.Partial();
        boolean boolean53 = partial41.isBefore((org.joda.time.ReadablePartial) partial52);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = partial41.getFieldTypes();
        org.joda.time.Partial partial55 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField56 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long59 = durationField56.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long61 = durationField56.getValueAsLong((long) 10);
        int int63 = durationField56.getValue((long) (byte) 10);
        boolean boolean64 = partial55.equals((java.lang.Object) durationField56);
        org.joda.time.Chronology chronology65 = partial55.getChronology();
        org.joda.time.Partial partial66 = new org.joda.time.Partial();
        boolean boolean67 = partial55.isBefore((org.joda.time.ReadablePartial) partial66);
        int int68 = partial41.compareTo((org.joda.time.ReadablePartial) partial55);
        org.joda.time.Partial partial69 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField70 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long73 = durationField70.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long75 = durationField70.getValueAsLong((long) 10);
        int int77 = durationField70.getValue((long) (byte) 10);
        boolean boolean78 = partial69.equals((java.lang.Object) durationField70);
        int int79 = partial55.compareTo((org.joda.time.ReadablePartial) partial69);
        int[] intArray80 = partial69.getValues();
        boolean boolean81 = partial28.isBefore((org.joda.time.ReadablePartial) partial69);
        int[] intArray82 = partial69.getValues();
        int int83 = partial69.size();
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[]");
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10L + "'", long61 == 10L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 10L + "'", long75 == 10L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test494");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = durationField5.getValueAsLong((-210866846400000L), (-31L));
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        boolean boolean15 = durationFieldType10.isSupported(chronology13);
        org.joda.time.field.ScaledDurationField scaledDurationField17 = new org.joda.time.field.ScaledDurationField(durationField5, durationFieldType10, (int) 'a');
        org.joda.time.DurationField durationField18 = scaledDurationField17.getWrappedField();
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.field.ScaledDurationField scaledDurationField21 = new org.joda.time.field.ScaledDurationField(durationField18, durationFieldType19, 7);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-210866846400000L) + "'", long9 == (-210866846400000L));
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationFieldType19);
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test495");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeZone dateTimeZone2 = iSOChronology0.getZone();
        boolean boolean4 = iSOChronology0.equals((java.lang.Object) (-19529371L));
        org.joda.time.DurationField durationField5 = iSOChronology0.minutes();
        org.joda.time.DurationField durationField6 = iSOChronology0.eras();
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test496");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.minutes();
        org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.halfdayOfDay();
        org.joda.time.DurationField durationField4 = iSOChronology0.days();
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.ReadableInterval readableInterval6 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval5);
        org.joda.time.Chronology chronology7 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval5);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology7.millis();
        org.joda.time.DurationField durationField10 = chronology7.centuries();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval11);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        org.joda.time.DurationField durationField15 = chronology13.millis();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfWeek();
        org.joda.time.ReadableInterval readableInterval17 = null;
        org.joda.time.ReadableInterval readableInterval18 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval17);
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval17);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.minuteOfDay();
        org.joda.time.ReadableInterval readableInterval22 = null;
        org.joda.time.ReadableInterval readableInterval23 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval22);
        org.joda.time.ReadableInterval readableInterval24 = null;
        boolean boolean25 = readableInterval23.contains(readableInterval24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = readableInterval23.toPeriod(periodType26);
        int[] intArray29 = chronology19.get((org.joda.time.ReadablePeriod) period27, (-210866846400000L));
        int[] intArray32 = chronology13.get((org.joda.time.ReadablePeriod) period27, 2173795348453L, (long) 1439);
        int[] intArray35 = chronology7.get((org.joda.time.ReadablePeriod) period27, 291L, 2580171L);
        int[] intArray37 = iSOChronology0.get((org.joda.time.ReadablePeriod) period27, (long) (short) 100);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(readableInterval6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(readableInterval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(readableInterval23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, -348655, -3, -12, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-68, -10, -2, -4, -16, -2, -27, -14]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0, 0, 0, 42, 59, 880]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 0, 0, 0, 100]");
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test497");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.millis();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField6 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField5);
        long long9 = unsupportedDateTimeField6.add((-31L), (long) '#');
        org.joda.time.DurationField durationField10 = unsupportedDateTimeField6.getLeapDurationField();
        org.joda.time.DurationField durationField11 = unsupportedDateTimeField6.getDurationField();
        java.lang.String str12 = unsupportedDateTimeField6.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = unsupportedDateTimeField6.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = unsupportedDateTimeField6.getType();
        long long17 = unsupportedDateTimeField6.getDifferenceAsLong(4141168L, 63879078311784L);
        org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str20 = dateTimeZone19.toString();
        org.joda.time.Chronology chronology21 = iSOChronology18.withZone(dateTimeZone19);
        org.joda.time.Partial partial22 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology18);
        org.joda.time.Partial partial23 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField24 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long27 = durationField24.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long29 = durationField24.getValueAsLong((long) 10);
        int int31 = durationField24.getValue((long) (byte) 10);
        boolean boolean32 = partial23.equals((java.lang.Object) durationField24);
        boolean boolean33 = partial22.isBefore((org.joda.time.ReadablePartial) partial23);
        org.joda.time.chrono.ISOChronology iSOChronology34 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str36 = dateTimeZone35.toString();
        org.joda.time.Chronology chronology37 = iSOChronology34.withZone(dateTimeZone35);
        org.joda.time.Partial partial38 = new org.joda.time.Partial((org.joda.time.Chronology) iSOChronology34);
        boolean boolean39 = partial22.isBefore((org.joda.time.ReadablePartial) partial38);
        org.joda.time.ReadableInterval readableInterval41 = null;
        org.joda.time.ReadableInterval readableInterval42 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval41);
        org.joda.time.Chronology chronology43 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval41);
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial45 = null;
        int int46 = dateTimeField44.getMinimumValue(readablePartial45);
        org.joda.time.ReadablePartial readablePartial47 = null;
        org.joda.time.ReadableInterval readableInterval48 = null;
        org.joda.time.ReadableInterval readableInterval49 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval48);
        org.joda.time.Chronology chronology50 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval48);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.yearOfCentury();
        org.joda.time.DurationField durationField52 = chronology50.millis();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField54 = chronology50.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial55 = null;
        int[] intArray62 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int63 = dateTimeField54.getMaximumValue(readablePartial55, intArray62);
        int int64 = dateTimeField44.getMinimumValue(readablePartial47, intArray62);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.field.RemainderDateTimeField remainderDateTimeField67 = new org.joda.time.field.RemainderDateTimeField(dateTimeField44, dateTimeFieldType65, 10);
        long long70 = remainderDateTimeField67.addWrapField(3600000L, 0);
        org.joda.time.ReadablePartial readablePartial71 = null;
        org.joda.time.ReadableInterval readableInterval73 = null;
        org.joda.time.ReadableInterval readableInterval74 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval73);
        org.joda.time.Chronology chronology75 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval73);
        org.joda.time.DateTimeField dateTimeField76 = chronology75.yearOfCentury();
        org.joda.time.DurationField durationField77 = chronology75.millis();
        org.joda.time.DateTimeField dateTimeField78 = chronology75.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField79 = chronology75.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial80 = null;
        int[] intArray87 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 };
        int int88 = dateTimeField79.getMaximumValue(readablePartial80, intArray87);
        int[] intArray90 = remainderDateTimeField67.addWrapPartial(readablePartial71, (int) (short) 1, intArray87, 0);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray92 = unsupportedDateTimeField6.add((org.joda.time.ReadablePartial) partial22, (int) '4', intArray87, 22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: dayOfYear field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4L + "'", long9 == 4L);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UnsupportedDateTimeField" + "'", str12, "UnsupportedDateTimeField");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-63879074170616L) + "'", long17 == (-63879074170616L));
        org.junit.Assert.assertNotNull(iSOChronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(iSOChronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(readableInterval42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(readableInterval49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 24 + "'", int63 == 24);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 3600000L + "'", long70 == 3600000L);
        org.junit.Assert.assertNotNull(readableInterval74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[35, -1, 0, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 24 + "'", int88 == 24);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[35, -1, 0, 1, 1, 1]");
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test498");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.ReadableInterval readableInterval2 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval1);
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        boolean boolean5 = durationFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField12 = new org.joda.time.field.OffsetDateTimeField(dateTimeField7, dateTimeFieldType8, 4, (int) ' ', (int) (short) -1);
        org.joda.time.Partial partial13 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField14 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long17 = durationField14.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long19 = durationField14.getValueAsLong((long) 10);
        int int21 = durationField14.getValue((long) (byte) 10);
        boolean boolean22 = partial13.equals((java.lang.Object) durationField14);
        org.joda.time.Chronology chronology23 = partial13.getChronology();
        org.joda.time.Partial partial24 = new org.joda.time.Partial();
        boolean boolean25 = partial13.isBefore((org.joda.time.ReadablePartial) partial24);
        int int26 = offsetDateTimeField12.getMinimumValue((org.joda.time.ReadablePartial) partial24);
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField28 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) offsetDateTimeField12, (int) ' ');
        org.joda.time.DurationField durationField29 = offsetDateTimeField12.getDurationField();
        // The following exception was thrown during execution in test generation
        try {
            long long32 = offsetDateTimeField12.add(2173795348453L, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 42 for weekOfWeekyear must be in the range [32,-1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(readableInterval2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10L + "'", long19 == 10L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test499");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.ReadableInstant readableInstant1 = null;
        int int2 = dateTimeZone0.getOffset(readableInstant1);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.ReadableInterval readableInterval6 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval5);
        org.joda.time.ReadableInterval readableInterval7 = null;
        boolean boolean8 = readableInterval6.contains(readableInterval7);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = readableInterval6.toPeriod(periodType9);
        org.joda.time.DateTime dateTime11 = readableInterval6.getEnd();
        int int12 = dateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.chrono.ISOChronology iSOChronology13 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone4);
        org.joda.time.DurationField durationField14 = iSOChronology13.weeks();
        long long16 = durationField14.getValueAsLong((long) 8446);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(readableInterval6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(iSOChronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test500");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField1 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long4 = durationField1.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long6 = durationField1.getValueAsLong((long) 10);
        int int8 = durationField1.getValue((long) (byte) 10);
        boolean boolean9 = partial0.equals((java.lang.Object) durationField1);
        org.joda.time.Chronology chronology10 = partial0.getChronology();
        org.joda.time.Partial partial11 = new org.joda.time.Partial();
        boolean boolean12 = partial0.isBefore((org.joda.time.ReadablePartial) partial11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial0.getFieldTypes();
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.DurationField durationField15 = org.joda.time.field.MillisDurationField.INSTANCE;
        long long18 = durationField15.getValueAsLong((long) (short) 1, (long) (short) 100);
        long long20 = durationField15.getValueAsLong((long) 10);
        int int22 = durationField15.getValue((long) (byte) 10);
        boolean boolean23 = partial14.equals((java.lang.Object) durationField15);
        org.joda.time.Chronology chronology24 = partial14.getChronology();
        org.joda.time.Partial partial25 = new org.joda.time.Partial();
        boolean boolean26 = partial14.isBefore((org.joda.time.ReadablePartial) partial25);
        int int27 = partial0.compareTo((org.joda.time.ReadablePartial) partial14);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str29 = dateTimeZone28.toString();
        java.lang.String str31 = dateTimeZone28.getShortName((-210866846400000L));
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeUtils.getZone(dateTimeZone28);
        boolean boolean33 = partial14.equals((java.lang.Object) dateTimeZone32);
        org.joda.time.Chronology chronology34 = partial14.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            int int36 = partial14.getValue(8446);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8446");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10L + "'", long20 == 10L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
    }
}
